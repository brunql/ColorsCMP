
ColorsCMP_EclipseEdition.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000036d2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002f4  00800060  000036d2  00003746  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000077  00800354  000039c6  00003a3a  2**0
                  ALLOC
  3 .stab         00006ad4  00000000  00000000  00003a3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000024d9  00000000  00000000  0000a510  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 02 	jmp	0x48c	; 0x48c <__ctors_end>
       4:	0c 94 e0 03 	jmp	0x7c0	; 0x7c0 <__vector_1>
       8:	0c 94 3c 0c 	jmp	0x1878	; 0x1878 <__vector_2>
       c:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <__bad_interrupt>
      10:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <__bad_interrupt>
      14:	0c 94 00 0c 	jmp	0x1800	; 0x1800 <__vector_5>
      18:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <__bad_interrupt>
      1c:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <__bad_interrupt>
      20:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <__bad_interrupt>
      24:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <__bad_interrupt>
      28:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <__bad_interrupt>
      2c:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <__bad_interrupt>
      30:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <__bad_interrupt>
      34:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <__bad_interrupt>
      38:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <__bad_interrupt>
      3c:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <__bad_interrupt>
      40:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <__bad_interrupt>
      44:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <__bad_interrupt>
      48:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <__bad_interrupt>
      4c:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <__bad_interrupt>
      50:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <__bad_interrupt>

00000054 <usbDescriptorString0>:
      54:	04 03 09 04                                         ....

00000058 <usbDescriptorStringVendor>:
      58:	16 03 62 00 72 00 75 00 6e 00 71 00 6c 00 2e 00     ..b.r.u.n.q.l...
      68:	64 00 65 00 76 00                                   d.e.v.

0000006e <usbDescriptorStringDevice>:
      6e:	14 03 43 00 6f 00 6c 00 6f 00 72 00 73 00 43 00     ..C.o.l.o.r.s.C.
      7e:	4d 00 50 00                                         M.P.

00000082 <usbDescriptorDevice>:
      82:	12 01 10 01 00 00 00 08 c0 16 df 05 01 03 01 02     ................
      92:	00 01                                               ..

00000094 <usbDescriptorConfiguration>:
      94:	09 02 22 00 01 01 00 80 0a 09 04 00 00 01 03 00     ..".............
      a4:	00 00 09 21 01 01 00 01 22 16 00 07 05 81 03 08     ...!....".......
      b4:	00 64                                               .d

000000b6 <usbDescriptorHidReport>:
      b6:	06 00 ff 09 01 a1 01 15 00 26 ff 00 75 08 95 80     .........&..u...
      c6:	09 00 b2 02 01 c0                                   ......

000000cc <FontLookup>:
      cc:	00 00 00 00 00 00 00 2f 00 00 00 07 00 07 00 14     ......./........
      dc:	7f 14 7f 14 24 2a 7f 2a 12 c4 c8 10 26 46 36 49     ....$*.*....&F6I
      ec:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
      fc:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 00 50 30     ....>....>....P0
     10c:	00 10 10 10 10 10 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     11c:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     12c:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     13c:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     14c:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
     15c:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
     16c:	3e 59 65 65 5e 7e 11 11 11 7e 7f 49 49 49 36 3e     >Yee^~...~.III6>
     17c:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     18c:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     19c:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     1ac:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     1bc:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     1cc:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     1dc:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     1ec:	08 07 61 51 49 45 43 00 7f 41 41 00 55 2a 55 2a     ..aQIEC..AA.U*U*
     1fc:	55 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40     U.AA.......@@@@@
     20c:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     21c:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     22c:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
     23c:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     24c:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     25c:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     26c:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     27c:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     28c:	50 3c 44 64 54 4c 44                                P<DdTLD

00000293 <LcdImage_Upper>:
     293:	ff ff 7f 7f 45 5d 5d 5d 5d 5d 5d 5d 5d 5d 5d 7f     ....E]]]]]]]]]].
     2a3:	7f 41 5f 5d 5d 5d 5d 5d 5d 5d 5d 5d 41 7f 7f 41     .A_]]]]]]]]]A..A
     2b3:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 7f 7f 41 5f 5d 5d     __________..A_]]
     2c3:	5d 5d 5d 5d 5d 5d 5d 41 7f 7f 43 7d 7d 7d 7d 7d     ]]]]]]]A..C}}}}}
     2d3:	7d 7d 7d 7d 7f 7f 51 55 55 55 55 55 55 55 55 45     }}}}..QUUUUUUUUE
     2e3:	7f 7f ff ff                                         ....

000002e7 <LcdImage_Center>:
     2e7:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     2f7:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     307:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     317:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     327:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     337:	ff ff ff ff ff ff ff 0c 0c fc fc fc fc fc fc fc     ................
     347:	fc fc fc fc fc fc fc fc fc fc fc fc fc fc ff ff     ................
     357:	ff 0c 0c fc fc fc fc f0 f0 f3 f3 f3 c3 cf cf cf     ................
     367:	cf c3 f3 f3 f3 f0 f0 fc fc fc fc 00 00 ff ff ff     ................
     377:	00 00 9f 9f 9c 9c 9c 9c 9c 9c 9c 9c 9c 9c 9c 9c     ................
     387:	9c 9c 9c 9c 80 80 ff ff ff ff ff e0 e0 e7 e7 e7     ................
     397:	e7 e7 e7 e7 e7 e7 e7 e7 e7 e7 e7 e7 e7 e7 e7 e7     ................
     3a7:	e7 e7 ff ff ff e0 e0 ff ff ff ff ff ff ff ff ff     ................
     3b7:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff e0     ................
     3c7:	e0 ff ff ff e0 e0 ff ff ff ff ff ff ff ff ff ff     ................
     3d7:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     3e7:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     3f7:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     407:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     417:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     427:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................

00000437 <LcdImage_brunql_gmail_com>:
     437:	ff ff ff c8 db db c3 ff cb fb fb fb ff cb df df     ................
     447:	c3 ff cb fb fb c3 ff cb db db df 03 7f ff c0 ff     ................
     457:	ff 01 7e 66 5a 5a 42 5a 5e 62 7f ff c7 bb ab ab     ..~fZZBZ^b......
     467:	cf ff cb fb c3 fb c3 ff cb db db c3 db ff c2 ff     ................
     477:	c0 ff df ff cb db db ff cb db db c3 ff cb fb c3     ................
     487:	fb c3 ff ff 00                                      .....

0000048c <__ctors_end>:
     48c:	11 24       	eor	r1, r1
     48e:	1f be       	out	0x3f, r1	; 63
     490:	cf e5       	ldi	r28, 0x5F	; 95
     492:	d8 e0       	ldi	r29, 0x08	; 8
     494:	de bf       	out	0x3e, r29	; 62
     496:	cd bf       	out	0x3d, r28	; 61

00000498 <__do_copy_data>:
     498:	13 e0       	ldi	r17, 0x03	; 3
     49a:	a0 e6       	ldi	r26, 0x60	; 96
     49c:	b0 e0       	ldi	r27, 0x00	; 0
     49e:	e2 ed       	ldi	r30, 0xD2	; 210
     4a0:	f6 e3       	ldi	r31, 0x36	; 54
     4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <.do_copy_data_start>

000004a4 <.do_copy_data_loop>:
     4a4:	05 90       	lpm	r0, Z+
     4a6:	0d 92       	st	X+, r0

000004a8 <.do_copy_data_start>:
     4a8:	a4 35       	cpi	r26, 0x54	; 84
     4aa:	b1 07       	cpc	r27, r17
     4ac:	d9 f7       	brne	.-10     	; 0x4a4 <.do_copy_data_loop>

000004ae <__do_clear_bss>:
     4ae:	13 e0       	ldi	r17, 0x03	; 3
     4b0:	a4 e5       	ldi	r26, 0x54	; 84
     4b2:	b3 e0       	ldi	r27, 0x03	; 3
     4b4:	01 c0       	rjmp	.+2      	; 0x4b8 <.do_clear_bss_start>

000004b6 <.do_clear_bss_loop>:
     4b6:	1d 92       	st	X+, r1

000004b8 <.do_clear_bss_start>:
     4b8:	ab 3c       	cpi	r26, 0xCB	; 203
     4ba:	b1 07       	cpc	r27, r17
     4bc:	e1 f7       	brne	.-8      	; 0x4b6 <.do_clear_bss_loop>
     4be:	0e 94 2a 0a 	call	0x1454	; 0x1454 <main>
     4c2:	0c 94 67 1b 	jmp	0x36ce	; 0x36ce <_exit>

000004c6 <__bad_interrupt>:
     4c6:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

000004ca <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
     4ca:	85 b7       	in	r24, 0x35	; 53
     4cc:	82 60       	ori	r24, 0x02	; 2
     4ce:	85 bf       	out	0x35, r24	; 53
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
     4d0:	8b b7       	in	r24, 0x3b	; 59
     4d2:	80 64       	ori	r24, 0x40	; 64
     4d4:	8b bf       	out	0x3b, r24	; 59
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
     4d6:	8b e4       	ldi	r24, 0x4B	; 75
     4d8:	80 93 9d 03 	sts	0x039D, r24
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    usbResetDataToggling();
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    usbTxLen1 = USBPID_NAK;
     4dc:	8a e5       	ldi	r24, 0x5A	; 90
     4de:	80 93 9c 03 	sts	0x039C, r24
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
    usbTxLen3 = USBPID_NAK;
#endif
#endif
}
     4e2:	08 95       	ret

000004e4 <usbSetInterrupt>:
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uint8_t *data, uint8_t len)
{
     4e4:	1f 93       	push	r17
     4e6:	dc 01       	movw	r26, r24
     4e8:	16 2f       	mov	r17, r22

#if USB_CFG_IMPLEMENT_HALT
    if(usbTxLen1 == USBPID_STALL)
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
     4ea:	80 91 9c 03 	lds	r24, 0x039C
     4ee:	84 ff       	sbrs	r24, 4
     4f0:	07 c0       	rjmp	.+14     	; 0x500 <usbSetInterrupt+0x1c>
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
     4f2:	80 91 9d 03 	lds	r24, 0x039D
     4f6:	98 e8       	ldi	r25, 0x88	; 136
     4f8:	89 27       	eor	r24, r25
     4fa:	80 93 9d 03 	sts	0x039D, r24
     4fe:	03 c0       	rjmp	.+6      	; 0x506 <usbSetInterrupt+0x22>
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
     500:	8a e5       	ldi	r24, 0x5A	; 90
     502:	80 93 9c 03 	sts	0x039C, r24
     506:	91 2f       	mov	r25, r17
     508:	ee e9       	ldi	r30, 0x9E	; 158
     50a:	f3 e0       	ldi	r31, 0x03	; 3
    }
    p = txStatus->buffer + 1;
    i = len;
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
     50c:	8d 91       	ld	r24, X+
     50e:	81 93       	st	Z+, r24
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
     510:	91 50       	subi	r25, 0x01	; 1
     512:	e1 f7       	brne	.-8      	; 0x50c <usbSetInterrupt+0x28>
    usbCrc16Append(&txStatus->buffer[1], len);
     514:	8e e9       	ldi	r24, 0x9E	; 158
     516:	93 e0       	ldi	r25, 0x03	; 3
     518:	61 2f       	mov	r22, r17
     51a:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <usbCrc16Append>
    txStatus->len = len + 4;    /* len must be given including sync byte */
     51e:	1c 5f       	subi	r17, 0xFC	; 252
     520:	10 93 9c 03 	sts	0x039C, r17
}

USB_PUBLIC void usbSetInterrupt(uint8_t *data, uint8_t len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus1);
}
     524:	1f 91       	pop	r17
     526:	08 95       	ret

00000528 <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
     528:	1f 93       	push	r17
     52a:	cf 93       	push	r28
     52c:	df 93       	push	r29
int8_t   len;
uint8_t   i;

    len = usbRxLen - 3;
     52e:	60 91 ad 03 	lds	r22, 0x03AD
     532:	63 50       	subi	r22, 0x03	; 3
    if(len >= 0){
     534:	67 fd       	sbrc	r22, 7
     536:	bf c0       	rjmp	.+382    	; 0x6b6 <usbPoll+0x18e>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * uint16_t crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
     538:	80 91 aa 03 	lds	r24, 0x03AA
     53c:	cc e0       	ldi	r28, 0x0C	; 12
     53e:	d0 e0       	ldi	r29, 0x00	; 0
     540:	c8 1b       	sub	r28, r24
     542:	d1 09       	sbc	r29, r1
     544:	cf 54       	subi	r28, 0x4F	; 79
     546:	dc 4f       	sbci	r29, 0xFC	; 252
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return;
    }
#endif
    if(usbRxToken == (uint8_t)USBPID_SETUP){
     548:	80 91 a9 03 	lds	r24, 0x03A9
     54c:	8d 32       	cpi	r24, 0x2D	; 45
     54e:	09 f0       	breq	.+2      	; 0x552 <usbPoll+0x2a>
     550:	9f c0       	rjmp	.+318    	; 0x690 <usbPoll+0x168>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
     552:	68 30       	cpi	r22, 0x08	; 8
     554:	09 f0       	breq	.+2      	; 0x558 <usbPoll+0x30>
     556:	ad c0       	rjmp	.+346    	; 0x6b2 <usbPoll+0x18a>
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
     558:	83 ec       	ldi	r24, 0xC3	; 195
     55a:	80 93 91 03 	sts	0x0391, r24
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
     55e:	8a e5       	ldi	r24, 0x5A	; 90
     560:	80 93 60 00 	sts	0x0060, r24
        usbMsgFlags = 0;
     564:	10 92 54 03 	sts	0x0354, r1
        uint8_t type = rq->bmRequestType & USBRQ_TYPE_MASK;
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
     568:	88 81       	ld	r24, Y
     56a:	80 76       	andi	r24, 0x60	; 96
     56c:	41 f0       	breq	.+16     	; 0x57e <usbPoll+0x56>
            replyLen = usbFunctionSetup(data);
     56e:	ce 01       	movw	r24, r28
     570:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <usbFunctionSetup>
     574:	28 2f       	mov	r18, r24
        }else{
            replyLen = usbDriverSetup(rq);
        }
#if USB_CFG_IMPLEMENT_FN_READ || USB_CFG_IMPLEMENT_FN_WRITE
        if(replyLen == USB_NO_MSG){         /* use user-supplied read/write function */
     576:	8f 3f       	cpi	r24, 0xFF	; 255
     578:	09 f4       	brne	.+2      	; 0x57c <usbPoll+0x54>
     57a:	79 c0       	rjmp	.+242    	; 0x66e <usbPoll+0x146>
     57c:	7f c0       	rjmp	.+254    	; 0x67c <usbPoll+0x154>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
uint8_t   len  = 0, *dataPtr = usbTxBuf + 9;  /* there are 2 bytes free space at the end of the buffer */
uint8_t   value = rq->wValue.bytes[0];
     57e:	9a 81       	ldd	r25, Y+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uint8_t   index = rq->wIndex.bytes[0];
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
     580:	10 92 9a 03 	sts	0x039A, r1
    SWITCH_START(rq->bRequest)
     584:	89 81       	ldd	r24, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
     586:	88 23       	and	r24, r24
     588:	21 f4       	brne	.+8      	; 0x592 <usbPoll+0x6a>
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
     58a:	10 92 9b 03 	sts	0x039B, r1
     58e:	22 e0       	ldi	r18, 0x02	; 2
     590:	67 c0       	rjmp	.+206    	; 0x660 <usbPoll+0x138>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
     592:	85 30       	cpi	r24, 0x05	; 5
     594:	19 f4       	brne	.+6      	; 0x59c <usbPoll+0x74>
        usbNewDeviceAddr = value;
     596:	90 93 ae 03 	sts	0x03AE, r25
     59a:	61 c0       	rjmp	.+194    	; 0x65e <usbPoll+0x136>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
     59c:	86 30       	cpi	r24, 0x06	; 6
     59e:	09 f0       	breq	.+2      	; 0x5a2 <usbPoll+0x7a>
     5a0:	4a c0       	rjmp	.+148    	; 0x636 <usbPoll+0x10e>
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uint8_t       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
     5a2:	8b 81       	ldd	r24, Y+3	; 0x03
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
     5a4:	81 30       	cpi	r24, 0x01	; 1
     5a6:	41 f4       	brne	.+16     	; 0x5b8 <usbPoll+0x90>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
     5a8:	82 e8       	ldi	r24, 0x82	; 130
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	90 93 ac 03 	sts	0x03AC, r25
     5b0:	80 93 ab 03 	sts	0x03AB, r24
     5b4:	22 e1       	ldi	r18, 0x12	; 18
     5b6:	3b c0       	rjmp	.+118    	; 0x62e <usbPoll+0x106>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
     5b8:	82 30       	cpi	r24, 0x02	; 2
     5ba:	41 f4       	brne	.+16     	; 0x5cc <usbPoll+0xa4>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
     5bc:	84 e9       	ldi	r24, 0x94	; 148
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	90 93 ac 03 	sts	0x03AC, r25
     5c4:	80 93 ab 03 	sts	0x03AB, r24
     5c8:	22 e2       	ldi	r18, 0x22	; 34
     5ca:	31 c0       	rjmp	.+98     	; 0x62e <usbPoll+0x106>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
     5cc:	83 30       	cpi	r24, 0x03	; 3
     5ce:	d1 f4       	brne	.+52     	; 0x604 <usbPoll+0xdc>
#if USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
     5d0:	8a 81       	ldd	r24, Y+2	; 0x02
        SWITCH_CASE(0)
     5d2:	88 23       	and	r24, r24
     5d4:	41 f4       	brne	.+16     	; 0x5e6 <usbPoll+0xbe>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
     5d6:	84 e5       	ldi	r24, 0x54	; 84
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	90 93 ac 03 	sts	0x03AC, r25
     5de:	80 93 ab 03 	sts	0x03AB, r24
     5e2:	24 e0       	ldi	r18, 0x04	; 4
     5e4:	24 c0       	rjmp	.+72     	; 0x62e <usbPoll+0x106>
        SWITCH_CASE(1)
     5e6:	81 30       	cpi	r24, 0x01	; 1
     5e8:	19 f4       	brne	.+6      	; 0x5f0 <usbPoll+0xc8>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
     5ea:	88 e5       	ldi	r24, 0x58	; 88
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	18 c0       	rjmp	.+48     	; 0x620 <usbPoll+0xf8>
        SWITCH_CASE(2)
     5f0:	82 30       	cpi	r24, 0x02	; 2
     5f2:	e1 f4       	brne	.+56     	; 0x62c <usbPoll+0x104>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
     5f4:	8e e6       	ldi	r24, 0x6E	; 110
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	90 93 ac 03 	sts	0x03AC, r25
     5fc:	80 93 ab 03 	sts	0x03AB, r24
     600:	24 e1       	ldi	r18, 0x14	; 20
     602:	15 c0       	rjmp	.+42     	; 0x62e <usbPoll+0x106>
                len = usbFunctionDescriptor(rq);
            }
        SWITCH_END
#endif  /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
#if USB_CFG_DESCR_PROPS_HID_REPORT  /* only support HID descriptors if enabled */
    SWITCH_CASE(USBDESCR_HID)       /* 0x21 */
     604:	81 32       	cpi	r24, 0x21	; 33
     606:	41 f4       	brne	.+16     	; 0x618 <usbPoll+0xf0>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID, usbDescriptorConfiguration + 18)
     608:	86 ea       	ldi	r24, 0xA6	; 166
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	90 93 ac 03 	sts	0x03AC, r25
     610:	80 93 ab 03 	sts	0x03AB, r24
     614:	29 e0       	ldi	r18, 0x09	; 9
     616:	0b c0       	rjmp	.+22     	; 0x62e <usbPoll+0x106>
    SWITCH_CASE(USBDESCR_HID_REPORT)/* 0x22 */
     618:	82 32       	cpi	r24, 0x22	; 34
     61a:	41 f4       	brne	.+16     	; 0x62c <usbPoll+0x104>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID_REPORT, usbDescriptorHidReport)
     61c:	86 eb       	ldi	r24, 0xB6	; 182
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	90 93 ac 03 	sts	0x03AC, r25
     624:	80 93 ab 03 	sts	0x03AB, r24
     628:	26 e1       	ldi	r18, 0x16	; 22
     62a:	01 c0       	rjmp	.+2      	; 0x62e <usbPoll+0x106>
     62c:	20 e0       	ldi	r18, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
     62e:	80 e4       	ldi	r24, 0x40	; 64
     630:	80 93 54 03 	sts	0x0354, r24
     634:	23 c0       	rjmp	.+70     	; 0x67c <usbPoll+0x154>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
     636:	88 30       	cpi	r24, 0x08	; 8
     638:	21 f4       	brne	.+8      	; 0x642 <usbPoll+0x11a>
     63a:	21 e0       	ldi	r18, 0x01	; 1
     63c:	80 eb       	ldi	r24, 0xB0	; 176
     63e:	93 e0       	ldi	r25, 0x03	; 3
     640:	11 c0       	rjmp	.+34     	; 0x664 <usbPoll+0x13c>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
     642:	89 30       	cpi	r24, 0x09	; 9
     644:	19 f4       	brne	.+6      	; 0x64c <usbPoll+0x124>
        usbConfiguration = value;
     646:	90 93 b0 03 	sts	0x03B0, r25
     64a:	09 c0       	rjmp	.+18     	; 0x65e <usbPoll+0x136>
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
     64c:	8a 30       	cpi	r24, 0x0A	; 10
     64e:	11 f4       	brne	.+4      	; 0x654 <usbPoll+0x12c>
     650:	21 e0       	ldi	r18, 0x01	; 1
     652:	06 c0       	rjmp	.+12     	; 0x660 <usbPoll+0x138>
        len = 1;
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    SWITCH_CASE(USBRQ_SET_INTERFACE)        /* 11 */
     654:	8b 30       	cpi	r24, 0x0B	; 11
     656:	19 f4       	brne	.+6      	; 0x65e <usbPoll+0x136>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
     658:	8b e4       	ldi	r24, 0x4B	; 75
     65a:	80 93 9d 03 	sts	0x039D, r24
     65e:	20 e0       	ldi	r18, 0x00	; 0
     660:	8a e9       	ldi	r24, 0x9A	; 154
     662:	93 e0       	ldi	r25, 0x03	; 3
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = dataPtr;
     664:	90 93 ac 03 	sts	0x03AC, r25
     668:	80 93 ab 03 	sts	0x03AB, r24
     66c:	07 c0       	rjmp	.+14     	; 0x67c <usbPoll+0x154>
            replyLen = usbDriverSetup(rq);
        }
#if USB_CFG_IMPLEMENT_FN_READ || USB_CFG_IMPLEMENT_FN_WRITE
        if(replyLen == USB_NO_MSG){         /* use user-supplied read/write function */
            /* do some conditioning on replyLen, but on IN transfers only */
            if((rq->bmRequestType & USBRQ_DIR_MASK) != USBRQ_DIR_HOST_TO_DEVICE){
     66e:	88 81       	ld	r24, Y
     670:	87 fd       	sbrc	r24, 7
                if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
                    replyLen = rq->wLength.bytes[0];
     672:	2e 81       	ldd	r18, Y+6	; 0x06
                }else{
                    replyLen = rq->wLength.word;
                }
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
     674:	80 e8       	ldi	r24, 0x80	; 128
     676:	80 93 54 03 	sts	0x0354, r24
     67a:	06 c0       	rjmp	.+12     	; 0x688 <usbPoll+0x160>
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
     67c:	8f 81       	ldd	r24, Y+7	; 0x07
     67e:	88 23       	and	r24, r24
     680:	19 f4       	brne	.+6      	; 0x688 <usbPoll+0x160>
     682:	8e 81       	ldd	r24, Y+6	; 0x06
     684:	82 17       	cp	r24, r18
     686:	08 f0       	brcs	.+2      	; 0x68a <usbPoll+0x162>
     688:	82 2f       	mov	r24, r18
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
     68a:	80 93 61 00 	sts	0x0061, r24
     68e:	11 c0       	rjmp	.+34     	; 0x6b2 <usbPoll+0x18a>
    }else{  /* usbRxToken must be USBPID_OUT, which means data phase of setup (control-out) */
#if USB_CFG_IMPLEMENT_FN_WRITE
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
     690:	80 91 54 03 	lds	r24, 0x0354
     694:	87 ff       	sbrs	r24, 7
     696:	0d c0       	rjmp	.+26     	; 0x6b2 <usbPoll+0x18a>
            uint8_t rval = usbFunctionWrite(data, len);
     698:	ce 01       	movw	r24, r28
     69a:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <usbFunctionWrite>
            if(rval == 0xff){   /* an error occurred */
     69e:	8f 3f       	cpi	r24, 0xFF	; 255
     6a0:	21 f4       	brne	.+8      	; 0x6aa <usbPoll+0x182>
                usbTxLen = USBPID_STALL;
     6a2:	8e e1       	ldi	r24, 0x1E	; 30
     6a4:	80 93 60 00 	sts	0x0060, r24
     6a8:	04 c0       	rjmp	.+8      	; 0x6b2 <usbPoll+0x18a>
            }else if(rval != 0){    /* This was the final package */
     6aa:	88 23       	and	r24, r24
     6ac:	11 f0       	breq	.+4      	; 0x6b2 <usbPoll+0x18a>
                usbMsgLen = 0;  /* answer with a zero-sized data packet */
     6ae:	10 92 61 00 	sts	0x0061, r1
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
     6b2:	10 92 ad 03 	sts	0x03AD, r1
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
     6b6:	80 91 60 00 	lds	r24, 0x0060
     6ba:	84 ff       	sbrs	r24, 4
     6bc:	5a c0       	rjmp	.+180    	; 0x772 <usbPoll+0x24a>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
     6be:	80 91 61 00 	lds	r24, 0x0061
     6c2:	8f 3f       	cpi	r24, 0xFF	; 255
     6c4:	09 f4       	brne	.+2      	; 0x6c8 <usbPoll+0x1a0>
     6c6:	55 c0       	rjmp	.+170    	; 0x772 <usbPoll+0x24a>
     6c8:	18 2f       	mov	r17, r24
     6ca:	89 30       	cpi	r24, 0x09	; 9
     6cc:	08 f0       	brcs	.+2      	; 0x6d0 <usbPoll+0x1a8>
     6ce:	18 e0       	ldi	r17, 0x08	; 8
uint8_t       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
     6d0:	81 1b       	sub	r24, r17
     6d2:	80 93 61 00 	sts	0x0061, r24
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
     6d6:	80 91 91 03 	lds	r24, 0x0391
     6da:	98 e8       	ldi	r25, 0x88	; 136
     6dc:	89 27       	eor	r24, r25
     6de:	80 93 91 03 	sts	0x0391, r24
/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uint8_t usbDeviceRead(uint8_t *data, uint8_t len)
{
    if(len > 0){    /* don't bother app with 0 sized reads */
     6e2:	11 23       	and	r17, r17
     6e4:	99 f1       	breq	.+102    	; 0x74c <usbPoll+0x224>
#if USB_CFG_IMPLEMENT_FN_READ
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
     6e6:	80 91 54 03 	lds	r24, 0x0354
     6ea:	87 ff       	sbrs	r24, 7
     6ec:	09 c0       	rjmp	.+18     	; 0x700 <usbPoll+0x1d8>
            len = usbFunctionRead(data, len);
     6ee:	82 e9       	ldi	r24, 0x92	; 146
     6f0:	93 e0       	ldi	r25, 0x03	; 3
     6f2:	61 2f       	mov	r22, r17
     6f4:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <usbFunctionRead>
     6f8:	18 2f       	mov	r17, r24
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
     6fa:	89 30       	cpi	r24, 0x09	; 9
     6fc:	a0 f5       	brcc	.+104    	; 0x766 <usbPoll+0x23e>
     6fe:	26 c0       	rjmp	.+76     	; 0x74c <usbPoll+0x224>
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uint8_t i = len, *r = usbMsgPtr;
     700:	20 91 ab 03 	lds	r18, 0x03AB
     704:	30 91 ac 03 	lds	r19, 0x03AC
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
     708:	86 ff       	sbrs	r24, 6
     70a:	0d c0       	rjmp	.+26     	; 0x726 <usbPoll+0x1fe>
     70c:	a2 e9       	ldi	r26, 0x92	; 146
     70e:	b3 e0       	ldi	r27, 0x03	; 3
     710:	80 e0       	ldi	r24, 0x00	; 0
     712:	90 e0       	ldi	r25, 0x00	; 0
                do{
                    uint8_t c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
     714:	f9 01       	movw	r30, r18
     716:	e8 0f       	add	r30, r24
     718:	f9 1f       	adc	r31, r25
     71a:	e4 91       	lpm	r30, Z+
                    *data++ = c;
     71c:	ed 93       	st	X+, r30
     71e:	01 96       	adiw	r24, 0x01	; 1
                    r++;
                }while(--i);
     720:	18 17       	cp	r17, r24
     722:	c1 f7       	brne	.-16     	; 0x714 <usbPoll+0x1ec>
     724:	08 c0       	rjmp	.+16     	; 0x736 <usbPoll+0x20e>
     726:	d9 01       	movw	r26, r18
     728:	91 2f       	mov	r25, r17
     72a:	e2 e9       	ldi	r30, 0x92	; 146
     72c:	f3 e0       	ldi	r31, 0x03	; 3
            }else{  /* RAM data */
                do{
                    *data++ = *r++;
     72e:	8d 91       	ld	r24, X+
     730:	81 93       	st	Z+, r24
                }while(--i);
     732:	91 50       	subi	r25, 0x01	; 1
     734:	e1 f7       	brne	.-8      	; 0x72e <usbPoll+0x206>
     736:	11 50       	subi	r17, 0x01	; 1
     738:	81 2f       	mov	r24, r17
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	1f 5f       	subi	r17, 0xFF	; 255
     73e:	01 96       	adiw	r24, 0x01	; 1
     740:	82 0f       	add	r24, r18
     742:	93 1f       	adc	r25, r19
            }
            usbMsgPtr = r;
     744:	90 93 ac 03 	sts	0x03AC, r25
     748:	80 93 ab 03 	sts	0x03AB, r24
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
     74c:	82 e9       	ldi	r24, 0x92	; 146
     74e:	93 e0       	ldi	r25, 0x03	; 3
     750:	61 2f       	mov	r22, r17
     752:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <usbCrc16Append>
        len += 4;           /* length including sync byte */
     756:	61 2f       	mov	r22, r17
     758:	6c 5f       	subi	r22, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
     75a:	6c 30       	cpi	r22, 0x0C	; 12
     75c:	41 f0       	breq	.+16     	; 0x76e <usbPoll+0x246>
            usbMsgLen = USB_NO_MSG;
     75e:	8f ef       	ldi	r24, 0xFF	; 255
     760:	80 93 61 00 	sts	0x0061, r24
     764:	04 c0       	rjmp	.+8      	; 0x76e <usbPoll+0x246>
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
     766:	8f ef       	ldi	r24, 0xFF	; 255
     768:	80 93 61 00 	sts	0x0061, r24
     76c:	6e e1       	ldi	r22, 0x1E	; 30
    }
    usbTxLen = len;
     76e:	60 93 60 00 	sts	0x0060, r22
     772:	94 e1       	ldi	r25, 0x14	; 20
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uint8_t usbLineStatus = USBIN & USBMASK;
     774:	80 b3       	in	r24, 0x10	; 16
        if(usbLineStatus != 0)  /* SE0 has ended */
     776:	86 70       	andi	r24, 0x06	; 6
     778:	31 f4       	brne	.+12     	; 0x786 <usbPoll+0x25e>
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
     77a:	91 50       	subi	r25, 0x01	; 1
     77c:	d9 f7       	brne	.-10     	; 0x774 <usbPoll+0x24c>
        uint8_t usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
     77e:	10 92 ae 03 	sts	0x03AE, r1
    usbDeviceAddr = 0;
     782:	10 92 a8 03 	sts	0x03A8, r1
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
     786:	df 91       	pop	r29
     788:	cf 91       	pop	r28
     78a:	1f 91       	pop	r17
     78c:	08 95       	ret

0000078e <usbCrc16>:
     78e:	a8 2f       	mov	r26, r24
     790:	b9 2f       	mov	r27, r25
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	41 e0       	ldi	r20, 0x01	; 1
     798:	50 ea       	ldi	r21, 0xA0	; 160
     79a:	60 95       	com	r22
     79c:	30 e0       	ldi	r19, 0x00	; 0
     79e:	09 c0       	rjmp	.+18     	; 0x7b2 <usbCrcLoopEntry>

000007a0 <usbCrcByteLoop>:
     7a0:	2d 91       	ld	r18, X+
     7a2:	82 27       	eor	r24, r18

000007a4 <usbCrcBitLoop>:
     7a4:	97 95       	ror	r25
     7a6:	87 95       	ror	r24
     7a8:	10 f0       	brcs	.+4      	; 0x7ae <usbCrcNoXor>
     7aa:	84 27       	eor	r24, r20
     7ac:	95 27       	eor	r25, r21

000007ae <usbCrcNoXor>:
     7ae:	30 5e       	subi	r19, 0xE0	; 224
     7b0:	c8 f3       	brcs	.-14     	; 0x7a4 <usbCrcBitLoop>

000007b2 <usbCrcLoopEntry>:
     7b2:	6f 5f       	subi	r22, 0xFF	; 255
     7b4:	a8 f3       	brcs	.-22     	; 0x7a0 <usbCrcByteLoop>

000007b6 <usbCrcReady>:
     7b6:	08 95       	ret

000007b8 <usbCrc16Append>:
     7b8:	ea df       	rcall	.-44     	; 0x78e <usbCrc16>
     7ba:	8d 93       	st	X+, r24
     7bc:	9d 93       	st	X+, r25
     7be:	08 95       	ret

000007c0 <__vector_1>:
     7c0:	cf 93       	push	r28
     7c2:	cf b7       	in	r28, 0x3f	; 63
     7c4:	cf 93       	push	r28
     7c6:	df 93       	push	r29

000007c8 <waitForJ>:
     7c8:	c3 95       	inc	r28
     7ca:	81 9b       	sbis	0x10, 1	; 16
     7cc:	e9 f7       	brne	.-6      	; 0x7c8 <waitForJ>

000007ce <waitForK>:
     7ce:	81 9b       	sbis	0x10, 1	; 16
     7d0:	0b c0       	rjmp	.+22     	; 0x7e8 <foundK>
     7d2:	81 9b       	sbis	0x10, 1	; 16
     7d4:	09 c0       	rjmp	.+18     	; 0x7e8 <foundK>
     7d6:	81 9b       	sbis	0x10, 1	; 16
     7d8:	07 c0       	rjmp	.+14     	; 0x7e8 <foundK>
     7da:	81 9b       	sbis	0x10, 1	; 16
     7dc:	05 c0       	rjmp	.+10     	; 0x7e8 <foundK>
     7de:	81 9b       	sbis	0x10, 1	; 16
     7e0:	03 c0       	rjmp	.+6      	; 0x7e8 <foundK>
     7e2:	81 9b       	sbis	0x10, 1	; 16
     7e4:	01 c0       	rjmp	.+2      	; 0x7e8 <foundK>
     7e6:	8b c0       	rjmp	.+278    	; 0x8fe <sofError>

000007e8 <foundK>:
     7e8:	6f 93       	push	r22
     7ea:	c0 91 aa 03 	lds	r28, 0x03AA
     7ee:	dd 27       	eor	r29, r29
     7f0:	cf 54       	subi	r28, 0x4F	; 79
     7f2:	dc 4f       	sbci	r29, 0xFC	; 252
     7f4:	2f 93       	push	r18
     7f6:	65 e5       	ldi	r22, 0x55	; 85
     7f8:	81 9b       	sbis	0x10, 1	; 16
     7fa:	03 c0       	rjmp	.+6      	; 0x802 <haveTwoBitsK>
     7fc:	2f 91       	pop	r18
     7fe:	6f 91       	pop	r22
     800:	e6 cf       	rjmp	.-52     	; 0x7ce <waitForK>

00000802 <haveTwoBitsK>:
     802:	0f 93       	push	r16
     804:	1f 93       	push	r17
     806:	4f 93       	push	r20
     808:	20 e0       	ldi	r18, 0x00	; 0
     80a:	40 e1       	ldi	r20, 0x10	; 16
     80c:	5f 93       	push	r21
     80e:	00 b3       	in	r16, 0x10	; 16
     810:	06 70       	andi	r16, 0x06	; 6
     812:	01 fb       	bst	r16, 1
     814:	27 f9       	bld	r18, 7
     816:	3f 93       	push	r19
     818:	50 e0       	ldi	r21, 0x00	; 0
     81a:	3b e0       	ldi	r19, 0x0B	; 11
     81c:	39 c0       	rjmp	.+114    	; 0x890 <rxbit1>

0000081e <unstuff6>:
     81e:	16 70       	andi	r17, 0x06	; 6
     820:	40 64       	ori	r20, 0x40	; 64
     822:	2f 77       	andi	r18, 0x7F	; 127
     824:	01 2f       	mov	r16, r17
     826:	5f 5f       	subi	r21, 0xFF	; 255
     828:	1e c0       	rjmp	.+60     	; 0x866 <didUnstuff6>

0000082a <unstuff7>:
     82a:	40 68       	ori	r20, 0x80	; 128
     82c:	10 b3       	in	r17, 0x10	; 16
     82e:	16 70       	andi	r17, 0x06	; 6
     830:	2f 77       	andi	r18, 0x7F	; 127
     832:	52 50       	subi	r21, 0x02	; 2
     834:	1f c0       	rjmp	.+62     	; 0x874 <didUnstuff7>

00000836 <unstuffEven>:
     836:	40 64       	ori	r20, 0x40	; 64
     838:	00 b3       	in	r16, 0x10	; 16
     83a:	2f 77       	andi	r18, 0x7F	; 127
     83c:	06 70       	andi	r16, 0x06	; 6
     83e:	d1 f1       	breq	.+116    	; 0x8b4 <se0>
     840:	5f 5f       	subi	r21, 0xFF	; 255
     842:	00 c0       	rjmp	.+0      	; 0x844 <unstuffEven+0xe>
     844:	23 c0       	rjmp	.+70     	; 0x88c <didUnstuffE>

00000846 <unstuffOdd>:
     846:	40 62       	ori	r20, 0x20	; 32
     848:	10 b3       	in	r17, 0x10	; 16
     84a:	2f 77       	andi	r18, 0x7F	; 127
     84c:	16 70       	andi	r17, 0x06	; 6
     84e:	91 f1       	breq	.+100    	; 0x8b4 <se0>
     850:	5f 5f       	subi	r21, 0xFF	; 255
     852:	00 c0       	rjmp	.+0      	; 0x854 <unstuffOdd+0xe>
     854:	25 c0       	rjmp	.+74     	; 0x8a0 <didUnstuffO>

00000856 <rxByteLoop>:
     856:	06 70       	andi	r16, 0x06	; 6
     858:	10 27       	eor	r17, r16
     85a:	51 50       	subi	r21, 0x01	; 1
     85c:	12 f4       	brpl	.+4      	; 0x862 <skipLeap>
     85e:	5d 5f       	subi	r21, 0xFD	; 253
	...

00000862 <skipLeap>:
     862:	11 50       	subi	r17, 0x01	; 1
     864:	27 95       	ror	r18

00000866 <didUnstuff6>:
     866:	2c 3f       	cpi	r18, 0xFC	; 252
     868:	10 b3       	in	r17, 0x10	; 16
     86a:	c8 f6       	brcc	.-78     	; 0x81e <unstuff6>
     86c:	16 70       	andi	r17, 0x06	; 6
     86e:	01 27       	eor	r16, r17
     870:	01 50       	subi	r16, 0x01	; 1
     872:	27 95       	ror	r18

00000874 <didUnstuff7>:
     874:	2c 3f       	cpi	r18, 0xFC	; 252
     876:	c8 f6       	brcc	.-78     	; 0x82a <unstuff7>
     878:	42 27       	eor	r20, r18
     87a:	49 93       	st	Y+, r20

0000087c <rxBitLoop>:
     87c:	00 b3       	in	r16, 0x10	; 16
     87e:	06 70       	andi	r16, 0x06	; 6
     880:	10 27       	eor	r17, r16
     882:	4f 73       	andi	r20, 0x3F	; 63
     884:	11 50       	subi	r17, 0x01	; 1
     886:	27 95       	ror	r18
     888:	2c 3f       	cpi	r18, 0xFC	; 252
     88a:	a8 f6       	brcc	.-86     	; 0x836 <unstuffEven>

0000088c <didUnstuffE>:
     88c:	46 95       	lsr	r20
     88e:	46 95       	lsr	r20

00000890 <rxbit1>:
     890:	10 b3       	in	r17, 0x10	; 16
     892:	16 70       	andi	r17, 0x06	; 6
     894:	79 f0       	breq	.+30     	; 0x8b4 <se0>
     896:	01 27       	eor	r16, r17
     898:	01 50       	subi	r16, 0x01	; 1
     89a:	27 95       	ror	r18
     89c:	2c 3f       	cpi	r18, 0xFC	; 252
     89e:	98 f6       	brcc	.-90     	; 0x846 <unstuffOdd>

000008a0 <didUnstuffO>:
     8a0:	6b 5a       	subi	r22, 0xAB	; 171
     8a2:	60 f3       	brcs	.-40     	; 0x87c <rxBitLoop>
     8a4:	31 50       	subi	r19, 0x01	; 1
     8a6:	00 b3       	in	r16, 0x10	; 16
     8a8:	b0 f6       	brcc	.-84     	; 0x856 <rxByteLoop>
     8aa:	00 c0       	rjmp	.+0      	; 0x8ac <overflow>

000008ac <overflow>:
     8ac:	10 e4       	ldi	r17, 0x40	; 64
     8ae:	1a bf       	out	0x3a, r17	; 58

000008b0 <ignorePacket>:
     8b0:	00 27       	eor	r16, r16
     8b2:	19 c0       	rjmp	.+50     	; 0x8e6 <handleSetupOrOut>

000008b4 <se0>:
     8b4:	3b 50       	subi	r19, 0x0B	; 11
     8b6:	31 95       	neg	r19
     8b8:	c3 1b       	sub	r28, r19
     8ba:	d0 40       	sbci	r29, 0x00	; 0
     8bc:	10 e4       	ldi	r17, 0x40	; 64
     8be:	1a bf       	out	0x3a, r17	; 58
     8c0:	08 81       	ld	r16, Y
     8c2:	03 3c       	cpi	r16, 0xC3	; 195
     8c4:	09 f1       	breq	.+66     	; 0x908 <handleData>
     8c6:	0b 34       	cpi	r16, 0x4B	; 75
     8c8:	f9 f0       	breq	.+62     	; 0x908 <handleData>
     8ca:	20 91 a8 03 	lds	r18, 0x03A8
     8ce:	19 81       	ldd	r17, Y+1	; 0x01
     8d0:	11 0f       	add	r17, r17
     8d2:	12 13       	cpse	r17, r18
     8d4:	ed cf       	rjmp	.-38     	; 0x8b0 <ignorePacket>
     8d6:	4a 81       	ldd	r20, Y+2	; 0x02
     8d8:	44 1f       	adc	r20, r20
     8da:	09 36       	cpi	r16, 0x69	; 105
     8dc:	51 f1       	breq	.+84     	; 0x932 <handleIn>
     8de:	0d 32       	cpi	r16, 0x2D	; 45
     8e0:	11 f0       	breq	.+4      	; 0x8e6 <handleSetupOrOut>
     8e2:	01 3e       	cpi	r16, 0xE1	; 225
     8e4:	29 f7       	brne	.-54     	; 0x8b0 <ignorePacket>

000008e6 <handleSetupOrOut>:
     8e6:	00 93 af 03 	sts	0x03AF, r16

000008ea <doReturn>:
     8ea:	3f 91       	pop	r19
     8ec:	5f 91       	pop	r21
     8ee:	4f 91       	pop	r20
     8f0:	1f 91       	pop	r17
     8f2:	0f 91       	pop	r16
     8f4:	2f 91       	pop	r18
     8f6:	6f 91       	pop	r22
     8f8:	ca b7       	in	r28, 0x3a	; 58
     8fa:	c6 fd       	sbrc	r28, 6
     8fc:	65 cf       	rjmp	.-310    	; 0x7c8 <waitForJ>

000008fe <sofError>:
     8fe:	df 91       	pop	r29
     900:	cf 91       	pop	r28
     902:	cf bf       	out	0x3f, r28	; 63
     904:	cf 91       	pop	r28
     906:	18 95       	reti

00000908 <handleData>:
     908:	20 91 af 03 	lds	r18, 0x03AF
     90c:	22 23       	and	r18, r18
     90e:	69 f3       	breq	.-38     	; 0x8ea <doReturn>
     910:	10 91 ad 03 	lds	r17, 0x03AD
     914:	11 23       	and	r17, r17
     916:	91 f5       	brne	.+100    	; 0x97c <sendNakAndReti>
     918:	34 30       	cpi	r19, 0x04	; 4
     91a:	92 f1       	brmi	.+100    	; 0x980 <sendAckAndReti>
     91c:	30 93 ad 03 	sts	0x03AD, r19
     920:	20 93 a9 03 	sts	0x03A9, r18
     924:	10 91 aa 03 	lds	r17, 0x03AA
     928:	3b e0       	ldi	r19, 0x0B	; 11
     92a:	31 1b       	sub	r19, r17
     92c:	30 93 aa 03 	sts	0x03AA, r19
     930:	27 c0       	rjmp	.+78     	; 0x980 <sendAckAndReti>

00000932 <handleIn>:
     932:	00 91 ad 03 	lds	r16, 0x03AD
     936:	01 30       	cpi	r16, 0x01	; 1
     938:	0c f5       	brge	.+66     	; 0x97c <sendNakAndReti>
     93a:	0a e5       	ldi	r16, 0x5A	; 90
     93c:	4f 70       	andi	r20, 0x0F	; 15
     93e:	49 f4       	brne	.+18     	; 0x952 <handleIn1>
     940:	30 91 60 00 	lds	r19, 0x0060
     944:	34 fd       	sbrc	r19, 4
     946:	1d c0       	rjmp	.+58     	; 0x982 <sendCntAndReti>
     948:	00 93 60 00 	sts	0x0060, r16
     94c:	c1 e9       	ldi	r28, 0x91	; 145
     94e:	d3 e0       	ldi	r29, 0x03	; 3
     950:	1c c0       	rjmp	.+56     	; 0x98a <usbSendAndReti>

00000952 <handleIn1>:
     952:	30 91 9c 03 	lds	r19, 0x039C
     956:	34 fd       	sbrc	r19, 4
     958:	14 c0       	rjmp	.+40     	; 0x982 <sendCntAndReti>
     95a:	00 93 9c 03 	sts	0x039C, r16
     95e:	cd e9       	ldi	r28, 0x9D	; 157
     960:	d3 e0       	ldi	r29, 0x03	; 3
     962:	13 c0       	rjmp	.+38     	; 0x98a <usbSendAndReti>

00000964 <bitstuffN>:
     964:	05 27       	eor	r16, r21
     966:	10 e0       	ldi	r17, 0x00	; 0
     968:	00 c0       	rjmp	.+0      	; 0x96a <bitstuffN+0x6>
     96a:	00 00       	nop
     96c:	02 bb       	out	0x12, r16	; 18
     96e:	1a c0       	rjmp	.+52     	; 0x9a4 <didStuffN>

00000970 <bitstuff6>:
     970:	05 27       	eor	r16, r21
     972:	10 e0       	ldi	r17, 0x00	; 0
     974:	22 1f       	adc	r18, r18
     976:	1d c0       	rjmp	.+58     	; 0x9b2 <didStuff6>

00000978 <bitstuff7>:
     978:	10 e0       	ldi	r17, 0x00	; 0
     97a:	21 c0       	rjmp	.+66     	; 0x9be <didStuff7>

0000097c <sendNakAndReti>:
     97c:	4a e5       	ldi	r20, 0x5A	; 90
     97e:	02 c0       	rjmp	.+4      	; 0x984 <sendX3AndReti>

00000980 <sendAckAndReti>:
     980:	32 ed       	ldi	r19, 0xD2	; 210

00000982 <sendCntAndReti>:
     982:	43 2f       	mov	r20, r19

00000984 <sendX3AndReti>:
     984:	c4 e1       	ldi	r28, 0x14	; 20
     986:	d0 e0       	ldi	r29, 0x00	; 0
     988:	32 e0       	ldi	r19, 0x02	; 2

0000098a <usbSendAndReti>:
     98a:	11 b3       	in	r17, 0x11	; 17
     98c:	16 60       	ori	r17, 0x06	; 6
     98e:	91 9a       	sbi	0x12, 1	; 18
     990:	02 b3       	in	r16, 0x12	; 18
     992:	11 bb       	out	0x11, r17	; 17
     994:	56 e0       	ldi	r21, 0x06	; 6
     996:	20 e8       	ldi	r18, 0x80	; 128

00000998 <txByteLoop>:
     998:	65 e3       	ldi	r22, 0x35	; 53

0000099a <txBitLoop>:
     99a:	20 ff       	sbrs	r18, 0
     99c:	05 27       	eor	r16, r21
     99e:	02 bb       	out	0x12, r16	; 18
     9a0:	27 95       	ror	r18
     9a2:	17 95       	ror	r17

000009a4 <didStuffN>:
     9a4:	1c 3f       	cpi	r17, 0xFC	; 252
     9a6:	f0 f6       	brcc	.-68     	; 0x964 <bitstuffN>
     9a8:	66 95       	lsr	r22
     9aa:	b8 f7       	brcc	.-18     	; 0x99a <txBitLoop>
     9ac:	b1 f7       	brne	.-20     	; 0x99a <txBitLoop>
     9ae:	20 ff       	sbrs	r18, 0
     9b0:	05 27       	eor	r16, r21

000009b2 <didStuff6>:
     9b2:	02 bb       	out	0x12, r16	; 18
     9b4:	27 95       	ror	r18
     9b6:	17 95       	ror	r17
     9b8:	1c 3f       	cpi	r17, 0xFC	; 252
     9ba:	d0 f6       	brcc	.-76     	; 0x970 <bitstuff6>
     9bc:	27 95       	ror	r18

000009be <didStuff7>:
     9be:	17 95       	ror	r17
     9c0:	17 ff       	sbrs	r17, 7
     9c2:	05 27       	eor	r16, r21
     9c4:	00 00       	nop
     9c6:	1c 3f       	cpi	r17, 0xFC	; 252
     9c8:	02 bb       	out	0x12, r16	; 18
     9ca:	b0 f6       	brcc	.-84     	; 0x978 <bitstuff7>
     9cc:	29 91       	ld	r18, Y+
     9ce:	3a 95       	dec	r19
     9d0:	19 f7       	brne	.-58     	; 0x998 <txByteLoop>
     9d2:	09 7f       	andi	r16, 0xF9	; 249
     9d4:	10 91 ae 03 	lds	r17, 0x03AE
     9d8:	11 0f       	add	r17, r17
     9da:	c6 51       	subi	r28, 0x16	; 22
     9dc:	d0 40       	sbci	r29, 0x00	; 0
     9de:	02 bb       	out	0x12, r16	; 18
     9e0:	11 f0       	breq	.+4      	; 0x9e6 <skipAddrAssign>
     9e2:	10 93 a8 03 	sts	0x03A8, r17

000009e6 <skipAddrAssign>:
     9e6:	10 e4       	ldi	r17, 0x40	; 64
     9e8:	1a bf       	out	0x3a, r17	; 58
     9ea:	02 60       	ori	r16, 0x02	; 2
     9ec:	11 b3       	in	r17, 0x11	; 17
     9ee:	19 7f       	andi	r17, 0xF9	; 249
     9f0:	40 2f       	mov	r20, r16
     9f2:	49 7f       	andi	r20, 0xF9	; 249
     9f4:	54 e0       	ldi	r21, 0x04	; 4

000009f6 <se0Delay>:
     9f6:	5a 95       	dec	r21
     9f8:	f1 f7       	brne	.-4      	; 0x9f6 <se0Delay>
     9fa:	02 bb       	out	0x12, r16	; 18
     9fc:	11 bb       	out	0x11, r17	; 17
     9fe:	42 bb       	out	0x12, r20	; 18
     a00:	74 cf       	rjmp	.-280    	; 0x8ea <doReturn>

00000a02 <snakegame_InitSnake>:
//================================================//


void snakegame_InitSnake(void)
{
	snake_add_index = SNAKE_START_LEN; // start length of snake
     a02:	86 e0       	ldi	r24, 0x06	; 6
     a04:	80 93 57 03 	sts	0x0357, r24
	score = (uwin_times<<4) | (snake_add_index - SNAKE_START_LEN);
     a08:	80 91 55 03 	lds	r24, 0x0355
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	24 e0       	ldi	r18, 0x04	; 4
     a10:	88 0f       	add	r24, r24
     a12:	99 1f       	adc	r25, r25
     a14:	2a 95       	dec	r18
     a16:	e1 f7       	brne	.-8      	; 0xa10 <snakegame_InitSnake+0xe>
     a18:	80 93 56 03 	sts	0x0356, r24
     a1c:	e9 eb       	ldi	r30, 0xB9	; 185
     a1e:	f0 e0       	ldi	r31, 0x00	; 0
     a20:	88 e2       	ldi	r24, 0x28	; 40
	for(uint8_t i=0; i<SNAKE_LEN; i++){
		snake[i].y = 20;
     a22:	24 e1       	ldi	r18, 0x14	; 20
		snake[i].x = 40 - i;
		snake[i].direction = RIGHT;
     a24:	92 e0       	ldi	r25, 0x02	; 2
void snakegame_InitSnake(void)
{
	snake_add_index = SNAKE_START_LEN; // start length of snake
	score = (uwin_times<<4) | (snake_add_index - SNAKE_START_LEN);
	for(uint8_t i=0; i<SNAKE_LEN; i++){
		snake[i].y = 20;
     a26:	21 83       	std	Z+1, r18	; 0x01
		snake[i].x = 40 - i;
     a28:	80 83       	st	Z, r24
		snake[i].direction = RIGHT;
     a2a:	92 83       	std	Z+2, r25	; 0x02
     a2c:	33 96       	adiw	r30, 0x03	; 3
     a2e:	81 50       	subi	r24, 0x01	; 1

void snakegame_InitSnake(void)
{
	snake_add_index = SNAKE_START_LEN; // start length of snake
	score = (uwin_times<<4) | (snake_add_index - SNAKE_START_LEN);
	for(uint8_t i=0; i<SNAKE_LEN; i++){
     a30:	8e 31       	cpi	r24, 0x1E	; 30
     a32:	c9 f7       	brne	.-14     	; 0xa26 <snakegame_InitSnake+0x24>
		snake[i].y = 20;
		snake[i].x = 40 - i;
		snake[i].direction = RIGHT;
	}
}
     a34:	08 95       	ret

00000a36 <SnakeGame_Stop>:
}

void SnakeGame_Stop(void)
{
	// show results and go to main menu
}
     a36:	08 95       	ret

00000a38 <SnakeGame_TurnLeft>:


void SnakeGame_TurnLeft(void)
{
	// directions mb: UP = 1, RIGHT = 2, DOWN = 3, LEFT = 4
	if( --snake[0].direction == 0){
     a38:	80 91 bb 00 	lds	r24, 0x00BB
     a3c:	81 50       	subi	r24, 0x01	; 1
     a3e:	80 93 bb 00 	sts	0x00BB, r24
     a42:	88 23       	and	r24, r24
     a44:	19 f4       	brne	.+6      	; 0xa4c <SnakeGame_TurnLeft+0x14>
		snake[0].direction = LEFT;
     a46:	84 e0       	ldi	r24, 0x04	; 4
     a48:	80 93 bb 00 	sts	0x00BB, r24
     a4c:	08 95       	ret

00000a4e <SnakeGame_TurnRight>:
	}
}

void SnakeGame_TurnRight(void)
{
	if( ++snake[0].direction == 5){
     a4e:	80 91 bb 00 	lds	r24, 0x00BB
     a52:	8f 5f       	subi	r24, 0xFF	; 255
     a54:	80 93 bb 00 	sts	0x00BB, r24
     a58:	85 30       	cpi	r24, 0x05	; 5
     a5a:	19 f4       	brne	.+6      	; 0xa62 <SnakeGame_TurnRight+0x14>
		snake[0].direction = UP;
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	80 93 bb 00 	sts	0x00BB, r24
     a62:	08 95       	ret

00000a64 <snakegame_DirectionStep>:
//
//	snake_add_index++; // don't forget to update index
//}

void snakegame_DirectionStep(point *p_snake)
{
     a64:	fc 01       	movw	r30, r24
	switch(p_snake->direction)
     a66:	92 81       	ldd	r25, Z+2	; 0x02
     a68:	92 30       	cpi	r25, 0x02	; 2
     a6a:	09 f1       	breq	.+66     	; 0xaae <snakegame_DirectionStep+0x4a>
     a6c:	93 30       	cpi	r25, 0x03	; 3
     a6e:	18 f4       	brcc	.+6      	; 0xa76 <snakegame_DirectionStep+0x12>
     a70:	91 30       	cpi	r25, 0x01	; 1
     a72:	21 f5       	brne	.+72     	; 0xabc <snakegame_DirectionStep+0x58>
     a74:	05 c0       	rjmp	.+10     	; 0xa80 <snakegame_DirectionStep+0x1c>
     a76:	93 30       	cpi	r25, 0x03	; 3
     a78:	51 f0       	breq	.+20     	; 0xa8e <snakegame_DirectionStep+0x2a>
     a7a:	94 30       	cpi	r25, 0x04	; 4
     a7c:	f9 f4       	brne	.+62     	; 0xabc <snakegame_DirectionStep+0x58>
     a7e:	0f c0       	rjmp	.+30     	; 0xa9e <snakegame_DirectionStep+0x3a>
	{
		case UP:
			if(--p_snake->y < 9) 	p_snake->y = 38;
     a80:	81 81       	ldd	r24, Z+1	; 0x01
     a82:	81 50       	subi	r24, 0x01	; 1
     a84:	81 83       	std	Z+1, r24	; 0x01
     a86:	89 30       	cpi	r24, 0x09	; 9
     a88:	f0 f4       	brcc	.+60     	; 0xac6 <snakegame_DirectionStep+0x62>
     a8a:	86 e2       	ldi	r24, 0x26	; 38
     a8c:	06 c0       	rjmp	.+12     	; 0xa9a <snakegame_DirectionStep+0x36>
			break;
		case DOWN:
			if(++p_snake->y > 38) 	p_snake->y = 9;
     a8e:	81 81       	ldd	r24, Z+1	; 0x01
     a90:	8f 5f       	subi	r24, 0xFF	; 255
     a92:	81 83       	std	Z+1, r24	; 0x01
     a94:	87 32       	cpi	r24, 0x27	; 39
     a96:	b8 f0       	brcs	.+46     	; 0xac6 <snakegame_DirectionStep+0x62>
     a98:	89 e0       	ldi	r24, 0x09	; 9
     a9a:	81 83       	std	Z+1, r24	; 0x01
     a9c:	08 95       	ret
			break;
		case LEFT:
			if(--p_snake->x < 2) 	p_snake->x = 82;
     a9e:	80 81       	ld	r24, Z
     aa0:	81 50       	subi	r24, 0x01	; 1
     aa2:	80 83       	st	Z, r24
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	78 f4       	brcc	.+30     	; 0xac6 <snakegame_DirectionStep+0x62>
     aa8:	82 e5       	ldi	r24, 0x52	; 82
     aaa:	80 83       	st	Z, r24
     aac:	08 95       	ret
			break;
		case RIGHT:
			if(++p_snake->x > 81) 	p_snake->x = 2;
     aae:	80 81       	ld	r24, Z
     ab0:	8f 5f       	subi	r24, 0xFF	; 255
     ab2:	80 83       	st	Z, r24
     ab4:	82 35       	cpi	r24, 0x52	; 82
     ab6:	38 f0       	brcs	.+14     	; 0xac6 <snakegame_DirectionStep+0x62>
     ab8:	90 83       	st	Z, r25
     aba:	08 95       	ret
			break;
		default: // error
			p_snake->x = 0;
     abc:	10 82       	st	Z, r1
			p_snake->y = 17;
     abe:	81 e1       	ldi	r24, 0x11	; 17
     ac0:	81 83       	std	Z+1, r24	; 0x01
			p_snake->direction = RIGHT;
     ac2:	82 e0       	ldi	r24, 0x02	; 2
     ac4:	82 83       	std	Z+2, r24	; 0x02
     ac6:	08 95       	ret

00000ac8 <snakegame_UpdateDisplay>:




void snakegame_UpdateDisplay(void)
{
     ac8:	2f 92       	push	r2
     aca:	3f 92       	push	r3
     acc:	4f 92       	push	r4
     ace:	5f 92       	push	r5
     ad0:	6f 92       	push	r6
     ad2:	7f 92       	push	r7
     ad4:	8f 92       	push	r8
     ad6:	9f 92       	push	r9
     ad8:	af 92       	push	r10
     ada:	bf 92       	push	r11
     adc:	cf 92       	push	r12
     ade:	df 92       	push	r13
     ae0:	ef 92       	push	r14
     ae2:	ff 92       	push	r15
     ae4:	0f 93       	push	r16
     ae6:	1f 93       	push	r17
     ae8:	cf 93       	push	r28
     aea:	df 93       	push	r29
	Lcd3310_ClearCenter();
     aec:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <Lcd3310_ClearCenter>

	Lcd3310_GotoXY(0, 5);
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	65 e0       	ldi	r22, 0x05	; 5
     af6:	70 e0       	ldi	r23, 0x00	; 0
     af8:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <Lcd3310_GotoXY>
	Lcd3310_String_P(score_str, WHITE_TEXT_ON_BLACK);
     afc:	80 91 88 00 	lds	r24, 0x0088
     b00:	90 91 89 00 	lds	r25, 0x0089
     b04:	61 e0       	ldi	r22, 0x01	; 1
     b06:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <Lcd3310_String_P>
	Lcd3310_UInt8AsText(score, WHITE_TEXT_ON_BLACK);
     b0a:	80 91 56 03 	lds	r24, 0x0356
     b0e:	61 e0       	ldi	r22, 0x01	; 1
     b10:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <Lcd3310_UInt8AsText>
	//Lcd3310_UInt8AsText(snake[0].y, WHITE_TEXT_ON_BLACK);

	uint16_t lcd_index = 0x00;

	// eval values for addme pixel show
	uint8_t addme_line = (uint8_t)addme_y / 8;
     b14:	20 91 b8 00 	lds	r18, 0x00B8
     b18:	82 2e       	mov	r8, r18
     b1a:	86 94       	lsr	r8
     b1c:	86 94       	lsr	r8
     b1e:	86 94       	lsr	r8
	uint8_t addme_display_byte = 1 << ((uint8_t)addme_y % 8);
     b20:	27 70       	andi	r18, 0x07	; 7
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	98 2e       	mov	r9, r24
     b28:	01 c0       	rjmp	.+2      	; 0xb2c <snakegame_UpdateDisplay+0x64>
     b2a:	99 0c       	add	r9, r9
     b2c:	2a 95       	dec	r18
     b2e:	ea f7       	brpl	.-6      	; 0xb2a <snakegame_UpdateDisplay+0x62>
     b30:	aa 24       	eor	r10, r10
	for(uint8_t i=0; i < snake_add_index; i++)
	{
		// GotoXY
		// Eval number of line (mb: 1..5) in display for display_byte
		uint8_t line = (uint8_t) (snake[i].y) / 8;
		lcd_index = (uint16_t) (snake[i].x) + (uint16_t)line * 84;
     b32:	64 e5       	ldi	r22, 0x54	; 84
     b34:	46 2e       	mov	r4, r22
		Lcd3310_Send( 0x80 | ((uint16_t)lcd_index % LCD_X_RES), LCD_CMD );
		Lcd3310_Send( 0x40 | ((uint16_t)lcd_index / LCD_X_RES), LCD_CMD );

		// Make sendme byte with all point in this display byte
		// Init with snake[i] point
		uint8_t display_byte = 1 << ((uint8_t)snake[i].y % 8);
     b36:	51 e0       	ldi	r21, 0x01	; 1
     b38:	65 2e       	mov	r6, r21
     b3a:	71 2c       	mov	r7, r1
		// Find all point near here (in this display byte)
		for(uint8_t j=0; j<snake_add_index; j++)
     b3c:	43 e0       	ldi	r20, 0x03	; 3
     b3e:	54 2e       	mov	r5, r20
     b40:	6a c0       	rjmp	.+212    	; 0xc16 <snakegame_UpdateDisplay+0x14e>
	// Lets draw each point in snake to our lcd.
	for(uint8_t i=0; i < snake_add_index; i++)
	{
		// GotoXY
		// Eval number of line (mb: 1..5) in display for display_byte
		uint8_t line = (uint8_t) (snake[i].y) / 8;
     b42:	2a 2c       	mov	r2, r10
     b44:	33 24       	eor	r3, r3
     b46:	61 01       	movw	r12, r2
     b48:	cc 0c       	add	r12, r12
     b4a:	dd 1c       	adc	r13, r13
     b4c:	76 01       	movw	r14, r12
     b4e:	e2 0c       	add	r14, r2
     b50:	f3 1c       	adc	r15, r3
     b52:	89 eb       	ldi	r24, 0xB9	; 185
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	e8 0e       	add	r14, r24
     b58:	f9 1e       	adc	r15, r25
     b5a:	e7 01       	movw	r28, r14
     b5c:	b9 80       	ldd	r11, Y+1	; 0x01
     b5e:	b6 94       	lsr	r11
     b60:	b6 94       	lsr	r11
     b62:	b6 94       	lsr	r11
		lcd_index = (uint16_t) (snake[i].x) + (uint16_t)line * 84;
     b64:	b4 9c       	mul	r11, r4
     b66:	80 01       	movw	r16, r0
     b68:	11 24       	eor	r1, r1
     b6a:	88 81       	ld	r24, Y
     b6c:	08 0f       	add	r16, r24
     b6e:	11 1d       	adc	r17, r1
		Lcd3310_Send( 0x80 | ((uint16_t)lcd_index % LCD_X_RES), LCD_CMD );
     b70:	c8 01       	movw	r24, r16
     b72:	64 e5       	ldi	r22, 0x54	; 84
     b74:	70 e0       	ldi	r23, 0x00	; 0
     b76:	0e 94 ad 1a 	call	0x355a	; 0x355a <__udivmodhi4>
     b7a:	80 68       	ori	r24, 0x80	; 128
     b7c:	60 e0       	ldi	r22, 0x00	; 0
     b7e:	0e 94 96 10 	call	0x212c	; 0x212c <Lcd3310_Send>
		Lcd3310_Send( 0x40 | ((uint16_t)lcd_index / LCD_X_RES), LCD_CMD );
     b82:	c8 01       	movw	r24, r16
     b84:	64 e5       	ldi	r22, 0x54	; 84
     b86:	70 e0       	ldi	r23, 0x00	; 0
     b88:	0e 94 ad 1a 	call	0x355a	; 0x355a <__udivmodhi4>
     b8c:	86 2f       	mov	r24, r22
     b8e:	80 64       	ori	r24, 0x40	; 64
     b90:	60 e0       	ldi	r22, 0x00	; 0
     b92:	0e 94 96 10 	call	0x212c	; 0x212c <Lcd3310_Send>

		// Make sendme byte with all point in this display byte
		// Init with snake[i] point
		uint8_t display_byte = 1 << ((uint8_t)snake[i].y % 8);
     b96:	89 81       	ldd	r24, Y+1	; 0x01
     b98:	87 70       	andi	r24, 0x07	; 7
     b9a:	36 2d       	mov	r19, r6
     b9c:	01 c0       	rjmp	.+2      	; 0xba0 <snakegame_UpdateDisplay+0xd8>
     b9e:	33 0f       	add	r19, r19
     ba0:	8a 95       	dec	r24
     ba2:	ea f7       	brpl	.-6      	; 0xb9e <snakegame_UpdateDisplay+0xd6>
		// Find all point near here (in this display byte)
		for(uint8_t j=0; j<snake_add_index; j++)
     ba4:	80 91 57 03 	lds	r24, 0x0357
     ba8:	e9 eb       	ldi	r30, 0xB9	; 185
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	85 9d       	mul	r24, r5
     bae:	a0 01       	movw	r20, r0
     bb0:	11 24       	eor	r1, r1
     bb2:	4e 0f       	add	r20, r30
     bb4:	5f 1f       	adc	r21, r31
     bb6:	d6 01       	movw	r26, r12
		{
			uint8_t line_find = (uint8_t)snake[j].y / 8;
			if(snake[i].x == snake[j].x && line == line_find){
     bb8:	b7 01       	movw	r22, r14
     bba:	15 c0       	rjmp	.+42     	; 0xbe6 <snakegame_UpdateDisplay+0x11e>
		// Init with snake[i] point
		uint8_t display_byte = 1 << ((uint8_t)snake[i].y % 8);
		// Find all point near here (in this display byte)
		for(uint8_t j=0; j<snake_add_index; j++)
		{
			uint8_t line_find = (uint8_t)snake[j].y / 8;
     bbc:	21 81       	ldd	r18, Z+1	; 0x01
			if(snake[i].x == snake[j].x && line == line_find){
     bbe:	eb 01       	movw	r28, r22
     bc0:	98 81       	ld	r25, Y
     bc2:	80 81       	ld	r24, Z
     bc4:	98 17       	cp	r25, r24
     bc6:	71 f4       	brne	.+28     	; 0xbe4 <snakegame_UpdateDisplay+0x11c>
     bc8:	82 2f       	mov	r24, r18
     bca:	86 95       	lsr	r24
     bcc:	86 95       	lsr	r24
     bce:	86 95       	lsr	r24
     bd0:	b8 16       	cp	r11, r24
     bd2:	41 f4       	brne	.+16     	; 0xbe4 <snakegame_UpdateDisplay+0x11c>
				display_byte |= 1 << ((uint8_t)snake[j].y % 8);
     bd4:	27 70       	andi	r18, 0x07	; 7
     bd6:	c3 01       	movw	r24, r6
     bd8:	02 c0       	rjmp	.+4      	; 0xbde <snakegame_UpdateDisplay+0x116>
     bda:	88 0f       	add	r24, r24
     bdc:	99 1f       	adc	r25, r25
     bde:	2a 95       	dec	r18
     be0:	e2 f7       	brpl	.-8      	; 0xbda <snakegame_UpdateDisplay+0x112>
     be2:	38 2b       	or	r19, r24
     be4:	33 96       	adiw	r30, 0x03	; 3

		// Make sendme byte with all point in this display byte
		// Init with snake[i] point
		uint8_t display_byte = 1 << ((uint8_t)snake[i].y % 8);
		// Find all point near here (in this display byte)
		for(uint8_t j=0; j<snake_add_index; j++)
     be6:	e4 17       	cp	r30, r20
     be8:	f5 07       	cpc	r31, r21
     bea:	41 f7       	brne	.-48     	; 0xbbc <snakegame_UpdateDisplay+0xf4>
				display_byte |= 1 << ((uint8_t)snake[j].y % 8);
			}
		}

		// check that snake[i] and addme points are in same display_byte
		if(addme_x == snake[i].x && addme_line == line){
     bec:	a2 0d       	add	r26, r2
     bee:	b3 1d       	adc	r27, r3
     bf0:	a7 54       	subi	r26, 0x47	; 71
     bf2:	bf 4f       	sbci	r27, 0xFF	; 255
     bf4:	90 91 b7 00 	lds	r25, 0x00B7
     bf8:	8c 91       	ld	r24, X
     bfa:	98 17       	cp	r25, r24
     bfc:	39 f4       	brne	.+14     	; 0xc0c <snakegame_UpdateDisplay+0x144>
     bfe:	8b 14       	cp	r8, r11
     c00:	29 f4       	brne	.+10     	; 0xc0c <snakegame_UpdateDisplay+0x144>
			display_byte |= (addme_display_byte & 0x7f);
     c02:	89 2d       	mov	r24, r9
     c04:	8f 77       	andi	r24, 0x7F	; 127
     c06:	38 2b       	or	r19, r24
			addme_display_byte |= 0x80; // say that we already draw this point
     c08:	e0 e8       	ldi	r30, 0x80	; 128
     c0a:	9e 2a       	or	r9, r30
		}

		Lcd3310_Send( display_byte, LCD_DATA );
     c0c:	83 2f       	mov	r24, r19
     c0e:	61 e0       	ldi	r22, 0x01	; 1
     c10:	0e 94 96 10 	call	0x212c	; 0x212c <Lcd3310_Send>
	// eval values for addme pixel show
	uint8_t addme_line = (uint8_t)addme_y / 8;
	uint8_t addme_display_byte = 1 << ((uint8_t)addme_y % 8);

	// Lets draw each point in snake to our lcd.
	for(uint8_t i=0; i < snake_add_index; i++)
     c14:	a3 94       	inc	r10
     c16:	80 91 57 03 	lds	r24, 0x0357
     c1a:	a8 16       	cp	r10, r24
     c1c:	08 f4       	brcc	.+2      	; 0xc20 <snakegame_UpdateDisplay+0x158>
     c1e:	91 cf       	rjmp	.-222    	; 0xb42 <snakegame_UpdateDisplay+0x7a>
		Lcd3310_Send( display_byte, LCD_DATA );
	}


	// if we didn't draw it before lets do it now
	if(!(addme_display_byte & 0x80)){
     c20:	97 fc       	sbrc	r9, 7
     c22:	1f c0       	rjmp	.+62     	; 0xc62 <snakegame_UpdateDisplay+0x19a>
		lcd_index = (uint16_t)addme_x + (uint16_t)addme_line * 84;
     c24:	04 e5       	ldi	r16, 0x54	; 84
     c26:	80 9e       	mul	r8, r16
     c28:	80 01       	movw	r16, r0
     c2a:	11 24       	eor	r1, r1
     c2c:	80 91 b7 00 	lds	r24, 0x00B7
     c30:	08 0f       	add	r16, r24
     c32:	11 1d       	adc	r17, r1
		Lcd3310_Send( 0x80 | (lcd_index % LCD_X_RES), LCD_CMD );
     c34:	c8 01       	movw	r24, r16
     c36:	64 e5       	ldi	r22, 0x54	; 84
     c38:	70 e0       	ldi	r23, 0x00	; 0
     c3a:	0e 94 ad 1a 	call	0x355a	; 0x355a <__udivmodhi4>
     c3e:	80 68       	ori	r24, 0x80	; 128
     c40:	60 e0       	ldi	r22, 0x00	; 0
     c42:	0e 94 96 10 	call	0x212c	; 0x212c <Lcd3310_Send>
		Lcd3310_Send( 0x40 | (lcd_index / LCD_X_RES), LCD_CMD );
     c46:	c8 01       	movw	r24, r16
     c48:	64 e5       	ldi	r22, 0x54	; 84
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	0e 94 ad 1a 	call	0x355a	; 0x355a <__udivmodhi4>
     c50:	86 2f       	mov	r24, r22
     c52:	80 64       	ori	r24, 0x40	; 64
     c54:	60 e0       	ldi	r22, 0x00	; 0
     c56:	0e 94 96 10 	call	0x212c	; 0x212c <Lcd3310_Send>
		Lcd3310_Send( addme_display_byte, LCD_DATA );
     c5a:	89 2d       	mov	r24, r9
     c5c:	61 e0       	ldi	r22, 0x01	; 1
     c5e:	0e 94 96 10 	call	0x212c	; 0x212c <Lcd3310_Send>
	}
}
     c62:	df 91       	pop	r29
     c64:	cf 91       	pop	r28
     c66:	1f 91       	pop	r17
     c68:	0f 91       	pop	r16
     c6a:	ff 90       	pop	r15
     c6c:	ef 90       	pop	r14
     c6e:	df 90       	pop	r13
     c70:	cf 90       	pop	r12
     c72:	bf 90       	pop	r11
     c74:	af 90       	pop	r10
     c76:	9f 90       	pop	r9
     c78:	8f 90       	pop	r8
     c7a:	7f 90       	pop	r7
     c7c:	6f 90       	pop	r6
     c7e:	5f 90       	pop	r5
     c80:	4f 90       	pop	r4
     c82:	3f 90       	pop	r3
     c84:	2f 90       	pop	r2
     c86:	08 95       	ret

00000c88 <SnakeGame_AddmeUpdateXY>:
}


void SnakeGame_AddmeUpdateXY(void)
{
	addme_x = (rand() % 79) + 2; 	// 2..81
     c88:	0e 94 9d 1a 	call	0x353a	; 0x353a <rand>
     c8c:	6f e4       	ldi	r22, 0x4F	; 79
     c8e:	70 e0       	ldi	r23, 0x00	; 0
     c90:	0e 94 c1 1a 	call	0x3582	; 0x3582 <__divmodhi4>
     c94:	8e 5f       	subi	r24, 0xFE	; 254
     c96:	80 93 b7 00 	sts	0x00B7, r24
	addme_y = (rand() % 28) + 10; // 10..38
     c9a:	0e 94 9d 1a 	call	0x353a	; 0x353a <rand>
     c9e:	6c e1       	ldi	r22, 0x1C	; 28
     ca0:	70 e0       	ldi	r23, 0x00	; 0
     ca2:	0e 94 c1 1a 	call	0x3582	; 0x3582 <__divmodhi4>
     ca6:	86 5f       	subi	r24, 0xF6	; 246
     ca8:	80 93 b8 00 	sts	0x00B8, r24
}
     cac:	08 95       	ret

00000cae <SnakeGame_Start>:
}


void SnakeGame_Start(void)
{
	SnakeGame_AddmeUpdateXY();
     cae:	0e 94 44 06 	call	0xc88	; 0xc88 <SnakeGame_AddmeUpdateXY>
//================================================//


void snakegame_InitSnake(void)
{
	snake_add_index = SNAKE_START_LEN; // start length of snake
     cb2:	86 e0       	ldi	r24, 0x06	; 6
     cb4:	80 93 57 03 	sts	0x0357, r24
	score = (uwin_times<<4) | (snake_add_index - SNAKE_START_LEN);
     cb8:	80 91 55 03 	lds	r24, 0x0355
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	74 e0       	ldi	r23, 0x04	; 4
     cc0:	88 0f       	add	r24, r24
     cc2:	99 1f       	adc	r25, r25
     cc4:	7a 95       	dec	r23
     cc6:	e1 f7       	brne	.-8      	; 0xcc0 <SnakeGame_Start+0x12>
     cc8:	80 93 56 03 	sts	0x0356, r24
     ccc:	e9 eb       	ldi	r30, 0xB9	; 185
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	88 e2       	ldi	r24, 0x28	; 40
	for(uint8_t i=0; i<SNAKE_LEN; i++){
		snake[i].y = 20;
     cd2:	24 e1       	ldi	r18, 0x14	; 20
		snake[i].x = 40 - i;
		snake[i].direction = RIGHT;
     cd4:	92 e0       	ldi	r25, 0x02	; 2
void snakegame_InitSnake(void)
{
	snake_add_index = SNAKE_START_LEN; // start length of snake
	score = (uwin_times<<4) | (snake_add_index - SNAKE_START_LEN);
	for(uint8_t i=0; i<SNAKE_LEN; i++){
		snake[i].y = 20;
     cd6:	21 83       	std	Z+1, r18	; 0x01
		snake[i].x = 40 - i;
     cd8:	80 83       	st	Z, r24
		snake[i].direction = RIGHT;
     cda:	92 83       	std	Z+2, r25	; 0x02
     cdc:	33 96       	adiw	r30, 0x03	; 3
     cde:	81 50       	subi	r24, 0x01	; 1

void snakegame_InitSnake(void)
{
	snake_add_index = SNAKE_START_LEN; // start length of snake
	score = (uwin_times<<4) | (snake_add_index - SNAKE_START_LEN);
	for(uint8_t i=0; i<SNAKE_LEN; i++){
     ce0:	8e 31       	cpi	r24, 0x1E	; 30
     ce2:	c9 f7       	brne	.-14     	; 0xcd6 <SnakeGame_Start+0x28>
void SnakeGame_Start(void)
{
	SnakeGame_AddmeUpdateXY();
	snakegame_InitSnake();

	Lcd3310_GotoXY(0, 0);
     ce4:	80 e0       	ldi	r24, 0x00	; 0
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	60 e0       	ldi	r22, 0x00	; 0
     cea:	70 e0       	ldi	r23, 0x00	; 0
     cec:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <Lcd3310_GotoXY>
	Lcd3310_String_P(snake_str, WHITE_TEXT_ON_BLACK);
     cf0:	80 91 71 00 	lds	r24, 0x0071
     cf4:	90 91 72 00 	lds	r25, 0x0072
     cf8:	61 e0       	ldi	r22, 0x01	; 1
     cfa:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <Lcd3310_String_P>
	snakegame_UpdateDisplay();
     cfe:	0e 94 64 05 	call	0xac8	; 0xac8 <snakegame_UpdateDisplay>
}
     d02:	08 95       	ret

00000d04 <SnakeGame_TakeNextStep>:
{
	// show results and go to main menu
}

void SnakeGame_TakeNextStep(void)
{
     d04:	cf 93       	push	r28
     d06:	df 93       	push	r29
     d08:	c9 eb       	ldi	r28, 0xB9	; 185
     d0a:	d0 e0       	ldi	r29, 0x00	; 0

	// Lets go somethere:
	for(uint8_t i=0; i < SNAKE_LEN; i++)
	{
		snakegame_DirectionStep(&snake[i]);
     d0c:	ce 01       	movw	r24, r28
     d0e:	0e 94 32 05 	call	0xa64	; 0xa64 <snakegame_DirectionStep>
     d12:	23 96       	adiw	r28, 0x03	; 3

void SnakeGame_TakeNextStep(void)
{

	// Lets go somethere:
	for(uint8_t i=0; i < SNAKE_LEN; i++)
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	c7 3d       	cpi	r28, 0xD7	; 215
     d18:	d8 07       	cpc	r29, r24
     d1a:	c1 f7       	brne	.-16     	; 0xd0c <SnakeGame_TakeNextStep+0x8>
     d1c:	89 e0       	ldi	r24, 0x09	; 9
     d1e:	14 c0       	rjmp	.+40     	; 0xd48 <SnakeGame_TakeNextStep+0x44>
	}

	// Update direction of each point from last to first
	for(uint8_t i = SNAKE_LEN-1; i != 0 && i < SNAKE_LEN; i--)
	{
		snake[i].direction = snake[i-1].direction;
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	dc 01       	movw	r26, r24
     d24:	aa 0f       	add	r26, r26
     d26:	bb 1f       	adc	r27, r27
     d28:	a8 0f       	add	r26, r24
     d2a:	b9 1f       	adc	r27, r25
     d2c:	a7 54       	subi	r26, 0x47	; 71
     d2e:	bf 4f       	sbci	r27, 0xFF	; 255
     d30:	01 97       	sbiw	r24, 0x01	; 1
     d32:	fc 01       	movw	r30, r24
     d34:	ee 0f       	add	r30, r30
     d36:	ff 1f       	adc	r31, r31
     d38:	e8 0f       	add	r30, r24
     d3a:	f9 1f       	adc	r31, r25
     d3c:	e7 54       	subi	r30, 0x47	; 71
     d3e:	ff 4f       	sbci	r31, 0xFF	; 255
     d40:	82 81       	ldd	r24, Z+2	; 0x02
     d42:	12 96       	adiw	r26, 0x02	; 2
     d44:	8c 93       	st	X, r24
     d46:	82 2f       	mov	r24, r18
	{
		snakegame_DirectionStep(&snake[i]);
	}

	// Update direction of each point from last to first
	for(uint8_t i = SNAKE_LEN-1; i != 0 && i < SNAKE_LEN; i--)
     d48:	28 2f       	mov	r18, r24
     d4a:	21 50       	subi	r18, 0x01	; 1
     d4c:	48 f7       	brcc	.-46     	; 0xd20 <SnakeGame_TakeNextStep+0x1c>
	{
		snake[i].direction = snake[i-1].direction;
	}

	// Check if we come to addme point
	if(snake[0].x == addme_x && snake[0].y == addme_y){
     d4e:	90 91 b9 00 	lds	r25, 0x00B9
     d52:	80 91 b7 00 	lds	r24, 0x00B7
     d56:	98 17       	cp	r25, r24
     d58:	09 f0       	breq	.+2      	; 0xd5c <SnakeGame_TakeNextStep+0x58>
     d5a:	ca c0       	rjmp	.+404    	; 0xef0 <SnakeGame_TakeNextStep+0x1ec>
     d5c:	90 91 ba 00 	lds	r25, 0x00BA
     d60:	80 91 b8 00 	lds	r24, 0x00B8
     d64:	98 17       	cp	r25, r24
     d66:	09 f0       	breq	.+2      	; 0xd6a <SnakeGame_TakeNextStep+0x66>
     d68:	c3 c0       	rjmp	.+390    	; 0xef0 <SnakeGame_TakeNextStep+0x1ec>
		SnakeGame_AddmeUpdateXY();
     d6a:	0e 94 44 06 	call	0xc88	; 0xc88 <SnakeGame_AddmeUpdateXY>
		snake_add_index++; // add snake point
     d6e:	80 91 57 03 	lds	r24, 0x0357
     d72:	28 2f       	mov	r18, r24
     d74:	2f 5f       	subi	r18, 0xFF	; 255
     d76:	20 93 57 03 	sts	0x0357, r18
		score = (uwin_times<<4) | (snake_add_index - SNAKE_START_LEN);
     d7a:	85 50       	subi	r24, 0x05	; 5
     d7c:	90 91 55 03 	lds	r25, 0x0355
     d80:	92 95       	swap	r25
     d82:	90 7f       	andi	r25, 0xF0	; 240
     d84:	98 2b       	or	r25, r24
     d86:	90 93 56 03 	sts	0x0356, r25
		if(snake_add_index >= SNAKE_LEN){
     d8a:	2a 30       	cpi	r18, 0x0A	; 10
     d8c:	08 f4       	brcc	.+2      	; 0xd90 <SnakeGame_TakeNextStep+0x8c>
     d8e:	b0 c0       	rjmp	.+352    	; 0xef0 <SnakeGame_TakeNextStep+0x1ec>
			Lcd3310_ClearCenter();
     d90:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <Lcd3310_ClearCenter>
			uwin_times++;
     d94:	80 91 55 03 	lds	r24, 0x0355
     d98:	8f 5f       	subi	r24, 0xFF	; 255
     d9a:	80 93 55 03 	sts	0x0355, r24
			if(uwin_times >= 3){
     d9e:	83 30       	cpi	r24, 0x03	; 3
     da0:	d0 f1       	brcs	.+116    	; 0xe16 <SnakeGame_TakeNextStep+0x112>
				uwin_times = 0x00;
     da2:	10 92 55 03 	sts	0x0355, r1
				Lcd3310_GotoXY(3, 2);
     da6:	83 e0       	ldi	r24, 0x03	; 3
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	62 e0       	ldi	r22, 0x02	; 2
     dac:	70 e0       	ldi	r23, 0x00	; 0
     dae:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <Lcd3310_GotoXY>
				Lcd3310_String_P(got_fun_str, BLACK_TEXT_ON_WHITE);
     db2:	80 91 9e 00 	lds	r24, 0x009E
     db6:	90 91 9f 00 	lds	r25, 0x009F
     dba:	60 e0       	ldi	r22, 0x00	; 0
     dbc:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <Lcd3310_String_P>
				Lcd3310_GotoXY(3, 3);
     dc0:	83 e0       	ldi	r24, 0x03	; 3
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	63 e0       	ldi	r22, 0x03	; 3
     dc6:	70 e0       	ldi	r23, 0x00	; 0
     dc8:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <Lcd3310_GotoXY>
				Lcd3310_String_P(go_work_str, BLACK_TEXT_ON_WHITE);
     dcc:	80 91 a9 00 	lds	r24, 0x00A9
     dd0:	90 91 aa 00 	lds	r25, 0x00AA
     dd4:	60 e0       	ldi	r22, 0x00	; 0
     dd6:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <Lcd3310_String_P>
				Lcd3310_GotoXY(0, 5);
     dda:	80 e0       	ldi	r24, 0x00	; 0
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	65 e0       	ldi	r22, 0x05	; 5
     de0:	70 e0       	ldi	r23, 0x00	; 0
     de2:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <Lcd3310_GotoXY>
				Lcd3310_String_P(brunql_str, WHITE_TEXT_ON_BLACK);
     de6:	80 91 b3 00 	lds	r24, 0x00B3
     dea:	90 91 b4 00 	lds	r25, 0x00B4
     dee:	61 e0       	ldi	r22, 0x01	; 1
     df0:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <Lcd3310_String_P>
				FLAGS_SWITCH_ON( JOYSTICK_CENTER_CLICK_FLAG ); // stop game! go to main menu.
     df4:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     df6:	f8 94       	cli
     df8:	80 91 85 03 	lds	r24, 0x0385
     dfc:	90 91 86 03 	lds	r25, 0x0386
     e00:	82 60       	ori	r24, 0x02	; 2
     e02:	90 93 86 03 	sts	0x0386, r25
     e06:	80 93 85 03 	sts	0x0385, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     e0a:	2f bf       	out	0x3f, r18	; 63

				get_present_speed = SPEED_TICKS_TO_GET_PRESENT;
     e0c:	88 ec       	ldi	r24, 0xC8	; 200
     e0e:	80 93 b6 00 	sts	0x00B6, r24
				step_speed = SPEED_STEP;
     e12:	8e e1       	ldi	r24, 0x1E	; 30
     e14:	53 c0       	rjmp	.+166    	; 0xebc <SnakeGame_TakeNextStep+0x1b8>
			}else{
				Lcd3310_GotoXY(3, 2);
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	62 e0       	ldi	r22, 0x02	; 2
     e1c:	70 e0       	ldi	r23, 0x00	; 0
     e1e:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <Lcd3310_GotoXY>
				Lcd3310_String_P(uwin_str, BLACK_TEXT_ON_WHITE);
     e22:	80 91 7c 00 	lds	r24, 0x007C
     e26:	90 91 7d 00 	lds	r25, 0x007D
     e2a:	60 e0       	ldi	r22, 0x00	; 0
     e2c:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <Lcd3310_String_P>
				Lcd3310_GotoXY(2, 3);
     e30:	82 e0       	ldi	r24, 0x02	; 2
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	63 e0       	ldi	r22, 0x03	; 3
     e36:	70 e0       	ldi	r23, 0x00	; 0
     e38:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <Lcd3310_GotoXY>
				Lcd3310_String_P(level_str, BLACK_TEXT_ON_WHITE);
     e3c:	80 91 93 00 	lds	r24, 0x0093
     e40:	90 91 94 00 	lds	r25, 0x0094
     e44:	60 e0       	ldi	r22, 0x00	; 0
     e46:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <Lcd3310_String_P>
				Lcd3310_UInt8AsText(uwin_times, BLACK_TEXT_ON_WHITE);
     e4a:	80 91 55 03 	lds	r24, 0x0355
     e4e:	60 e0       	ldi	r22, 0x00	; 0
     e50:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <Lcd3310_UInt8AsText>
				Lcd3310_GotoXY(0, 5);
     e54:	80 e0       	ldi	r24, 0x00	; 0
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	65 e0       	ldi	r22, 0x05	; 5
     e5a:	70 e0       	ldi	r23, 0x00	; 0
     e5c:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <Lcd3310_GotoXY>
				Lcd3310_String_P(score_str, WHITE_TEXT_ON_BLACK);
     e60:	80 91 88 00 	lds	r24, 0x0088
     e64:	90 91 89 00 	lds	r25, 0x0089
     e68:	61 e0       	ldi	r22, 0x01	; 1
     e6a:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <Lcd3310_String_P>
				Lcd3310_UInt8AsText(score, WHITE_TEXT_ON_BLACK);
     e6e:	80 91 56 03 	lds	r24, 0x0356
     e72:	61 e0       	ldi	r22, 0x01	; 1
     e74:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <Lcd3310_UInt8AsText>
				Lcd3310_Char(' ', WHITE_TEXT_ON_BLACK);
     e78:	80 e2       	ldi	r24, 0x20	; 32
     e7a:	61 e0       	ldi	r22, 0x01	; 1
     e7c:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <Lcd3310_Char>

				get_present_speed /= 1.5;
     e80:	60 91 b6 00 	lds	r22, 0x00B6
     e84:	70 e0       	ldi	r23, 0x00	; 0
     e86:	88 27       	eor	r24, r24
     e88:	77 fd       	sbrc	r23, 7
     e8a:	80 95       	com	r24
     e8c:	98 2f       	mov	r25, r24
     e8e:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <__floatsisf>
     e92:	20 e0       	ldi	r18, 0x00	; 0
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	40 ec       	ldi	r20, 0xC0	; 192
     e98:	5f e3       	ldi	r21, 0x3F	; 63
     e9a:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <__divsf3>
     e9e:	0e 94 20 13 	call	0x2640	; 0x2640 <__fixunssfsi>
     ea2:	60 93 b6 00 	sts	0x00B6, r22
				step_speed -= 3 * uwin_times;
     ea6:	80 91 55 03 	lds	r24, 0x0355
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	9c 01       	movw	r18, r24
     eae:	22 0f       	add	r18, r18
     eb0:	33 1f       	adc	r19, r19
     eb2:	28 0f       	add	r18, r24
     eb4:	39 1f       	adc	r19, r25
     eb6:	80 91 b5 00 	lds	r24, 0x00B5
     eba:	82 1b       	sub	r24, r18
     ebc:	80 93 b5 00 	sts	0x00B5, r24
			}
			while(JOYSTICK_INT_CHECK());
     ec0:	83 99       	sbic	0x10, 3	; 16
     ec2:	fe cf       	rjmp	.-4      	; 0xec0 <SnakeGame_TakeNextStep+0x1bc>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ec4:	80 e4       	ldi	r24, 0x40	; 64
     ec6:	9f e1       	ldi	r25, 0x1F	; 31
     ec8:	01 97       	sbiw	r24, 0x01	; 1
     eca:	f1 f7       	brne	.-4      	; 0xec8 <SnakeGame_TakeNextStep+0x1c4>
			_delay_ms(2);
			GIFR = _BV(INTF1);
     ecc:	80 e8       	ldi	r24, 0x80	; 128
     ece:	8a bf       	out	0x3a, r24	; 58


			timer_ticks_to_get_present = get_present_speed;
     ed0:	80 91 b6 00 	lds	r24, 0x00B6
     ed4:	80 93 05 01 	sts	0x0105, r24
			timer_delay = step_speed;
     ed8:	80 91 b5 00 	lds	r24, 0x00B5
     edc:	80 93 8a 03 	sts	0x038A, r24

			score = (uwin_times<<4);
     ee0:	80 91 55 03 	lds	r24, 0x0355
     ee4:	82 95       	swap	r24
     ee6:	80 7f       	andi	r24, 0xF0	; 240
     ee8:	80 93 56 03 	sts	0x0356, r24
			SnakeGame_Start();
     eec:	0e 94 57 06 	call	0xcae	; 0xcae <SnakeGame_Start>
		}
	}

	snakegame_UpdateDisplay();
     ef0:	0e 94 64 05 	call	0xac8	; 0xac8 <snakegame_UpdateDisplay>
}
     ef4:	df 91       	pop	r29
     ef6:	cf 91       	pop	r28
     ef8:	08 95       	ret

00000efa <hex2dec_result>:
PGM_P pstr_please_wait = "Please wait...";

uint8_t measure_delay = MEASURE_DELAY_BEFORE_START_ADC;

uint16_t hex2dec_result(uint16_t hex)
{
     efa:	1f 93       	push	r17
     efc:	9c 01       	movw	r18, r24
	uint8_t res2, res1, res0;
	res0 =  hex % 10;
	hex /= 10;
     efe:	6a e0       	ldi	r22, 0x0A	; 10
     f00:	70 e0       	ldi	r23, 0x00	; 0
     f02:	0e 94 ad 1a 	call	0x355a	; 0x355a <__udivmodhi4>
     f06:	46 2f       	mov	r20, r22
     f08:	17 2f       	mov	r17, r23
     f0a:	86 2f       	mov	r24, r22
     f0c:	97 2f       	mov	r25, r23
     f0e:	6a e0       	ldi	r22, 0x0A	; 10
     f10:	70 e0       	ldi	r23, 0x00	; 0
     f12:	0e 94 ad 1a 	call	0x355a	; 0x355a <__udivmodhi4>
     f16:	e8 2f       	mov	r30, r24
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	84 e0       	ldi	r24, 0x04	; 4
     f1c:	ee 0f       	add	r30, r30
     f1e:	ff 1f       	adc	r31, r31
     f20:	8a 95       	dec	r24
     f22:	e1 f7       	brne	.-8      	; 0xf1c <hex2dec_result+0x22>
     f24:	c9 01       	movw	r24, r18
     f26:	6a e0       	ldi	r22, 0x0A	; 10
     f28:	70 e0       	ldi	r23, 0x00	; 0
     f2a:	0e 94 ad 1a 	call	0x355a	; 0x355a <__udivmodhi4>
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	e8 2b       	or	r30, r24
     f32:	f9 2b       	or	r31, r25
     f34:	84 2f       	mov	r24, r20
     f36:	91 2f       	mov	r25, r17
     f38:	6a e0       	ldi	r22, 0x0A	; 10
     f3a:	70 e0       	ldi	r23, 0x00	; 0
     f3c:	0e 94 ad 1a 	call	0x355a	; 0x355a <__udivmodhi4>
     f40:	cb 01       	movw	r24, r22
     f42:	6a e0       	ldi	r22, 0x0A	; 10
     f44:	70 e0       	ldi	r23, 0x00	; 0
     f46:	0e 94 ad 1a 	call	0x355a	; 0x355a <__udivmodhi4>
     f4a:	38 2f       	mov	r19, r24
     f4c:	20 e0       	ldi	r18, 0x00	; 0
     f4e:	e2 2b       	or	r30, r18
     f50:	f3 2b       	or	r31, r19
	res1 = hex % 10;
	hex /= 10;
	res2 = hex % 10;

	return (res2 << 8) | (res1 << 4)| res0;
}
     f52:	cf 01       	movw	r24, r30
     f54:	1f 91       	pop	r17
     f56:	08 95       	ret

00000f58 <ADC_N_Times>:


void ADC_N_Times(void)
{
	uint32_t adc_256_times = 0x00000000;
	adc_data = 0x0000;
     f58:	10 92 84 03 	sts	0x0384, r1
     f5c:	10 92 83 03 	sts	0x0383, r1

	PORTC |= _BV(PC3);
     f60:	ab 9a       	sbi	0x15, 3	; 21
	DDRC  |= _BV(PC3);	// test pin up
     f62:	a3 9a       	sbi	0x14, 3	; 20
     f64:	20 e0       	ldi	r18, 0x00	; 0
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	40 e0       	ldi	r20, 0x00	; 0
     f6a:	50 e0       	ldi	r21, 0x00	; 0
     f6c:	60 e0       	ldi	r22, 0x00	; 0
	do{
		ADCSRA |= _BV( ADSC ); // start conversation
		while( ADC_CONVERT_IN_PROGRESS() ) {  };
		adc_data = ADC;
		if((uint16_t)adc_data & (uint16_t)0x0200){
			adc_data = (uint16_t)0x03ff - adc_data + 1;
     f6e:	e0 e0       	ldi	r30, 0x00	; 0
     f70:	f4 e0       	ldi	r31, 0x04	; 4
	PORTC |= _BV(PC3);
	DDRC  |= _BV(PC3);	// test pin up

	uint8_t i=0;
	do{
		ADCSRA |= _BV( ADSC ); // start conversation
     f72:	36 9a       	sbi	0x06, 6	; 6
		while( ADC_CONVERT_IN_PROGRESS() ) {  };
     f74:	36 99       	sbic	0x06, 6	; 6
     f76:	fe cf       	rjmp	.-4      	; 0xf74 <ADC_N_Times+0x1c>
		adc_data = ADC;
     f78:	84 b1       	in	r24, 0x04	; 4
     f7a:	95 b1       	in	r25, 0x05	; 5
     f7c:	90 93 84 03 	sts	0x0384, r25
     f80:	80 93 83 03 	sts	0x0383, r24
		if((uint16_t)adc_data & (uint16_t)0x0200){
     f84:	80 91 83 03 	lds	r24, 0x0383
     f88:	90 91 84 03 	lds	r25, 0x0384
     f8c:	91 ff       	sbrs	r25, 1
     f8e:	0b c0       	rjmp	.+22     	; 0xfa6 <ADC_N_Times+0x4e>
			adc_data = (uint16_t)0x03ff - adc_data + 1;
     f90:	80 91 83 03 	lds	r24, 0x0383
     f94:	90 91 84 03 	lds	r25, 0x0384
     f98:	df 01       	movw	r26, r30
     f9a:	a8 1b       	sub	r26, r24
     f9c:	b9 0b       	sbc	r27, r25
     f9e:	b0 93 84 03 	sts	0x0384, r27
     fa2:	a0 93 83 03 	sts	0x0383, r26
		}

		adc_256_times += (uint32_t) adc_data;
     fa6:	80 91 83 03 	lds	r24, 0x0383
     faa:	90 91 84 03 	lds	r25, 0x0384
     fae:	a0 e0       	ldi	r26, 0x00	; 0
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	28 0f       	add	r18, r24
     fb4:	39 1f       	adc	r19, r25
     fb6:	4a 1f       	adc	r20, r26
     fb8:	5b 1f       	adc	r21, r27
	} while( ++i != 245 ); // loop 245 times, 7 brrrzzzzzzzzzzz
     fba:	6f 5f       	subi	r22, 0xFF	; 255
     fbc:	65 3f       	cpi	r22, 0xF5	; 245
     fbe:	c9 f6       	brne	.-78     	; 0xf72 <ADC_N_Times+0x1a>

	PORTC &= (uint8_t)~_BV(PC3); // test pin down
     fc0:	ab 98       	cbi	0x15, 3	; 21

	adc_256_times >>= 8; // divide 256
	adc_data = (uint16_t) adc_256_times;
     fc2:	bb 27       	eor	r27, r27
     fc4:	a5 2f       	mov	r26, r21
     fc6:	94 2f       	mov	r25, r20
     fc8:	83 2f       	mov	r24, r19
     fca:	90 93 84 03 	sts	0x0384, r25
     fce:	80 93 83 03 	sts	0x0383, r24
	//===================================//
}
     fd2:	08 95       	ret

00000fd4 <MeasureAllAlgorithm>:
	_delay_ms(500);
}

void MeasureAllAlgorithm(uint8_t color)
{
	result[MEASURE_INDX][color] = adc_data;
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	20 91 83 03 	lds	r18, 0x0383
     fda:	30 91 84 03 	lds	r19, 0x0384
     fde:	fc 01       	movw	r30, r24
     fe0:	ee 0f       	add	r30, r30
     fe2:	ff 1f       	adc	r31, r31
     fe4:	e9 59       	subi	r30, 0x99	; 153
     fe6:	fc 4f       	sbci	r31, 0xFC	; 252
     fe8:	31 83       	std	Z+1, r19	; 0x01
     fea:	20 83       	st	Z, r18
	int16_t diff = result[CALIBRATE_INDX][color] - result[MEASURE_INDX][color];
     fec:	88 0f       	add	r24, r24
     fee:	99 1f       	adc	r25, r25
     ff0:	fc 01       	movw	r30, r24
     ff2:	e7 5a       	subi	r30, 0xA7	; 167
     ff4:	fc 4f       	sbci	r31, 0xFC	; 252
     ff6:	01 90       	ld	r0, Z+
     ff8:	f0 81       	ld	r31, Z
     ffa:	e0 2d       	mov	r30, r0
     ffc:	e2 1b       	sub	r30, r18
     ffe:	f3 0b       	sbc	r31, r19
	if( diff < 0 ) diff *= -1;
	result[DIFF_INDX][color] = diff;
    1000:	dc 01       	movw	r26, r24
    1002:	ab 58       	subi	r26, 0x8B	; 139
    1004:	bc 4f       	sbci	r27, 0xFC	; 252
    1006:	11 96       	adiw	r26, 0x01	; 1
    1008:	fc 93       	st	X, r31
    100a:	ee 93       	st	-X, r30
    100c:	f7 ff       	sbrs	r31, 7
    100e:	06 c0       	rjmp	.+12     	; 0x101c <MeasureAllAlgorithm+0x48>
    1010:	88 27       	eor	r24, r24
    1012:	99 27       	eor	r25, r25
    1014:	8e 1b       	sub	r24, r30
    1016:	9f 0b       	sbc	r25, r31
    1018:	8d 93       	st	X+, r24
    101a:	9c 93       	st	X, r25
    101c:	08 95       	ret

0000101e <CalibrationAlgorithm>:
}

void CalibrationAlgorithm(uint8_t color)
{
	result[CALIBRATE_INDX][color] = adc_data;
    101e:	20 91 83 03 	lds	r18, 0x0383
    1022:	30 91 84 03 	lds	r19, 0x0384
    1026:	e8 2f       	mov	r30, r24
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	ee 0f       	add	r30, r30
    102c:	ff 1f       	adc	r31, r31
    102e:	e7 5a       	subi	r30, 0xA7	; 167
    1030:	fc 4f       	sbci	r31, 0xFC	; 252
    1032:	31 83       	std	Z+1, r19	; 0x01
    1034:	20 83       	st	Z, r18
}
    1036:	08 95       	ret

00001038 <SaveMeasureResultsToCalibrate>:
	//===================================//
}

void SaveMeasureResultsToCalibrate(void)
{
	result[CALIBRATE_INDX][RED] = result[MEASURE_INDX][RED];
    1038:	80 91 67 03 	lds	r24, 0x0367
    103c:	90 91 68 03 	lds	r25, 0x0368
    1040:	90 93 5a 03 	sts	0x035A, r25
    1044:	80 93 59 03 	sts	0x0359, r24
	result[CALIBRATE_INDX][GREEN] = result[MEASURE_INDX][GREEN];
    1048:	80 91 69 03 	lds	r24, 0x0369
    104c:	90 91 6a 03 	lds	r25, 0x036A
    1050:	90 93 5c 03 	sts	0x035C, r25
    1054:	80 93 5b 03 	sts	0x035B, r24
	result[CALIBRATE_INDX][BLUE] = result[MEASURE_INDX][BLUE];
    1058:	80 91 6b 03 	lds	r24, 0x036B
    105c:	90 91 6c 03 	lds	r25, 0x036C
    1060:	90 93 5e 03 	sts	0x035E, r25
    1064:	80 93 5d 03 	sts	0x035D, r24
	result[CALIBRATE_INDX][RED_GREEN] = result[MEASURE_INDX][RED_GREEN];
    1068:	80 91 6d 03 	lds	r24, 0x036D
    106c:	90 91 6e 03 	lds	r25, 0x036E
    1070:	90 93 60 03 	sts	0x0360, r25
    1074:	80 93 5f 03 	sts	0x035F, r24
	result[CALIBRATE_INDX][RED_BLUE] = result[MEASURE_INDX][RED_BLUE];
    1078:	80 91 6f 03 	lds	r24, 0x036F
    107c:	90 91 70 03 	lds	r25, 0x0370
    1080:	90 93 62 03 	sts	0x0362, r25
    1084:	80 93 61 03 	sts	0x0361, r24
	result[CALIBRATE_INDX][GREEN_BLUE] = result[MEASURE_INDX][GREEN_BLUE];
    1088:	80 91 71 03 	lds	r24, 0x0371
    108c:	90 91 72 03 	lds	r25, 0x0372
    1090:	90 93 64 03 	sts	0x0364, r25
    1094:	80 93 63 03 	sts	0x0363, r24
	result[CALIBRATE_INDX][ALL] = result[MEASURE_INDX][ALL];
    1098:	80 91 73 03 	lds	r24, 0x0373
    109c:	90 91 74 03 	lds	r25, 0x0374
    10a0:	90 93 66 03 	sts	0x0366, r25
    10a4:	80 93 65 03 	sts	0x0365, r24

	result[DIFF_INDX][RED] = 0;
    10a8:	10 92 76 03 	sts	0x0376, r1
    10ac:	10 92 75 03 	sts	0x0375, r1
	result[DIFF_INDX][GREEN] = 0;
    10b0:	10 92 78 03 	sts	0x0378, r1
    10b4:	10 92 77 03 	sts	0x0377, r1
	result[DIFF_INDX][BLUE] = 0;
    10b8:	10 92 7a 03 	sts	0x037A, r1
    10bc:	10 92 79 03 	sts	0x0379, r1
	result[DIFF_INDX][RED_GREEN] = 0;
    10c0:	10 92 7c 03 	sts	0x037C, r1
    10c4:	10 92 7b 03 	sts	0x037B, r1
	result[DIFF_INDX][RED_BLUE] = 0;
    10c8:	10 92 7e 03 	sts	0x037E, r1
    10cc:	10 92 7d 03 	sts	0x037D, r1
	result[DIFF_INDX][GREEN_BLUE] = 0;
    10d0:	10 92 80 03 	sts	0x0380, r1
    10d4:	10 92 7f 03 	sts	0x037F, r1
	result[DIFF_INDX][ALL] = 0;
    10d8:	10 92 82 03 	sts	0x0382, r1
    10dc:	10 92 81 03 	sts	0x0381, r1

	Lcd3310_ClearCenter();
    10e0:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <Lcd3310_ClearCenter>
	Lcd3310_GotoXY(5,3);
    10e4:	85 e0       	ldi	r24, 0x05	; 5
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	63 e0       	ldi	r22, 0x03	; 3
    10ea:	70 e0       	ldi	r23, 0x00	; 0
    10ec:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <Lcd3310_GotoXY>
	Lcd3310_Char('S', BLACK_TEXT_ON_WHITE);
    10f0:	83 e5       	ldi	r24, 0x53	; 83
    10f2:	60 e0       	ldi	r22, 0x00	; 0
    10f4:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <Lcd3310_Char>
	Lcd3310_Char('a', BLACK_TEXT_ON_WHITE);
    10f8:	81 e6       	ldi	r24, 0x61	; 97
    10fa:	60 e0       	ldi	r22, 0x00	; 0
    10fc:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <Lcd3310_Char>
	Lcd3310_Char('v', BLACK_TEXT_ON_WHITE);
    1100:	86 e7       	ldi	r24, 0x76	; 118
    1102:	60 e0       	ldi	r22, 0x00	; 0
    1104:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <Lcd3310_Char>
	Lcd3310_Char('e', BLACK_TEXT_ON_WHITE);
    1108:	85 e6       	ldi	r24, 0x65	; 101
    110a:	60 e0       	ldi	r22, 0x00	; 0
    110c:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <Lcd3310_Char>
	Lcd3310_Char('d', BLACK_TEXT_ON_WHITE);
    1110:	84 e6       	ldi	r24, 0x64	; 100
    1112:	60 e0       	ldi	r22, 0x00	; 0
    1114:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <Lcd3310_Char>
    1118:	88 e8       	ldi	r24, 0x88	; 136
    111a:	93 e1       	ldi	r25, 0x13	; 19
    111c:	20 e9       	ldi	r18, 0x90	; 144
    111e:	31 e0       	ldi	r19, 0x01	; 1
    1120:	f9 01       	movw	r30, r18
    1122:	31 97       	sbiw	r30, 0x01	; 1
    1124:	f1 f7       	brne	.-4      	; 0x1122 <SaveMeasureResultsToCalibrate+0xea>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1126:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1128:	d9 f7       	brne	.-10     	; 0x1120 <SaveMeasureResultsToCalibrate+0xe8>
	_delay_ms(500);
}
    112a:	08 95       	ret

0000112c <ADC_LoadingAndEvalIt>:
	result[CALIBRATE_INDX][color] = adc_data;
}


void ADC_LoadingAndEvalIt(ptrEvalMe evalMe)
{
    112c:	4f 92       	push	r4
    112e:	5f 92       	push	r5
    1130:	6f 92       	push	r6
    1132:	7f 92       	push	r7
    1134:	9f 92       	push	r9
    1136:	af 92       	push	r10
    1138:	bf 92       	push	r11
    113a:	cf 92       	push	r12
    113c:	df 92       	push	r13
    113e:	ef 92       	push	r14
    1140:	ff 92       	push	r15
    1142:	0f 93       	push	r16
    1144:	1f 93       	push	r17
    1146:	cf 93       	push	r28
    1148:	df 93       	push	r29
    114a:	3c 01       	movw	r6, r24
	 *
	 * [############]
	 *
	 * 	 Complete!
	 */
	JOYSTICK_INT_DISABLE();
    114c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    114e:	f8 94       	cli
    1150:	9b b7       	in	r25, 0x3b	; 59
    1152:	9f 77       	andi	r25, 0x7F	; 127
    1154:	9b bf       	out	0x3b, r25	; 59
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1156:	8f bf       	out	0x3f, r24	; 63

	Lcd3310_ClearCenter();
    1158:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <Lcd3310_ClearCenter>
	Lcd3310_GotoXY(0, 1);
    115c:	80 e0       	ldi	r24, 0x00	; 0
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	61 e0       	ldi	r22, 0x01	; 1
    1162:	70 e0       	ldi	r23, 0x00	; 0
    1164:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <Lcd3310_GotoXY>
	Lcd3310_String_P( pstr_please_wait, BLACK_TEXT_ON_WHITE );
    1168:	80 91 02 01 	lds	r24, 0x0102
    116c:	90 91 03 01 	lds	r25, 0x0103
    1170:	60 e0       	ldi	r22, 0x00	; 0
    1172:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <Lcd3310_String_P>

	Lcd3310_GotoXY(1, 3);
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	63 e0       	ldi	r22, 0x03	; 3
    117c:	70 e0       	ldi	r23, 0x00	; 0
    117e:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <Lcd3310_GotoXY>
	Lcd3310_Char('[', BLACK_TEXT_ON_WHITE);
    1182:	8b e5       	ldi	r24, 0x5B	; 91
    1184:	60 e0       	ldi	r22, 0x00	; 0
    1186:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <Lcd3310_Char>

	alg_state = STARTS;
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	80 93 58 03 	sts	0x0358, r24
	usbPoll();
    1190:	0e 94 94 02 	call	0x528	; 0x528 <usbPoll>
    1194:	c9 ed       	ldi	r28, 0xD9	; 217
    1196:	d0 e0       	ldi	r29, 0x00	; 0
    1198:	99 24       	eor	r9, r9
    119a:	70 e9       	ldi	r23, 0x90	; 144
    119c:	47 2e       	mov	r4, r23
    119e:	71 e0       	ldi	r23, 0x01	; 1
    11a0:	57 2e       	mov	r5, r23

	for(uint8_t color=0; color < 3; color++){
		LedDriver_SwitchLeds( RED_LEDS | GREEN_LEDS | BLUE_LEDS );
    11a2:	8c ef       	ldi	r24, 0xFC	; 252
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	0e 94 c8 09 	call	0x1390	; 0x1390 <LedDriver_SwitchLeds>
		_delay_ms((double) measure_delay * 1000 );
    11aa:	60 91 04 01 	lds	r22, 0x0104
    11ae:	70 e0       	ldi	r23, 0x00	; 0
    11b0:	80 e0       	ldi	r24, 0x00	; 0
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <__floatunsisf>
    11b8:	20 e0       	ldi	r18, 0x00	; 0
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	4a e7       	ldi	r20, 0x7A	; 122
    11be:	54 e4       	ldi	r21, 0x44	; 68
    11c0:	0e 94 f6 14 	call	0x29ec	; 0x29ec <__mulsf3>
    11c4:	5b 01       	movw	r10, r22
    11c6:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11c8:	20 e0       	ldi	r18, 0x00	; 0
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	4a e7       	ldi	r20, 0x7A	; 122
    11ce:	55 e4       	ldi	r21, 0x45	; 69
    11d0:	0e 94 f6 14 	call	0x29ec	; 0x29ec <__mulsf3>
    11d4:	7b 01       	movw	r14, r22
    11d6:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    11d8:	20 e0       	ldi	r18, 0x00	; 0
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	40 e8       	ldi	r20, 0x80	; 128
    11de:	5f e3       	ldi	r21, 0x3F	; 63
    11e0:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <__ltsf2>
    11e4:	88 23       	and	r24, r24
    11e6:	1c f4       	brge	.+6      	; 0x11ee <ADC_LoadingAndEvalIt+0xc2>
    11e8:	61 e0       	ldi	r22, 0x01	; 1
    11ea:	70 e0       	ldi	r23, 0x00	; 0
    11ec:	22 c0       	rjmp	.+68     	; 0x1232 <ADC_LoadingAndEvalIt+0x106>
		__ticks = 1;
	else if (__tmp > 65535)
    11ee:	c8 01       	movw	r24, r16
    11f0:	b7 01       	movw	r22, r14
    11f2:	20 e0       	ldi	r18, 0x00	; 0
    11f4:	3f ef       	ldi	r19, 0xFF	; 255
    11f6:	4f e7       	ldi	r20, 0x7F	; 127
    11f8:	57 e4       	ldi	r21, 0x47	; 71
    11fa:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <__gtsf2>
    11fe:	18 16       	cp	r1, r24
    1200:	a4 f4       	brge	.+40     	; 0x122a <ADC_LoadingAndEvalIt+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1202:	c6 01       	movw	r24, r12
    1204:	b5 01       	movw	r22, r10
    1206:	20 e0       	ldi	r18, 0x00	; 0
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	40 e2       	ldi	r20, 0x20	; 32
    120c:	51 e4       	ldi	r21, 0x41	; 65
    120e:	0e 94 f6 14 	call	0x29ec	; 0x29ec <__mulsf3>
    1212:	0e 94 20 13 	call	0x2640	; 0x2640 <__fixunssfsi>
    1216:	05 c0       	rjmp	.+10     	; 0x1222 <ADC_LoadingAndEvalIt+0xf6>
    1218:	c2 01       	movw	r24, r4
    121a:	01 97       	sbiw	r24, 0x01	; 1
    121c:	f1 f7       	brne	.-4      	; 0x121a <ADC_LoadingAndEvalIt+0xee>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    121e:	61 50       	subi	r22, 0x01	; 1
    1220:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1222:	61 15       	cp	r22, r1
    1224:	71 05       	cpc	r23, r1
    1226:	c1 f7       	brne	.-16     	; 0x1218 <ADC_LoadingAndEvalIt+0xec>
    1228:	07 c0       	rjmp	.+14     	; 0x1238 <ADC_LoadingAndEvalIt+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    122a:	c8 01       	movw	r24, r16
    122c:	b7 01       	movw	r22, r14
    122e:	0e 94 20 13 	call	0x2640	; 0x2640 <__fixunssfsi>
    1232:	cb 01       	movw	r24, r22
    1234:	01 97       	sbiw	r24, 0x01	; 1
    1236:	f1 f7       	brne	.-4      	; 0x1234 <ADC_LoadingAndEvalIt+0x108>
		Lcd3310_Char('#', BLACK_TEXT_ON_WHITE);
    1238:	83 e2       	ldi	r24, 0x23	; 35
    123a:	60 e0       	ldi	r22, 0x00	; 0
    123c:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <Lcd3310_Char>
		alg_state++;
    1240:	80 91 58 03 	lds	r24, 0x0358
    1244:	8f 5f       	subi	r24, 0xFF	; 255
    1246:	80 93 58 03 	sts	0x0358, r24
		usbPoll();
    124a:	0e 94 94 02 	call	0x528	; 0x528 <usbPoll>

		LedDriver_SwitchLeds( led_show_codes[color] );
    124e:	88 81       	ld	r24, Y
    1250:	99 81       	ldd	r25, Y+1	; 0x01
    1252:	0e 94 c8 09 	call	0x1390	; 0x1390 <LedDriver_SwitchLeds>
		_delay_ms((double) measure_delay * 1000 );
    1256:	60 91 04 01 	lds	r22, 0x0104
    125a:	70 e0       	ldi	r23, 0x00	; 0
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <__floatunsisf>
    1264:	20 e0       	ldi	r18, 0x00	; 0
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	4a e7       	ldi	r20, 0x7A	; 122
    126a:	54 e4       	ldi	r21, 0x44	; 68
    126c:	0e 94 f6 14 	call	0x29ec	; 0x29ec <__mulsf3>
    1270:	5b 01       	movw	r10, r22
    1272:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1274:	20 e0       	ldi	r18, 0x00	; 0
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	4a e7       	ldi	r20, 0x7A	; 122
    127a:	55 e4       	ldi	r21, 0x45	; 69
    127c:	0e 94 f6 14 	call	0x29ec	; 0x29ec <__mulsf3>
    1280:	7b 01       	movw	r14, r22
    1282:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    1284:	20 e0       	ldi	r18, 0x00	; 0
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	40 e8       	ldi	r20, 0x80	; 128
    128a:	5f e3       	ldi	r21, 0x3F	; 63
    128c:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <__ltsf2>
    1290:	88 23       	and	r24, r24
    1292:	1c f4       	brge	.+6      	; 0x129a <ADC_LoadingAndEvalIt+0x16e>
    1294:	61 e0       	ldi	r22, 0x01	; 1
    1296:	70 e0       	ldi	r23, 0x00	; 0
    1298:	22 c0       	rjmp	.+68     	; 0x12de <ADC_LoadingAndEvalIt+0x1b2>
		__ticks = 1;
	else if (__tmp > 65535)
    129a:	c8 01       	movw	r24, r16
    129c:	b7 01       	movw	r22, r14
    129e:	20 e0       	ldi	r18, 0x00	; 0
    12a0:	3f ef       	ldi	r19, 0xFF	; 255
    12a2:	4f e7       	ldi	r20, 0x7F	; 127
    12a4:	57 e4       	ldi	r21, 0x47	; 71
    12a6:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <__gtsf2>
    12aa:	18 16       	cp	r1, r24
    12ac:	a4 f4       	brge	.+40     	; 0x12d6 <ADC_LoadingAndEvalIt+0x1aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12ae:	c6 01       	movw	r24, r12
    12b0:	b5 01       	movw	r22, r10
    12b2:	20 e0       	ldi	r18, 0x00	; 0
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	40 e2       	ldi	r20, 0x20	; 32
    12b8:	51 e4       	ldi	r21, 0x41	; 65
    12ba:	0e 94 f6 14 	call	0x29ec	; 0x29ec <__mulsf3>
    12be:	0e 94 20 13 	call	0x2640	; 0x2640 <__fixunssfsi>
    12c2:	05 c0       	rjmp	.+10     	; 0x12ce <ADC_LoadingAndEvalIt+0x1a2>
    12c4:	c2 01       	movw	r24, r4
    12c6:	01 97       	sbiw	r24, 0x01	; 1
    12c8:	f1 f7       	brne	.-4      	; 0x12c6 <ADC_LoadingAndEvalIt+0x19a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12ca:	61 50       	subi	r22, 0x01	; 1
    12cc:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12ce:	61 15       	cp	r22, r1
    12d0:	71 05       	cpc	r23, r1
    12d2:	c1 f7       	brne	.-16     	; 0x12c4 <ADC_LoadingAndEvalIt+0x198>
    12d4:	07 c0       	rjmp	.+14     	; 0x12e4 <ADC_LoadingAndEvalIt+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12d6:	c8 01       	movw	r24, r16
    12d8:	b7 01       	movw	r22, r14
    12da:	0e 94 20 13 	call	0x2640	; 0x2640 <__fixunssfsi>
    12de:	cb 01       	movw	r24, r22
    12e0:	01 97       	sbiw	r24, 0x01	; 1
    12e2:	f1 f7       	brne	.-4      	; 0x12e0 <ADC_LoadingAndEvalIt+0x1b4>

//		Lcd3310_Char('#', BLACK_TEXT_ON_WHITE);
//		alg_state++;
//		usbPoll();

		ADC_N_Times();
    12e4:	0e 94 ac 07 	call	0xf58	; 0xf58 <ADC_N_Times>
		Lcd3310_Char('#', BLACK_TEXT_ON_WHITE);
    12e8:	83 e2       	ldi	r24, 0x23	; 35
    12ea:	60 e0       	ldi	r22, 0x00	; 0
    12ec:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <Lcd3310_Char>
		alg_state++;
    12f0:	80 91 58 03 	lds	r24, 0x0358
    12f4:	8f 5f       	subi	r24, 0xFF	; 255
    12f6:	80 93 58 03 	sts	0x0358, r24
		usbPoll();
    12fa:	0e 94 94 02 	call	0x528	; 0x528 <usbPoll>

		// Start Algorithm
		(evalMe)(color);
    12fe:	89 2d       	mov	r24, r9
    1300:	f3 01       	movw	r30, r6
    1302:	09 95       	icall
	Lcd3310_Char('[', BLACK_TEXT_ON_WHITE);

	alg_state = STARTS;
	usbPoll();

	for(uint8_t color=0; color < 3; color++){
    1304:	93 94       	inc	r9
    1306:	22 96       	adiw	r28, 0x02	; 2
    1308:	83 e0       	ldi	r24, 0x03	; 3
    130a:	98 16       	cp	r9, r24
    130c:	09 f0       	breq	.+2      	; 0x1310 <ADC_LoadingAndEvalIt+0x1e4>
    130e:	49 cf       	rjmp	.-366    	; 0x11a2 <ADC_LoadingAndEvalIt+0x76>

		// Start Algorithm
		(evalMe)(color);
	}
//	LedDriver_SwitchLeds( 0x0000 );
	alg_state = ENDS;
    1310:	81 e2       	ldi	r24, 0x21	; 33
    1312:	80 93 58 03 	sts	0x0358, r24
	usbPoll();
    1316:	0e 94 94 02 	call	0x528	; 0x528 <usbPoll>
	LedDriver_SwitchLeds( RED_LEDS | GREEN_LEDS | BLUE_LEDS );
    131a:	8c ef       	ldi	r24, 0xFC	; 252
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	0e 94 c8 09 	call	0x1390	; 0x1390 <LedDriver_SwitchLeds>
	Lcd3310_Char(']', BLACK_TEXT_ON_WHITE);
    1322:	8d e5       	ldi	r24, 0x5D	; 93
    1324:	60 e0       	ldi	r22, 0x00	; 0
    1326:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <Lcd3310_Char>


	Lcd3310_GotoXY(2, 5);
    132a:	82 e0       	ldi	r24, 0x02	; 2
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	65 e0       	ldi	r22, 0x05	; 5
    1330:	70 e0       	ldi	r23, 0x00	; 0
    1332:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <Lcd3310_GotoXY>
	Lcd3310_String_P( pstr_complete, BLACK_TEXT_ON_WHITE );
    1336:	80 91 f1 00 	lds	r24, 0x00F1
    133a:	90 91 f2 00 	lds	r25, 0x00F2
    133e:	60 e0       	ldi	r22, 0x00	; 0
    1340:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <Lcd3310_String_P>
    1344:	88 e8       	ldi	r24, 0x88	; 136
    1346:	93 e1       	ldi	r25, 0x13	; 19
    1348:	20 e9       	ldi	r18, 0x90	; 144
    134a:	31 e0       	ldi	r19, 0x01	; 1
    134c:	f9 01       	movw	r30, r18
    134e:	31 97       	sbiw	r30, 0x01	; 1
    1350:	f1 f7       	brne	.-4      	; 0x134e <ADC_LoadingAndEvalIt+0x222>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1352:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1354:	d9 f7       	brne	.-10     	; 0x134c <ADC_LoadingAndEvalIt+0x220>
	_delay_ms(500); // show complete and wait 0.5 sec

	alg_state = HAS_CHANGES;
    1356:	8f ef       	ldi	r24, 0xFF	; 255
    1358:	80 93 58 03 	sts	0x0358, r24
	usbPoll();
    135c:	0e 94 94 02 	call	0x528	; 0x528 <usbPoll>

	JOYSTICK_INT_ENABLE();
    1360:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1362:	f8 94       	cli
    1364:	80 e4       	ldi	r24, 0x40	; 64
    1366:	8a bf       	out	0x3a, r24	; 58
    1368:	8b b7       	in	r24, 0x3b	; 59
    136a:	80 68       	ori	r24, 0x80	; 128
    136c:	8b bf       	out	0x3b, r24	; 59
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    136e:	9f bf       	out	0x3f, r25	; 63
}
    1370:	df 91       	pop	r29
    1372:	cf 91       	pop	r28
    1374:	1f 91       	pop	r17
    1376:	0f 91       	pop	r16
    1378:	ff 90       	pop	r15
    137a:	ef 90       	pop	r14
    137c:	df 90       	pop	r13
    137e:	cf 90       	pop	r12
    1380:	bf 90       	pop	r11
    1382:	af 90       	pop	r10
    1384:	9f 90       	pop	r9
    1386:	7f 90       	pop	r7
    1388:	6f 90       	pop	r6
    138a:	5f 90       	pop	r5
    138c:	4f 90       	pop	r4
    138e:	08 95       	ret

00001390 <LedDriver_SwitchLeds>:

#include "led_driver.h"


void LedDriver_SwitchLeds(uint16_t data)
{
    1390:	ac 01       	movw	r20, r24
    1392:	20 e0       	ldi	r18, 0x00	; 0
    1394:	30 e0       	ldi	r19, 0x00	; 0
	char i;
	for(i=0; i<16; i++){
		CLK_DOWN;
		if(data & _BV(i)){
    1396:	61 e0       	ldi	r22, 0x01	; 1
    1398:	70 e0       	ldi	r23, 0x00	; 0

void LedDriver_SwitchLeds(uint16_t data)
{
	char i;
	for(i=0; i<16; i++){
		CLK_DOWN;
    139a:	db 98       	cbi	0x1b, 3	; 27
		if(data & _BV(i)){
    139c:	cb 01       	movw	r24, r22
    139e:	02 2e       	mov	r0, r18
    13a0:	02 c0       	rjmp	.+4      	; 0x13a6 <LedDriver_SwitchLeds+0x16>
    13a2:	88 0f       	add	r24, r24
    13a4:	99 1f       	adc	r25, r25
    13a6:	0a 94       	dec	r0
    13a8:	e2 f7       	brpl	.-8      	; 0x13a2 <LedDriver_SwitchLeds+0x12>
    13aa:	84 23       	and	r24, r20
    13ac:	95 23       	and	r25, r21
    13ae:	89 2b       	or	r24, r25
    13b0:	11 f0       	breq	.+4      	; 0x13b6 <LedDriver_SwitchLeds+0x26>
			LED_DR_PORT |= DATA_PIN;
    13b2:	da 9a       	sbi	0x1b, 2	; 27
    13b4:	01 c0       	rjmp	.+2      	; 0x13b8 <LedDriver_SwitchLeds+0x28>
		}else{
			LED_DR_PORT &= (uint8_t)~DATA_PIN;
    13b6:	da 98       	cbi	0x1b, 2	; 27
		}
		CLK_UP;
    13b8:	db 9a       	sbi	0x1b, 3	; 27
    13ba:	2f 5f       	subi	r18, 0xFF	; 255
    13bc:	3f 4f       	sbci	r19, 0xFF	; 255


void LedDriver_SwitchLeds(uint16_t data)
{
	char i;
	for(i=0; i<16; i++){
    13be:	20 31       	cpi	r18, 0x10	; 16
    13c0:	31 05       	cpc	r19, r1
    13c2:	59 f7       	brne	.-42     	; 0x139a <LedDriver_SwitchLeds+0xa>
		}else{
			LED_DR_PORT &= (uint8_t)~DATA_PIN;
		}
		CLK_UP;
	}
	LATCH_PULSE;
    13c4:	dc 9a       	sbi	0x1b, 4	; 27
    13c6:	00 00       	nop
    13c8:	dc 98       	cbi	0x1b, 4	; 27
}
    13ca:	08 95       	ret

000013cc <LedDriver_PWM>:

void LedDriver_PWM(uint8_t pwm, uint16_t leds)
{
    13cc:	1f 93       	push	r17
    13ce:	18 2f       	mov	r17, r24
    13d0:	cb 01       	movw	r24, r22
	uint8_t temp = pwm;
	LedDriver_SwitchLeds(leds); // switch on leds
    13d2:	0e 94 c8 09 	call	0x1390	; 0x1390 <LedDriver_SwitchLeds>
    13d6:	81 2f       	mov	r24, r17
    13d8:	02 c0       	rjmp	.+4      	; 0x13de <LedDriver_PWM+0x12>
	while(temp--){__asm__ __volatile__("nop");}
    13da:	00 00       	nop
    13dc:	81 50       	subi	r24, 0x01	; 1
    13de:	88 23       	and	r24, r24
    13e0:	e1 f7       	brne	.-8      	; 0x13da <LedDriver_PWM+0xe>
	temp = (uint8_t)~pwm;
    13e2:	10 95       	com	r17
	LedDriver_SwitchLeds(0x00); // switch off all leds
    13e4:	80 e0       	ldi	r24, 0x00	; 0
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	0e 94 c8 09 	call	0x1390	; 0x1390 <LedDriver_SwitchLeds>
    13ec:	02 c0       	rjmp	.+4      	; 0x13f2 <LedDriver_PWM+0x26>
	while(temp--){__asm__ __volatile__("nop");}
    13ee:	00 00       	nop
    13f0:	11 50       	subi	r17, 0x01	; 1
    13f2:	11 23       	and	r17, r17
    13f4:	e1 f7       	brne	.-8      	; 0x13ee <LedDriver_PWM+0x22>
	LedDriver_SwitchLeds(0x00);
    13f6:	80 e0       	ldi	r24, 0x00	; 0
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	0e 94 c8 09 	call	0x1390	; 0x1390 <LedDriver_SwitchLeds>
}
    13fe:	1f 91       	pop	r17
    1400:	08 95       	ret

00001402 <LedDriver_Init>:

void LedDriver_Init(void)
{
	LATCH_DOWN;
    1402:	dc 98       	cbi	0x1b, 4	; 27
	CLK_DOWN;
    1404:	db 98       	cbi	0x1b, 3	; 27
	LED_DR_DDR |= DATA_PIN | CLK_PIN | LATCH_PIN;
    1406:	8a b3       	in	r24, 0x1a	; 26
    1408:	8c 61       	ori	r24, 0x1C	; 28
    140a:	8a bb       	out	0x1a, r24	; 26
	LedDriver_SwitchLeds(0x00);
    140c:	80 e0       	ldi	r24, 0x00	; 0
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	0e 94 c8 09 	call	0x1390	; 0x1390 <LedDriver_SwitchLeds>
}
    1414:	08 95       	ret

00001416 <LedDriver_Switch_3_Leds>:

void LedDriver_Switch_3_Leds(uint8_t data)
{
    1416:	20 e0       	ldi	r18, 0x00	; 0
    1418:	30 e0       	ldi	r19, 0x00	; 0
	// data mb: RED_LS, GREEN_LS, BLUE_LS

	for(uint8_t i=0; i < 3; i++){
		CLK_DOWN;
		if(data & _BV(i)){
    141a:	48 2f       	mov	r20, r24
    141c:	50 e0       	ldi	r21, 0x00	; 0
void LedDriver_Switch_3_Leds(uint8_t data)
{
	// data mb: RED_LS, GREEN_LS, BLUE_LS

	for(uint8_t i=0; i < 3; i++){
		CLK_DOWN;
    141e:	db 98       	cbi	0x1b, 3	; 27
		if(data & _BV(i)){
    1420:	ca 01       	movw	r24, r20
    1422:	02 2e       	mov	r0, r18
    1424:	02 c0       	rjmp	.+4      	; 0x142a <LedDriver_Switch_3_Leds+0x14>
    1426:	95 95       	asr	r25
    1428:	87 95       	ror	r24
    142a:	0a 94       	dec	r0
    142c:	e2 f7       	brpl	.-8      	; 0x1426 <LedDriver_Switch_3_Leds+0x10>
    142e:	80 ff       	sbrs	r24, 0
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <LedDriver_Switch_3_Leds+0x20>
			LED_DR_PORT |= DATA_PIN;
    1432:	da 9a       	sbi	0x1b, 2	; 27
    1434:	01 c0       	rjmp	.+2      	; 0x1438 <LedDriver_Switch_3_Leds+0x22>
		}else{
			LED_DR_PORT &= (uint8_t)~DATA_PIN;
    1436:	da 98       	cbi	0x1b, 2	; 27
		}
		CLK_UP;
    1438:	db 9a       	sbi	0x1b, 3	; 27
    143a:	2f 5f       	subi	r18, 0xFF	; 255
    143c:	3f 4f       	sbci	r19, 0xFF	; 255

void LedDriver_Switch_3_Leds(uint8_t data)
{
	// data mb: RED_LS, GREEN_LS, BLUE_LS

	for(uint8_t i=0; i < 3; i++){
    143e:	23 30       	cpi	r18, 0x03	; 3
    1440:	31 05       	cpc	r19, r1
    1442:	69 f7       	brne	.-38     	; 0x141e <LedDriver_Switch_3_Leds+0x8>
		}else{
			LED_DR_PORT &= (uint8_t)~DATA_PIN;
		}
		CLK_UP;
	}
	LATCH_PULSE;
    1444:	dc 9a       	sbi	0x1b, 4	; 27
    1446:	00 00       	nop
    1448:	dc 98       	cbi	0x1b, 4	; 27
}
    144a:	08 95       	ret

0000144c <DebugSendAllResultValues>:



void DebugSendAllResultValues(void)
{
	ATOMIC_BLOCK( ATOMIC_RESTORESTATE ){
    144c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    144e:	f8 94       	cli
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1450:	8f bf       	out	0x3f, r24	; 63
//
//	DEBUG_PRINT_CHAR( 'D' );
//	DEBUG_PRINT_UINT16( ( result[DIFF_INDX][RED] ) );
//	DEBUG_PRINT_UINT16( ( result[DIFF_INDX][GREEN] ) );
//	DEBUG_PRINT_UINT16( ( result[DIFF_INDX][BLUE] ) );
}
    1452:	08 95       	ret

00001454 <main>:




int main(void)
{
    1454:	1f 93       	push	r17

	DEBUG_INIT(); // Initialize uart if DEBUG > 0
	DEBUG_PRINT_CHAR( 0x01 );

	PORTA = 0x00;
    1456:	1b ba       	out	0x1b, r1	; 27
	DDRA = 0x00;
    1458:	1a ba       	out	0x1a, r1	; 26

	// Input/Output Ports initialization
    PORTB = 0x00;
    145a:	18 ba       	out	0x18, r1	; 24
    DDRB = 0x00;
    145c:	17 ba       	out	0x17, r1	; 23

	LED_PORT = 0x00;
    145e:	15 ba       	out	0x15, r1	; 21
	LED_DDR |= LED_P;
    1460:	a3 9a       	sbi	0x14, 3	; 20

    PORTD |= J_C; // pull up joystick center button
    1462:	93 9a       	sbi	0x12, 3	; 18
    DDRD = 0x00;
    1464:	11 ba       	out	0x11, r1	; 17


    JPORT |= (uint8_t)(J_RU | J_LU | J_RD | J_LD);
    1466:	85 b3       	in	r24, 0x15	; 21
    1468:	80 6f       	ori	r24, 0xF0	; 240
    146a:	85 bb       	out	0x15, r24	; 21
    JDDR &= (uint8_t)~(J_RU | J_LU | J_RD | J_LD);
    146c:	84 b3       	in	r24, 0x14	; 20
    146e:	8f 70       	andi	r24, 0x0F	; 15
    1470:	84 bb       	out	0x14, r24	; 20


    ACSR = _BV(ACD); // turn off analog comparer, this is turns ON after RESET... delurium, but the fact ;)
    1472:	90 e8       	ldi	r25, 0x80	; 128
    1474:	98 b9       	out	0x08, r25	; 8

    // External Interrupt(s) initialization
    MCUCR= _BV(ISC11); // fall
    1476:	88 e0       	ldi	r24, 0x08	; 8
    1478:	85 bf       	out	0x35, r24	; 53
    GICR =  _BV(INT1); // joystick on int1 enable interrupt
    147a:	9b bf       	out	0x3b, r25	; 59

    ASSR = 0x00;
    147c:	12 bc       	out	0x22, r1	; 34
    TCCR0 = 0x00;
    147e:	13 be       	out	0x33, r1	; 51
    TCCR1A = 0x00;
    1480:	1f bc       	out	0x2f, r1	; 47
    TCCR1B = 0x00;
    1482:	1e bc       	out	0x2e, r1	; 46
    TCCR2 = 0x00;
    1484:	15 bc       	out	0x25, r1	; 37
    TIMSK = 0x00;
    1486:	19 be       	out	0x39, r1	; 57

    usbInit_FakeUsbDisconnect();
    1488:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <usbInit_FakeUsbDisconnect>

    TIM2_INIT(); // see defines.h for details
    148c:	86 e0       	ldi	r24, 0x06	; 6
    148e:	85 bd       	out	0x25, r24	; 37

    // Init ADC
	ADMUX =  _BV(MUX3) | _BV(MUX0); // diff * 10; result in ADC
    1490:	89 e0       	ldi	r24, 0x09	; 9
    1492:	87 b9       	out	0x07, r24	; 7
	ADCSRA = _BV(ADEN) | _BV(ADPS2)  | _BV(ADPS1) | _BV(ADPS0); // F_CPU / 128;
    1494:	87 e8       	ldi	r24, 0x87	; 135
    1496:	86 b9       	out	0x06, r24	; 6

	// Make first conversation
	ADCSRA |= _BV( ADSC );
    1498:	36 9a       	sbi	0x06, 6	; 6
	while(ADC_CONVERT_IN_PROGRESS()){}
    149a:	36 99       	sbic	0x06, 6	; 6
    149c:	fe cf       	rjmp	.-4      	; 0x149a <main+0x46>
	adc_data = ADC;
    149e:	84 b1       	in	r24, 0x04	; 4
    14a0:	95 b1       	in	r25, 0x05	; 5
    14a2:	90 93 84 03 	sts	0x0384, r25
    14a6:	80 93 83 03 	sts	0x0383, r24

    usbPoll();
    14aa:	0e 94 94 02 	call	0x528	; 0x528 <usbPoll>

	LedDriver_Init();
    14ae:	0e 94 01 0a 	call	0x1402	; 0x1402 <LedDriver_Init>
	usbPoll();
    14b2:	0e 94 94 02 	call	0x528	; 0x528 <usbPoll>
//	LedDriver_SwitchLeds(0x0000);
	LedDriver_SwitchLeds( RED_LEDS | GREEN_LEDS );
    14b6:	88 ed       	ldi	r24, 0xD8	; 216
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	0e 94 c8 09 	call	0x1390	; 0x1390 <LedDriver_SwitchLeds>
	usbPoll();
    14be:	0e 94 94 02 	call	0x528	; 0x528 <usbPoll>

	Lcd3310_InitializeDisplay( DELAY_SHOW_SPLASH );
    14c2:	88 ee       	ldi	r24, 0xE8	; 232
    14c4:	93 e0       	ldi	r25, 0x03	; 3
    14c6:	0e 94 a7 12 	call	0x254e	; 0x254e <Lcd3310_InitializeDisplay>
	usbPoll();
    14ca:	0e 94 94 02 	call	0x528	; 0x528 <usbPoll>
//	DEBUG_PRINT_CHAR( 0x02 );



	sei();
    14ce:	78 94       	sei

		IF_FLAG_ON( ADC_RESULT_FLAG ){ // in menu adc result

			ADC_LoadingAndEvalIt(MeasureAllAlgorithm);

			alg_state = 0xff;
    14d0:	1f ef       	ldi	r17, 0xFF	; 255
//   			PORTB &=(uint8_t)~ _BV( PB6 );
//   		}else{
//   			PORTB = _BV( PB6 );
//   		}

   		usbPoll();
    14d2:	0e 94 94 02 	call	0x528	; 0x528 <usbPoll>

   		IF_FLAG_ON( UPDATE_DISPLAY_FLAG ){
    14d6:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    14d8:	f8 94       	cli
    14da:	20 91 85 03 	lds	r18, 0x0385
    14de:	30 91 86 03 	lds	r19, 0x0386
    14e2:	30 93 88 03 	sts	0x0388, r19
    14e6:	20 93 87 03 	sts	0x0387, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    14ea:	8f bf       	out	0x3f, r24	; 63
    14ec:	80 91 87 03 	lds	r24, 0x0387
    14f0:	80 ff       	sbrs	r24, 0
    14f2:	1d c0       	rjmp	.+58     	; 0x152e <main+0xda>
			FLAGS_SWITCH_OFF( UPDATE_DISPLAY_FLAG );
    14f4:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    14f6:	f8 94       	cli
    14f8:	80 91 85 03 	lds	r24, 0x0385
    14fc:	90 91 86 03 	lds	r25, 0x0386
    1500:	8e 7f       	andi	r24, 0xFE	; 254
    1502:	90 93 86 03 	sts	0x0386, r25
    1506:	80 93 85 03 	sts	0x0385, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    150a:	2f bf       	out	0x3f, r18	; 63

			IF_FLAG_OFF( SNAKE_PLAYING_NOW_FLAG ){
    150c:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    150e:	f8 94       	cli
    1510:	80 91 85 03 	lds	r24, 0x0385
    1514:	90 91 86 03 	lds	r25, 0x0386
    1518:	90 93 88 03 	sts	0x0388, r25
    151c:	80 93 87 03 	sts	0x0387, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1520:	2f bf       	out	0x3f, r18	; 63
    1522:	80 91 87 03 	lds	r24, 0x0387
    1526:	86 fd       	sbrc	r24, 6
    1528:	02 c0       	rjmp	.+4      	; 0x152e <main+0xda>
				Lcd3310_UpdateDisplayInfo();
    152a:	0e 94 ef 10 	call	0x21de	; 0x21de <Lcd3310_UpdateDisplayInfo>
			}
		}

		IF_FLAG_ON( JOYSTICK_CENTER_CLICK_FLAG ){
    152e:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1530:	f8 94       	cli
    1532:	20 91 85 03 	lds	r18, 0x0385
    1536:	30 91 86 03 	lds	r19, 0x0386
    153a:	30 93 88 03 	sts	0x0388, r19
    153e:	20 93 87 03 	sts	0x0387, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1542:	8f bf       	out	0x3f, r24	; 63
    1544:	80 91 87 03 	lds	r24, 0x0387
    1548:	81 ff       	sbrs	r24, 1
    154a:	1a c0       	rjmp	.+52     	; 0x1580 <main+0x12c>
			FLAGS_SWITCH_OFF( JOYSTICK_CENTER_CLICK_FLAG );
    154c:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    154e:	f8 94       	cli
    1550:	80 91 85 03 	lds	r24, 0x0385
    1554:	90 91 86 03 	lds	r25, 0x0386
    1558:	8d 7f       	andi	r24, 0xFD	; 253
    155a:	90 93 86 03 	sts	0x0386, r25
    155e:	80 93 85 03 	sts	0x0385, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1562:	2f bf       	out	0x3f, r18	; 63

			Menu_EnterClick();
    1564:	0e 94 b2 12 	call	0x2564	; 0x2564 <Menu_EnterClick>

			FLAGS_SWITCH_ON( UPDATE_DISPLAY_FLAG );
    1568:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    156a:	f8 94       	cli
    156c:	80 91 85 03 	lds	r24, 0x0385
    1570:	90 91 86 03 	lds	r25, 0x0386
    1574:	81 60       	ori	r24, 0x01	; 1
    1576:	90 93 86 03 	sts	0x0386, r25
    157a:	80 93 85 03 	sts	0x0385, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    157e:	2f bf       	out	0x3f, r18	; 63
		}



		IF_FLAG_ON( ADC_RESULT_FLAG ){ // in menu adc result
    1580:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1582:	f8 94       	cli
    1584:	20 91 85 03 	lds	r18, 0x0385
    1588:	30 91 86 03 	lds	r19, 0x0386
    158c:	30 93 88 03 	sts	0x0388, r19
    1590:	20 93 87 03 	sts	0x0387, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1594:	8f bf       	out	0x3f, r24	; 63
    1596:	80 91 87 03 	lds	r24, 0x0387
    159a:	84 ff       	sbrs	r24, 4
    159c:	1e c0       	rjmp	.+60     	; 0x15da <main+0x186>

			ADC_LoadingAndEvalIt(MeasureAllAlgorithm);
    159e:	8a ee       	ldi	r24, 0xEA	; 234
    15a0:	97 e0       	ldi	r25, 0x07	; 7
    15a2:	0e 94 96 08 	call	0x112c	; 0x112c <ADC_LoadingAndEvalIt>

			alg_state = 0xff;
    15a6:	10 93 58 03 	sts	0x0358, r17

//			DebugSendAllResultValues();

			FLAGS_SWITCH_OFF( ADC_RESULT_FLAG );
    15aa:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    15ac:	f8 94       	cli
    15ae:	80 91 85 03 	lds	r24, 0x0385
    15b2:	90 91 86 03 	lds	r25, 0x0386
    15b6:	8f 7e       	andi	r24, 0xEF	; 239
    15b8:	90 93 86 03 	sts	0x0386, r25
    15bc:	80 93 85 03 	sts	0x0385, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    15c0:	2f bf       	out	0x3f, r18	; 63
			FLAGS_SWITCH_ON( UPDATE_DISPLAY_FLAG );
    15c2:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    15c4:	f8 94       	cli
    15c6:	80 91 85 03 	lds	r24, 0x0385
    15ca:	90 91 86 03 	lds	r25, 0x0386
    15ce:	81 60       	ori	r24, 0x01	; 1
    15d0:	90 93 86 03 	sts	0x0386, r25
    15d4:	80 93 85 03 	sts	0x0385, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    15d8:	2f bf       	out	0x3f, r18	; 63
		}

		IF_FLAG_ON( ADC_CALIBRATE_FLAG ){
    15da:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    15dc:	f8 94       	cli
    15de:	20 91 85 03 	lds	r18, 0x0385
    15e2:	30 91 86 03 	lds	r19, 0x0386
    15e6:	30 93 88 03 	sts	0x0388, r19
    15ea:	20 93 87 03 	sts	0x0387, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    15ee:	8f bf       	out	0x3f, r24	; 63
    15f0:	80 91 87 03 	lds	r24, 0x0387
    15f4:	85 ff       	sbrs	r24, 5
    15f6:	10 c0       	rjmp	.+32     	; 0x1618 <main+0x1c4>

			ADC_LoadingAndEvalIt(CalibrationAlgorithm);
    15f8:	8f e0       	ldi	r24, 0x0F	; 15
    15fa:	98 e0       	ldi	r25, 0x08	; 8
    15fc:	0e 94 96 08 	call	0x112c	; 0x112c <ADC_LoadingAndEvalIt>

			FLAGS_SWITCH_OFF( ADC_CALIBRATE_FLAG );
    1600:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1602:	f8 94       	cli
    1604:	80 91 85 03 	lds	r24, 0x0385
    1608:	90 91 86 03 	lds	r25, 0x0386
    160c:	8f 7d       	andi	r24, 0xDF	; 223
    160e:	90 93 86 03 	sts	0x0386, r25
    1612:	80 93 85 03 	sts	0x0385, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1616:	2f bf       	out	0x3f, r18	; 63
		}

		IF_FLAG_ON( SAVE_MEASURED_AS_CALIBRATE_FLAG ){
    1618:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    161a:	f8 94       	cli
    161c:	20 91 85 03 	lds	r18, 0x0385
    1620:	30 91 86 03 	lds	r19, 0x0386
    1624:	30 93 88 03 	sts	0x0388, r19
    1628:	20 93 87 03 	sts	0x0387, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    162c:	8f bf       	out	0x3f, r24	; 63
    162e:	80 91 87 03 	lds	r24, 0x0387
    1632:	90 91 88 03 	lds	r25, 0x0388
    1636:	91 ff       	sbrs	r25, 1
    1638:	1d c0       	rjmp	.+58     	; 0x1674 <main+0x220>
			FLAGS_SWITCH_OFF( SAVE_MEASURED_AS_CALIBRATE_FLAG );
    163a:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    163c:	f8 94       	cli
    163e:	80 91 85 03 	lds	r24, 0x0385
    1642:	90 91 86 03 	lds	r25, 0x0386
    1646:	9d 7f       	andi	r25, 0xFD	; 253
    1648:	90 93 86 03 	sts	0x0386, r25
    164c:	80 93 85 03 	sts	0x0385, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1650:	2f bf       	out	0x3f, r18	; 63

			SaveMeasureResultsToCalibrate();
    1652:	0e 94 1c 08 	call	0x1038	; 0x1038 <SaveMeasureResultsToCalibrate>



void DebugSendAllResultValues(void)
{
	ATOMIC_BLOCK( ATOMIC_RESTORESTATE ){
    1656:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1658:	f8 94       	cli
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    165a:	8f bf       	out	0x3f, r24	; 63
			FLAGS_SWITCH_OFF( SAVE_MEASURED_AS_CALIBRATE_FLAG );

			SaveMeasureResultsToCalibrate();
			DebugSendAllResultValues();

			FLAGS_SWITCH_ON( UPDATE_DISPLAY_FLAG );
    165c:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    165e:	f8 94       	cli
    1660:	80 91 85 03 	lds	r24, 0x0385
    1664:	90 91 86 03 	lds	r25, 0x0386
    1668:	81 60       	ori	r24, 0x01	; 1
    166a:	90 93 86 03 	sts	0x0386, r25
    166e:	80 93 85 03 	sts	0x0385, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1672:	2f bf       	out	0x3f, r18	; 63
		}


	#ifdef ANIMATION_SWITCH_MENU_ITEMS
		IF_FLAG_ON( ANIMATION_NEXT_FLAG ){
    1674:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1676:	f8 94       	cli
    1678:	20 91 85 03 	lds	r18, 0x0385
    167c:	30 91 86 03 	lds	r19, 0x0386
    1680:	30 93 88 03 	sts	0x0388, r19
    1684:	20 93 87 03 	sts	0x0387, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1688:	8f bf       	out	0x3f, r24	; 63
    168a:	80 91 87 03 	lds	r24, 0x0387
    168e:	82 ff       	sbrs	r24, 2
    1690:	26 c0       	rjmp	.+76     	; 0x16de <main+0x28a>
			FLAGS_SWITCH_OFF( ANIMATION_NEXT_FLAG );
    1692:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1694:	f8 94       	cli
    1696:	80 91 85 03 	lds	r24, 0x0385
    169a:	90 91 86 03 	lds	r25, 0x0386
    169e:	8b 7f       	andi	r24, 0xFB	; 251
    16a0:	90 93 86 03 	sts	0x0386, r25
    16a4:	80 93 85 03 	sts	0x0385, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    16a8:	2f bf       	out	0x3f, r18	; 63
			if(menu_now != &results && menu_now != &snake_results){
    16aa:	80 91 c9 03 	lds	r24, 0x03C9
    16ae:	90 91 ca 03 	lds	r25, 0x03CA
    16b2:	21 e0       	ldi	r18, 0x01	; 1
    16b4:	82 34       	cpi	r24, 0x42	; 66
    16b6:	92 07       	cpc	r25, r18
    16b8:	31 f0       	breq	.+12     	; 0x16c6 <main+0x272>
    16ba:	86 57       	subi	r24, 0x76	; 118
    16bc:	91 40       	sbci	r25, 0x01	; 1
    16be:	19 f0       	breq	.+6      	; 0x16c6 <main+0x272>
				Lcd3310_AnimationSwitchMenuItems(1);
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	0e 94 18 12 	call	0x2430	; 0x2430 <Lcd3310_AnimationSwitchMenuItems>
			}
			FLAGS_SWITCH_ON( UPDATE_DISPLAY_FLAG );
    16c6:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    16c8:	f8 94       	cli
    16ca:	80 91 85 03 	lds	r24, 0x0385
    16ce:	90 91 86 03 	lds	r25, 0x0386
    16d2:	81 60       	ori	r24, 0x01	; 1
    16d4:	90 93 86 03 	sts	0x0386, r25
    16d8:	80 93 85 03 	sts	0x0385, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    16dc:	2f bf       	out	0x3f, r18	; 63
		}
		IF_FLAG_ON( ANIMATION_PREV_FLAG ){
    16de:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    16e0:	f8 94       	cli
    16e2:	20 91 85 03 	lds	r18, 0x0385
    16e6:	30 91 86 03 	lds	r19, 0x0386
    16ea:	30 93 88 03 	sts	0x0388, r19
    16ee:	20 93 87 03 	sts	0x0387, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    16f2:	8f bf       	out	0x3f, r24	; 63
    16f4:	80 91 87 03 	lds	r24, 0x0387
    16f8:	83 ff       	sbrs	r24, 3
    16fa:	26 c0       	rjmp	.+76     	; 0x1748 <main+0x2f4>
			FLAGS_SWITCH_OFF( ANIMATION_PREV_FLAG );
    16fc:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    16fe:	f8 94       	cli
    1700:	80 91 85 03 	lds	r24, 0x0385
    1704:	90 91 86 03 	lds	r25, 0x0386
    1708:	87 7f       	andi	r24, 0xF7	; 247
    170a:	90 93 86 03 	sts	0x0386, r25
    170e:	80 93 85 03 	sts	0x0385, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1712:	2f bf       	out	0x3f, r18	; 63
			if(menu_now != &results && menu_now != &snake_results){
    1714:	80 91 c9 03 	lds	r24, 0x03C9
    1718:	90 91 ca 03 	lds	r25, 0x03CA
    171c:	21 e0       	ldi	r18, 0x01	; 1
    171e:	82 34       	cpi	r24, 0x42	; 66
    1720:	92 07       	cpc	r25, r18
    1722:	31 f0       	breq	.+12     	; 0x1730 <main+0x2dc>
    1724:	86 57       	subi	r24, 0x76	; 118
    1726:	91 40       	sbci	r25, 0x01	; 1
    1728:	19 f0       	breq	.+6      	; 0x1730 <main+0x2dc>
				Lcd3310_AnimationSwitchMenuItems(0);
    172a:	80 e0       	ldi	r24, 0x00	; 0
    172c:	0e 94 18 12 	call	0x2430	; 0x2430 <Lcd3310_AnimationSwitchMenuItems>
			}
			FLAGS_SWITCH_ON( UPDATE_DISPLAY_FLAG );
    1730:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1732:	f8 94       	cli
    1734:	80 91 85 03 	lds	r24, 0x0385
    1738:	90 91 86 03 	lds	r25, 0x0386
    173c:	81 60       	ori	r24, 0x01	; 1
    173e:	90 93 86 03 	sts	0x0386, r25
    1742:	80 93 85 03 	sts	0x0385, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1746:	2f bf       	out	0x3f, r18	; 63
		}
	#endif

		IF_FLAG_ON( SNAKE_START_GAME_FLAG ){
    1748:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    174a:	f8 94       	cli
    174c:	20 91 85 03 	lds	r18, 0x0385
    1750:	30 91 86 03 	lds	r19, 0x0386
    1754:	30 93 88 03 	sts	0x0388, r19
    1758:	20 93 87 03 	sts	0x0387, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    175c:	8f bf       	out	0x3f, r24	; 63
    175e:	80 91 87 03 	lds	r24, 0x0387
    1762:	87 ff       	sbrs	r24, 7
    1764:	1e c0       	rjmp	.+60     	; 0x17a2 <main+0x34e>
			FLAGS_SWITCH_OFF( SNAKE_START_GAME_FLAG );
    1766:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1768:	f8 94       	cli
    176a:	80 91 85 03 	lds	r24, 0x0385
    176e:	90 91 86 03 	lds	r25, 0x0386
    1772:	8f 77       	andi	r24, 0x7F	; 127
    1774:	90 93 86 03 	sts	0x0386, r25
    1778:	80 93 85 03 	sts	0x0385, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    177c:	2f bf       	out	0x3f, r18	; 63
			SnakeGame_Start();
    177e:	0e 94 57 06 	call	0xcae	; 0xcae <SnakeGame_Start>
			TIM2_CLR_COUNTER_AND_OVF_ON();
    1782:	14 bc       	out	0x24, r1	; 36
    1784:	89 b7       	in	r24, 0x39	; 57
    1786:	80 64       	ori	r24, 0x40	; 64
    1788:	89 bf       	out	0x39, r24	; 57
			FLAGS_SWITCH_ON( SNAKE_PLAYING_NOW_FLAG );
    178a:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    178c:	f8 94       	cli
    178e:	80 91 85 03 	lds	r24, 0x0385
    1792:	90 91 86 03 	lds	r25, 0x0386
    1796:	80 64       	ori	r24, 0x40	; 64
    1798:	90 93 86 03 	sts	0x0386, r25
    179c:	80 93 85 03 	sts	0x0385, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    17a0:	2f bf       	out	0x3f, r18	; 63
		}
		IF_FLAG_ON( SNAKE_STOP_GAME_FLAG ){
    17a2:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    17a4:	f8 94       	cli
    17a6:	20 91 85 03 	lds	r18, 0x0385
    17aa:	30 91 86 03 	lds	r19, 0x0386
    17ae:	30 93 88 03 	sts	0x0388, r19
    17b2:	20 93 87 03 	sts	0x0387, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    17b6:	8f bf       	out	0x3f, r24	; 63
    17b8:	80 91 87 03 	lds	r24, 0x0387
    17bc:	90 91 88 03 	lds	r25, 0x0388
    17c0:	90 ff       	sbrs	r25, 0
    17c2:	87 ce       	rjmp	.-754    	; 0x14d2 <main+0x7e>
			FLAGS_SWITCH_OFF( SNAKE_STOP_GAME_FLAG );
    17c4:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    17c6:	f8 94       	cli
    17c8:	80 91 85 03 	lds	r24, 0x0385
    17cc:	90 91 86 03 	lds	r25, 0x0386
    17d0:	9e 7f       	andi	r25, 0xFE	; 254
    17d2:	90 93 86 03 	sts	0x0386, r25
    17d6:	80 93 85 03 	sts	0x0385, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    17da:	2f bf       	out	0x3f, r18	; 63
			TIM2_OVF_OFF();
    17dc:	89 b7       	in	r24, 0x39	; 57
    17de:	8f 7b       	andi	r24, 0xBF	; 191
    17e0:	89 bf       	out	0x39, r24	; 57
			SnakeGame_Stop();
    17e2:	0e 94 1b 05 	call	0xa36	; 0xa36 <SnakeGame_Stop>
			FLAGS_SWITCH_OFF( SNAKE_PLAYING_NOW_FLAG );
    17e6:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    17e8:	f8 94       	cli
    17ea:	80 91 85 03 	lds	r24, 0x0385
    17ee:	90 91 86 03 	lds	r25, 0x0386
    17f2:	8f 7b       	andi	r24, 0xBF	; 191
    17f4:	90 93 86 03 	sts	0x0386, r25
    17f8:	80 93 85 03 	sts	0x0385, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    17fc:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    17fe:	69 ce       	rjmp	.-814    	; 0x14d2 <main+0x7e>

00001800 <__vector_5>:
}

//================================================//
//== 			Game timer ticks				==//
ISR(TIMER2_OVF_vect)
{
    1800:	1f 92       	push	r1
    1802:	0f 92       	push	r0
    1804:	0f b6       	in	r0, 0x3f	; 63
    1806:	0f 92       	push	r0
    1808:	11 24       	eor	r1, r1
    180a:	2f 93       	push	r18
    180c:	3f 93       	push	r19
    180e:	4f 93       	push	r20
    1810:	5f 93       	push	r21
    1812:	6f 93       	push	r22
    1814:	7f 93       	push	r23
    1816:	8f 93       	push	r24
    1818:	9f 93       	push	r25
    181a:	af 93       	push	r26
    181c:	bf 93       	push	r27
    181e:	ef 93       	push	r30
    1820:	ff 93       	push	r31
	if(!timer_delay--){
    1822:	80 91 8a 03 	lds	r24, 0x038A
    1826:	81 50       	subi	r24, 0x01	; 1
    1828:	80 93 8a 03 	sts	0x038A, r24
    182c:	8f 5f       	subi	r24, 0xFF	; 255
    182e:	99 f4       	brne	.+38     	; 0x1856 <__vector_5+0x56>
		if(!timer_ticks_to_get_present--){
    1830:	80 91 05 01 	lds	r24, 0x0105
    1834:	81 50       	subi	r24, 0x01	; 1
    1836:	80 93 05 01 	sts	0x0105, r24
    183a:	8f 5f       	subi	r24, 0xFF	; 255
    183c:	31 f4       	brne	.+12     	; 0x184a <__vector_5+0x4a>
			timer_ticks_to_get_present = get_present_speed;
    183e:	80 91 b6 00 	lds	r24, 0x00B6
    1842:	80 93 05 01 	sts	0x0105, r24
			SnakeGame_AddmeUpdateXY();
    1846:	0e 94 44 06 	call	0xc88	; 0xc88 <SnakeGame_AddmeUpdateXY>
		}
		SnakeGame_TakeNextStep();
    184a:	0e 94 82 06 	call	0xd04	; 0xd04 <SnakeGame_TakeNextStep>
		timer_delay = step_speed;
    184e:	80 91 b5 00 	lds	r24, 0x00B5
    1852:	80 93 8a 03 	sts	0x038A, r24
	}
}
    1856:	ff 91       	pop	r31
    1858:	ef 91       	pop	r30
    185a:	bf 91       	pop	r27
    185c:	af 91       	pop	r26
    185e:	9f 91       	pop	r25
    1860:	8f 91       	pop	r24
    1862:	7f 91       	pop	r23
    1864:	6f 91       	pop	r22
    1866:	5f 91       	pop	r21
    1868:	4f 91       	pop	r20
    186a:	3f 91       	pop	r19
    186c:	2f 91       	pop	r18
    186e:	0f 90       	pop	r0
    1870:	0f be       	out	0x3f, r0	; 63
    1872:	0f 90       	pop	r0
    1874:	1f 90       	pop	r1
    1876:	18 95       	reti

00001878 <__vector_2>:


//================================================//
//== 				Joystick click				==//
ISR(INT1_vect)
{
    1878:	1f 92       	push	r1
    187a:	0f 92       	push	r0
    187c:	0f b6       	in	r0, 0x3f	; 63
    187e:	0f 92       	push	r0
    1880:	11 24       	eor	r1, r1
    1882:	2f 93       	push	r18
    1884:	3f 93       	push	r19
    1886:	4f 93       	push	r20
    1888:	5f 93       	push	r21
    188a:	6f 93       	push	r22
    188c:	7f 93       	push	r23
    188e:	8f 93       	push	r24
    1890:	9f 93       	push	r25
    1892:	af 93       	push	r26
    1894:	bf 93       	push	r27
    1896:	ef 93       	push	r30
    1898:	ff 93       	push	r31
    189a:	80 e4       	ldi	r24, 0x40	; 64
    189c:	9f e1       	ldi	r25, 0x1F	; 31
    189e:	01 97       	sbiw	r24, 0x01	; 1
    18a0:	f1 f7       	brne	.-4      	; 0x189e <__vector_2+0x26>
#ifndef ANIMATION_SWITCH_MENU_ITEMS
	menu_before_now = 0x80;
#endif
	_delay_ms(2);	// anti brrrrzzzzrr

	GIFR = _BV(INTF1); // kill int1 flag
    18a2:	80 e8       	ldi	r24, 0x80	; 128
    18a4:	8a bf       	out	0x3a, r24	; 58

	uint8_t button_clicked = J_CENTER;

	while(1){
		uint8_t jpin_h = (JPIN & 0xf0);
    18a6:	83 b3       	in	r24, 0x13	; 19
    18a8:	80 7f       	andi	r24, 0xF0	; 240

		if( jpin_h == (uint8_t)(J_LU | J_RU) ){
    18aa:	80 39       	cpi	r24, 0x90	; 144
    18ac:	11 f4       	brne	.+4      	; 0x18b2 <__vector_2+0x3a>
    18ae:	82 e0       	ldi	r24, 0x02	; 2
    18b0:	0f c0       	rjmp	.+30     	; 0x18d0 <__vector_2+0x58>
					break;
				}
			}
		}

		if( jpin_h == (uint8_t)(J_LD | J_RD) ){
    18b2:	80 36       	cpi	r24, 0x60	; 96
    18b4:	11 f4       	brne	.+4      	; 0x18ba <__vector_2+0x42>
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	0b c0       	rjmp	.+22     	; 0x18d0 <__vector_2+0x58>
					break;
				}
			}
		}

		if( jpin_h == (uint8_t)(J_LU | J_LD) ){
    18ba:	80 3c       	cpi	r24, 0xC0	; 192
    18bc:	11 f4       	brne	.+4      	; 0x18c2 <__vector_2+0x4a>
    18be:	84 e0       	ldi	r24, 0x04	; 4
    18c0:	07 c0       	rjmp	.+14     	; 0x18d0 <__vector_2+0x58>
					break;
				}
			}

		}
		if( jpin_h == (uint8_t)(J_RU | J_RD) ){
    18c2:	80 33       	cpi	r24, 0x30	; 48
    18c4:	11 f4       	brne	.+4      	; 0x18ca <__vector_2+0x52>
    18c6:	83 e0       	ldi	r24, 0x03	; 3
    18c8:	03 c0       	rjmp	.+6      	; 0x18d0 <__vector_2+0x58>
					break;
				}
			}

		}
		if( jpin_h == (uint8_t)(J_RU | J_LU | J_RD | J_LD) ){
    18ca:	80 3f       	cpi	r24, 0xF0	; 240
    18cc:	61 f7       	brne	.-40     	; 0x18a6 <__vector_2+0x2e>
    18ce:	80 e0       	ldi	r24, 0x00	; 0
				}
			}
		}
	}

	if (JOYSTICK_INT_CHECK()) { return; } // interrupt on brrzzzz then pulling up joystick, so not need to do smth
    18d0:	83 99       	sbic	0x10, 3	; 16
    18d2:	9e c0       	rjmp	.+316    	; 0x1a10 <__vector_2+0x198>

	if (button_clicked == J_CENTER){
    18d4:	88 23       	and	r24, r24
    18d6:	41 f4       	brne	.+16     	; 0x18e8 <__vector_2+0x70>
		FLAGS_SWITCH_ON(JOYSTICK_CENTER_CLICK_FLAG);
    18d8:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    18da:	f8 94       	cli
    18dc:	80 91 85 03 	lds	r24, 0x0385
    18e0:	90 91 86 03 	lds	r25, 0x0386
    18e4:	82 60       	ori	r24, 0x02	; 2
    18e6:	8f c0       	rjmp	.+286    	; 0x1a06 <__vector_2+0x18e>

	}else if(button_clicked == J_UP){
    18e8:	81 30       	cpi	r24, 0x01	; 1
    18ea:	91 f4       	brne	.+36     	; 0x1910 <__vector_2+0x98>
		menu_now = menu_now->prev;
    18ec:	e0 91 c9 03 	lds	r30, 0x03C9
    18f0:	f0 91 ca 03 	lds	r31, 0x03CA
    18f4:	87 81       	ldd	r24, Z+7	; 0x07
    18f6:	90 85       	ldd	r25, Z+8	; 0x08
    18f8:	90 93 ca 03 	sts	0x03CA, r25
    18fc:	80 93 c9 03 	sts	0x03C9, r24

#		ifdef ANIMATION_SWITCH_MENU_ITEMS
		FLAGS_SWITCH_ON( ANIMATION_PREV_FLAG );
    1900:	2f b7       	in	r18, 0x3f	; 63
    1902:	f8 94       	cli
    1904:	80 91 85 03 	lds	r24, 0x0385
    1908:	90 91 86 03 	lds	r25, 0x0386
    190c:	88 60       	ori	r24, 0x08	; 8
    190e:	7b c0       	rjmp	.+246    	; 0x1a06 <__vector_2+0x18e>
#		else
		menu_before_now--;
		FLAGS_SWITCH_ON( UPDATE_DISPLAY_FLAG );
#		endif
	}else if(button_clicked == J_DOWN){
    1910:	82 30       	cpi	r24, 0x02	; 2
    1912:	91 f4       	brne	.+36     	; 0x1938 <__vector_2+0xc0>
		menu_now = menu_now->next;
    1914:	e0 91 c9 03 	lds	r30, 0x03C9
    1918:	f0 91 ca 03 	lds	r31, 0x03CA
    191c:	85 81       	ldd	r24, Z+5	; 0x05
    191e:	96 81       	ldd	r25, Z+6	; 0x06
    1920:	90 93 ca 03 	sts	0x03CA, r25
    1924:	80 93 c9 03 	sts	0x03C9, r24

#		ifdef ANIMATION_SWITCH_MENU_ITEMS
		FLAGS_SWITCH_ON( ANIMATION_NEXT_FLAG );
    1928:	2f b7       	in	r18, 0x3f	; 63
    192a:	f8 94       	cli
    192c:	80 91 85 03 	lds	r24, 0x0385
    1930:	90 91 86 03 	lds	r25, 0x0386
    1934:	84 60       	ori	r24, 0x04	; 4
    1936:	67 c0       	rjmp	.+206    	; 0x1a06 <__vector_2+0x18e>
    1938:	20 91 85 03 	lds	r18, 0x0385
    193c:	30 91 86 03 	lds	r19, 0x0386
		menu_before_now++;
		FLAGS_SWITCH_ON( UPDATE_DISPLAY_FLAG );
#		endif


	}else if(button_clicked == J_LEFT){
    1940:	83 30       	cpi	r24, 0x03	; 3
    1942:	51 f5       	brne	.+84     	; 0x1998 <__vector_2+0x120>
		IF_FLAG_ON( SNAKE_PLAYING_NOW_FLAG ){
    1944:	8f b7       	in	r24, 0x3f	; 63
    1946:	f8 94       	cli
    1948:	30 93 88 03 	sts	0x0388, r19
    194c:	20 93 87 03 	sts	0x0387, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1950:	8f bf       	out	0x3f, r24	; 63
    1952:	80 91 87 03 	lds	r24, 0x0387
    1956:	86 ff       	sbrs	r24, 6
    1958:	02 c0       	rjmp	.+4      	; 0x195e <__vector_2+0xe6>
			SnakeGame_TurnLeft();
    195a:	0e 94 1c 05 	call	0xa38	; 0xa38 <SnakeGame_TurnLeft>
		}

//		usbDeviceDisconnect();

		if(menu_now == &results){
    195e:	80 91 c9 03 	lds	r24, 0x03C9
    1962:	90 91 ca 03 	lds	r25, 0x03CA
    1966:	21 e0       	ldi	r18, 0x01	; 1
    1968:	82 34       	cpi	r24, 0x42	; 66
    196a:	92 07       	cpc	r25, r18
    196c:	41 f4       	brne	.+16     	; 0x197e <__vector_2+0x106>
			FLAGS_SWITCH_ON( SAVE_MEASURED_AS_CALIBRATE_FLAG );
    196e:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1970:	f8 94       	cli
    1972:	80 91 85 03 	lds	r24, 0x0385
    1976:	90 91 86 03 	lds	r25, 0x0386
    197a:	92 60       	ori	r25, 0x02	; 2
    197c:	44 c0       	rjmp	.+136    	; 0x1a06 <__vector_2+0x18e>
		}else if(menu_now == &set_measure_delay){
    197e:	8a 5a       	subi	r24, 0xAA	; 170
    1980:	91 40       	sbci	r25, 0x01	; 1
    1982:	09 f0       	breq	.+2      	; 0x1986 <__vector_2+0x10e>
    1984:	45 c0       	rjmp	.+138    	; 0x1a10 <__vector_2+0x198>
			if(--measure_delay == 0){
    1986:	80 91 04 01 	lds	r24, 0x0104
    198a:	81 50       	subi	r24, 0x01	; 1
    198c:	80 93 04 01 	sts	0x0104, r24
    1990:	88 23       	and	r24, r24
    1992:	91 f5       	brne	.+100    	; 0x19f8 <__vector_2+0x180>
				measure_delay = 9;
    1994:	89 e0       	ldi	r24, 0x09	; 9
    1996:	2e c0       	rjmp	.+92     	; 0x19f4 <__vector_2+0x17c>
			FLAGS_SWITCH_ON( UPDATE_DISPLAY_FLAG );
		}


	}else if(button_clicked == J_RIGHT){
		IF_FLAG_ON( SNAKE_PLAYING_NOW_FLAG ){
    1998:	8f b7       	in	r24, 0x3f	; 63
    199a:	f8 94       	cli
    199c:	30 93 88 03 	sts	0x0388, r19
    19a0:	20 93 87 03 	sts	0x0387, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    19a4:	8f bf       	out	0x3f, r24	; 63
    19a6:	80 91 87 03 	lds	r24, 0x0387
    19aa:	86 ff       	sbrs	r24, 6
    19ac:	02 c0       	rjmp	.+4      	; 0x19b2 <__vector_2+0x13a>
			SnakeGame_TurnRight();
    19ae:	0e 94 27 05 	call	0xa4e	; 0xa4e <SnakeGame_TurnRight>
		}


//		usbInit_FakeUsbDisconnect();

		if(menu_now == &calibration){
    19b2:	80 91 c9 03 	lds	r24, 0x03C9
    19b6:	90 91 ca 03 	lds	r25, 0x03CA
    19ba:	21 e0       	ldi	r18, 0x01	; 1
    19bc:	84 3c       	cpi	r24, 0xC4	; 196
    19be:	92 07       	cpc	r25, r18
    19c0:	19 f4       	brne	.+6      	; 0x19c8 <__vector_2+0x150>
			menu_now = &go;
    19c2:	88 e2       	ldi	r24, 0x28	; 40
    19c4:	91 e0       	ldi	r25, 0x01	; 1
    19c6:	06 c0       	rjmp	.+12     	; 0x19d4 <__vector_2+0x15c>
		}else if(menu_now == &go){
    19c8:	21 e0       	ldi	r18, 0x01	; 1
    19ca:	88 32       	cpi	r24, 0x28	; 40
    19cc:	92 07       	cpc	r25, r18
    19ce:	39 f4       	brne	.+14     	; 0x19de <__vector_2+0x166>
			menu_now = &calibration;
    19d0:	84 ec       	ldi	r24, 0xC4	; 196
    19d2:	91 e0       	ldi	r25, 0x01	; 1
    19d4:	90 93 ca 03 	sts	0x03CA, r25
    19d8:	80 93 c9 03 	sts	0x03C9, r24
    19dc:	0d c0       	rjmp	.+26     	; 0x19f8 <__vector_2+0x180>
		}else if(menu_now == &set_measure_delay){
    19de:	8a 5a       	subi	r24, 0xAA	; 170
    19e0:	91 40       	sbci	r25, 0x01	; 1
    19e2:	51 f4       	brne	.+20     	; 0x19f8 <__vector_2+0x180>
			if(++measure_delay == 10){
    19e4:	80 91 04 01 	lds	r24, 0x0104
    19e8:	8f 5f       	subi	r24, 0xFF	; 255
    19ea:	80 93 04 01 	sts	0x0104, r24
    19ee:	8a 30       	cpi	r24, 0x0A	; 10
    19f0:	19 f4       	brne	.+6      	; 0x19f8 <__vector_2+0x180>
				measure_delay = 1;
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	80 93 04 01 	sts	0x0104, r24
			}
		}
		FLAGS_SWITCH_ON( UPDATE_DISPLAY_FLAG );
    19f8:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    19fa:	f8 94       	cli
    19fc:	80 91 85 03 	lds	r24, 0x0385
    1a00:	90 91 86 03 	lds	r25, 0x0386
    1a04:	81 60       	ori	r24, 0x01	; 1
    1a06:	90 93 86 03 	sts	0x0386, r25
    1a0a:	80 93 85 03 	sts	0x0385, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1a0e:	2f bf       	out	0x3f, r18	; 63

	}

}
    1a10:	ff 91       	pop	r31
    1a12:	ef 91       	pop	r30
    1a14:	bf 91       	pop	r27
    1a16:	af 91       	pop	r26
    1a18:	9f 91       	pop	r25
    1a1a:	8f 91       	pop	r24
    1a1c:	7f 91       	pop	r23
    1a1e:	6f 91       	pop	r22
    1a20:	5f 91       	pop	r21
    1a22:	4f 91       	pop	r20
    1a24:	3f 91       	pop	r19
    1a26:	2f 91       	pop	r18
    1a28:	0f 90       	pop	r0
    1a2a:	0f be       	out	0x3f, r0	; 63
    1a2c:	0f 90       	pop	r0
    1a2e:	1f 90       	pop	r1
    1a30:	18 95       	reti

00001a32 <HalfByteAsASCII>:
#include "uint8_16_to_string.h"

char to_string_result[] = {0, 0, 0, 0};

char HalfByteAsASCII(char c)
{
    1a32:	98 2f       	mov	r25, r24
    if (c >= 0 && c <= 9){
    1a34:	8a 30       	cpi	r24, 0x0A	; 10
    1a36:	10 f4       	brcc	.+4      	; 0x1a3c <HalfByteAsASCII+0xa>
        c += 0x30;
    1a38:	80 5d       	subi	r24, 0xD0	; 208
    1a3a:	08 95       	ret
    }else if (c >= 0xA && c <= 0x0F){
    1a3c:	8a 50       	subi	r24, 0x0A	; 10
    1a3e:	86 30       	cpi	r24, 0x06	; 6
    1a40:	10 f0       	brcs	.+4      	; 0x1a46 <HalfByteAsASCII+0x14>
    1a42:	8f e3       	ldi	r24, 0x3F	; 63
    1a44:	08 95       	ret
        c += 0x37;
    1a46:	89 2f       	mov	r24, r25
    1a48:	89 5c       	subi	r24, 0xC9	; 201
    }else{
        c = '?';
    }
    return c;
}
    1a4a:	08 95       	ret

00001a4c <UInt8ToString>:

void UInt8ToString(uint8_t ch)
{
    1a4c:	28 2f       	mov	r18, r24
	to_string_result[0] = HalfByteAsASCII( (ch & 0xf0) >>4 );
    1a4e:	98 2f       	mov	r25, r24
    1a50:	92 95       	swap	r25
    1a52:	9f 70       	andi	r25, 0x0F	; 15

char to_string_result[] = {0, 0, 0, 0};

char HalfByteAsASCII(char c)
{
    if (c >= 0 && c <= 9){
    1a54:	9a 30       	cpi	r25, 0x0A	; 10
    1a56:	18 f4       	brcc	.+6      	; 0x1a5e <UInt8ToString+0x12>
        c += 0x30;
    1a58:	89 2f       	mov	r24, r25
    1a5a:	80 5d       	subi	r24, 0xD0	; 208
    1a5c:	08 c0       	rjmp	.+16     	; 0x1a6e <UInt8ToString+0x22>
    }else if (c >= 0xA && c <= 0x0F){
    1a5e:	89 2f       	mov	r24, r25
    1a60:	8a 50       	subi	r24, 0x0A	; 10
    1a62:	86 30       	cpi	r24, 0x06	; 6
    1a64:	10 f0       	brcs	.+4      	; 0x1a6a <UInt8ToString+0x1e>
    1a66:	8f e3       	ldi	r24, 0x3F	; 63
    1a68:	02 c0       	rjmp	.+4      	; 0x1a6e <UInt8ToString+0x22>
        c += 0x37;
    1a6a:	89 2f       	mov	r24, r25
    1a6c:	89 5c       	subi	r24, 0xC9	; 201
    return c;
}

void UInt8ToString(uint8_t ch)
{
	to_string_result[0] = HalfByteAsASCII( (ch & 0xf0) >>4 );
    1a6e:	80 93 8b 03 	sts	0x038B, r24
	to_string_result[1] = HalfByteAsASCII( ch & 0x0f );
    1a72:	92 2f       	mov	r25, r18
    1a74:	9f 70       	andi	r25, 0x0F	; 15

char to_string_result[] = {0, 0, 0, 0};

char HalfByteAsASCII(char c)
{
    if (c >= 0 && c <= 9){
    1a76:	9a 30       	cpi	r25, 0x0A	; 10
    1a78:	18 f4       	brcc	.+6      	; 0x1a80 <UInt8ToString+0x34>
        c += 0x30;
    1a7a:	89 2f       	mov	r24, r25
    1a7c:	80 5d       	subi	r24, 0xD0	; 208
    1a7e:	08 c0       	rjmp	.+16     	; 0x1a90 <UInt8ToString+0x44>
    }else if (c >= 0xA && c <= 0x0F){
    1a80:	89 2f       	mov	r24, r25
    1a82:	8a 50       	subi	r24, 0x0A	; 10
    1a84:	86 30       	cpi	r24, 0x06	; 6
    1a86:	10 f0       	brcs	.+4      	; 0x1a8c <UInt8ToString+0x40>
    1a88:	8f e3       	ldi	r24, 0x3F	; 63
    1a8a:	02 c0       	rjmp	.+4      	; 0x1a90 <UInt8ToString+0x44>
        c += 0x37;
    1a8c:	89 2f       	mov	r24, r25
    1a8e:	89 5c       	subi	r24, 0xC9	; 201
}

void UInt8ToString(uint8_t ch)
{
	to_string_result[0] = HalfByteAsASCII( (ch & 0xf0) >>4 );
	to_string_result[1] = HalfByteAsASCII( ch & 0x0f );
    1a90:	80 93 8c 03 	sts	0x038C, r24
	//to_string_result[2] = 0x00; // end of result string here
	// result in result_str
}
    1a94:	08 95       	ret

00001a96 <UInt16ToString>:

void UInt16ToString(uint16_t i)
{
    1a96:	9c 01       	movw	r18, r24
	to_string_result[0] = HalfByteAsASCII( (i & 0xf000) >> 12 );
    1a98:	93 2f       	mov	r25, r19
    1a9a:	92 95       	swap	r25
    1a9c:	9f 70       	andi	r25, 0x0F	; 15

char to_string_result[] = {0, 0, 0, 0};

char HalfByteAsASCII(char c)
{
    if (c >= 0 && c <= 9){
    1a9e:	9a 30       	cpi	r25, 0x0A	; 10
    1aa0:	18 f4       	brcc	.+6      	; 0x1aa8 <UInt16ToString+0x12>
        c += 0x30;
    1aa2:	89 2f       	mov	r24, r25
    1aa4:	80 5d       	subi	r24, 0xD0	; 208
    1aa6:	08 c0       	rjmp	.+16     	; 0x1ab8 <UInt16ToString+0x22>
    }else if (c >= 0xA && c <= 0x0F){
    1aa8:	89 2f       	mov	r24, r25
    1aaa:	8a 50       	subi	r24, 0x0A	; 10
    1aac:	86 30       	cpi	r24, 0x06	; 6
    1aae:	10 f0       	brcs	.+4      	; 0x1ab4 <UInt16ToString+0x1e>
    1ab0:	8f e3       	ldi	r24, 0x3F	; 63
    1ab2:	02 c0       	rjmp	.+4      	; 0x1ab8 <UInt16ToString+0x22>
        c += 0x37;
    1ab4:	89 2f       	mov	r24, r25
    1ab6:	89 5c       	subi	r24, 0xC9	; 201
	// result in result_str
}

void UInt16ToString(uint16_t i)
{
	to_string_result[0] = HalfByteAsASCII( (i & 0xf000) >> 12 );
    1ab8:	80 93 8b 03 	sts	0x038B, r24
	to_string_result[1] = HalfByteAsASCII( (i & 0x0f00) >> 8  );
    1abc:	c9 01       	movw	r24, r18
    1abe:	80 70       	andi	r24, 0x00	; 0
    1ac0:	9f 70       	andi	r25, 0x0F	; 15

char to_string_result[] = {0, 0, 0, 0};

char HalfByteAsASCII(char c)
{
    if (c >= 0 && c <= 9){
    1ac2:	9a 30       	cpi	r25, 0x0A	; 10
    1ac4:	18 f4       	brcc	.+6      	; 0x1acc <UInt16ToString+0x36>
        c += 0x30;
    1ac6:	89 2f       	mov	r24, r25
    1ac8:	80 5d       	subi	r24, 0xD0	; 208
    1aca:	08 c0       	rjmp	.+16     	; 0x1adc <UInt16ToString+0x46>
    }else if (c >= 0xA && c <= 0x0F){
    1acc:	89 2f       	mov	r24, r25
    1ace:	8a 50       	subi	r24, 0x0A	; 10
    1ad0:	86 30       	cpi	r24, 0x06	; 6
    1ad2:	10 f0       	brcs	.+4      	; 0x1ad8 <UInt16ToString+0x42>
    1ad4:	8f e3       	ldi	r24, 0x3F	; 63
    1ad6:	02 c0       	rjmp	.+4      	; 0x1adc <UInt16ToString+0x46>
        c += 0x37;
    1ad8:	89 2f       	mov	r24, r25
    1ada:	89 5c       	subi	r24, 0xC9	; 201
}

void UInt16ToString(uint16_t i)
{
	to_string_result[0] = HalfByteAsASCII( (i & 0xf000) >> 12 );
	to_string_result[1] = HalfByteAsASCII( (i & 0x0f00) >> 8  );
    1adc:	80 93 8c 03 	sts	0x038C, r24
	to_string_result[2] = HalfByteAsASCII( (i & 0x00f0) >> 4  );
    1ae0:	c9 01       	movw	r24, r18
    1ae2:	80 7f       	andi	r24, 0xF0	; 240
    1ae4:	90 70       	andi	r25, 0x00	; 0
    1ae6:	34 e0       	ldi	r19, 0x04	; 4
    1ae8:	96 95       	lsr	r25
    1aea:	87 95       	ror	r24
    1aec:	3a 95       	dec	r19
    1aee:	e1 f7       	brne	.-8      	; 0x1ae8 <UInt16ToString+0x52>
    1af0:	98 2f       	mov	r25, r24

char to_string_result[] = {0, 0, 0, 0};

char HalfByteAsASCII(char c)
{
    if (c >= 0 && c <= 9){
    1af2:	8a 30       	cpi	r24, 0x0A	; 10
    1af4:	10 f4       	brcc	.+4      	; 0x1afa <UInt16ToString+0x64>
        c += 0x30;
    1af6:	80 5d       	subi	r24, 0xD0	; 208
    1af8:	07 c0       	rjmp	.+14     	; 0x1b08 <UInt16ToString+0x72>
    }else if (c >= 0xA && c <= 0x0F){
    1afa:	8a 50       	subi	r24, 0x0A	; 10
    1afc:	86 30       	cpi	r24, 0x06	; 6
    1afe:	10 f0       	brcs	.+4      	; 0x1b04 <UInt16ToString+0x6e>
    1b00:	8f e3       	ldi	r24, 0x3F	; 63
    1b02:	02 c0       	rjmp	.+4      	; 0x1b08 <UInt16ToString+0x72>
        c += 0x37;
    1b04:	89 2f       	mov	r24, r25
    1b06:	89 5c       	subi	r24, 0xC9	; 201

void UInt16ToString(uint16_t i)
{
	to_string_result[0] = HalfByteAsASCII( (i & 0xf000) >> 12 );
	to_string_result[1] = HalfByteAsASCII( (i & 0x0f00) >> 8  );
	to_string_result[2] = HalfByteAsASCII( (i & 0x00f0) >> 4  );
    1b08:	80 93 8d 03 	sts	0x038D, r24
	to_string_result[3] = HalfByteAsASCII(  i & 0x000f		);
    1b0c:	92 2f       	mov	r25, r18
    1b0e:	9f 70       	andi	r25, 0x0F	; 15

char to_string_result[] = {0, 0, 0, 0};

char HalfByteAsASCII(char c)
{
    if (c >= 0 && c <= 9){
    1b10:	9a 30       	cpi	r25, 0x0A	; 10
    1b12:	18 f4       	brcc	.+6      	; 0x1b1a <UInt16ToString+0x84>
        c += 0x30;
    1b14:	89 2f       	mov	r24, r25
    1b16:	80 5d       	subi	r24, 0xD0	; 208
    1b18:	08 c0       	rjmp	.+16     	; 0x1b2a <UInt16ToString+0x94>
    }else if (c >= 0xA && c <= 0x0F){
    1b1a:	89 2f       	mov	r24, r25
    1b1c:	8a 50       	subi	r24, 0x0A	; 10
    1b1e:	86 30       	cpi	r24, 0x06	; 6
    1b20:	10 f0       	brcs	.+4      	; 0x1b26 <UInt16ToString+0x90>
    1b22:	8f e3       	ldi	r24, 0x3F	; 63
    1b24:	02 c0       	rjmp	.+4      	; 0x1b2a <UInt16ToString+0x94>
        c += 0x37;
    1b26:	89 2f       	mov	r24, r25
    1b28:	89 5c       	subi	r24, 0xC9	; 201
void UInt16ToString(uint16_t i)
{
	to_string_result[0] = HalfByteAsASCII( (i & 0xf000) >> 12 );
	to_string_result[1] = HalfByteAsASCII( (i & 0x0f00) >> 8  );
	to_string_result[2] = HalfByteAsASCII( (i & 0x00f0) >> 4  );
	to_string_result[3] = HalfByteAsASCII(  i & 0x000f		);
    1b2a:	80 93 8e 03 	sts	0x038E, r24
	// result in result_str
}
    1b2e:	08 95       	ret

00001b30 <usbFunctionRead>:

/* usbFunctionRead() is called when the host requests a chunk of data from
 * the device. For more information see the documentation in usbdrv/usbdrv.h.
 */
uint8_t   usbFunctionRead(uint8_t *data, uint8_t len)
{
    1b30:	fc 01       	movw	r30, r24
    data[0] = alg_state;
    1b32:	80 91 58 03 	lds	r24, 0x0358
    1b36:	80 83       	st	Z, r24
    if(current_data == 'C'){
    1b38:	80 91 06 01 	lds	r24, 0x0106
    1b3c:	83 34       	cpi	r24, 0x43	; 67
    1b3e:	79 f4       	brne	.+30     	; 0x1b5e <usbFunctionRead+0x2e>
    	data[1] = 'C';
    1b40:	81 83       	std	Z+1, r24	; 0x01
    	data[2] = (uint8_t) (result[CALIBRATE_INDX][RED] & 0xff00) >> 8;
    1b42:	12 82       	std	Z+2, r1	; 0x02
    	data[3] = (uint8_t) result[CALIBRATE_INDX][RED] & 0x00ff;
    1b44:	80 91 59 03 	lds	r24, 0x0359
    1b48:	83 83       	std	Z+3, r24	; 0x03
    	data[4] = (uint8_t) (result[CALIBRATE_INDX][GREEN] & 0xff00) >> 8;
    1b4a:	14 82       	std	Z+4, r1	; 0x04
    	data[5] = (uint8_t) result[CALIBRATE_INDX][GREEN] & 0x00ff;
    1b4c:	80 91 5b 03 	lds	r24, 0x035B
    1b50:	85 83       	std	Z+5, r24	; 0x05
    	data[6] = (uint8_t) (result[CALIBRATE_INDX][BLUE] & 0xff00) >> 8;
    1b52:	16 82       	std	Z+6, r1	; 0x06
    	data[7] = (uint8_t) result[CALIBRATE_INDX][BLUE] & 0x00ff;
    1b54:	80 91 5d 03 	lds	r24, 0x035D
    1b58:	87 83       	std	Z+7, r24	; 0x07
    	current_data = 'M';
    1b5a:	8d e4       	ldi	r24, 0x4D	; 77
    1b5c:	10 c0       	rjmp	.+32     	; 0x1b7e <usbFunctionRead+0x4e>
    }else if(current_data == 'M'){
    1b5e:	8d 34       	cpi	r24, 0x4D	; 77
    1b60:	89 f4       	brne	.+34     	; 0x1b84 <usbFunctionRead+0x54>
    	data[1] = 'M';
    1b62:	81 83       	std	Z+1, r24	; 0x01
    	data[2] = (uint8_t) (result[MEASURE_INDX][RED] & 0xff00) >> 8;
    1b64:	12 82       	std	Z+2, r1	; 0x02
    	data[3] = (uint8_t) result[MEASURE_INDX][RED] & 0x00ff;
    1b66:	80 91 67 03 	lds	r24, 0x0367
    1b6a:	83 83       	std	Z+3, r24	; 0x03
    	data[4] = (uint8_t) (result[MEASURE_INDX][GREEN] & 0xff00) >> 8;
    1b6c:	14 82       	std	Z+4, r1	; 0x04
    	data[5] = (uint8_t) result[MEASURE_INDX][GREEN] & 0x00ff;
    1b6e:	80 91 69 03 	lds	r24, 0x0369
    1b72:	85 83       	std	Z+5, r24	; 0x05
    	data[6] = (uint8_t) (result[MEASURE_INDX][BLUE] & 0xff00) >> 8;
    1b74:	16 82       	std	Z+6, r1	; 0x06
    	data[7] = (uint8_t) result[MEASURE_INDX][BLUE] & 0x00ff;
    1b76:	80 91 6b 03 	lds	r24, 0x036B
    1b7a:	87 83       	std	Z+7, r24	; 0x07
    	current_data = 'D';
    1b7c:	84 e4       	ldi	r24, 0x44	; 68
    1b7e:	80 93 06 01 	sts	0x0106, r24
    1b82:	14 c0       	rjmp	.+40     	; 0x1bac <usbFunctionRead+0x7c>
    }else if(current_data == 'D'){
    1b84:	84 34       	cpi	r24, 0x44	; 68
    1b86:	91 f4       	brne	.+36     	; 0x1bac <usbFunctionRead+0x7c>
    	data[1] = 'D';
    1b88:	81 83       	std	Z+1, r24	; 0x01
    	data[2] = (uint8_t) (result[DIFF_INDX][RED] & 0xff00) >> 8;
    1b8a:	12 82       	std	Z+2, r1	; 0x02
    	data[3] = (uint8_t) result[DIFF_INDX][RED] & 0x00ff;
    1b8c:	80 91 75 03 	lds	r24, 0x0375
    1b90:	83 83       	std	Z+3, r24	; 0x03
    	data[4] = (uint8_t) (result[DIFF_INDX][GREEN] & 0xff00) >> 8;
    1b92:	14 82       	std	Z+4, r1	; 0x04
    	data[5] = (uint8_t) result[DIFF_INDX][GREEN] & 0x00ff;
    1b94:	80 91 77 03 	lds	r24, 0x0377
    1b98:	85 83       	std	Z+5, r24	; 0x05
    	data[6] = (uint8_t) (result[DIFF_INDX][BLUE] & 0xff00) >> 8;
    1b9a:	16 82       	std	Z+6, r1	; 0x06
    	data[7] = (uint8_t) result[DIFF_INDX][BLUE] & 0x00ff;
    1b9c:	80 91 79 03 	lds	r24, 0x0379
    1ba0:	87 83       	std	Z+7, r24	; 0x07
    	current_data = 'C';
    1ba2:	83 e4       	ldi	r24, 0x43	; 67
    1ba4:	80 93 06 01 	sts	0x0106, r24
    	alg_state = NOTHING_CHANGED;
    1ba8:	10 92 58 03 	sts	0x0358, r1
    }
    return len;
}
    1bac:	86 2f       	mov	r24, r22
    1bae:	08 95       	ret

00001bb0 <usbFunctionSetup>:

/* ------------------------------------------------------------------------- */

usbMsgLen_t usbFunctionSetup(uint8_t data[8])
{
	usbRequest_t    *rq = (void *)data;
    1bb0:	fc 01       	movw	r30, r24

    if((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS){    /* HID class request */
    1bb2:	80 81       	ld	r24, Z
    1bb4:	80 76       	andi	r24, 0x60	; 96
    1bb6:	80 32       	cpi	r24, 0x20	; 32
    1bb8:	39 f4       	brne	.+14     	; 0x1bc8 <usbFunctionSetup+0x18>
        if(rq->bRequest == USBRQ_HID_GET_REPORT){  /* wValue: ReportType (highbyte), ReportID (lowbyte) */
    1bba:	81 81       	ldd	r24, Z+1	; 0x01
    1bbc:	81 30       	cpi	r24, 0x01	; 1
    1bbe:	11 f0       	breq	.+4      	; 0x1bc4 <usbFunctionSetup+0x14>
//            /* since we have only one report type, we can ignore the report-ID */
//            bytesRemaining = 128;
//            currentAddress = 0;
            return USB_NO_MSG;  /* use usbFunctionRead() to obtain data */
        }else if(rq->bRequest == USBRQ_HID_SET_REPORT){
    1bc0:	89 30       	cpi	r24, 0x09	; 9
    1bc2:	11 f4       	brne	.+4      	; 0x1bc8 <usbFunctionSetup+0x18>
    1bc4:	8f ef       	ldi	r24, 0xFF	; 255
    1bc6:	08 95       	ret
    1bc8:	80 e0       	ldi	r24, 0x00	; 0
        }
    }else{
        /* ignore vendor type requests, we don't use any */
    }
    return 0;
}
    1bca:	08 95       	ret

00001bcc <usbInit_FakeUsbDisconnect>:
	/* RESET status: all port bits are inputs without pull-up.
     * That's the way we need D+ and D-. Therefore we don't need any
     * additional hardware initialization.
     */

	usbInit();
    1bcc:	0e 94 65 02 	call	0x4ca	; 0x4ca <usbInit>
    usbDeviceDisconnect();  /* enforce re-enumeration, do this while interrupts are disabled! */
    1bd0:	89 9a       	sbi	0x11, 1	; 17
    uint8_t i = 0;
    while(i --> 0){             /* fake USB disconnect for > 250 ms */
        _delay_ms(1);
    }
    usbDeviceConnect();
    1bd2:	89 98       	cbi	0x11, 1	; 17
    usbPoll();
    1bd4:	0e 94 94 02 	call	0x528	; 0x528 <usbPoll>
}
    1bd8:	08 95       	ret

00001bda <usbFunctionWrite>:

/* usbFunctionWrite() is called when the host sends a chunk of data to the
 * device. For more information see the documentation in usbdrv/usbdrv.h.
 */
uint8_t   usbFunctionWrite(uint8_t *data, uint8_t len)
{
    1bda:	ef 92       	push	r14
    1bdc:	ff 92       	push	r15
    1bde:	0f 93       	push	r16
    1be0:	1f 93       	push	r17
    1be2:	cf 93       	push	r28
    1be4:	df 93       	push	r29
    1be6:	06 2f       	mov	r16, r22
    1be8:	ec 01       	movw	r28, r24
    1bea:	10 e0       	ldi	r17, 0x00	; 0
    1bec:	80 e9       	ldi	r24, 0x90	; 144
    1bee:	e8 2e       	mov	r14, r24
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	f8 2e       	mov	r15, r24
    1bf4:	0d c0       	rjmp	.+26     	; 0x1c10 <usbFunctionWrite+0x36>


	//Lcd3310_ClearCenter();
	//Lcd3310_GotoXY(0, 3);
	for(uint8_t i=0; i<len; i++){
		Lcd3310_UInt8AsText(data[i], BLACK_TEXT_ON_WHITE);
    1bf6:	88 81       	ld	r24, Y
    1bf8:	60 e0       	ldi	r22, 0x00	; 0
    1bfa:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <Lcd3310_UInt8AsText>
    1bfe:	88 ee       	ldi	r24, 0xE8	; 232
    1c00:	93 e0       	ldi	r25, 0x03	; 3
    1c02:	f7 01       	movw	r30, r14
    1c04:	31 97       	sbiw	r30, 0x01	; 1
    1c06:	f1 f7       	brne	.-4      	; 0x1c04 <usbFunctionWrite+0x2a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c08:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c0a:	d9 f7       	brne	.-10     	; 0x1c02 <usbFunctionWrite+0x28>
//	return bytesRemaining == 0; /* return 1 if this was the last chunk */


	//Lcd3310_ClearCenter();
	//Lcd3310_GotoXY(0, 3);
	for(uint8_t i=0; i<len; i++){
    1c0c:	1f 5f       	subi	r17, 0xFF	; 255
    1c0e:	21 96       	adiw	r28, 0x01	; 1
    1c10:	10 17       	cp	r17, r16
    1c12:	88 f3       	brcs	.-30     	; 0x1bf6 <usbFunctionWrite+0x1c>
		Lcd3310_UInt8AsText(data[i], BLACK_TEXT_ON_WHITE);
		_delay_ms(100);
	}

	return 1;
}
    1c14:	81 e0       	ldi	r24, 0x01	; 1
    1c16:	df 91       	pop	r29
    1c18:	cf 91       	pop	r28
    1c1a:	1f 91       	pop	r17
    1c1c:	0f 91       	pop	r16
    1c1e:	ff 90       	pop	r15
    1c20:	ef 90       	pop	r14
    1c22:	08 95       	ret

00001c24 <Lcd3310_Char>:

	_delay_ms(show_init_data_delay_ms); // show image from LcdCache initial value
}

void Lcd3310_Char(uint8_t ch, WhiteOrBlackText is_invert_colors)
{
    1c24:	cf 93       	push	r28
    1c26:	df 93       	push	r29
    1c28:	28 2f       	mov	r18, r24
    1c2a:	36 2f       	mov	r19, r22
	//  Convert to a printable character.
    if ( (ch < 0x20) ){
    1c2c:	80 32       	cpi	r24, 0x20	; 32
    1c2e:	08 f4       	brcc	.+2      	; 0x1c32 <Lcd3310_Char+0xe>
    1c30:	2c e5       	ldi	r18, 0x5C	; 92
        ch = 92;
    }
	
	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    1c32:	c0 91 8f 03 	lds	r28, 0x038F
    1c36:	d0 91 90 03 	lds	r29, 0x0390
    1c3a:	ce 01       	movw	r24, r28
    1c3c:	64 e5       	ldi	r22, 0x54	; 84
    1c3e:	70 e0       	ldi	r23, 0x00	; 0
    1c40:	0e 94 ad 1a 	call	0x355a	; 0x355a <__udivmodhi4>
    1c44:	80 68       	ori	r24, 0x80	; 128


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (uint8_t)~LCD_CE_PIN;
    1c46:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (uint8_t)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (uint8_t)~LCD_DC_PIN;
    1c48:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    1c4a:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1c4c:	77 9b       	sbis	0x0e, 7	; 14
    1c4e:	fe cf       	rjmp	.-4      	; 0x1c4c <Lcd3310_Char+0x28>

    //  Disable display controller.
    PORTB |= (uint8_t)LCD_CE_PIN;
    1c50:	c3 9a       	sbi	0x18, 3	; 24
    if ( (ch < 0x20) ){
        ch = 92;
    }
	
	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    Lcd3310_Send( 0x40 | (Lcd3310_Index / LCD_X_RES), LCD_CMD );
    1c52:	ce 01       	movw	r24, r28
    1c54:	64 e5       	ldi	r22, 0x54	; 84
    1c56:	70 e0       	ldi	r23, 0x00	; 0
    1c58:	0e 94 ad 1a 	call	0x355a	; 0x355a <__udivmodhi4>
    1c5c:	60 64       	ori	r22, 0x40	; 64


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (uint8_t)~LCD_CE_PIN;
    1c5e:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (uint8_t)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (uint8_t)~LCD_DC_PIN;
    1c60:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    1c62:	6f b9       	out	0x0f, r22	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1c64:	77 9b       	sbis	0x0e, 7	; 14
    1c66:	fe cf       	rjmp	.-4      	; 0x1c64 <Lcd3310_Char+0x40>

    //  Disable display controller.
    PORTB |= (uint8_t)LCD_CE_PIN;
    1c68:	c3 9a       	sbi	0x18, 3	; 24
	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    Lcd3310_Send( 0x40 | (Lcd3310_Index / LCD_X_RES), LCD_CMD );
	
	for (char i = 0; i < 5; i++ ){		
		char temp;
		PGM_GET_BYTE_FROM_FONTLOOKUP(temp, ch, i );
    1c6a:	85 e0       	ldi	r24, 0x05	; 5
    1c6c:	28 9f       	mul	r18, r24
    1c6e:	c0 01       	movw	r24, r0
    1c70:	11 24       	eor	r1, r1
    1c72:	fc 01       	movw	r30, r24
    1c74:	e4 5d       	subi	r30, 0xD4	; 212
    1c76:	ff 4f       	sbci	r31, 0xFF	; 255
    }
	
	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    Lcd3310_Send( 0x40 | (Lcd3310_Index / LCD_X_RES), LCD_CMD );
	
	for (char i = 0; i < 5; i++ ){		
    1c78:	8f 5c       	subi	r24, 0xCF	; 207
    1c7a:	9f 4f       	sbci	r25, 0xFF	; 255
		char temp;
		PGM_GET_BYTE_FROM_FONTLOOKUP(temp, ch, i );
    1c7c:	24 91       	lpm	r18, Z+
    1c7e:	22 0f       	add	r18, r18
		if(is_invert_colors) temp = (uint8_t) ~temp;
    1c80:	31 11       	cpse	r19, r1
    1c82:	20 95       	com	r18


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (uint8_t)~LCD_CE_PIN;
    1c84:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (uint8_t)LCD_DC_PIN;
    1c86:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (uint8_t)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    1c88:	2f b9       	out	0x0f, r18	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1c8a:	77 9b       	sbis	0x0e, 7	; 14
    1c8c:	fe cf       	rjmp	.-4      	; 0x1c8a <Lcd3310_Char+0x66>

    //  Disable display controller.
    PORTB |= (uint8_t)LCD_CE_PIN;
    1c8e:	c3 9a       	sbi	0x18, 3	; 24
    1c90:	31 96       	adiw	r30, 0x01	; 1
    }
	
	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    Lcd3310_Send( 0x40 | (Lcd3310_Index / LCD_X_RES), LCD_CMD );
	
	for (char i = 0; i < 5; i++ ){		
    1c92:	e8 17       	cp	r30, r24
    1c94:	f9 07       	cpc	r31, r25
    1c96:	91 f7       	brne	.-28     	; 0x1c7c <Lcd3310_Char+0x58>
		char temp;
		PGM_GET_BYTE_FROM_FONTLOOKUP(temp, ch, i );
		if(is_invert_colors) temp = (uint8_t) ~temp;
	    Lcd3310_Send( temp, LCD_DATA );
    }
	if(is_invert_colors) Lcd3310_Send( 0xff, LCD_DATA );
    1c98:	33 23       	and	r19, r19
    1c9a:	39 f0       	breq	.+14     	; 0x1caa <Lcd3310_Char+0x86>


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (uint8_t)~LCD_CE_PIN;
    1c9c:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (uint8_t)LCD_DC_PIN;
    1c9e:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (uint8_t)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    1ca0:	8f ef       	ldi	r24, 0xFF	; 255
    1ca2:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1ca4:	77 9b       	sbis	0x0e, 7	; 14
    1ca6:	fe cf       	rjmp	.-4      	; 0x1ca4 <Lcd3310_Char+0x80>
    1ca8:	05 c0       	rjmp	.+10     	; 0x1cb4 <Lcd3310_Char+0x90>


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (uint8_t)~LCD_CE_PIN;
    1caa:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (uint8_t)LCD_DC_PIN;
    1cac:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (uint8_t)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    1cae:	1f b8       	out	0x0f, r1	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1cb0:	77 9b       	sbis	0x0e, 7	; 14
    1cb2:	fe cf       	rjmp	.-4      	; 0x1cb0 <Lcd3310_Char+0x8c>

    //  Disable display controller.
    PORTB |= (uint8_t)LCD_CE_PIN;
    1cb4:	c3 9a       	sbi	0x18, 3	; 24
		if(is_invert_colors) temp = (uint8_t) ~temp;
	    Lcd3310_Send( temp, LCD_DATA );
    }
	if(is_invert_colors) Lcd3310_Send( 0xff, LCD_DATA );
	else Lcd3310_Send( 0x00, LCD_DATA );
	Lcd3310_Index += 6;
    1cb6:	26 96       	adiw	r28, 0x06	; 6
    1cb8:	d0 93 90 03 	sts	0x0390, r29
    1cbc:	c0 93 8f 03 	sts	0x038F, r28
}
    1cc0:	df 91       	pop	r29
    1cc2:	cf 91       	pop	r28
    1cc4:	08 95       	ret

00001cc6 <Lcd3310_String_P>:

void Lcd3310_String_P(PGM_P str_ptr, WhiteOrBlackText is_invert_colors)
{
    1cc6:	0f 93       	push	r16
    1cc8:	1f 93       	push	r17
    1cca:	cf 93       	push	r28
    1ccc:	df 93       	push	r29
    1cce:	08 2f       	mov	r16, r24
    1cd0:	16 2f       	mov	r17, r22
    1cd2:	28 2f       	mov	r18, r24
    1cd4:	39 2f       	mov	r19, r25
    1cd6:	e9 01       	movw	r28, r18
    1cd8:	04 c0       	rjmp	.+8      	; 0x1ce2 <Lcd3310_String_P+0x1c>
	char count = 0;
    while ( *str_ptr ){
		count++;
        Lcd3310_Char( *(str_ptr++), is_invert_colors );
    1cda:	21 96       	adiw	r28, 0x01	; 1
    1cdc:	61 2f       	mov	r22, r17
    1cde:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <Lcd3310_Char>
    1ce2:	9e 01       	movw	r18, r28
    1ce4:	20 1b       	sub	r18, r16
    1ce6:	92 2f       	mov	r25, r18
}

void Lcd3310_String_P(PGM_P str_ptr, WhiteOrBlackText is_invert_colors)
{
	char count = 0;
    while ( *str_ptr ){
    1ce8:	88 81       	ld	r24, Y
    1cea:	88 23       	and	r24, r24
    1cec:	b1 f7       	brne	.-20     	; 0x1cda <Lcd3310_String_P+0x14>
		count++;
        Lcd3310_Char( *(str_ptr++), is_invert_colors );
    }
	if(is_invert_colors && count > 0 && count < 14){
    1cee:	11 23       	and	r17, r17
    1cf0:	b9 f0       	breq	.+46     	; 0x1d20 <Lcd3310_String_P+0x5a>
    1cf2:	22 23       	and	r18, r18
    1cf4:	a9 f0       	breq	.+42     	; 0x1d20 <Lcd3310_String_P+0x5a>
    1cf6:	2e 30       	cpi	r18, 0x0E	; 14
    1cf8:	98 f4       	brcc	.+38     	; 0x1d20 <Lcd3310_String_P+0x5a>
		for(count = (14 - count) * 6; count > 0; count--){
    1cfa:	2e e0       	ldi	r18, 0x0E	; 14
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	29 1b       	sub	r18, r25
    1d00:	31 09       	sbc	r19, r1
    1d02:	c9 01       	movw	r24, r18
    1d04:	88 0f       	add	r24, r24
    1d06:	99 1f       	adc	r25, r25
    1d08:	82 0f       	add	r24, r18
    1d0a:	93 1f       	adc	r25, r19
    1d0c:	88 0f       	add	r24, r24
    {
        PORTB &= (uint8_t)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    1d0e:	9f ef       	ldi	r25, 0xFF	; 255


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (uint8_t)~LCD_CE_PIN;
    1d10:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (uint8_t)LCD_DC_PIN;
    1d12:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (uint8_t)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    1d14:	9f b9       	out	0x0f, r25	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1d16:	77 9b       	sbis	0x0e, 7	; 14
    1d18:	fe cf       	rjmp	.-4      	; 0x1d16 <Lcd3310_String_P+0x50>

    //  Disable display controller.
    PORTB |= (uint8_t)LCD_CE_PIN;
    1d1a:	c3 9a       	sbi	0x18, 3	; 24
    while ( *str_ptr ){
		count++;
        Lcd3310_Char( *(str_ptr++), is_invert_colors );
    }
	if(is_invert_colors && count > 0 && count < 14){
		for(count = (14 - count) * 6; count > 0; count--){
    1d1c:	81 50       	subi	r24, 0x01	; 1
    1d1e:	c1 f7       	brne	.-16     	; 0x1d10 <Lcd3310_String_P+0x4a>
			Lcd3310_Send( 0xff, LCD_DATA );
		}
	}
}
    1d20:	df 91       	pop	r29
    1d22:	cf 91       	pop	r28
    1d24:	1f 91       	pop	r17
    1d26:	0f 91       	pop	r16
    1d28:	08 95       	ret

00001d2a <Lcd3310_String_P_Anime>:

#ifdef ANIMATION_SWITCH_MENU_ITEMS
void Lcd3310_String_P_Anime(PGM_P str_ptr, PGM_P str_ptr_next, WhiteOrBlackText is_invert_colors, char num_of_cadr, char is_next)
{
    1d2a:	2f 92       	push	r2
    1d2c:	3f 92       	push	r3
    1d2e:	4f 92       	push	r4
    1d30:	5f 92       	push	r5
    1d32:	6f 92       	push	r6
    1d34:	7f 92       	push	r7
    1d36:	8f 92       	push	r8
    1d38:	9f 92       	push	r9
    1d3a:	af 92       	push	r10
    1d3c:	bf 92       	push	r11
    1d3e:	cf 92       	push	r12
    1d40:	df 92       	push	r13
    1d42:	ef 92       	push	r14
    1d44:	ff 92       	push	r15
    1d46:	0f 93       	push	r16
    1d48:	1f 93       	push	r17
    1d4a:	cf 93       	push	r28
    1d4c:	df 93       	push	r29
    1d4e:	5c 01       	movw	r10, r24
    1d50:	6b 01       	movw	r12, r22
    1d52:	74 2e       	mov	r7, r20
    1d54:	60 2e       	mov	r6, r16
	uint8_t ch1 = 1, ch2 = 1, display, temp1, temp2, count = 0;

	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    1d56:	e0 91 8f 03 	lds	r30, 0x038F
    1d5a:	f0 91 90 03 	lds	r31, 0x0390
    1d5e:	cf 01       	movw	r24, r30
    1d60:	64 e5       	ldi	r22, 0x54	; 84
    1d62:	70 e0       	ldi	r23, 0x00	; 0
    1d64:	0e 94 ad 1a 	call	0x355a	; 0x355a <__udivmodhi4>
    1d68:	80 68       	ori	r24, 0x80	; 128


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (uint8_t)~LCD_CE_PIN;
    1d6a:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (uint8_t)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (uint8_t)~LCD_DC_PIN;
    1d6c:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    1d6e:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1d70:	77 9b       	sbis	0x0e, 7	; 14
    1d72:	fe cf       	rjmp	.-4      	; 0x1d70 <Lcd3310_String_P_Anime+0x46>

    //  Disable display controller.
    PORTB |= (uint8_t)LCD_CE_PIN;
    1d74:	c3 9a       	sbi	0x18, 3	; 24
void Lcd3310_String_P_Anime(PGM_P str_ptr, PGM_P str_ptr_next, WhiteOrBlackText is_invert_colors, char num_of_cadr, char is_next)
{
	uint8_t ch1 = 1, ch2 = 1, display, temp1, temp2, count = 0;

	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    Lcd3310_Send( 0x40 | (Lcd3310_Index / LCD_X_RES), LCD_CMD );
    1d76:	cf 01       	movw	r24, r30
    1d78:	64 e5       	ldi	r22, 0x54	; 84
    1d7a:	70 e0       	ldi	r23, 0x00	; 0
    1d7c:	0e 94 ad 1a 	call	0x355a	; 0x355a <__udivmodhi4>
    1d80:	60 64       	ori	r22, 0x40	; 64


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (uint8_t)~LCD_CE_PIN;
    1d82:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (uint8_t)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (uint8_t)~LCD_DC_PIN;
    1d84:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    1d86:	6f b9       	out	0x0f, r22	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1d88:	77 9b       	sbis	0x0e, 7	; 14
    1d8a:	fe cf       	rjmp	.-4      	; 0x1d88 <Lcd3310_String_P_Anime+0x5e>

    //  Disable display controller.
    PORTB |= (uint8_t)LCD_CE_PIN;
    1d8c:	c3 9a       	sbi	0x18, 3	; 24
	
	while ( ch1 || ch2 ){
		count++;
		if(*str_ptr) ch1 = *(str_ptr++);
		else ch1 = 0x00;
		if(str_ptr == &set_measure_delay.str[count] && count == 10){
    1d8e:	40 90 b3 01 	lds	r4, 0x01B3
    1d92:	50 90 b4 01 	lds	r5, 0x01B4
			ch1 = measure_delay + 0x30;
    1d96:	80 90 04 01 	lds	r8, 0x0104
    1d9a:	80 e3       	ldi	r24, 0x30	; 48
    1d9c:	88 0e       	add	r8, r24
    1d9e:	40 e0       	ldi	r20, 0x00	; 0

		for (char i = 0; i < 5; i++ ){		
			if(ch1) PGM_GET_BYTE_FROM_FONTLOOKUP(temp1, ch1, i )
			else temp1 = 0x00;

			if(ch2) PGM_GET_BYTE_FROM_FONTLOOKUP(temp2, ch2, i )
    1da0:	65 e0       	ldi	r22, 0x05	; 5
    1da2:	36 2e       	mov	r3, r22
    1da4:	e2 2e       	mov	r14, r18
    1da6:	ff 24       	eor	r15, r15
			else temp2 = 0x00;

			if(is_next) display = (temp1 >> num_of_cadr) | ( (temp2 << (8 - num_of_cadr)) );
			else 		display = (temp1 << num_of_cadr) | ( (temp2 >> (8 - num_of_cadr)) );
    1da8:	08 e0       	ldi	r16, 0x08	; 8
    1daa:	10 e0       	ldi	r17, 0x00	; 0
    1dac:	0e 19       	sub	r16, r14
    1dae:	1f 09       	sbc	r17, r15
    {
        PORTB &= (uint8_t)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    1db0:	22 24       	eor	r2, r2
    1db2:	2a 94       	dec	r2

	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    Lcd3310_Send( 0x40 | (Lcd3310_Index / LCD_X_RES), LCD_CMD );
	
	while ( ch1 || ch2 ){
		count++;
    1db4:	4f 5f       	subi	r20, 0xFF	; 255
		if(*str_ptr) ch1 = *(str_ptr++);
    1db6:	f5 01       	movw	r30, r10
    1db8:	90 80       	ld	r9, Z
    1dba:	99 20       	and	r9, r9
    1dbc:	19 f0       	breq	.+6      	; 0x1dc4 <Lcd3310_String_P_Anime+0x9a>
    1dbe:	08 94       	sec
    1dc0:	a1 1c       	adc	r10, r1
    1dc2:	b1 1c       	adc	r11, r1
		else ch1 = 0x00;
		if(str_ptr == &set_measure_delay.str[count] && count == 10){
    1dc4:	c2 01       	movw	r24, r4
    1dc6:	84 0f       	add	r24, r20
    1dc8:	91 1d       	adc	r25, r1
    1dca:	a8 16       	cp	r10, r24
    1dcc:	b9 06       	cpc	r11, r25
    1dce:	19 f4       	brne	.+6      	; 0x1dd6 <Lcd3310_String_P_Anime+0xac>
    1dd0:	4a 30       	cpi	r20, 0x0A	; 10
    1dd2:	09 f4       	brne	.+2      	; 0x1dd6 <Lcd3310_String_P_Anime+0xac>
    1dd4:	98 2c       	mov	r9, r8
			ch1 = measure_delay + 0x30;
		}
		
		if(*str_ptr_next) ch2 = *(str_ptr_next++);
    1dd6:	f6 01       	movw	r30, r12
    1dd8:	20 81       	ld	r18, Z
    1dda:	22 23       	and	r18, r18
    1ddc:	19 f0       	breq	.+6      	; 0x1de4 <Lcd3310_String_P_Anime+0xba>
    1dde:	08 94       	sec
    1de0:	c1 1c       	adc	r12, r1
    1de2:	d1 1c       	adc	r13, r1
		else ch2 = 0x00;
		if(str_ptr_next == &set_measure_delay.str[count] && count == 10){
    1de4:	c8 16       	cp	r12, r24
    1de6:	d9 06       	cpc	r13, r25
    1de8:	19 f4       	brne	.+6      	; 0x1df0 <Lcd3310_String_P_Anime+0xc6>
    1dea:	4a 30       	cpi	r20, 0x0A	; 10
    1dec:	09 f4       	brne	.+2      	; 0x1df0 <Lcd3310_String_P_Anime+0xc6>
    1dee:	28 2d       	mov	r18, r8

		for (char i = 0; i < 5; i++ ){		
			if(ch1) PGM_GET_BYTE_FROM_FONTLOOKUP(temp1, ch1, i )
			else temp1 = 0x00;

			if(ch2) PGM_GET_BYTE_FROM_FONTLOOKUP(temp2, ch2, i )
    1df0:	23 9d       	mul	r18, r3
    1df2:	c0 01       	movw	r24, r0
    1df4:	11 24       	eor	r1, r1
    1df6:	ec 01       	movw	r28, r24
    1df8:	c4 5d       	subi	r28, 0xD4	; 212
    1dfa:	df 4f       	sbci	r29, 0xFF	; 255
    1dfc:	93 9c       	mul	r9, r3
    1dfe:	d0 01       	movw	r26, r0
    1e00:	11 24       	eor	r1, r1
    1e02:	a4 5d       	subi	r26, 0xD4	; 212
    1e04:	bf 4f       	sbci	r27, 0xFF	; 255
		else ch2 = 0x00;
		if(str_ptr_next == &set_measure_delay.str[count] && count == 10){
			ch2 = measure_delay + 0x30;
		}

		for (char i = 0; i < 5; i++ ){		
    1e06:	8f 5c       	subi	r24, 0xCF	; 207
    1e08:	9f 4f       	sbci	r25, 0xFF	; 255
			if(ch1) PGM_GET_BYTE_FROM_FONTLOOKUP(temp1, ch1, i )
    1e0a:	99 20       	and	r9, r9
    1e0c:	11 f4       	brne	.+4      	; 0x1e12 <Lcd3310_String_P_Anime+0xe8>
    1e0e:	50 e0       	ldi	r21, 0x00	; 0
    1e10:	03 c0       	rjmp	.+6      	; 0x1e18 <Lcd3310_String_P_Anime+0xee>
    1e12:	fd 01       	movw	r30, r26
    1e14:	54 91       	lpm	r21, Z+
    1e16:	55 0f       	add	r21, r21
			else temp1 = 0x00;

			if(ch2) PGM_GET_BYTE_FROM_FONTLOOKUP(temp2, ch2, i )
    1e18:	22 23       	and	r18, r18
    1e1a:	11 f4       	brne	.+4      	; 0x1e20 <Lcd3310_String_P_Anime+0xf6>
    1e1c:	30 e0       	ldi	r19, 0x00	; 0
    1e1e:	03 c0       	rjmp	.+6      	; 0x1e26 <Lcd3310_String_P_Anime+0xfc>
    1e20:	fe 01       	movw	r30, r28
    1e22:	34 91       	lpm	r19, Z+
    1e24:	33 0f       	add	r19, r19
    1e26:	e3 2f       	mov	r30, r19
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	65 2f       	mov	r22, r21
    1e2c:	70 e0       	ldi	r23, 0x00	; 0
			else temp2 = 0x00;

			if(is_next) display = (temp1 >> num_of_cadr) | ( (temp2 << (8 - num_of_cadr)) );
    1e2e:	66 20       	and	r6, r6
    1e30:	69 f0       	breq	.+26     	; 0x1e4c <Lcd3310_String_P_Anime+0x122>
    1e32:	00 2e       	mov	r0, r16
    1e34:	02 c0       	rjmp	.+4      	; 0x1e3a <Lcd3310_String_P_Anime+0x110>
    1e36:	ee 0f       	add	r30, r30
    1e38:	ff 1f       	adc	r31, r31
    1e3a:	0a 94       	dec	r0
    1e3c:	e2 f7       	brpl	.-8      	; 0x1e36 <Lcd3310_String_P_Anime+0x10c>
    1e3e:	0e 2c       	mov	r0, r14
    1e40:	02 c0       	rjmp	.+4      	; 0x1e46 <Lcd3310_String_P_Anime+0x11c>
    1e42:	75 95       	asr	r23
    1e44:	67 95       	ror	r22
    1e46:	0a 94       	dec	r0
    1e48:	e2 f7       	brpl	.-8      	; 0x1e42 <Lcd3310_String_P_Anime+0x118>
    1e4a:	0c c0       	rjmp	.+24     	; 0x1e64 <Lcd3310_String_P_Anime+0x13a>
			else 		display = (temp1 << num_of_cadr) | ( (temp2 >> (8 - num_of_cadr)) );
    1e4c:	00 2e       	mov	r0, r16
    1e4e:	02 c0       	rjmp	.+4      	; 0x1e54 <Lcd3310_String_P_Anime+0x12a>
    1e50:	f5 95       	asr	r31
    1e52:	e7 95       	ror	r30
    1e54:	0a 94       	dec	r0
    1e56:	e2 f7       	brpl	.-8      	; 0x1e50 <Lcd3310_String_P_Anime+0x126>
    1e58:	0e 2c       	mov	r0, r14
    1e5a:	02 c0       	rjmp	.+4      	; 0x1e60 <Lcd3310_String_P_Anime+0x136>
    1e5c:	66 0f       	add	r22, r22
    1e5e:	77 1f       	adc	r23, r23
    1e60:	0a 94       	dec	r0
    1e62:	e2 f7       	brpl	.-8      	; 0x1e5c <Lcd3310_String_P_Anime+0x132>
    1e64:	3e 2f       	mov	r19, r30
    1e66:	36 2b       	or	r19, r22
			if(is_invert_colors) display = (uint8_t) ~display;
    1e68:	71 10       	cpse	r7, r1
    1e6a:	30 95       	com	r19


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (uint8_t)~LCD_CE_PIN;
    1e6c:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (uint8_t)LCD_DC_PIN;
    1e6e:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (uint8_t)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    1e70:	3f b9       	out	0x0f, r19	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1e72:	77 9b       	sbis	0x0e, 7	; 14
    1e74:	fe cf       	rjmp	.-4      	; 0x1e72 <Lcd3310_String_P_Anime+0x148>

    //  Disable display controller.
    PORTB |= (uint8_t)LCD_CE_PIN;
    1e76:	c3 9a       	sbi	0x18, 3	; 24
    1e78:	21 96       	adiw	r28, 0x01	; 1
    1e7a:	11 96       	adiw	r26, 0x01	; 1
		else ch2 = 0x00;
		if(str_ptr_next == &set_measure_delay.str[count] && count == 10){
			ch2 = measure_delay + 0x30;
		}

		for (char i = 0; i < 5; i++ ){		
    1e7c:	c8 17       	cp	r28, r24
    1e7e:	d9 07       	cpc	r29, r25
    1e80:	09 f0       	breq	.+2      	; 0x1e84 <Lcd3310_String_P_Anime+0x15a>
    1e82:	c3 cf       	rjmp	.-122    	; 0x1e0a <Lcd3310_String_P_Anime+0xe0>
			if(is_next) display = (temp1 >> num_of_cadr) | ( (temp2 << (8 - num_of_cadr)) );
			else 		display = (temp1 << num_of_cadr) | ( (temp2 >> (8 - num_of_cadr)) );
			if(is_invert_colors) display = (uint8_t) ~display;
		    Lcd3310_Send( display, LCD_DATA );
	    }
		if(is_invert_colors) Lcd3310_Send( 0xff, LCD_DATA );
    1e84:	77 20       	and	r7, r7
    1e86:	31 f0       	breq	.+12     	; 0x1e94 <Lcd3310_String_P_Anime+0x16a>


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (uint8_t)~LCD_CE_PIN;
    1e88:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (uint8_t)LCD_DC_PIN;
    1e8a:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (uint8_t)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    1e8c:	2f b8       	out	0x0f, r2	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1e8e:	77 9b       	sbis	0x0e, 7	; 14
    1e90:	fe cf       	rjmp	.-4      	; 0x1e8e <Lcd3310_String_P_Anime+0x164>
    1e92:	05 c0       	rjmp	.+10     	; 0x1e9e <Lcd3310_String_P_Anime+0x174>


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (uint8_t)~LCD_CE_PIN;
    1e94:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (uint8_t)LCD_DC_PIN;
    1e96:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (uint8_t)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    1e98:	1f b8       	out	0x0f, r1	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1e9a:	77 9b       	sbis	0x0e, 7	; 14
    1e9c:	fe cf       	rjmp	.-4      	; 0x1e9a <Lcd3310_String_P_Anime+0x170>

    //  Disable display controller.
    PORTB |= (uint8_t)LCD_CE_PIN;
    1e9e:	c3 9a       	sbi	0x18, 3	; 24
	uint8_t ch1 = 1, ch2 = 1, display, temp1, temp2, count = 0;

	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    Lcd3310_Send( 0x40 | (Lcd3310_Index / LCD_X_RES), LCD_CMD );
	
	while ( ch1 || ch2 ){
    1ea0:	99 20       	and	r9, r9
    1ea2:	09 f0       	breq	.+2      	; 0x1ea6 <Lcd3310_String_P_Anime+0x17c>
    1ea4:	87 cf       	rjmp	.-242    	; 0x1db4 <Lcd3310_String_P_Anime+0x8a>
    1ea6:	22 23       	and	r18, r18
    1ea8:	09 f0       	breq	.+2      	; 0x1eac <Lcd3310_String_P_Anime+0x182>
    1eaa:	84 cf       	rjmp	.-248    	; 0x1db4 <Lcd3310_String_P_Anime+0x8a>
		    Lcd3310_Send( display, LCD_DATA );
	    }
		if(is_invert_colors) Lcd3310_Send( 0xff, LCD_DATA );
		else Lcd3310_Send( 0x00, LCD_DATA );
	}
	if(is_invert_colors && (count < 14)){
    1eac:	77 20       	and	r7, r7
    1eae:	a9 f0       	breq	.+42     	; 0x1eda <Lcd3310_String_P_Anime+0x1b0>
    1eb0:	4e 30       	cpi	r20, 0x0E	; 14
    1eb2:	98 f4       	brcc	.+38     	; 0x1eda <Lcd3310_String_P_Anime+0x1b0>
		for(count = (14 - count) * 6; count > 0; count--){
    1eb4:	2e e0       	ldi	r18, 0x0E	; 14
    1eb6:	30 e0       	ldi	r19, 0x00	; 0
    1eb8:	24 1b       	sub	r18, r20
    1eba:	31 09       	sbc	r19, r1
    1ebc:	c9 01       	movw	r24, r18
    1ebe:	88 0f       	add	r24, r24
    1ec0:	99 1f       	adc	r25, r25
    1ec2:	82 0f       	add	r24, r18
    1ec4:	93 1f       	adc	r25, r19
    1ec6:	88 0f       	add	r24, r24
    {
        PORTB &= (uint8_t)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    1ec8:	9f ef       	ldi	r25, 0xFF	; 255


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (uint8_t)~LCD_CE_PIN;
    1eca:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (uint8_t)LCD_DC_PIN;
    1ecc:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (uint8_t)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    1ece:	9f b9       	out	0x0f, r25	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1ed0:	77 9b       	sbis	0x0e, 7	; 14
    1ed2:	fe cf       	rjmp	.-4      	; 0x1ed0 <Lcd3310_String_P_Anime+0x1a6>

    //  Disable display controller.
    PORTB |= (uint8_t)LCD_CE_PIN;
    1ed4:	c3 9a       	sbi	0x18, 3	; 24
	    }
		if(is_invert_colors) Lcd3310_Send( 0xff, LCD_DATA );
		else Lcd3310_Send( 0x00, LCD_DATA );
	}
	if(is_invert_colors && (count < 14)){
		for(count = (14 - count) * 6; count > 0; count--){
    1ed6:	81 50       	subi	r24, 0x01	; 1
    1ed8:	c1 f7       	brne	.-16     	; 0x1eca <Lcd3310_String_P_Anime+0x1a0>
			Lcd3310_Send( 0xff, LCD_DATA );
		}
	}
}
    1eda:	df 91       	pop	r29
    1edc:	cf 91       	pop	r28
    1ede:	1f 91       	pop	r17
    1ee0:	0f 91       	pop	r16
    1ee2:	ff 90       	pop	r15
    1ee4:	ef 90       	pop	r14
    1ee6:	df 90       	pop	r13
    1ee8:	cf 90       	pop	r12
    1eea:	bf 90       	pop	r11
    1eec:	af 90       	pop	r10
    1eee:	9f 90       	pop	r9
    1ef0:	8f 90       	pop	r8
    1ef2:	7f 90       	pop	r7
    1ef4:	6f 90       	pop	r6
    1ef6:	5f 90       	pop	r5
    1ef8:	4f 90       	pop	r4
    1efa:	3f 90       	pop	r3
    1efc:	2f 90       	pop	r2
    1efe:	08 95       	ret

00001f00 <Lcd3310_GotoXY>:
#endif

void Lcd3310_GotoXY(uint16_t x, uint16_t y)
{
    Lcd3310_Index = (uint16_t)x * 6 + (uint16_t)y * 84;
    1f00:	24 e5       	ldi	r18, 0x54	; 84
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	62 9f       	mul	r22, r18
    1f06:	a0 01       	movw	r20, r0
    1f08:	63 9f       	mul	r22, r19
    1f0a:	50 0d       	add	r21, r0
    1f0c:	72 9f       	mul	r23, r18
    1f0e:	50 0d       	add	r21, r0
    1f10:	11 24       	eor	r1, r1
    1f12:	9c 01       	movw	r18, r24
    1f14:	22 0f       	add	r18, r18
    1f16:	33 1f       	adc	r19, r19
    1f18:	28 0f       	add	r18, r24
    1f1a:	39 1f       	adc	r19, r25
    1f1c:	22 0f       	add	r18, r18
    1f1e:	33 1f       	adc	r19, r19
    1f20:	42 0f       	add	r20, r18
    1f22:	53 1f       	adc	r21, r19
    1f24:	50 93 90 03 	sts	0x0390, r21
    1f28:	40 93 8f 03 	sts	0x038F, r20
}
    1f2c:	08 95       	ret

00001f2e <Lcd3310_ClearCenter>:


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (uint8_t)~LCD_CE_PIN;
    1f2e:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (uint8_t)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (uint8_t)~LCD_DC_PIN;
    1f30:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    1f32:	80 e8       	ldi	r24, 0x80	; 128
    1f34:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1f36:	77 9b       	sbis	0x0e, 7	; 14
    1f38:	fe cf       	rjmp	.-4      	; 0x1f36 <Lcd3310_ClearCenter+0x8>

    //  Disable display controller.
    PORTB |= (uint8_t)LCD_CE_PIN;
    1f3a:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (uint8_t)~LCD_CE_PIN;
    1f3c:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (uint8_t)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (uint8_t)~LCD_DC_PIN;
    1f3e:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    1f40:	81 e4       	ldi	r24, 0x41	; 65
    1f42:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1f44:	77 9b       	sbis	0x0e, 7	; 14
    1f46:	fe cf       	rjmp	.-4      	; 0x1f44 <Lcd3310_ClearCenter+0x16>

    //  Disable display controller.
    PORTB |= (uint8_t)LCD_CE_PIN;
    1f48:	c3 9a       	sbi	0x18, 3	; 24
    1f4a:	80 e0       	ldi	r24, 0x00	; 0
    1f4c:	90 e0       	ldi	r25, 0x00	; 0


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (uint8_t)~LCD_CE_PIN;
    1f4e:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (uint8_t)LCD_DC_PIN;
    1f50:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (uint8_t)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    1f52:	1f b8       	out	0x0f, r1	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1f54:	77 9b       	sbis	0x0e, 7	; 14
    1f56:	fe cf       	rjmp	.-4      	; 0x1f54 <Lcd3310_ClearCenter+0x26>

    //  Disable display controller.
    PORTB |= (uint8_t)LCD_CE_PIN;
    1f58:	c3 9a       	sbi	0x18, 3	; 24
void Lcd3310_ClearCenter(void)
{
#ifdef LCD_IMAGES //  clear only center lines
	Lcd3310_Send( 0x80 | (84 % LCD_X_RES), LCD_CMD );
    Lcd3310_Send( 0x40 | (84 / LCD_X_RES), LCD_CMD );
	for(uint16_t i=0; i < LCD_CENTER_RES; i++){
    1f5a:	01 96       	adiw	r24, 0x01	; 1
    1f5c:	21 e0       	ldi	r18, 0x01	; 1
    1f5e:	84 3a       	cpi	r24, 0xA4	; 164
    1f60:	92 07       	cpc	r25, r18
    1f62:	a9 f7       	brne	.-22     	; 0x1f4e <Lcd3310_ClearCenter+0x20>
	Lcd3310_Send( 0x40, LCD_CMD );
	for(uint16_t i=0; i < LCD_XY_RES; i++){
		Lcd3310_Send( 0x00, LCD_DATA );
	}
#endif
}
    1f64:	08 95       	ret

00001f66 <Lcd3310_InitFill>:


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (uint8_t)~LCD_CE_PIN;
    1f66:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (uint8_t)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (uint8_t)~LCD_DC_PIN;
    1f68:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    1f6a:	80 e8       	ldi	r24, 0x80	; 128
    1f6c:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1f6e:	77 9b       	sbis	0x0e, 7	; 14
    1f70:	fe cf       	rjmp	.-4      	; 0x1f6e <Lcd3310_InitFill+0x8>

    //  Disable display controller.
    PORTB |= (uint8_t)LCD_CE_PIN;
    1f72:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (uint8_t)~LCD_CE_PIN;
    1f74:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (uint8_t)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (uint8_t)~LCD_DC_PIN;
    1f76:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    1f78:	80 e4       	ldi	r24, 0x40	; 64
    1f7a:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1f7c:	77 9b       	sbis	0x0e, 7	; 14
    1f7e:	fe cf       	rjmp	.-4      	; 0x1f7c <Lcd3310_InitFill+0x16>

    //  Disable display controller.
    PORTB |= (uint8_t)LCD_CE_PIN;
    1f80:	c3 9a       	sbi	0x18, 3	; 24
    1f82:	e3 e9       	ldi	r30, 0x93	; 147
    1f84:	f2 e0       	ldi	r31, 0x02	; 2
	// Goto (0, 0) of display
	Lcd3310_Send( 0x80, LCD_CMD );
    Lcd3310_Send( 0x40, LCD_CMD );

	for (int i = 0; i < 84; i++ ){
        Lcd3310_Send( pgm_read_byte( LcdImage_Upper + i ), LCD_DATA );
    1f86:	84 91       	lpm	r24, Z+


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (uint8_t)~LCD_CE_PIN;
    1f88:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (uint8_t)LCD_DC_PIN;
    1f8a:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (uint8_t)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    1f8c:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1f8e:	77 9b       	sbis	0x0e, 7	; 14
    1f90:	fe cf       	rjmp	.-4      	; 0x1f8e <Lcd3310_InitFill+0x28>

    //  Disable display controller.
    PORTB |= (uint8_t)LCD_CE_PIN;
    1f92:	c3 9a       	sbi	0x18, 3	; 24
    1f94:	31 96       	adiw	r30, 0x01	; 1
#ifdef LCD_IMAGES
	// Goto (0, 0) of display
	Lcd3310_Send( 0x80, LCD_CMD );
    Lcd3310_Send( 0x40, LCD_CMD );

	for (int i = 0; i < 84; i++ ){
    1f96:	82 e0       	ldi	r24, 0x02	; 2
    1f98:	e7 3e       	cpi	r30, 0xE7	; 231
    1f9a:	f8 07       	cpc	r31, r24
    1f9c:	a1 f7       	brne	.-24     	; 0x1f86 <Lcd3310_InitFill+0x20>
    1f9e:	e7 ee       	ldi	r30, 0xE7	; 231
    1fa0:	f2 e0       	ldi	r31, 0x02	; 2
        Lcd3310_Send( pgm_read_byte( LcdImage_Upper + i ), LCD_DATA );
    }	
	for (uint16_t i=0; i < LCD_CENTER_RES; i++ ){
        Lcd3310_Send( pgm_read_byte( LcdImage_Center + i), LCD_DATA );
    1fa2:	84 91       	lpm	r24, Z+


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (uint8_t)~LCD_CE_PIN;
    1fa4:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (uint8_t)LCD_DC_PIN;
    1fa6:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (uint8_t)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    1fa8:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1faa:	77 9b       	sbis	0x0e, 7	; 14
    1fac:	fe cf       	rjmp	.-4      	; 0x1faa <Lcd3310_InitFill+0x44>

    //  Disable display controller.
    PORTB |= (uint8_t)LCD_CE_PIN;
    1fae:	c3 9a       	sbi	0x18, 3	; 24
    1fb0:	31 96       	adiw	r30, 0x01	; 1
    Lcd3310_Send( 0x40, LCD_CMD );

	for (int i = 0; i < 84; i++ ){
        Lcd3310_Send( pgm_read_byte( LcdImage_Upper + i ), LCD_DATA );
    }	
	for (uint16_t i=0; i < LCD_CENTER_RES; i++ ){
    1fb2:	84 e0       	ldi	r24, 0x04	; 4
    1fb4:	eb 38       	cpi	r30, 0x8B	; 139
    1fb6:	f8 07       	cpc	r31, r24
    1fb8:	a1 f7       	brne	.-24     	; 0x1fa2 <Lcd3310_InitFill+0x3c>
    1fba:	e7 e3       	ldi	r30, 0x37	; 55
    1fbc:	f4 e0       	ldi	r31, 0x04	; 4
        Lcd3310_Send( pgm_read_byte( LcdImage_Center + i), LCD_DATA );
	}
    for (int i = 0; i < 84; i++ ){
        Lcd3310_Send( pgm_read_byte( LcdImage_brunql_gmail_com + i), LCD_DATA );
    1fbe:	84 91       	lpm	r24, Z+


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (uint8_t)~LCD_CE_PIN;
    1fc0:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (uint8_t)LCD_DC_PIN;
    1fc2:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (uint8_t)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    1fc4:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1fc6:	77 9b       	sbis	0x0e, 7	; 14
    1fc8:	fe cf       	rjmp	.-4      	; 0x1fc6 <Lcd3310_InitFill+0x60>

    //  Disable display controller.
    PORTB |= (uint8_t)LCD_CE_PIN;
    1fca:	c3 9a       	sbi	0x18, 3	; 24
    1fcc:	31 96       	adiw	r30, 0x01	; 1
        Lcd3310_Send( pgm_read_byte( LcdImage_Upper + i ), LCD_DATA );
    }	
	for (uint16_t i=0; i < LCD_CENTER_RES; i++ ){
        Lcd3310_Send( pgm_read_byte( LcdImage_Center + i), LCD_DATA );
	}
    for (int i = 0; i < 84; i++ ){
    1fce:	84 e0       	ldi	r24, 0x04	; 4
    1fd0:	eb 38       	cpi	r30, 0x8B	; 139
    1fd2:	f8 07       	cpc	r31, r24
    1fd4:	a1 f7       	brne	.-24     	; 0x1fbe <Lcd3310_InitFill+0x58>
        Lcd3310_Send( pgm_read_byte( LcdImage_brunql_gmail_com + i), LCD_DATA );
    }
#else
    Lcd3310_ClearCenter();
#endif
}
    1fd6:	08 95       	ret

00001fd8 <Lcd3310_Init>:
void Lcd3310_InitFill (void);



void Lcd3310_Init(uint16_t show_init_data_delay_ms)
{
    1fd8:	af 92       	push	r10
    1fda:	bf 92       	push	r11
    1fdc:	cf 92       	push	r12
    1fde:	df 92       	push	r13
    1fe0:	ef 92       	push	r14
    1fe2:	ff 92       	push	r15
    1fe4:	0f 93       	push	r16
    1fe6:	1f 93       	push	r17
    1fe8:	8c 01       	movw	r16, r24
	//  Pull-up on reset pin.
    PORTB |= LCD_RST_PIN;
    1fea:	c2 9a       	sbi	0x18, 2	; 24

    //  Set output bits on port B.
    DDRB |= LCD_RST_PIN | LCD_DC_PIN | LCD_CE_PIN | SPI_MOSI_PIN | SPI_CLK_PIN;
    1fec:	87 b3       	in	r24, 0x17	; 23
    1fee:	8c 6b       	ori	r24, 0xBC	; 188
    1ff0:	87 bb       	out	0x17, r24	; 23
    1ff2:	84 ef       	ldi	r24, 0xF4	; 244
    1ff4:	91 e0       	ldi	r25, 0x01	; 1
    1ff6:	20 e9       	ldi	r18, 0x90	; 144
    1ff8:	31 e0       	ldi	r19, 0x01	; 1
    1ffa:	f9 01       	movw	r30, r18
    1ffc:	31 97       	sbiw	r30, 0x01	; 1
    1ffe:	f1 f7       	brne	.-4      	; 0x1ffc <Lcd3310_Init+0x24>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2000:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2002:	d9 f7       	brne	.-10     	; 0x1ffa <Lcd3310_Init+0x22>

    _delay_ms(50);

    //  Toggle display reset pin.
    PORTB &= (uint8_t)~LCD_RST_PIN;
    2004:	c2 98       	cbi	0x18, 2	; 24
    2006:	80 ea       	ldi	r24, 0xA0	; 160
    2008:	9f e0       	ldi	r25, 0x0F	; 15
    200a:	01 97       	sbiw	r24, 0x01	; 1
    200c:	f1 f7       	brne	.-4      	; 0x200a <Lcd3310_Init+0x32>
    _delay_ms(1);
    PORTB |= LCD_RST_PIN;
    200e:	c2 9a       	sbi	0x18, 2	; 24

    //  Enable SPI port: No interrupt, MSBit first, Master mode, CPOL->0, CPHA->0, Clk/4
    SPCR = 0x50;
    2010:	80 e5       	ldi	r24, 0x50	; 80
    2012:	8d b9       	out	0x0d, r24	; 13

    //  Disable LCD controller
    PORTB |= LCD_CE_PIN;
    2014:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (uint8_t)~LCD_CE_PIN;
    2016:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (uint8_t)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (uint8_t)~LCD_DC_PIN;
    2018:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    201a:	81 e2       	ldi	r24, 0x21	; 33
    201c:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    201e:	77 9b       	sbis	0x0e, 7	; 14
    2020:	fe cf       	rjmp	.-4      	; 0x201e <Lcd3310_Init+0x46>

    //  Disable display controller.
    PORTB |= (uint8_t)LCD_CE_PIN;
    2022:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (uint8_t)~LCD_CE_PIN;
    2024:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (uint8_t)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (uint8_t)~LCD_DC_PIN;
    2026:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    2028:	88 ec       	ldi	r24, 0xC8	; 200
    202a:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    202c:	77 9b       	sbis	0x0e, 7	; 14
    202e:	fe cf       	rjmp	.-4      	; 0x202c <Lcd3310_Init+0x54>

    //  Disable display controller.
    PORTB |= (uint8_t)LCD_CE_PIN;
    2030:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (uint8_t)~LCD_CE_PIN;
    2032:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (uint8_t)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (uint8_t)~LCD_DC_PIN;
    2034:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    2036:	86 e0       	ldi	r24, 0x06	; 6
    2038:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    203a:	77 9b       	sbis	0x0e, 7	; 14
    203c:	fe cf       	rjmp	.-4      	; 0x203a <Lcd3310_Init+0x62>

    //  Disable display controller.
    PORTB |= (uint8_t)LCD_CE_PIN;
    203e:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (uint8_t)~LCD_CE_PIN;
    2040:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (uint8_t)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (uint8_t)~LCD_DC_PIN;
    2042:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    2044:	83 e1       	ldi	r24, 0x13	; 19
    2046:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    2048:	77 9b       	sbis	0x0e, 7	; 14
    204a:	fe cf       	rjmp	.-4      	; 0x2048 <Lcd3310_Init+0x70>

    //  Disable display controller.
    PORTB |= (uint8_t)LCD_CE_PIN;
    204c:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (uint8_t)~LCD_CE_PIN;
    204e:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (uint8_t)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (uint8_t)~LCD_DC_PIN;
    2050:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    2052:	80 e2       	ldi	r24, 0x20	; 32
    2054:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    2056:	77 9b       	sbis	0x0e, 7	; 14
    2058:	fe cf       	rjmp	.-4      	; 0x2056 <Lcd3310_Init+0x7e>

    //  Disable display controller.
    PORTB |= (uint8_t)LCD_CE_PIN;
    205a:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (uint8_t)~LCD_CE_PIN;
    205c:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (uint8_t)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (uint8_t)~LCD_DC_PIN;
    205e:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    2060:	8c e0       	ldi	r24, 0x0C	; 12
    2062:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    2064:	77 9b       	sbis	0x0e, 7	; 14
    2066:	fe cf       	rjmp	.-4      	; 0x2064 <Lcd3310_Init+0x8c>

    //  Disable display controller.
    PORTB |= (uint8_t)LCD_CE_PIN;
    2068:	c3 9a       	sbi	0x18, 3	; 24
    Lcd3310_Send( 0x06, LCD_CMD );  // Set Temp coefficent.
    Lcd3310_Send( 0x13, LCD_CMD );  // LCD bias mode 1:48.
    Lcd3310_Send( 0x20, LCD_CMD );  // LCD Standard Commands, Horizontal addressing mode.
    Lcd3310_Send( 0x0C, LCD_CMD );  // LCD in normal mode.

	Lcd3310_InitFill();
    206a:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <Lcd3310_InitFill>


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (uint8_t)~LCD_CE_PIN;
    206e:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (uint8_t)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (uint8_t)~LCD_DC_PIN;
    2070:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    2072:	81 e2       	ldi	r24, 0x21	; 33
    2074:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    2076:	77 9b       	sbis	0x0e, 7	; 14
    2078:	fe cf       	rjmp	.-4      	; 0x2076 <Lcd3310_Init+0x9e>

    //  Disable display controller.
    PORTB |= (uint8_t)LCD_CE_PIN;
    207a:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (uint8_t)~LCD_CE_PIN;
    207c:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (uint8_t)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (uint8_t)~LCD_DC_PIN;
    207e:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    2080:	8e e9       	ldi	r24, 0x9E	; 158
    2082:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    2084:	77 9b       	sbis	0x0e, 7	; 14
    2086:	fe cf       	rjmp	.-4      	; 0x2084 <Lcd3310_Init+0xac>

    //  Disable display controller.
    PORTB |= (uint8_t)LCD_CE_PIN;
    2088:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (uint8_t)~LCD_CE_PIN;
    208a:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (uint8_t)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (uint8_t)~LCD_DC_PIN;
    208c:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    208e:	80 e2       	ldi	r24, 0x20	; 32
    2090:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    2092:	77 9b       	sbis	0x0e, 7	; 14
    2094:	fe cf       	rjmp	.-4      	; 0x2092 <Lcd3310_Init+0xba>

    //  Disable display controller.
    PORTB |= (uint8_t)LCD_CE_PIN;
    2096:	c3 9a       	sbi	0x18, 3	; 24
    Lcd3310_Send( 0x80 | LCD_CONTRAST, LCD_CMD );

    //  LCD Standard Commands, horizontal addressing mode.
    Lcd3310_Send( 0x20, LCD_CMD );

	_delay_ms(show_init_data_delay_ms); // show image from LcdCache initial value
    2098:	b8 01       	movw	r22, r16
    209a:	80 e0       	ldi	r24, 0x00	; 0
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <__floatunsisf>
    20a2:	5b 01       	movw	r10, r22
    20a4:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20a6:	20 e0       	ldi	r18, 0x00	; 0
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	4a e7       	ldi	r20, 0x7A	; 122
    20ac:	55 e4       	ldi	r21, 0x45	; 69
    20ae:	0e 94 f6 14 	call	0x29ec	; 0x29ec <__mulsf3>
    20b2:	7b 01       	movw	r14, r22
    20b4:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    20b6:	20 e0       	ldi	r18, 0x00	; 0
    20b8:	30 e0       	ldi	r19, 0x00	; 0
    20ba:	40 e8       	ldi	r20, 0x80	; 128
    20bc:	5f e3       	ldi	r21, 0x3F	; 63
    20be:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <__ltsf2>
    20c2:	88 23       	and	r24, r24
    20c4:	1c f4       	brge	.+6      	; 0x20cc <Lcd3310_Init+0xf4>
    20c6:	61 e0       	ldi	r22, 0x01	; 1
    20c8:	70 e0       	ldi	r23, 0x00	; 0
    20ca:	24 c0       	rjmp	.+72     	; 0x2114 <Lcd3310_Init+0x13c>
		__ticks = 1;
	else if (__tmp > 65535)
    20cc:	c8 01       	movw	r24, r16
    20ce:	b7 01       	movw	r22, r14
    20d0:	20 e0       	ldi	r18, 0x00	; 0
    20d2:	3f ef       	ldi	r19, 0xFF	; 255
    20d4:	4f e7       	ldi	r20, 0x7F	; 127
    20d6:	57 e4       	ldi	r21, 0x47	; 71
    20d8:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <__gtsf2>
    20dc:	18 16       	cp	r1, r24
    20de:	b4 f4       	brge	.+44     	; 0x210c <Lcd3310_Init+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20e0:	c6 01       	movw	r24, r12
    20e2:	b5 01       	movw	r22, r10
    20e4:	20 e0       	ldi	r18, 0x00	; 0
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	40 e2       	ldi	r20, 0x20	; 32
    20ea:	51 e4       	ldi	r21, 0x41	; 65
    20ec:	0e 94 f6 14 	call	0x29ec	; 0x29ec <__mulsf3>
    20f0:	0e 94 20 13 	call	0x2640	; 0x2640 <__fixunssfsi>
    20f4:	80 e9       	ldi	r24, 0x90	; 144
    20f6:	91 e0       	ldi	r25, 0x01	; 1
    20f8:	05 c0       	rjmp	.+10     	; 0x2104 <Lcd3310_Init+0x12c>
    20fa:	fc 01       	movw	r30, r24
    20fc:	31 97       	sbiw	r30, 0x01	; 1
    20fe:	f1 f7       	brne	.-4      	; 0x20fc <Lcd3310_Init+0x124>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2100:	61 50       	subi	r22, 0x01	; 1
    2102:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2104:	61 15       	cp	r22, r1
    2106:	71 05       	cpc	r23, r1
    2108:	c1 f7       	brne	.-16     	; 0x20fa <Lcd3310_Init+0x122>
    210a:	07 c0       	rjmp	.+14     	; 0x211a <Lcd3310_Init+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    210c:	c8 01       	movw	r24, r16
    210e:	b7 01       	movw	r22, r14
    2110:	0e 94 20 13 	call	0x2640	; 0x2640 <__fixunssfsi>
    2114:	cb 01       	movw	r24, r22
    2116:	01 97       	sbiw	r24, 0x01	; 1
    2118:	f1 f7       	brne	.-4      	; 0x2116 <Lcd3310_Init+0x13e>
}
    211a:	1f 91       	pop	r17
    211c:	0f 91       	pop	r16
    211e:	ff 90       	pop	r15
    2120:	ef 90       	pop	r14
    2122:	df 90       	pop	r13
    2124:	cf 90       	pop	r12
    2126:	bf 90       	pop	r11
    2128:	af 90       	pop	r10
    212a:	08 95       	ret

0000212c <Lcd3310_Send>:


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (uint8_t)~LCD_CE_PIN;
    212c:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    212e:	61 30       	cpi	r22, 0x01	; 1
    2130:	11 f4       	brne	.+4      	; 0x2136 <Lcd3310_Send+0xa>
    {
        PORTB |= (uint8_t)LCD_DC_PIN;
    2132:	c4 9a       	sbi	0x18, 4	; 24
    2134:	01 c0       	rjmp	.+2      	; 0x2138 <Lcd3310_Send+0xc>
    }
    else
    {
        PORTB &= (uint8_t)~LCD_DC_PIN;
    2136:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    2138:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    213a:	77 9b       	sbis	0x0e, 7	; 14
    213c:	fe cf       	rjmp	.-4      	; 0x213a <Lcd3310_Send+0xe>

    //  Disable display controller.
    PORTB |= (uint8_t)LCD_CE_PIN;
    213e:	c3 9a       	sbi	0x18, 3	; 24
}
    2140:	08 95       	ret

00002142 <Lcd3310_UInt16AsText>:
	}
	Lcd3310_Char( ' ', is_invert_colors );
}

void Lcd3310_UInt16AsText(uint16_t i, WhiteOrBlackText is_invert_colors)
{
    2142:	1f 93       	push	r17
    2144:	16 2f       	mov	r17, r22
	UInt16ToString( i );
    2146:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <UInt16ToString>
	// show three numbers and space
	for(uint8_t count=0; count < 4; count++){ // 4 chars
			Lcd3310_Char( to_string_result[count], is_invert_colors );
    214a:	80 91 8b 03 	lds	r24, 0x038B
    214e:	61 2f       	mov	r22, r17
    2150:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <Lcd3310_Char>
    2154:	80 91 8c 03 	lds	r24, 0x038C
    2158:	61 2f       	mov	r22, r17
    215a:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <Lcd3310_Char>
    215e:	80 91 8d 03 	lds	r24, 0x038D
    2162:	61 2f       	mov	r22, r17
    2164:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <Lcd3310_Char>
    2168:	80 91 8e 03 	lds	r24, 0x038E
    216c:	61 2f       	mov	r22, r17
    216e:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <Lcd3310_Char>
	}
	Lcd3310_Char( ' ', is_invert_colors );
    2172:	80 e2       	ldi	r24, 0x20	; 32
    2174:	61 2f       	mov	r22, r17
    2176:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <Lcd3310_Char>
}
    217a:	1f 91       	pop	r17
    217c:	08 95       	ret

0000217e <Lcd3310_UInt16AsText_3Chars>:
		Lcd3310_Char( to_string_result[count], is_invert_colors );
	}
}

void Lcd3310_UInt16AsText_3Chars(uint16_t i, WhiteOrBlackText is_invert_colors)
{
    217e:	1f 93       	push	r17
    2180:	16 2f       	mov	r17, r22
	UInt16ToString( i );
    2182:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <UInt16ToString>
	// show three numbers and space
	for(uint8_t count=1; count < 4; count++){ // 0x03ff - max value, show only '3ff'
			Lcd3310_Char( to_string_result[count], is_invert_colors );
    2186:	80 91 8c 03 	lds	r24, 0x038C
    218a:	61 2f       	mov	r22, r17
    218c:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <Lcd3310_Char>
    2190:	80 91 8d 03 	lds	r24, 0x038D
    2194:	61 2f       	mov	r22, r17
    2196:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <Lcd3310_Char>
    219a:	80 91 8e 03 	lds	r24, 0x038E
    219e:	61 2f       	mov	r22, r17
    21a0:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <Lcd3310_Char>
	}
	Lcd3310_Char( ' ', is_invert_colors );
    21a4:	80 e2       	ldi	r24, 0x20	; 32
    21a6:	61 2f       	mov	r22, r17
    21a8:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <Lcd3310_Char>
}
    21ac:	1f 91       	pop	r17
    21ae:	08 95       	ret

000021b0 <Lcd3310_UInt8AsText>:




void Lcd3310_UInt8AsText(uint8_t ch, WhiteOrBlackText is_invert_colors)
{
    21b0:	1f 93       	push	r17
    21b2:	16 2f       	mov	r17, r22
	UInt8ToString( ch );
    21b4:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <UInt8ToString>
	for(uint8_t count=0; count < 2; count++){
		Lcd3310_Char( to_string_result[count], is_invert_colors );
    21b8:	80 91 8b 03 	lds	r24, 0x038B
    21bc:	61 2f       	mov	r22, r17
    21be:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <Lcd3310_Char>
    21c2:	80 91 8c 03 	lds	r24, 0x038C
    21c6:	61 2f       	mov	r22, r17
    21c8:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <Lcd3310_Char>
	}
}
    21cc:	1f 91       	pop	r17
    21ce:	08 95       	ret

000021d0 <init_menu_now>:



void init_menu_now(void)
{
	menu_now = &go;
    21d0:	88 e2       	ldi	r24, 0x28	; 40
    21d2:	91 e0       	ldi	r25, 0x01	; 1
    21d4:	90 93 ca 03 	sts	0x03CA, r25
    21d8:	80 93 c9 03 	sts	0x03C9, r24
}
    21dc:	08 95       	ret

000021de <Lcd3310_UpdateDisplayInfo>:
}
#endif


void Lcd3310_UpdateDisplayInfo(void)
{
    21de:	ef 92       	push	r14
    21e0:	ff 92       	push	r15
    21e2:	0f 93       	push	r16
    21e4:	1f 93       	push	r17
    21e6:	cf 93       	push	r28
    21e8:	df 93       	push	r29
    uint8_t number_of_elements_in_menu_now = 1;
    
	Lcd3310_ClearCenter();
    21ea:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <Lcd3310_ClearCenter>
	
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { menu_now_atomic = menu_now; }
    21ee:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    21f0:	f8 94       	cli
    21f2:	80 91 c9 03 	lds	r24, 0x03C9
    21f6:	90 91 ca 03 	lds	r25, 0x03CA
    21fa:	90 93 c8 03 	sts	0x03C8, r25
    21fe:	80 93 c7 03 	sts	0x03C7, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2202:	2f bf       	out	0x3f, r18	; 63

	struct menu_item *menu_temp = menu_now_atomic->next;
    2204:	e0 91 c7 03 	lds	r30, 0x03C7
    2208:	f0 91 c8 03 	lds	r31, 0x03C8
    220c:	c5 81       	ldd	r28, Z+5	; 0x05
    220e:	d6 81       	ldd	r29, Z+6	; 0x06
    2210:	ff 24       	eor	r15, r15
    2212:	f3 94       	inc	r15
    2214:	04 c0       	rjmp	.+8      	; 0x221e <Lcd3310_UpdateDisplayInfo+0x40>
	while( menu_temp != menu_now_atomic ){
		number_of_elements_in_menu_now++;
    2216:	f3 94       	inc	r15
		menu_temp = menu_temp->next;
    2218:	0d 80       	ldd	r0, Y+5	; 0x05
    221a:	de 81       	ldd	r29, Y+6	; 0x06
    221c:	c0 2d       	mov	r28, r0
	Lcd3310_ClearCenter();
	
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { menu_now_atomic = menu_now; }

	struct menu_item *menu_temp = menu_now_atomic->next;
	while( menu_temp != menu_now_atomic ){
    221e:	ce 17       	cp	r28, r30
    2220:	df 07       	cpc	r29, r31
    2222:	c9 f7       	brne	.-14     	; 0x2216 <Lcd3310_UpdateDisplayInfo+0x38>
		number_of_elements_in_menu_now++;
		menu_temp = menu_temp->next;
	}
	if(number_of_elements_in_menu_now > 4){
    2224:	24 e0       	ldi	r18, 0x04	; 4
    2226:	2f 15       	cp	r18, r15
    2228:	18 f4       	brcc	.+6      	; 0x2230 <Lcd3310_UpdateDisplayInfo+0x52>
    222a:	84 e0       	ldi	r24, 0x04	; 4
    222c:	f8 2e       	mov	r15, r24
    222e:	03 c0       	rjmp	.+6      	; 0x2236 <Lcd3310_UpdateDisplayInfo+0x58>
		number_of_elements_in_menu_now = 4;
	}
	 
#ifdef ANIMATION_SWITCH_MENU_ITEMS
	if(number_of_elements_in_menu_now < 3){
    2230:	82 e0       	ldi	r24, 0x02	; 2
    2232:	8f 15       	cp	r24, r15
    2234:	10 f4       	brcc	.+4      	; 0x223a <Lcd3310_UpdateDisplayInfo+0x5c>
		menu_temp = menu_now_atomic;
	}else{
		menu_temp = menu_now_atomic->prev;
    2236:	c7 81       	ldd	r28, Z+7	; 0x07
    2238:	d0 85       	ldd	r29, Z+8	; 0x08
		menu_temp = menu_temp->prev;
	}
#endif

#	ifdef LCD_FIRST_STR
	Lcd3310_GotoXY(0, 0);
    223a:	80 e0       	ldi	r24, 0x00	; 0
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	60 e0       	ldi	r22, 0x00	; 0
    2240:	70 e0       	ldi	r23, 0x00	; 0
    2242:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <Lcd3310_GotoXY>
	Lcd3310_String_P(lcd_first_str, WHITE_TEXT_ON_BLACK);
    2246:	80 91 17 01 	lds	r24, 0x0117
    224a:	90 91 18 01 	lds	r25, 0x0118
    224e:	61 e0       	ldi	r22, 0x01	; 1
    2250:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <Lcd3310_String_P>
    2254:	ee 24       	eor	r14, r14
    2256:	01 e0       	ldi	r16, 0x01	; 1
    2258:	10 e0       	ldi	r17, 0x00	; 0
    225a:	3a c0       	rjmp	.+116    	; 0x22d0 <Lcd3310_UpdateDisplayInfo+0xf2>
#	endif

	for(uint8_t i=0; i < number_of_elements_in_menu_now; i++){
#		ifdef LCD_IMAGES
			Lcd3310_GotoXY(0, i + 1);
    225c:	80 e0       	ldi	r24, 0x00	; 0
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	b8 01       	movw	r22, r16
    2262:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <Lcd3310_GotoXY>
				Lcd3310_GotoXY(0, i + 2);// show menu from (i+1) line because first line filled with '_COLORS_'
#			else
				Lcd3310_GotoXY(0, i); // no images at top
#			endif
#		endif
		if(menu_temp == &results){
    2266:	21 e0       	ldi	r18, 0x01	; 1
    2268:	c2 34       	cpi	r28, 0x42	; 66
    226a:	d2 07       	cpc	r29, r18
    226c:	29 f4       	brne	.+10     	; 0x2278 <Lcd3310_UpdateDisplayInfo+0x9a>
			Lcd3310_GotoXY(0, i + 1);
    226e:	80 e0       	ldi	r24, 0x00	; 0
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	b8 01       	movw	r22, r16
    2274:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <Lcd3310_GotoXY>
		}
		Lcd3310_String_P(menu_temp->str, (menu_now_atomic == menu_temp));
    2278:	29 85       	ldd	r18, Y+9	; 0x09
    227a:	3a 85       	ldd	r19, Y+10	; 0x0a
    227c:	60 e0       	ldi	r22, 0x00	; 0
    227e:	80 91 c7 03 	lds	r24, 0x03C7
    2282:	90 91 c8 03 	lds	r25, 0x03C8
    2286:	8c 17       	cp	r24, r28
    2288:	9d 07       	cpc	r25, r29
    228a:	09 f4       	brne	.+2      	; 0x228e <Lcd3310_UpdateDisplayInfo+0xb0>
    228c:	61 e0       	ldi	r22, 0x01	; 1
    228e:	c9 01       	movw	r24, r18
    2290:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <Lcd3310_String_P>
		if(menu_temp == &set_measure_delay){
    2294:	81 e0       	ldi	r24, 0x01	; 1
    2296:	ca 3a       	cpi	r28, 0xAA	; 170
    2298:	d8 07       	cpc	r29, r24
    229a:	a1 f4       	brne	.+40     	; 0x22c4 <Lcd3310_UpdateDisplayInfo+0xe6>
			Lcd3310_GotoXY(9, i + 1); // TODO: NEED TEST: (i+1) LCD_IMAGES, LCD_FIRST_STR
    229c:	89 e0       	ldi	r24, 0x09	; 9
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	b8 01       	movw	r22, r16
    22a2:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <Lcd3310_GotoXY>
			Lcd3310_Char(measure_delay + 0x30, (menu_now_atomic == menu_temp));
    22a6:	20 91 04 01 	lds	r18, 0x0104
    22aa:	20 5d       	subi	r18, 0xD0	; 208
    22ac:	60 e0       	ldi	r22, 0x00	; 0
    22ae:	80 91 c7 03 	lds	r24, 0x03C7
    22b2:	90 91 c8 03 	lds	r25, 0x03C8
    22b6:	8c 17       	cp	r24, r28
    22b8:	9d 07       	cpc	r25, r29
    22ba:	09 f4       	brne	.+2      	; 0x22be <Lcd3310_UpdateDisplayInfo+0xe0>
    22bc:	61 e0       	ldi	r22, 0x01	; 1
    22be:	82 2f       	mov	r24, r18
    22c0:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <Lcd3310_Char>
		}
		menu_temp = menu_temp->next;
    22c4:	0d 80       	ldd	r0, Y+5	; 0x05
    22c6:	de 81       	ldd	r29, Y+6	; 0x06
    22c8:	c0 2d       	mov	r28, r0
#	ifdef LCD_FIRST_STR
	Lcd3310_GotoXY(0, 0);
	Lcd3310_String_P(lcd_first_str, WHITE_TEXT_ON_BLACK);
#	endif

	for(uint8_t i=0; i < number_of_elements_in_menu_now; i++){
    22ca:	e3 94       	inc	r14
    22cc:	0f 5f       	subi	r16, 0xFF	; 255
    22ce:	1f 4f       	sbci	r17, 0xFF	; 255
    22d0:	ef 14       	cp	r14, r15
    22d2:	20 f2       	brcs	.-120    	; 0x225c <Lcd3310_UpdateDisplayInfo+0x7e>
		}
		menu_temp = menu_temp->next;
	}


	if( menu_now_atomic == &results ){
    22d4:	80 91 c7 03 	lds	r24, 0x03C7
    22d8:	90 91 c8 03 	lds	r25, 0x03C8
    22dc:	82 54       	subi	r24, 0x42	; 66
    22de:	91 40       	sbci	r25, 0x01	; 1
    22e0:	09 f0       	breq	.+2      	; 0x22e4 <Lcd3310_UpdateDisplayInfo+0x106>
    22e2:	9f c0       	rjmp	.+318    	; 0x2422 <Lcd3310_UpdateDisplayInfo+0x244>
		 * |D *** *** *** |  Diff = | Callibrate - Measure |;
		 *
		 */

		// |   R   G   B  |
		Lcd3310_GotoXY(3, 2);
    22e4:	83 e0       	ldi	r24, 0x03	; 3
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	62 e0       	ldi	r22, 0x02	; 2
    22ea:	70 e0       	ldi	r23, 0x00	; 0
    22ec:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <Lcd3310_GotoXY>
		Lcd3310_Char('R', BLACK_TEXT_ON_WHITE);
    22f0:	82 e5       	ldi	r24, 0x52	; 82
    22f2:	60 e0       	ldi	r22, 0x00	; 0
    22f4:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <Lcd3310_Char>
		Lcd3310_GotoXY(7, 2);
    22f8:	87 e0       	ldi	r24, 0x07	; 7
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	62 e0       	ldi	r22, 0x02	; 2
    22fe:	70 e0       	ldi	r23, 0x00	; 0
    2300:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <Lcd3310_GotoXY>
		Lcd3310_Char('G', BLACK_TEXT_ON_WHITE);
    2304:	87 e4       	ldi	r24, 0x47	; 71
    2306:	60 e0       	ldi	r22, 0x00	; 0
    2308:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <Lcd3310_Char>
		Lcd3310_GotoXY(11, 2);
    230c:	8b e0       	ldi	r24, 0x0B	; 11
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	62 e0       	ldi	r22, 0x02	; 2
    2312:	70 e0       	ldi	r23, 0x00	; 0
    2314:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <Lcd3310_GotoXY>
		Lcd3310_Char('B', BLACK_TEXT_ON_WHITE);
    2318:	82 e4       	ldi	r24, 0x42	; 66
    231a:	60 e0       	ldi	r22, 0x00	; 0
    231c:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <Lcd3310_Char>

		// |C *** *** *** |  Callibrate values
		Lcd3310_GotoXY(0, 3);
    2320:	80 e0       	ldi	r24, 0x00	; 0
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	63 e0       	ldi	r22, 0x03	; 3
    2326:	70 e0       	ldi	r23, 0x00	; 0
    2328:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <Lcd3310_GotoXY>
		Lcd3310_Char('C', BLACK_TEXT_ON_WHITE);
    232c:	83 e4       	ldi	r24, 0x43	; 67
    232e:	60 e0       	ldi	r22, 0x00	; 0
    2330:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <Lcd3310_Char>
		Lcd3310_GotoXY(2, 3);
    2334:	82 e0       	ldi	r24, 0x02	; 2
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	63 e0       	ldi	r22, 0x03	; 3
    233a:	70 e0       	ldi	r23, 0x00	; 0
    233c:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <Lcd3310_GotoXY>
		Lcd3310_UInt16AsText_3Chars(hex2dec_result( result[CALIBRATE_INDX][RED] ), BLACK_TEXT_ON_WHITE);
    2340:	80 91 59 03 	lds	r24, 0x0359
    2344:	90 91 5a 03 	lds	r25, 0x035A
    2348:	0e 94 7d 07 	call	0xefa	; 0xefa <hex2dec_result>
    234c:	60 e0       	ldi	r22, 0x00	; 0
    234e:	0e 94 bf 10 	call	0x217e	; 0x217e <Lcd3310_UInt16AsText_3Chars>
		Lcd3310_UInt16AsText_3Chars(hex2dec_result( result[CALIBRATE_INDX][GREEN] ), BLACK_TEXT_ON_WHITE);
    2352:	80 91 5b 03 	lds	r24, 0x035B
    2356:	90 91 5c 03 	lds	r25, 0x035C
    235a:	0e 94 7d 07 	call	0xefa	; 0xefa <hex2dec_result>
    235e:	60 e0       	ldi	r22, 0x00	; 0
    2360:	0e 94 bf 10 	call	0x217e	; 0x217e <Lcd3310_UInt16AsText_3Chars>
		Lcd3310_UInt16AsText_3Chars(hex2dec_result( result[CALIBRATE_INDX][BLUE] ), BLACK_TEXT_ON_WHITE);
    2364:	80 91 5d 03 	lds	r24, 0x035D
    2368:	90 91 5e 03 	lds	r25, 0x035E
    236c:	0e 94 7d 07 	call	0xefa	; 0xefa <hex2dec_result>
    2370:	60 e0       	ldi	r22, 0x00	; 0
    2372:	0e 94 bf 10 	call	0x217e	; 0x217e <Lcd3310_UInt16AsText_3Chars>

		// |M *** *** *** |	Measure values
		Lcd3310_GotoXY(0, 4);
    2376:	80 e0       	ldi	r24, 0x00	; 0
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	64 e0       	ldi	r22, 0x04	; 4
    237c:	70 e0       	ldi	r23, 0x00	; 0
    237e:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <Lcd3310_GotoXY>
		Lcd3310_Char('M', BLACK_TEXT_ON_WHITE);
    2382:	8d e4       	ldi	r24, 0x4D	; 77
    2384:	60 e0       	ldi	r22, 0x00	; 0
    2386:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <Lcd3310_Char>
		Lcd3310_GotoXY(2, 4);
    238a:	82 e0       	ldi	r24, 0x02	; 2
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	64 e0       	ldi	r22, 0x04	; 4
    2390:	70 e0       	ldi	r23, 0x00	; 0
    2392:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <Lcd3310_GotoXY>
		Lcd3310_UInt16AsText_3Chars(hex2dec_result( result[MEASURE_INDX][RED] ), BLACK_TEXT_ON_WHITE);
    2396:	80 91 67 03 	lds	r24, 0x0367
    239a:	90 91 68 03 	lds	r25, 0x0368
    239e:	0e 94 7d 07 	call	0xefa	; 0xefa <hex2dec_result>
    23a2:	60 e0       	ldi	r22, 0x00	; 0
    23a4:	0e 94 bf 10 	call	0x217e	; 0x217e <Lcd3310_UInt16AsText_3Chars>
		Lcd3310_UInt16AsText_3Chars(hex2dec_result( result[MEASURE_INDX][GREEN] ), BLACK_TEXT_ON_WHITE);
    23a8:	80 91 69 03 	lds	r24, 0x0369
    23ac:	90 91 6a 03 	lds	r25, 0x036A
    23b0:	0e 94 7d 07 	call	0xefa	; 0xefa <hex2dec_result>
    23b4:	60 e0       	ldi	r22, 0x00	; 0
    23b6:	0e 94 bf 10 	call	0x217e	; 0x217e <Lcd3310_UInt16AsText_3Chars>
		Lcd3310_UInt16AsText_3Chars(hex2dec_result( result[MEASURE_INDX][BLUE] ), BLACK_TEXT_ON_WHITE);
    23ba:	80 91 6b 03 	lds	r24, 0x036B
    23be:	90 91 6c 03 	lds	r25, 0x036C
    23c2:	0e 94 7d 07 	call	0xefa	; 0xefa <hex2dec_result>
    23c6:	60 e0       	ldi	r22, 0x00	; 0
    23c8:	0e 94 bf 10 	call	0x217e	; 0x217e <Lcd3310_UInt16AsText_3Chars>

		// |D *** *** *** |	Diff values
		Lcd3310_GotoXY(0, 5);
    23cc:	80 e0       	ldi	r24, 0x00	; 0
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	65 e0       	ldi	r22, 0x05	; 5
    23d2:	70 e0       	ldi	r23, 0x00	; 0
    23d4:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <Lcd3310_GotoXY>
		Lcd3310_Char('D', BLACK_TEXT_ON_WHITE);
    23d8:	84 e4       	ldi	r24, 0x44	; 68
    23da:	60 e0       	ldi	r22, 0x00	; 0
    23dc:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <Lcd3310_Char>
		Lcd3310_GotoXY(2, 5);
    23e0:	82 e0       	ldi	r24, 0x02	; 2
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	65 e0       	ldi	r22, 0x05	; 5
    23e6:	70 e0       	ldi	r23, 0x00	; 0
    23e8:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <Lcd3310_GotoXY>
		Lcd3310_UInt16AsText_3Chars(hex2dec_result( result[DIFF_INDX][RED] ), BLACK_TEXT_ON_WHITE);
    23ec:	80 91 75 03 	lds	r24, 0x0375
    23f0:	90 91 76 03 	lds	r25, 0x0376
    23f4:	0e 94 7d 07 	call	0xefa	; 0xefa <hex2dec_result>
    23f8:	60 e0       	ldi	r22, 0x00	; 0
    23fa:	0e 94 bf 10 	call	0x217e	; 0x217e <Lcd3310_UInt16AsText_3Chars>
		Lcd3310_UInt16AsText_3Chars(hex2dec_result( result[DIFF_INDX][GREEN] ), BLACK_TEXT_ON_WHITE);
    23fe:	80 91 77 03 	lds	r24, 0x0377
    2402:	90 91 78 03 	lds	r25, 0x0378
    2406:	0e 94 7d 07 	call	0xefa	; 0xefa <hex2dec_result>
    240a:	60 e0       	ldi	r22, 0x00	; 0
    240c:	0e 94 bf 10 	call	0x217e	; 0x217e <Lcd3310_UInt16AsText_3Chars>
		Lcd3310_UInt16AsText_3Chars(hex2dec_result( result[DIFF_INDX][BLUE] ), BLACK_TEXT_ON_WHITE);
    2410:	80 91 79 03 	lds	r24, 0x0379
    2414:	90 91 7a 03 	lds	r25, 0x037A
    2418:	0e 94 7d 07 	call	0xefa	; 0xefa <hex2dec_result>
    241c:	60 e0       	ldi	r22, 0x00	; 0
    241e:	0e 94 bf 10 	call	0x217e	; 0x217e <Lcd3310_UInt16AsText_3Chars>
	}
}
    2422:	df 91       	pop	r29
    2424:	cf 91       	pop	r28
    2426:	1f 91       	pop	r17
    2428:	0f 91       	pop	r16
    242a:	ff 90       	pop	r15
    242c:	ef 90       	pop	r14
    242e:	08 95       	ret

00002430 <Lcd3310_AnimationSwitchMenuItems>:
}
//==============================================//

#ifdef ANIMATION_SWITCH_MENU_ITEMS
void Lcd3310_AnimationSwitchMenuItems(char is_turn_left)
{
    2430:	9f 92       	push	r9
    2432:	af 92       	push	r10
    2434:	bf 92       	push	r11
    2436:	cf 92       	push	r12
    2438:	df 92       	push	r13
    243a:	ef 92       	push	r14
    243c:	ff 92       	push	r15
    243e:	0f 93       	push	r16
    2440:	1f 93       	push	r17
    2442:	cf 93       	push	r28
    2444:	df 93       	push	r29
    2446:	98 2e       	mov	r9, r24
	uint8_t number_of_elements_in_menu_now = 1;
	struct menu_item *menu_temp;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { 
    2448:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    244a:	f8 94       	cli
		menu_now_atomic = menu_now; 
    244c:	20 91 c9 03 	lds	r18, 0x03C9
    2450:	30 91 ca 03 	lds	r19, 0x03CA
    2454:	30 93 c8 03 	sts	0x03C8, r19
    2458:	20 93 c7 03 	sts	0x03C7, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    245c:	8f bf       	out	0x3f, r24	; 63
	}
	
	menu_temp = menu_now_atomic->next;
    245e:	e0 91 c7 03 	lds	r30, 0x03C7
    2462:	f0 91 c8 03 	lds	r31, 0x03C8
    2466:	a5 81       	ldd	r26, Z+5	; 0x05
    2468:	b6 81       	ldd	r27, Z+6	; 0x06
	while( menu_temp->str != menu_now_atomic->str ){
    246a:	21 85       	ldd	r18, Z+9	; 0x09
    246c:	32 85       	ldd	r19, Z+10	; 0x0a
    246e:	11 e0       	ldi	r17, 0x01	; 1
    2470:	05 c0       	rjmp	.+10     	; 0x247c <Lcd3310_AnimationSwitchMenuItems+0x4c>
		number_of_elements_in_menu_now++;
    2472:	1f 5f       	subi	r17, 0xFF	; 255
		menu_temp = menu_temp->next;
    2474:	15 96       	adiw	r26, 0x05	; 5
    2476:	0d 90       	ld	r0, X+
    2478:	bc 91       	ld	r27, X
    247a:	a0 2d       	mov	r26, r0
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { 
		menu_now_atomic = menu_now; 
	}
	
	menu_temp = menu_now_atomic->next;
	while( menu_temp->str != menu_now_atomic->str ){
    247c:	19 96       	adiw	r26, 0x09	; 9
    247e:	8d 91       	ld	r24, X+
    2480:	9c 91       	ld	r25, X
    2482:	1a 97       	sbiw	r26, 0x0a	; 10
    2484:	82 17       	cp	r24, r18
    2486:	93 07       	cpc	r25, r19
    2488:	a1 f7       	brne	.-24     	; 0x2472 <Lcd3310_AnimationSwitchMenuItems+0x42>
		number_of_elements_in_menu_now++;
		menu_temp = menu_temp->next;
	}
	if(number_of_elements_in_menu_now > 4){
    248a:	15 30       	cpi	r17, 0x05	; 5
    248c:	08 f0       	brcs	.+2      	; 0x2490 <Lcd3310_AnimationSwitchMenuItems+0x60>
    248e:	14 e0       	ldi	r17, 0x04	; 4
		number_of_elements_in_menu_now = 4;
	}

	Lcd3310_ClearCenter();
    2490:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <Lcd3310_ClearCenter>
    2494:	e0 91 c7 03 	lds	r30, 0x03C7
    2498:	f0 91 c8 03 	lds	r31, 0x03C8
	if(number_of_elements_in_menu_now < 3){
    249c:	13 30       	cpi	r17, 0x03	; 3
    249e:	38 f4       	brcc	.+14     	; 0x24ae <Lcd3310_AnimationSwitchMenuItems+0x7e>
		menu_temp = menu_now_atomic;
    24a0:	ef 01       	movw	r28, r30
    24a2:	cc 24       	eor	r12, r12
    24a4:	20 e9       	ldi	r18, 0x90	; 144
    24a6:	a2 2e       	mov	r10, r18
    24a8:	21 e0       	ldi	r18, 0x01	; 1
    24aa:	b2 2e       	mov	r11, r18
    24ac:	3f c0       	rjmp	.+126    	; 0x252c <Lcd3310_AnimationSwitchMenuItems+0xfc>
	}else{
		menu_temp = menu_now_atomic->prev;
    24ae:	c7 81       	ldd	r28, Z+7	; 0x07
    24b0:	d0 85       	ldd	r29, Z+8	; 0x08
    24b2:	f7 cf       	rjmp	.-18     	; 0x24a2 <Lcd3310_AnimationSwitchMenuItems+0x72>
	}

	for(uint8_t j=0; j<8; j++){
		for(uint8_t i=0; i < number_of_elements_in_menu_now; i++){
#			ifdef LCD_IMAGES
				Lcd3310_GotoXY(0, i + 1);// show menu from (i+1) line because first line filled with '_COLORS_'
    24b4:	80 e0       	ldi	r24, 0x00	; 0
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	b7 01       	movw	r22, r14
    24ba:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <Lcd3310_GotoXY>
#			else
				Lcd3310_GotoXY(0, i); // no images at top
#			endif
			Lcd3310_String_P_Anime(
    24be:	99 20       	and	r9, r9
    24c0:	19 f0       	breq	.+6      	; 0x24c8 <Lcd3310_AnimationSwitchMenuItems+0x98>
    24c2:	ef 81       	ldd	r30, Y+7	; 0x07
    24c4:	f8 85       	ldd	r31, Y+8	; 0x08
    24c6:	02 c0       	rjmp	.+4      	; 0x24cc <Lcd3310_AnimationSwitchMenuItems+0x9c>
    24c8:	ed 81       	ldd	r30, Y+5	; 0x05
    24ca:	fe 81       	ldd	r31, Y+6	; 0x06
    24cc:	21 85       	ldd	r18, Z+9	; 0x09
    24ce:	32 85       	ldd	r19, Z+10	; 0x0a
    24d0:	69 85       	ldd	r22, Y+9	; 0x09
    24d2:	7a 85       	ldd	r23, Y+10	; 0x0a
    24d4:	40 e0       	ldi	r20, 0x00	; 0
    24d6:	80 91 c7 03 	lds	r24, 0x03C7
    24da:	90 91 c8 03 	lds	r25, 0x03C8
    24de:	8c 17       	cp	r24, r28
    24e0:	9d 07       	cpc	r25, r29
    24e2:	09 f4       	brne	.+2      	; 0x24e6 <Lcd3310_AnimationSwitchMenuItems+0xb6>
    24e4:	41 e0       	ldi	r20, 0x01	; 1
    24e6:	c9 01       	movw	r24, r18
    24e8:	2c 2d       	mov	r18, r12
    24ea:	09 2d       	mov	r16, r9
    24ec:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <Lcd3310_String_P_Anime>
							menu_temp->str,
							(menu_now_atomic == menu_temp), // WhiteOrBlackText
							j, // num_of_cadr
							is_turn_left // is_next
							);
			menu_temp = menu_temp->next;
    24f0:	0d 80       	ldd	r0, Y+5	; 0x05
    24f2:	de 81       	ldd	r29, Y+6	; 0x06
    24f4:	c0 2d       	mov	r28, r0
	}else{
		menu_temp = menu_now_atomic->prev;
	}

	for(uint8_t j=0; j<8; j++){
		for(uint8_t i=0; i < number_of_elements_in_menu_now; i++){
    24f6:	d3 94       	inc	r13
    24f8:	08 94       	sec
    24fa:	e1 1c       	adc	r14, r1
    24fc:	f1 1c       	adc	r15, r1
    24fe:	d1 16       	cp	r13, r17
    2500:	c8 f2       	brcs	.-78     	; 0x24b4 <Lcd3310_AnimationSwitchMenuItems+0x84>
    2502:	e0 91 c7 03 	lds	r30, 0x03C7
    2506:	f0 91 c8 03 	lds	r31, 0x03C8
							j, // num_of_cadr
							is_turn_left // is_next
							);
			menu_temp = menu_temp->next;
		}
		if(number_of_elements_in_menu_now < 3){
    250a:	13 30       	cpi	r17, 0x03	; 3
    250c:	10 f4       	brcc	.+4      	; 0x2512 <Lcd3310_AnimationSwitchMenuItems+0xe2>
			menu_temp = menu_now_atomic;
    250e:	ef 01       	movw	r28, r30
    2510:	02 c0       	rjmp	.+4      	; 0x2516 <Lcd3310_AnimationSwitchMenuItems+0xe6>
		}else{
			menu_temp = menu_now_atomic->prev;
    2512:	c7 81       	ldd	r28, Z+7	; 0x07
    2514:	d0 85       	ldd	r29, Z+8	; 0x08
    2516:	84 ef       	ldi	r24, 0xF4	; 244
    2518:	91 e0       	ldi	r25, 0x01	; 1
    251a:	f5 01       	movw	r30, r10
    251c:	31 97       	sbiw	r30, 0x01	; 1
    251e:	f1 f7       	brne	.-4      	; 0x251c <Lcd3310_AnimationSwitchMenuItems+0xec>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2520:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2522:	d9 f7       	brne	.-10     	; 0x251a <Lcd3310_AnimationSwitchMenuItems+0xea>
		menu_temp = menu_now_atomic;
	}else{
		menu_temp = menu_now_atomic->prev;
	}

	for(uint8_t j=0; j<8; j++){
    2524:	c3 94       	inc	r12
    2526:	88 e0       	ldi	r24, 0x08	; 8
    2528:	c8 16       	cp	r12, r24
    252a:	29 f0       	breq	.+10     	; 0x2536 <Lcd3310_AnimationSwitchMenuItems+0x106>
    252c:	dd 24       	eor	r13, r13
    252e:	91 e0       	ldi	r25, 0x01	; 1
    2530:	e9 2e       	mov	r14, r25
    2532:	f1 2c       	mov	r15, r1
    2534:	e4 cf       	rjmp	.-56     	; 0x24fe <Lcd3310_AnimationSwitchMenuItems+0xce>
		}else{
			menu_temp = menu_now_atomic->prev;
		}
		_delay_ms(50);
	}
}
    2536:	df 91       	pop	r29
    2538:	cf 91       	pop	r28
    253a:	1f 91       	pop	r17
    253c:	0f 91       	pop	r16
    253e:	ff 90       	pop	r15
    2540:	ef 90       	pop	r14
    2542:	df 90       	pop	r13
    2544:	cf 90       	pop	r12
    2546:	bf 90       	pop	r11
    2548:	af 90       	pop	r10
    254a:	9f 90       	pop	r9
    254c:	08 95       	ret

0000254e <Lcd3310_InitializeDisplay>:



void init_menu_now(void)
{
	menu_now = &go;
    254e:	28 e2       	ldi	r18, 0x28	; 40
    2550:	31 e0       	ldi	r19, 0x01	; 1
    2552:	30 93 ca 03 	sts	0x03CA, r19
    2556:	20 93 c9 03 	sts	0x03C9, r18
//==============================================//
void Lcd3310_InitializeDisplay(uint16_t show_image_delay_ms)
{
	init_menu_now();

    Lcd3310_Init(show_image_delay_ms);
    255a:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <Lcd3310_Init>
	//Lcd3310_LcdImageUpperBottom_Fill();
    Lcd3310_UpdateDisplayInfo();
    255e:	0e 94 ef 10 	call	0x21de	; 0x21de <Lcd3310_UpdateDisplayInfo>
}
    2562:	08 95       	ret

00002564 <Menu_EnterClick>:
struct menu_item readme = {ENTER_MENU_CMD, NULL, &text, &go, &setup, 												"// Readme   //"};
	struct menu_item text = {BACK_CMD, &readme, NULL, &text, &text, "[ Programmer:][   brunql   ][    (at)    ][  gmail.com ]"};

void Menu_EnterClick(void)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { menu_now_atomic = menu_now; }
    2564:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2566:	f8 94       	cli
    2568:	20 91 c9 03 	lds	r18, 0x03C9
    256c:	30 91 ca 03 	lds	r19, 0x03CA
    2570:	30 93 c8 03 	sts	0x03C8, r19
    2574:	20 93 c7 03 	sts	0x03C7, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2578:	8f bf       	out	0x3f, r24	; 63
	switch(menu_now_atomic->cmd){
    257a:	e0 91 c7 03 	lds	r30, 0x03C7
    257e:	f0 91 c8 03 	lds	r31, 0x03C8
    2582:	e0 81       	ld	r30, Z
    2584:	e3 30       	cpi	r30, 0x03	; 3
    2586:	39 f1       	breq	.+78     	; 0x25d6 <Menu_EnterClick+0x72>
    2588:	e4 30       	cpi	r30, 0x04	; 4
    258a:	28 f4       	brcc	.+10     	; 0x2596 <Menu_EnterClick+0x32>
    258c:	e1 30       	cpi	r30, 0x01	; 1
    258e:	61 f0       	breq	.+24     	; 0x25a8 <Menu_EnterClick+0x44>
    2590:	e2 30       	cpi	r30, 0x02	; 2
    2592:	30 f5       	brcc	.+76     	; 0x25e0 <Menu_EnterClick+0x7c>
    2594:	12 c0       	rjmp	.+36     	; 0x25ba <Menu_EnterClick+0x56>
    2596:	e6 30       	cpi	r30, 0x06	; 6
    2598:	c1 f1       	breq	.+112    	; 0x260a <Menu_EnterClick+0xa6>
    259a:	e7 30       	cpi	r30, 0x07	; 7
    259c:	09 f4       	brne	.+2      	; 0x25a0 <Menu_EnterClick+0x3c>
    259e:	42 c0       	rjmp	.+132    	; 0x2624 <Menu_EnterClick+0xc0>
    25a0:	e4 30       	cpi	r30, 0x04	; 4
    25a2:	09 f0       	breq	.+2      	; 0x25a6 <Menu_EnterClick+0x42>
    25a4:	4c c0       	rjmp	.+152    	; 0x263e <Menu_EnterClick+0xda>
    25a6:	24 c0       	rjmp	.+72     	; 0x25f0 <Menu_EnterClick+0x8c>
		default:
			break;
		case ENTER_MENU_CMD:
		enter_menu_label:
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { menu_now = menu_now->sub_menu; }
    25a8:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    25aa:	f8 94       	cli
    25ac:	e0 91 c9 03 	lds	r30, 0x03C9
    25b0:	f0 91 ca 03 	lds	r31, 0x03CA
    25b4:	23 81       	ldd	r18, Z+3	; 0x03
    25b6:	34 81       	ldd	r19, Z+4	; 0x04
    25b8:	08 c0       	rjmp	.+16     	; 0x25ca <Menu_EnterClick+0x66>
			break;

		case BACK_CMD:
		back_menu_label:
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { menu_now = menu_now->main_menu; }
    25ba:	8f b7       	in	r24, 0x3f	; 63
    25bc:	f8 94       	cli
    25be:	e0 91 c9 03 	lds	r30, 0x03C9
    25c2:	f0 91 ca 03 	lds	r31, 0x03CA
    25c6:	21 81       	ldd	r18, Z+1	; 0x01
    25c8:	32 81       	ldd	r19, Z+2	; 0x02
    25ca:	30 93 ca 03 	sts	0x03CA, r19
    25ce:	20 93 c9 03 	sts	0x03C9, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    25d2:	8f bf       	out	0x3f, r24	; 63
    25d4:	19 c0       	rjmp	.+50     	; 0x2608 <Menu_EnterClick+0xa4>
			break;
		
		case results_cmd:
			LedDriver_SwitchLeds( 0x0000 );
    25d6:	80 e0       	ldi	r24, 0x00	; 0
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	0e 94 c8 09 	call	0x1390	; 0x1390 <LedDriver_SwitchLeds>
    25de:	ed cf       	rjmp	.-38     	; 0x25ba <Menu_EnterClick+0x56>
			goto back_menu_label;
	
		case go_cmd:
			FLAGS_SWITCH_ON( ADC_RESULT_FLAG );
    25e0:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    25e2:	f8 94       	cli
    25e4:	80 91 85 03 	lds	r24, 0x0385
    25e8:	90 91 86 03 	lds	r25, 0x0386
    25ec:	80 61       	ori	r24, 0x10	; 16
    25ee:	14 c0       	rjmp	.+40     	; 0x2618 <Menu_EnterClick+0xb4>
			goto enter_menu_label;
		
		case calibration_cmd:
			FLAGS_SWITCH_ON( ADC_CALIBRATE_FLAG );
    25f0:	2f b7       	in	r18, 0x3f	; 63
    25f2:	f8 94       	cli
    25f4:	80 91 85 03 	lds	r24, 0x0385
    25f8:	90 91 86 03 	lds	r25, 0x0386
    25fc:	80 62       	ori	r24, 0x20	; 32
    25fe:	90 93 86 03 	sts	0x0386, r25
    2602:	80 93 85 03 	sts	0x0385, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2606:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    2608:	08 95       	ret
			break;

		case snake_start_cmd:
			FLAGS_SWITCH_ON( SNAKE_START_GAME_FLAG );
    260a:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    260c:	f8 94       	cli
    260e:	80 91 85 03 	lds	r24, 0x0385
    2612:	90 91 86 03 	lds	r25, 0x0386
    2616:	80 68       	ori	r24, 0x80	; 128
    2618:	90 93 86 03 	sts	0x0386, r25
    261c:	80 93 85 03 	sts	0x0385, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2620:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    2622:	c2 cf       	rjmp	.-124    	; 0x25a8 <Menu_EnterClick+0x44>
			goto enter_menu_label;

		case snake_results_cmd:
			FLAGS_SWITCH_ON( SNAKE_STOP_GAME_FLAG );
    2624:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2626:	f8 94       	cli
    2628:	80 91 85 03 	lds	r24, 0x0385
    262c:	90 91 86 03 	lds	r25, 0x0386
    2630:	91 60       	ori	r25, 0x01	; 1
    2632:	90 93 86 03 	sts	0x0386, r25
    2636:	80 93 85 03 	sts	0x0385, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    263a:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    263c:	be cf       	rjmp	.-132    	; 0x25ba <Menu_EnterClick+0x56>
    263e:	08 95       	ret

00002640 <__fixunssfsi>:
    2640:	ef 92       	push	r14
    2642:	ff 92       	push	r15
    2644:	0f 93       	push	r16
    2646:	1f 93       	push	r17
    2648:	7b 01       	movw	r14, r22
    264a:	8c 01       	movw	r16, r24
    264c:	20 e0       	ldi	r18, 0x00	; 0
    264e:	30 e0       	ldi	r19, 0x00	; 0
    2650:	40 e0       	ldi	r20, 0x00	; 0
    2652:	5f e4       	ldi	r21, 0x4F	; 79
    2654:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <__gesf2>
    2658:	88 23       	and	r24, r24
    265a:	8c f0       	brlt	.+34     	; 0x267e <__fixunssfsi+0x3e>
    265c:	c8 01       	movw	r24, r16
    265e:	b7 01       	movw	r22, r14
    2660:	20 e0       	ldi	r18, 0x00	; 0
    2662:	30 e0       	ldi	r19, 0x00	; 0
    2664:	40 e0       	ldi	r20, 0x00	; 0
    2666:	5f e4       	ldi	r21, 0x4F	; 79
    2668:	0e 94 98 14 	call	0x2930	; 0x2930 <__subsf3>
    266c:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <__fixsfsi>
    2670:	9b 01       	movw	r18, r22
    2672:	ac 01       	movw	r20, r24
    2674:	20 50       	subi	r18, 0x00	; 0
    2676:	30 40       	sbci	r19, 0x00	; 0
    2678:	40 40       	sbci	r20, 0x00	; 0
    267a:	50 48       	sbci	r21, 0x80	; 128
    267c:	06 c0       	rjmp	.+12     	; 0x268a <__fixunssfsi+0x4a>
    267e:	c8 01       	movw	r24, r16
    2680:	b7 01       	movw	r22, r14
    2682:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <__fixsfsi>
    2686:	9b 01       	movw	r18, r22
    2688:	ac 01       	movw	r20, r24
    268a:	b9 01       	movw	r22, r18
    268c:	ca 01       	movw	r24, r20
    268e:	1f 91       	pop	r17
    2690:	0f 91       	pop	r16
    2692:	ff 90       	pop	r15
    2694:	ef 90       	pop	r14
    2696:	08 95       	ret

00002698 <_fpadd_parts>:
    2698:	a0 e0       	ldi	r26, 0x00	; 0
    269a:	b0 e0       	ldi	r27, 0x00	; 0
    269c:	e2 e5       	ldi	r30, 0x52	; 82
    269e:	f3 e1       	ldi	r31, 0x13	; 19
    26a0:	0c 94 d4 1a 	jmp	0x35a8	; 0x35a8 <__prologue_saves__>
    26a4:	dc 01       	movw	r26, r24
    26a6:	2b 01       	movw	r4, r22
    26a8:	fa 01       	movw	r30, r20
    26aa:	9c 91       	ld	r25, X
    26ac:	92 30       	cpi	r25, 0x02	; 2
    26ae:	08 f4       	brcc	.+2      	; 0x26b2 <_fpadd_parts+0x1a>
    26b0:	39 c1       	rjmp	.+626    	; 0x2924 <_fpadd_parts+0x28c>
    26b2:	eb 01       	movw	r28, r22
    26b4:	88 81       	ld	r24, Y
    26b6:	82 30       	cpi	r24, 0x02	; 2
    26b8:	08 f4       	brcc	.+2      	; 0x26bc <_fpadd_parts+0x24>
    26ba:	33 c1       	rjmp	.+614    	; 0x2922 <_fpadd_parts+0x28a>
    26bc:	94 30       	cpi	r25, 0x04	; 4
    26be:	69 f4       	brne	.+26     	; 0x26da <_fpadd_parts+0x42>
    26c0:	84 30       	cpi	r24, 0x04	; 4
    26c2:	09 f0       	breq	.+2      	; 0x26c6 <_fpadd_parts+0x2e>
    26c4:	2f c1       	rjmp	.+606    	; 0x2924 <_fpadd_parts+0x28c>
    26c6:	11 96       	adiw	r26, 0x01	; 1
    26c8:	9c 91       	ld	r25, X
    26ca:	11 97       	sbiw	r26, 0x01	; 1
    26cc:	89 81       	ldd	r24, Y+1	; 0x01
    26ce:	98 17       	cp	r25, r24
    26d0:	09 f4       	brne	.+2      	; 0x26d4 <_fpadd_parts+0x3c>
    26d2:	28 c1       	rjmp	.+592    	; 0x2924 <_fpadd_parts+0x28c>
    26d4:	a7 e4       	ldi	r26, 0x47	; 71
    26d6:	b2 e0       	ldi	r27, 0x02	; 2
    26d8:	25 c1       	rjmp	.+586    	; 0x2924 <_fpadd_parts+0x28c>
    26da:	84 30       	cpi	r24, 0x04	; 4
    26dc:	09 f4       	brne	.+2      	; 0x26e0 <_fpadd_parts+0x48>
    26de:	21 c1       	rjmp	.+578    	; 0x2922 <_fpadd_parts+0x28a>
    26e0:	82 30       	cpi	r24, 0x02	; 2
    26e2:	a9 f4       	brne	.+42     	; 0x270e <_fpadd_parts+0x76>
    26e4:	92 30       	cpi	r25, 0x02	; 2
    26e6:	09 f0       	breq	.+2      	; 0x26ea <_fpadd_parts+0x52>
    26e8:	1d c1       	rjmp	.+570    	; 0x2924 <_fpadd_parts+0x28c>
    26ea:	9a 01       	movw	r18, r20
    26ec:	ad 01       	movw	r20, r26
    26ee:	88 e0       	ldi	r24, 0x08	; 8
    26f0:	ea 01       	movw	r28, r20
    26f2:	09 90       	ld	r0, Y+
    26f4:	ae 01       	movw	r20, r28
    26f6:	e9 01       	movw	r28, r18
    26f8:	09 92       	st	Y+, r0
    26fa:	9e 01       	movw	r18, r28
    26fc:	81 50       	subi	r24, 0x01	; 1
    26fe:	c1 f7       	brne	.-16     	; 0x26f0 <_fpadd_parts+0x58>
    2700:	e2 01       	movw	r28, r4
    2702:	89 81       	ldd	r24, Y+1	; 0x01
    2704:	11 96       	adiw	r26, 0x01	; 1
    2706:	9c 91       	ld	r25, X
    2708:	89 23       	and	r24, r25
    270a:	81 83       	std	Z+1, r24	; 0x01
    270c:	08 c1       	rjmp	.+528    	; 0x291e <_fpadd_parts+0x286>
    270e:	92 30       	cpi	r25, 0x02	; 2
    2710:	09 f4       	brne	.+2      	; 0x2714 <_fpadd_parts+0x7c>
    2712:	07 c1       	rjmp	.+526    	; 0x2922 <_fpadd_parts+0x28a>
    2714:	12 96       	adiw	r26, 0x02	; 2
    2716:	2d 90       	ld	r2, X+
    2718:	3c 90       	ld	r3, X
    271a:	13 97       	sbiw	r26, 0x03	; 3
    271c:	eb 01       	movw	r28, r22
    271e:	8a 81       	ldd	r24, Y+2	; 0x02
    2720:	9b 81       	ldd	r25, Y+3	; 0x03
    2722:	14 96       	adiw	r26, 0x04	; 4
    2724:	ad 90       	ld	r10, X+
    2726:	bd 90       	ld	r11, X+
    2728:	cd 90       	ld	r12, X+
    272a:	dc 90       	ld	r13, X
    272c:	17 97       	sbiw	r26, 0x07	; 7
    272e:	ec 80       	ldd	r14, Y+4	; 0x04
    2730:	fd 80       	ldd	r15, Y+5	; 0x05
    2732:	0e 81       	ldd	r16, Y+6	; 0x06
    2734:	1f 81       	ldd	r17, Y+7	; 0x07
    2736:	91 01       	movw	r18, r2
    2738:	28 1b       	sub	r18, r24
    273a:	39 0b       	sbc	r19, r25
    273c:	b9 01       	movw	r22, r18
    273e:	37 ff       	sbrs	r19, 7
    2740:	04 c0       	rjmp	.+8      	; 0x274a <_fpadd_parts+0xb2>
    2742:	66 27       	eor	r22, r22
    2744:	77 27       	eor	r23, r23
    2746:	62 1b       	sub	r22, r18
    2748:	73 0b       	sbc	r23, r19
    274a:	60 32       	cpi	r22, 0x20	; 32
    274c:	71 05       	cpc	r23, r1
    274e:	0c f0       	brlt	.+2      	; 0x2752 <_fpadd_parts+0xba>
    2750:	61 c0       	rjmp	.+194    	; 0x2814 <_fpadd_parts+0x17c>
    2752:	12 16       	cp	r1, r18
    2754:	13 06       	cpc	r1, r19
    2756:	6c f5       	brge	.+90     	; 0x27b2 <_fpadd_parts+0x11a>
    2758:	37 01       	movw	r6, r14
    275a:	48 01       	movw	r8, r16
    275c:	06 2e       	mov	r0, r22
    275e:	04 c0       	rjmp	.+8      	; 0x2768 <_fpadd_parts+0xd0>
    2760:	96 94       	lsr	r9
    2762:	87 94       	ror	r8
    2764:	77 94       	ror	r7
    2766:	67 94       	ror	r6
    2768:	0a 94       	dec	r0
    276a:	d2 f7       	brpl	.-12     	; 0x2760 <_fpadd_parts+0xc8>
    276c:	21 e0       	ldi	r18, 0x01	; 1
    276e:	30 e0       	ldi	r19, 0x00	; 0
    2770:	40 e0       	ldi	r20, 0x00	; 0
    2772:	50 e0       	ldi	r21, 0x00	; 0
    2774:	04 c0       	rjmp	.+8      	; 0x277e <_fpadd_parts+0xe6>
    2776:	22 0f       	add	r18, r18
    2778:	33 1f       	adc	r19, r19
    277a:	44 1f       	adc	r20, r20
    277c:	55 1f       	adc	r21, r21
    277e:	6a 95       	dec	r22
    2780:	d2 f7       	brpl	.-12     	; 0x2776 <_fpadd_parts+0xde>
    2782:	21 50       	subi	r18, 0x01	; 1
    2784:	30 40       	sbci	r19, 0x00	; 0
    2786:	40 40       	sbci	r20, 0x00	; 0
    2788:	50 40       	sbci	r21, 0x00	; 0
    278a:	2e 21       	and	r18, r14
    278c:	3f 21       	and	r19, r15
    278e:	40 23       	and	r20, r16
    2790:	51 23       	and	r21, r17
    2792:	21 15       	cp	r18, r1
    2794:	31 05       	cpc	r19, r1
    2796:	41 05       	cpc	r20, r1
    2798:	51 05       	cpc	r21, r1
    279a:	21 f0       	breq	.+8      	; 0x27a4 <_fpadd_parts+0x10c>
    279c:	21 e0       	ldi	r18, 0x01	; 1
    279e:	30 e0       	ldi	r19, 0x00	; 0
    27a0:	40 e0       	ldi	r20, 0x00	; 0
    27a2:	50 e0       	ldi	r21, 0x00	; 0
    27a4:	79 01       	movw	r14, r18
    27a6:	8a 01       	movw	r16, r20
    27a8:	e6 28       	or	r14, r6
    27aa:	f7 28       	or	r15, r7
    27ac:	08 29       	or	r16, r8
    27ae:	19 29       	or	r17, r9
    27b0:	3c c0       	rjmp	.+120    	; 0x282a <_fpadd_parts+0x192>
    27b2:	23 2b       	or	r18, r19
    27b4:	d1 f1       	breq	.+116    	; 0x282a <_fpadd_parts+0x192>
    27b6:	26 0e       	add	r2, r22
    27b8:	37 1e       	adc	r3, r23
    27ba:	35 01       	movw	r6, r10
    27bc:	46 01       	movw	r8, r12
    27be:	06 2e       	mov	r0, r22
    27c0:	04 c0       	rjmp	.+8      	; 0x27ca <_fpadd_parts+0x132>
    27c2:	96 94       	lsr	r9
    27c4:	87 94       	ror	r8
    27c6:	77 94       	ror	r7
    27c8:	67 94       	ror	r6
    27ca:	0a 94       	dec	r0
    27cc:	d2 f7       	brpl	.-12     	; 0x27c2 <_fpadd_parts+0x12a>
    27ce:	21 e0       	ldi	r18, 0x01	; 1
    27d0:	30 e0       	ldi	r19, 0x00	; 0
    27d2:	40 e0       	ldi	r20, 0x00	; 0
    27d4:	50 e0       	ldi	r21, 0x00	; 0
    27d6:	04 c0       	rjmp	.+8      	; 0x27e0 <_fpadd_parts+0x148>
    27d8:	22 0f       	add	r18, r18
    27da:	33 1f       	adc	r19, r19
    27dc:	44 1f       	adc	r20, r20
    27de:	55 1f       	adc	r21, r21
    27e0:	6a 95       	dec	r22
    27e2:	d2 f7       	brpl	.-12     	; 0x27d8 <_fpadd_parts+0x140>
    27e4:	21 50       	subi	r18, 0x01	; 1
    27e6:	30 40       	sbci	r19, 0x00	; 0
    27e8:	40 40       	sbci	r20, 0x00	; 0
    27ea:	50 40       	sbci	r21, 0x00	; 0
    27ec:	2a 21       	and	r18, r10
    27ee:	3b 21       	and	r19, r11
    27f0:	4c 21       	and	r20, r12
    27f2:	5d 21       	and	r21, r13
    27f4:	21 15       	cp	r18, r1
    27f6:	31 05       	cpc	r19, r1
    27f8:	41 05       	cpc	r20, r1
    27fa:	51 05       	cpc	r21, r1
    27fc:	21 f0       	breq	.+8      	; 0x2806 <_fpadd_parts+0x16e>
    27fe:	21 e0       	ldi	r18, 0x01	; 1
    2800:	30 e0       	ldi	r19, 0x00	; 0
    2802:	40 e0       	ldi	r20, 0x00	; 0
    2804:	50 e0       	ldi	r21, 0x00	; 0
    2806:	59 01       	movw	r10, r18
    2808:	6a 01       	movw	r12, r20
    280a:	a6 28       	or	r10, r6
    280c:	b7 28       	or	r11, r7
    280e:	c8 28       	or	r12, r8
    2810:	d9 28       	or	r13, r9
    2812:	0b c0       	rjmp	.+22     	; 0x282a <_fpadd_parts+0x192>
    2814:	82 15       	cp	r24, r2
    2816:	93 05       	cpc	r25, r3
    2818:	2c f0       	brlt	.+10     	; 0x2824 <_fpadd_parts+0x18c>
    281a:	1c 01       	movw	r2, r24
    281c:	aa 24       	eor	r10, r10
    281e:	bb 24       	eor	r11, r11
    2820:	65 01       	movw	r12, r10
    2822:	03 c0       	rjmp	.+6      	; 0x282a <_fpadd_parts+0x192>
    2824:	ee 24       	eor	r14, r14
    2826:	ff 24       	eor	r15, r15
    2828:	87 01       	movw	r16, r14
    282a:	11 96       	adiw	r26, 0x01	; 1
    282c:	9c 91       	ld	r25, X
    282e:	d2 01       	movw	r26, r4
    2830:	11 96       	adiw	r26, 0x01	; 1
    2832:	8c 91       	ld	r24, X
    2834:	98 17       	cp	r25, r24
    2836:	09 f4       	brne	.+2      	; 0x283a <_fpadd_parts+0x1a2>
    2838:	45 c0       	rjmp	.+138    	; 0x28c4 <_fpadd_parts+0x22c>
    283a:	99 23       	and	r25, r25
    283c:	39 f0       	breq	.+14     	; 0x284c <_fpadd_parts+0x1b4>
    283e:	a8 01       	movw	r20, r16
    2840:	97 01       	movw	r18, r14
    2842:	2a 19       	sub	r18, r10
    2844:	3b 09       	sbc	r19, r11
    2846:	4c 09       	sbc	r20, r12
    2848:	5d 09       	sbc	r21, r13
    284a:	06 c0       	rjmp	.+12     	; 0x2858 <_fpadd_parts+0x1c0>
    284c:	a6 01       	movw	r20, r12
    284e:	95 01       	movw	r18, r10
    2850:	2e 19       	sub	r18, r14
    2852:	3f 09       	sbc	r19, r15
    2854:	40 0b       	sbc	r20, r16
    2856:	51 0b       	sbc	r21, r17
    2858:	57 fd       	sbrc	r21, 7
    285a:	08 c0       	rjmp	.+16     	; 0x286c <_fpadd_parts+0x1d4>
    285c:	11 82       	std	Z+1, r1	; 0x01
    285e:	33 82       	std	Z+3, r3	; 0x03
    2860:	22 82       	std	Z+2, r2	; 0x02
    2862:	24 83       	std	Z+4, r18	; 0x04
    2864:	35 83       	std	Z+5, r19	; 0x05
    2866:	46 83       	std	Z+6, r20	; 0x06
    2868:	57 83       	std	Z+7, r21	; 0x07
    286a:	1d c0       	rjmp	.+58     	; 0x28a6 <_fpadd_parts+0x20e>
    286c:	81 e0       	ldi	r24, 0x01	; 1
    286e:	81 83       	std	Z+1, r24	; 0x01
    2870:	33 82       	std	Z+3, r3	; 0x03
    2872:	22 82       	std	Z+2, r2	; 0x02
    2874:	88 27       	eor	r24, r24
    2876:	99 27       	eor	r25, r25
    2878:	dc 01       	movw	r26, r24
    287a:	82 1b       	sub	r24, r18
    287c:	93 0b       	sbc	r25, r19
    287e:	a4 0b       	sbc	r26, r20
    2880:	b5 0b       	sbc	r27, r21
    2882:	84 83       	std	Z+4, r24	; 0x04
    2884:	95 83       	std	Z+5, r25	; 0x05
    2886:	a6 83       	std	Z+6, r26	; 0x06
    2888:	b7 83       	std	Z+7, r27	; 0x07
    288a:	0d c0       	rjmp	.+26     	; 0x28a6 <_fpadd_parts+0x20e>
    288c:	22 0f       	add	r18, r18
    288e:	33 1f       	adc	r19, r19
    2890:	44 1f       	adc	r20, r20
    2892:	55 1f       	adc	r21, r21
    2894:	24 83       	std	Z+4, r18	; 0x04
    2896:	35 83       	std	Z+5, r19	; 0x05
    2898:	46 83       	std	Z+6, r20	; 0x06
    289a:	57 83       	std	Z+7, r21	; 0x07
    289c:	82 81       	ldd	r24, Z+2	; 0x02
    289e:	93 81       	ldd	r25, Z+3	; 0x03
    28a0:	01 97       	sbiw	r24, 0x01	; 1
    28a2:	93 83       	std	Z+3, r25	; 0x03
    28a4:	82 83       	std	Z+2, r24	; 0x02
    28a6:	24 81       	ldd	r18, Z+4	; 0x04
    28a8:	35 81       	ldd	r19, Z+5	; 0x05
    28aa:	46 81       	ldd	r20, Z+6	; 0x06
    28ac:	57 81       	ldd	r21, Z+7	; 0x07
    28ae:	da 01       	movw	r26, r20
    28b0:	c9 01       	movw	r24, r18
    28b2:	01 97       	sbiw	r24, 0x01	; 1
    28b4:	a1 09       	sbc	r26, r1
    28b6:	b1 09       	sbc	r27, r1
    28b8:	8f 5f       	subi	r24, 0xFF	; 255
    28ba:	9f 4f       	sbci	r25, 0xFF	; 255
    28bc:	af 4f       	sbci	r26, 0xFF	; 255
    28be:	bf 43       	sbci	r27, 0x3F	; 63
    28c0:	28 f3       	brcs	.-54     	; 0x288c <_fpadd_parts+0x1f4>
    28c2:	0b c0       	rjmp	.+22     	; 0x28da <_fpadd_parts+0x242>
    28c4:	91 83       	std	Z+1, r25	; 0x01
    28c6:	33 82       	std	Z+3, r3	; 0x03
    28c8:	22 82       	std	Z+2, r2	; 0x02
    28ca:	ea 0c       	add	r14, r10
    28cc:	fb 1c       	adc	r15, r11
    28ce:	0c 1d       	adc	r16, r12
    28d0:	1d 1d       	adc	r17, r13
    28d2:	e4 82       	std	Z+4, r14	; 0x04
    28d4:	f5 82       	std	Z+5, r15	; 0x05
    28d6:	06 83       	std	Z+6, r16	; 0x06
    28d8:	17 83       	std	Z+7, r17	; 0x07
    28da:	83 e0       	ldi	r24, 0x03	; 3
    28dc:	80 83       	st	Z, r24
    28de:	24 81       	ldd	r18, Z+4	; 0x04
    28e0:	35 81       	ldd	r19, Z+5	; 0x05
    28e2:	46 81       	ldd	r20, Z+6	; 0x06
    28e4:	57 81       	ldd	r21, Z+7	; 0x07
    28e6:	57 ff       	sbrs	r21, 7
    28e8:	1a c0       	rjmp	.+52     	; 0x291e <_fpadd_parts+0x286>
    28ea:	c9 01       	movw	r24, r18
    28ec:	aa 27       	eor	r26, r26
    28ee:	97 fd       	sbrc	r25, 7
    28f0:	a0 95       	com	r26
    28f2:	ba 2f       	mov	r27, r26
    28f4:	81 70       	andi	r24, 0x01	; 1
    28f6:	90 70       	andi	r25, 0x00	; 0
    28f8:	a0 70       	andi	r26, 0x00	; 0
    28fa:	b0 70       	andi	r27, 0x00	; 0
    28fc:	56 95       	lsr	r21
    28fe:	47 95       	ror	r20
    2900:	37 95       	ror	r19
    2902:	27 95       	ror	r18
    2904:	82 2b       	or	r24, r18
    2906:	93 2b       	or	r25, r19
    2908:	a4 2b       	or	r26, r20
    290a:	b5 2b       	or	r27, r21
    290c:	84 83       	std	Z+4, r24	; 0x04
    290e:	95 83       	std	Z+5, r25	; 0x05
    2910:	a6 83       	std	Z+6, r26	; 0x06
    2912:	b7 83       	std	Z+7, r27	; 0x07
    2914:	82 81       	ldd	r24, Z+2	; 0x02
    2916:	93 81       	ldd	r25, Z+3	; 0x03
    2918:	01 96       	adiw	r24, 0x01	; 1
    291a:	93 83       	std	Z+3, r25	; 0x03
    291c:	82 83       	std	Z+2, r24	; 0x02
    291e:	df 01       	movw	r26, r30
    2920:	01 c0       	rjmp	.+2      	; 0x2924 <_fpadd_parts+0x28c>
    2922:	d2 01       	movw	r26, r4
    2924:	cd 01       	movw	r24, r26
    2926:	cd b7       	in	r28, 0x3d	; 61
    2928:	de b7       	in	r29, 0x3e	; 62
    292a:	e2 e1       	ldi	r30, 0x12	; 18
    292c:	0c 94 f0 1a 	jmp	0x35e0	; 0x35e0 <__epilogue_restores__>

00002930 <__subsf3>:
    2930:	a0 e2       	ldi	r26, 0x20	; 32
    2932:	b0 e0       	ldi	r27, 0x00	; 0
    2934:	ee e9       	ldi	r30, 0x9E	; 158
    2936:	f4 e1       	ldi	r31, 0x14	; 20
    2938:	0c 94 e0 1a 	jmp	0x35c0	; 0x35c0 <__prologue_saves__+0x18>
    293c:	69 83       	std	Y+1, r22	; 0x01
    293e:	7a 83       	std	Y+2, r23	; 0x02
    2940:	8b 83       	std	Y+3, r24	; 0x03
    2942:	9c 83       	std	Y+4, r25	; 0x04
    2944:	2d 83       	std	Y+5, r18	; 0x05
    2946:	3e 83       	std	Y+6, r19	; 0x06
    2948:	4f 83       	std	Y+7, r20	; 0x07
    294a:	58 87       	std	Y+8, r21	; 0x08
    294c:	e9 e0       	ldi	r30, 0x09	; 9
    294e:	ee 2e       	mov	r14, r30
    2950:	f1 2c       	mov	r15, r1
    2952:	ec 0e       	add	r14, r28
    2954:	fd 1e       	adc	r15, r29
    2956:	ce 01       	movw	r24, r28
    2958:	01 96       	adiw	r24, 0x01	; 1
    295a:	b7 01       	movw	r22, r14
    295c:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <__unpack_f>
    2960:	8e 01       	movw	r16, r28
    2962:	0f 5e       	subi	r16, 0xEF	; 239
    2964:	1f 4f       	sbci	r17, 0xFF	; 255
    2966:	ce 01       	movw	r24, r28
    2968:	05 96       	adiw	r24, 0x05	; 5
    296a:	b8 01       	movw	r22, r16
    296c:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <__unpack_f>
    2970:	8a 89       	ldd	r24, Y+18	; 0x12
    2972:	91 e0       	ldi	r25, 0x01	; 1
    2974:	89 27       	eor	r24, r25
    2976:	8a 8b       	std	Y+18, r24	; 0x12
    2978:	c7 01       	movw	r24, r14
    297a:	b8 01       	movw	r22, r16
    297c:	ae 01       	movw	r20, r28
    297e:	47 5e       	subi	r20, 0xE7	; 231
    2980:	5f 4f       	sbci	r21, 0xFF	; 255
    2982:	0e 94 4c 13 	call	0x2698	; 0x2698 <_fpadd_parts>
    2986:	0e 94 a6 18 	call	0x314c	; 0x314c <__pack_f>
    298a:	a0 96       	adiw	r28, 0x20	; 32
    298c:	e6 e0       	ldi	r30, 0x06	; 6
    298e:	0c 94 fc 1a 	jmp	0x35f8	; 0x35f8 <__epilogue_restores__+0x18>

00002992 <__addsf3>:
    2992:	a0 e2       	ldi	r26, 0x20	; 32
    2994:	b0 e0       	ldi	r27, 0x00	; 0
    2996:	ef ec       	ldi	r30, 0xCF	; 207
    2998:	f4 e1       	ldi	r31, 0x14	; 20
    299a:	0c 94 e0 1a 	jmp	0x35c0	; 0x35c0 <__prologue_saves__+0x18>
    299e:	69 83       	std	Y+1, r22	; 0x01
    29a0:	7a 83       	std	Y+2, r23	; 0x02
    29a2:	8b 83       	std	Y+3, r24	; 0x03
    29a4:	9c 83       	std	Y+4, r25	; 0x04
    29a6:	2d 83       	std	Y+5, r18	; 0x05
    29a8:	3e 83       	std	Y+6, r19	; 0x06
    29aa:	4f 83       	std	Y+7, r20	; 0x07
    29ac:	58 87       	std	Y+8, r21	; 0x08
    29ae:	f9 e0       	ldi	r31, 0x09	; 9
    29b0:	ef 2e       	mov	r14, r31
    29b2:	f1 2c       	mov	r15, r1
    29b4:	ec 0e       	add	r14, r28
    29b6:	fd 1e       	adc	r15, r29
    29b8:	ce 01       	movw	r24, r28
    29ba:	01 96       	adiw	r24, 0x01	; 1
    29bc:	b7 01       	movw	r22, r14
    29be:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <__unpack_f>
    29c2:	8e 01       	movw	r16, r28
    29c4:	0f 5e       	subi	r16, 0xEF	; 239
    29c6:	1f 4f       	sbci	r17, 0xFF	; 255
    29c8:	ce 01       	movw	r24, r28
    29ca:	05 96       	adiw	r24, 0x05	; 5
    29cc:	b8 01       	movw	r22, r16
    29ce:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <__unpack_f>
    29d2:	c7 01       	movw	r24, r14
    29d4:	b8 01       	movw	r22, r16
    29d6:	ae 01       	movw	r20, r28
    29d8:	47 5e       	subi	r20, 0xE7	; 231
    29da:	5f 4f       	sbci	r21, 0xFF	; 255
    29dc:	0e 94 4c 13 	call	0x2698	; 0x2698 <_fpadd_parts>
    29e0:	0e 94 a6 18 	call	0x314c	; 0x314c <__pack_f>
    29e4:	a0 96       	adiw	r28, 0x20	; 32
    29e6:	e6 e0       	ldi	r30, 0x06	; 6
    29e8:	0c 94 fc 1a 	jmp	0x35f8	; 0x35f8 <__epilogue_restores__+0x18>

000029ec <__mulsf3>:
    29ec:	a0 e2       	ldi	r26, 0x20	; 32
    29ee:	b0 e0       	ldi	r27, 0x00	; 0
    29f0:	ec ef       	ldi	r30, 0xFC	; 252
    29f2:	f4 e1       	ldi	r31, 0x14	; 20
    29f4:	0c 94 d4 1a 	jmp	0x35a8	; 0x35a8 <__prologue_saves__>
    29f8:	69 83       	std	Y+1, r22	; 0x01
    29fa:	7a 83       	std	Y+2, r23	; 0x02
    29fc:	8b 83       	std	Y+3, r24	; 0x03
    29fe:	9c 83       	std	Y+4, r25	; 0x04
    2a00:	2d 83       	std	Y+5, r18	; 0x05
    2a02:	3e 83       	std	Y+6, r19	; 0x06
    2a04:	4f 83       	std	Y+7, r20	; 0x07
    2a06:	58 87       	std	Y+8, r21	; 0x08
    2a08:	ce 01       	movw	r24, r28
    2a0a:	01 96       	adiw	r24, 0x01	; 1
    2a0c:	be 01       	movw	r22, r28
    2a0e:	67 5f       	subi	r22, 0xF7	; 247
    2a10:	7f 4f       	sbci	r23, 0xFF	; 255
    2a12:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <__unpack_f>
    2a16:	ce 01       	movw	r24, r28
    2a18:	05 96       	adiw	r24, 0x05	; 5
    2a1a:	be 01       	movw	r22, r28
    2a1c:	6f 5e       	subi	r22, 0xEF	; 239
    2a1e:	7f 4f       	sbci	r23, 0xFF	; 255
    2a20:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <__unpack_f>
    2a24:	99 85       	ldd	r25, Y+9	; 0x09
    2a26:	92 30       	cpi	r25, 0x02	; 2
    2a28:	88 f0       	brcs	.+34     	; 0x2a4c <__mulsf3+0x60>
    2a2a:	89 89       	ldd	r24, Y+17	; 0x11
    2a2c:	82 30       	cpi	r24, 0x02	; 2
    2a2e:	c8 f0       	brcs	.+50     	; 0x2a62 <__mulsf3+0x76>
    2a30:	94 30       	cpi	r25, 0x04	; 4
    2a32:	19 f4       	brne	.+6      	; 0x2a3a <__mulsf3+0x4e>
    2a34:	82 30       	cpi	r24, 0x02	; 2
    2a36:	51 f4       	brne	.+20     	; 0x2a4c <__mulsf3+0x60>
    2a38:	04 c0       	rjmp	.+8      	; 0x2a42 <__mulsf3+0x56>
    2a3a:	84 30       	cpi	r24, 0x04	; 4
    2a3c:	29 f4       	brne	.+10     	; 0x2a48 <__mulsf3+0x5c>
    2a3e:	92 30       	cpi	r25, 0x02	; 2
    2a40:	81 f4       	brne	.+32     	; 0x2a62 <__mulsf3+0x76>
    2a42:	87 e4       	ldi	r24, 0x47	; 71
    2a44:	92 e0       	ldi	r25, 0x02	; 2
    2a46:	c6 c0       	rjmp	.+396    	; 0x2bd4 <__mulsf3+0x1e8>
    2a48:	92 30       	cpi	r25, 0x02	; 2
    2a4a:	49 f4       	brne	.+18     	; 0x2a5e <__mulsf3+0x72>
    2a4c:	20 e0       	ldi	r18, 0x00	; 0
    2a4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a50:	8a 89       	ldd	r24, Y+18	; 0x12
    2a52:	98 13       	cpse	r25, r24
    2a54:	21 e0       	ldi	r18, 0x01	; 1
    2a56:	2a 87       	std	Y+10, r18	; 0x0a
    2a58:	ce 01       	movw	r24, r28
    2a5a:	09 96       	adiw	r24, 0x09	; 9
    2a5c:	bb c0       	rjmp	.+374    	; 0x2bd4 <__mulsf3+0x1e8>
    2a5e:	82 30       	cpi	r24, 0x02	; 2
    2a60:	49 f4       	brne	.+18     	; 0x2a74 <__mulsf3+0x88>
    2a62:	20 e0       	ldi	r18, 0x00	; 0
    2a64:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a66:	8a 89       	ldd	r24, Y+18	; 0x12
    2a68:	98 13       	cpse	r25, r24
    2a6a:	21 e0       	ldi	r18, 0x01	; 1
    2a6c:	2a 8b       	std	Y+18, r18	; 0x12
    2a6e:	ce 01       	movw	r24, r28
    2a70:	41 96       	adiw	r24, 0x11	; 17
    2a72:	b0 c0       	rjmp	.+352    	; 0x2bd4 <__mulsf3+0x1e8>
    2a74:	2d 84       	ldd	r2, Y+13	; 0x0d
    2a76:	3e 84       	ldd	r3, Y+14	; 0x0e
    2a78:	4f 84       	ldd	r4, Y+15	; 0x0f
    2a7a:	58 88       	ldd	r5, Y+16	; 0x10
    2a7c:	6d 88       	ldd	r6, Y+21	; 0x15
    2a7e:	7e 88       	ldd	r7, Y+22	; 0x16
    2a80:	8f 88       	ldd	r8, Y+23	; 0x17
    2a82:	98 8c       	ldd	r9, Y+24	; 0x18
    2a84:	ee 24       	eor	r14, r14
    2a86:	ff 24       	eor	r15, r15
    2a88:	87 01       	movw	r16, r14
    2a8a:	aa 24       	eor	r10, r10
    2a8c:	bb 24       	eor	r11, r11
    2a8e:	65 01       	movw	r12, r10
    2a90:	40 e0       	ldi	r20, 0x00	; 0
    2a92:	50 e0       	ldi	r21, 0x00	; 0
    2a94:	60 e0       	ldi	r22, 0x00	; 0
    2a96:	70 e0       	ldi	r23, 0x00	; 0
    2a98:	e0 e0       	ldi	r30, 0x00	; 0
    2a9a:	f0 e0       	ldi	r31, 0x00	; 0
    2a9c:	c1 01       	movw	r24, r2
    2a9e:	81 70       	andi	r24, 0x01	; 1
    2aa0:	90 70       	andi	r25, 0x00	; 0
    2aa2:	89 2b       	or	r24, r25
    2aa4:	e9 f0       	breq	.+58     	; 0x2ae0 <__mulsf3+0xf4>
    2aa6:	e6 0c       	add	r14, r6
    2aa8:	f7 1c       	adc	r15, r7
    2aaa:	08 1d       	adc	r16, r8
    2aac:	19 1d       	adc	r17, r9
    2aae:	9a 01       	movw	r18, r20
    2ab0:	ab 01       	movw	r20, r22
    2ab2:	2a 0d       	add	r18, r10
    2ab4:	3b 1d       	adc	r19, r11
    2ab6:	4c 1d       	adc	r20, r12
    2ab8:	5d 1d       	adc	r21, r13
    2aba:	80 e0       	ldi	r24, 0x00	; 0
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	a0 e0       	ldi	r26, 0x00	; 0
    2ac0:	b0 e0       	ldi	r27, 0x00	; 0
    2ac2:	e6 14       	cp	r14, r6
    2ac4:	f7 04       	cpc	r15, r7
    2ac6:	08 05       	cpc	r16, r8
    2ac8:	19 05       	cpc	r17, r9
    2aca:	20 f4       	brcc	.+8      	; 0x2ad4 <__mulsf3+0xe8>
    2acc:	81 e0       	ldi	r24, 0x01	; 1
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	a0 e0       	ldi	r26, 0x00	; 0
    2ad2:	b0 e0       	ldi	r27, 0x00	; 0
    2ad4:	ba 01       	movw	r22, r20
    2ad6:	a9 01       	movw	r20, r18
    2ad8:	48 0f       	add	r20, r24
    2ada:	59 1f       	adc	r21, r25
    2adc:	6a 1f       	adc	r22, r26
    2ade:	7b 1f       	adc	r23, r27
    2ae0:	aa 0c       	add	r10, r10
    2ae2:	bb 1c       	adc	r11, r11
    2ae4:	cc 1c       	adc	r12, r12
    2ae6:	dd 1c       	adc	r13, r13
    2ae8:	97 fe       	sbrs	r9, 7
    2aea:	08 c0       	rjmp	.+16     	; 0x2afc <__mulsf3+0x110>
    2aec:	81 e0       	ldi	r24, 0x01	; 1
    2aee:	90 e0       	ldi	r25, 0x00	; 0
    2af0:	a0 e0       	ldi	r26, 0x00	; 0
    2af2:	b0 e0       	ldi	r27, 0x00	; 0
    2af4:	a8 2a       	or	r10, r24
    2af6:	b9 2a       	or	r11, r25
    2af8:	ca 2a       	or	r12, r26
    2afa:	db 2a       	or	r13, r27
    2afc:	31 96       	adiw	r30, 0x01	; 1
    2afe:	e0 32       	cpi	r30, 0x20	; 32
    2b00:	f1 05       	cpc	r31, r1
    2b02:	49 f0       	breq	.+18     	; 0x2b16 <__mulsf3+0x12a>
    2b04:	66 0c       	add	r6, r6
    2b06:	77 1c       	adc	r7, r7
    2b08:	88 1c       	adc	r8, r8
    2b0a:	99 1c       	adc	r9, r9
    2b0c:	56 94       	lsr	r5
    2b0e:	47 94       	ror	r4
    2b10:	37 94       	ror	r3
    2b12:	27 94       	ror	r2
    2b14:	c3 cf       	rjmp	.-122    	; 0x2a9c <__mulsf3+0xb0>
    2b16:	fa 85       	ldd	r31, Y+10	; 0x0a
    2b18:	ea 89       	ldd	r30, Y+18	; 0x12
    2b1a:	2b 89       	ldd	r18, Y+19	; 0x13
    2b1c:	3c 89       	ldd	r19, Y+20	; 0x14
    2b1e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b20:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b22:	28 0f       	add	r18, r24
    2b24:	39 1f       	adc	r19, r25
    2b26:	2e 5f       	subi	r18, 0xFE	; 254
    2b28:	3f 4f       	sbci	r19, 0xFF	; 255
    2b2a:	17 c0       	rjmp	.+46     	; 0x2b5a <__mulsf3+0x16e>
    2b2c:	ca 01       	movw	r24, r20
    2b2e:	81 70       	andi	r24, 0x01	; 1
    2b30:	90 70       	andi	r25, 0x00	; 0
    2b32:	89 2b       	or	r24, r25
    2b34:	61 f0       	breq	.+24     	; 0x2b4e <__mulsf3+0x162>
    2b36:	16 95       	lsr	r17
    2b38:	07 95       	ror	r16
    2b3a:	f7 94       	ror	r15
    2b3c:	e7 94       	ror	r14
    2b3e:	80 e0       	ldi	r24, 0x00	; 0
    2b40:	90 e0       	ldi	r25, 0x00	; 0
    2b42:	a0 e0       	ldi	r26, 0x00	; 0
    2b44:	b0 e8       	ldi	r27, 0x80	; 128
    2b46:	e8 2a       	or	r14, r24
    2b48:	f9 2a       	or	r15, r25
    2b4a:	0a 2b       	or	r16, r26
    2b4c:	1b 2b       	or	r17, r27
    2b4e:	76 95       	lsr	r23
    2b50:	67 95       	ror	r22
    2b52:	57 95       	ror	r21
    2b54:	47 95       	ror	r20
    2b56:	2f 5f       	subi	r18, 0xFF	; 255
    2b58:	3f 4f       	sbci	r19, 0xFF	; 255
    2b5a:	77 fd       	sbrc	r23, 7
    2b5c:	e7 cf       	rjmp	.-50     	; 0x2b2c <__mulsf3+0x140>
    2b5e:	0c c0       	rjmp	.+24     	; 0x2b78 <__mulsf3+0x18c>
    2b60:	44 0f       	add	r20, r20
    2b62:	55 1f       	adc	r21, r21
    2b64:	66 1f       	adc	r22, r22
    2b66:	77 1f       	adc	r23, r23
    2b68:	17 fd       	sbrc	r17, 7
    2b6a:	41 60       	ori	r20, 0x01	; 1
    2b6c:	ee 0c       	add	r14, r14
    2b6e:	ff 1c       	adc	r15, r15
    2b70:	00 1f       	adc	r16, r16
    2b72:	11 1f       	adc	r17, r17
    2b74:	21 50       	subi	r18, 0x01	; 1
    2b76:	30 40       	sbci	r19, 0x00	; 0
    2b78:	40 30       	cpi	r20, 0x00	; 0
    2b7a:	90 e0       	ldi	r25, 0x00	; 0
    2b7c:	59 07       	cpc	r21, r25
    2b7e:	90 e0       	ldi	r25, 0x00	; 0
    2b80:	69 07       	cpc	r22, r25
    2b82:	90 e4       	ldi	r25, 0x40	; 64
    2b84:	79 07       	cpc	r23, r25
    2b86:	60 f3       	brcs	.-40     	; 0x2b60 <__mulsf3+0x174>
    2b88:	2b 8f       	std	Y+27, r18	; 0x1b
    2b8a:	3c 8f       	std	Y+28, r19	; 0x1c
    2b8c:	db 01       	movw	r26, r22
    2b8e:	ca 01       	movw	r24, r20
    2b90:	8f 77       	andi	r24, 0x7F	; 127
    2b92:	90 70       	andi	r25, 0x00	; 0
    2b94:	a0 70       	andi	r26, 0x00	; 0
    2b96:	b0 70       	andi	r27, 0x00	; 0
    2b98:	80 34       	cpi	r24, 0x40	; 64
    2b9a:	91 05       	cpc	r25, r1
    2b9c:	a1 05       	cpc	r26, r1
    2b9e:	b1 05       	cpc	r27, r1
    2ba0:	61 f4       	brne	.+24     	; 0x2bba <__mulsf3+0x1ce>
    2ba2:	47 fd       	sbrc	r20, 7
    2ba4:	0a c0       	rjmp	.+20     	; 0x2bba <__mulsf3+0x1ce>
    2ba6:	e1 14       	cp	r14, r1
    2ba8:	f1 04       	cpc	r15, r1
    2baa:	01 05       	cpc	r16, r1
    2bac:	11 05       	cpc	r17, r1
    2bae:	29 f0       	breq	.+10     	; 0x2bba <__mulsf3+0x1ce>
    2bb0:	40 5c       	subi	r20, 0xC0	; 192
    2bb2:	5f 4f       	sbci	r21, 0xFF	; 255
    2bb4:	6f 4f       	sbci	r22, 0xFF	; 255
    2bb6:	7f 4f       	sbci	r23, 0xFF	; 255
    2bb8:	40 78       	andi	r20, 0x80	; 128
    2bba:	1a 8e       	std	Y+26, r1	; 0x1a
    2bbc:	fe 17       	cp	r31, r30
    2bbe:	11 f0       	breq	.+4      	; 0x2bc4 <__mulsf3+0x1d8>
    2bc0:	81 e0       	ldi	r24, 0x01	; 1
    2bc2:	8a 8f       	std	Y+26, r24	; 0x1a
    2bc4:	4d 8f       	std	Y+29, r20	; 0x1d
    2bc6:	5e 8f       	std	Y+30, r21	; 0x1e
    2bc8:	6f 8f       	std	Y+31, r22	; 0x1f
    2bca:	78 a3       	std	Y+32, r23	; 0x20
    2bcc:	83 e0       	ldi	r24, 0x03	; 3
    2bce:	89 8f       	std	Y+25, r24	; 0x19
    2bd0:	ce 01       	movw	r24, r28
    2bd2:	49 96       	adiw	r24, 0x19	; 25
    2bd4:	0e 94 a6 18 	call	0x314c	; 0x314c <__pack_f>
    2bd8:	a0 96       	adiw	r28, 0x20	; 32
    2bda:	e2 e1       	ldi	r30, 0x12	; 18
    2bdc:	0c 94 f0 1a 	jmp	0x35e0	; 0x35e0 <__epilogue_restores__>

00002be0 <__divsf3>:
    2be0:	a8 e1       	ldi	r26, 0x18	; 24
    2be2:	b0 e0       	ldi	r27, 0x00	; 0
    2be4:	e6 ef       	ldi	r30, 0xF6	; 246
    2be6:	f5 e1       	ldi	r31, 0x15	; 21
    2be8:	0c 94 dc 1a 	jmp	0x35b8	; 0x35b8 <__prologue_saves__+0x10>
    2bec:	69 83       	std	Y+1, r22	; 0x01
    2bee:	7a 83       	std	Y+2, r23	; 0x02
    2bf0:	8b 83       	std	Y+3, r24	; 0x03
    2bf2:	9c 83       	std	Y+4, r25	; 0x04
    2bf4:	2d 83       	std	Y+5, r18	; 0x05
    2bf6:	3e 83       	std	Y+6, r19	; 0x06
    2bf8:	4f 83       	std	Y+7, r20	; 0x07
    2bfa:	58 87       	std	Y+8, r21	; 0x08
    2bfc:	b9 e0       	ldi	r27, 0x09	; 9
    2bfe:	eb 2e       	mov	r14, r27
    2c00:	f1 2c       	mov	r15, r1
    2c02:	ec 0e       	add	r14, r28
    2c04:	fd 1e       	adc	r15, r29
    2c06:	ce 01       	movw	r24, r28
    2c08:	01 96       	adiw	r24, 0x01	; 1
    2c0a:	b7 01       	movw	r22, r14
    2c0c:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <__unpack_f>
    2c10:	8e 01       	movw	r16, r28
    2c12:	0f 5e       	subi	r16, 0xEF	; 239
    2c14:	1f 4f       	sbci	r17, 0xFF	; 255
    2c16:	ce 01       	movw	r24, r28
    2c18:	05 96       	adiw	r24, 0x05	; 5
    2c1a:	b8 01       	movw	r22, r16
    2c1c:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <__unpack_f>
    2c20:	29 85       	ldd	r18, Y+9	; 0x09
    2c22:	22 30       	cpi	r18, 0x02	; 2
    2c24:	08 f4       	brcc	.+2      	; 0x2c28 <__divsf3+0x48>
    2c26:	7e c0       	rjmp	.+252    	; 0x2d24 <__divsf3+0x144>
    2c28:	39 89       	ldd	r19, Y+17	; 0x11
    2c2a:	32 30       	cpi	r19, 0x02	; 2
    2c2c:	10 f4       	brcc	.+4      	; 0x2c32 <__divsf3+0x52>
    2c2e:	b8 01       	movw	r22, r16
    2c30:	7c c0       	rjmp	.+248    	; 0x2d2a <__divsf3+0x14a>
    2c32:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c34:	9a 89       	ldd	r25, Y+18	; 0x12
    2c36:	89 27       	eor	r24, r25
    2c38:	8a 87       	std	Y+10, r24	; 0x0a
    2c3a:	24 30       	cpi	r18, 0x04	; 4
    2c3c:	11 f0       	breq	.+4      	; 0x2c42 <__divsf3+0x62>
    2c3e:	22 30       	cpi	r18, 0x02	; 2
    2c40:	31 f4       	brne	.+12     	; 0x2c4e <__divsf3+0x6e>
    2c42:	23 17       	cp	r18, r19
    2c44:	09 f0       	breq	.+2      	; 0x2c48 <__divsf3+0x68>
    2c46:	6e c0       	rjmp	.+220    	; 0x2d24 <__divsf3+0x144>
    2c48:	67 e4       	ldi	r22, 0x47	; 71
    2c4a:	72 e0       	ldi	r23, 0x02	; 2
    2c4c:	6e c0       	rjmp	.+220    	; 0x2d2a <__divsf3+0x14a>
    2c4e:	34 30       	cpi	r19, 0x04	; 4
    2c50:	39 f4       	brne	.+14     	; 0x2c60 <__divsf3+0x80>
    2c52:	1d 86       	std	Y+13, r1	; 0x0d
    2c54:	1e 86       	std	Y+14, r1	; 0x0e
    2c56:	1f 86       	std	Y+15, r1	; 0x0f
    2c58:	18 8a       	std	Y+16, r1	; 0x10
    2c5a:	1c 86       	std	Y+12, r1	; 0x0c
    2c5c:	1b 86       	std	Y+11, r1	; 0x0b
    2c5e:	04 c0       	rjmp	.+8      	; 0x2c68 <__divsf3+0x88>
    2c60:	32 30       	cpi	r19, 0x02	; 2
    2c62:	21 f4       	brne	.+8      	; 0x2c6c <__divsf3+0x8c>
    2c64:	84 e0       	ldi	r24, 0x04	; 4
    2c66:	89 87       	std	Y+9, r24	; 0x09
    2c68:	b7 01       	movw	r22, r14
    2c6a:	5f c0       	rjmp	.+190    	; 0x2d2a <__divsf3+0x14a>
    2c6c:	2b 85       	ldd	r18, Y+11	; 0x0b
    2c6e:	3c 85       	ldd	r19, Y+12	; 0x0c
    2c70:	8b 89       	ldd	r24, Y+19	; 0x13
    2c72:	9c 89       	ldd	r25, Y+20	; 0x14
    2c74:	28 1b       	sub	r18, r24
    2c76:	39 0b       	sbc	r19, r25
    2c78:	3c 87       	std	Y+12, r19	; 0x0c
    2c7a:	2b 87       	std	Y+11, r18	; 0x0b
    2c7c:	ed 84       	ldd	r14, Y+13	; 0x0d
    2c7e:	fe 84       	ldd	r15, Y+14	; 0x0e
    2c80:	0f 85       	ldd	r16, Y+15	; 0x0f
    2c82:	18 89       	ldd	r17, Y+16	; 0x10
    2c84:	ad 88       	ldd	r10, Y+21	; 0x15
    2c86:	be 88       	ldd	r11, Y+22	; 0x16
    2c88:	cf 88       	ldd	r12, Y+23	; 0x17
    2c8a:	d8 8c       	ldd	r13, Y+24	; 0x18
    2c8c:	ea 14       	cp	r14, r10
    2c8e:	fb 04       	cpc	r15, r11
    2c90:	0c 05       	cpc	r16, r12
    2c92:	1d 05       	cpc	r17, r13
    2c94:	40 f4       	brcc	.+16     	; 0x2ca6 <__divsf3+0xc6>
    2c96:	ee 0c       	add	r14, r14
    2c98:	ff 1c       	adc	r15, r15
    2c9a:	00 1f       	adc	r16, r16
    2c9c:	11 1f       	adc	r17, r17
    2c9e:	21 50       	subi	r18, 0x01	; 1
    2ca0:	30 40       	sbci	r19, 0x00	; 0
    2ca2:	3c 87       	std	Y+12, r19	; 0x0c
    2ca4:	2b 87       	std	Y+11, r18	; 0x0b
    2ca6:	20 e0       	ldi	r18, 0x00	; 0
    2ca8:	30 e0       	ldi	r19, 0x00	; 0
    2caa:	40 e0       	ldi	r20, 0x00	; 0
    2cac:	50 e0       	ldi	r21, 0x00	; 0
    2cae:	80 e0       	ldi	r24, 0x00	; 0
    2cb0:	90 e0       	ldi	r25, 0x00	; 0
    2cb2:	a0 e0       	ldi	r26, 0x00	; 0
    2cb4:	b0 e4       	ldi	r27, 0x40	; 64
    2cb6:	60 e0       	ldi	r22, 0x00	; 0
    2cb8:	70 e0       	ldi	r23, 0x00	; 0
    2cba:	ea 14       	cp	r14, r10
    2cbc:	fb 04       	cpc	r15, r11
    2cbe:	0c 05       	cpc	r16, r12
    2cc0:	1d 05       	cpc	r17, r13
    2cc2:	40 f0       	brcs	.+16     	; 0x2cd4 <__divsf3+0xf4>
    2cc4:	28 2b       	or	r18, r24
    2cc6:	39 2b       	or	r19, r25
    2cc8:	4a 2b       	or	r20, r26
    2cca:	5b 2b       	or	r21, r27
    2ccc:	ea 18       	sub	r14, r10
    2cce:	fb 08       	sbc	r15, r11
    2cd0:	0c 09       	sbc	r16, r12
    2cd2:	1d 09       	sbc	r17, r13
    2cd4:	b6 95       	lsr	r27
    2cd6:	a7 95       	ror	r26
    2cd8:	97 95       	ror	r25
    2cda:	87 95       	ror	r24
    2cdc:	ee 0c       	add	r14, r14
    2cde:	ff 1c       	adc	r15, r15
    2ce0:	00 1f       	adc	r16, r16
    2ce2:	11 1f       	adc	r17, r17
    2ce4:	6f 5f       	subi	r22, 0xFF	; 255
    2ce6:	7f 4f       	sbci	r23, 0xFF	; 255
    2ce8:	6f 31       	cpi	r22, 0x1F	; 31
    2cea:	71 05       	cpc	r23, r1
    2cec:	31 f7       	brne	.-52     	; 0x2cba <__divsf3+0xda>
    2cee:	da 01       	movw	r26, r20
    2cf0:	c9 01       	movw	r24, r18
    2cf2:	8f 77       	andi	r24, 0x7F	; 127
    2cf4:	90 70       	andi	r25, 0x00	; 0
    2cf6:	a0 70       	andi	r26, 0x00	; 0
    2cf8:	b0 70       	andi	r27, 0x00	; 0
    2cfa:	80 34       	cpi	r24, 0x40	; 64
    2cfc:	91 05       	cpc	r25, r1
    2cfe:	a1 05       	cpc	r26, r1
    2d00:	b1 05       	cpc	r27, r1
    2d02:	61 f4       	brne	.+24     	; 0x2d1c <__divsf3+0x13c>
    2d04:	27 fd       	sbrc	r18, 7
    2d06:	0a c0       	rjmp	.+20     	; 0x2d1c <__divsf3+0x13c>
    2d08:	e1 14       	cp	r14, r1
    2d0a:	f1 04       	cpc	r15, r1
    2d0c:	01 05       	cpc	r16, r1
    2d0e:	11 05       	cpc	r17, r1
    2d10:	29 f0       	breq	.+10     	; 0x2d1c <__divsf3+0x13c>
    2d12:	20 5c       	subi	r18, 0xC0	; 192
    2d14:	3f 4f       	sbci	r19, 0xFF	; 255
    2d16:	4f 4f       	sbci	r20, 0xFF	; 255
    2d18:	5f 4f       	sbci	r21, 0xFF	; 255
    2d1a:	20 78       	andi	r18, 0x80	; 128
    2d1c:	2d 87       	std	Y+13, r18	; 0x0d
    2d1e:	3e 87       	std	Y+14, r19	; 0x0e
    2d20:	4f 87       	std	Y+15, r20	; 0x0f
    2d22:	58 8b       	std	Y+16, r21	; 0x10
    2d24:	be 01       	movw	r22, r28
    2d26:	67 5f       	subi	r22, 0xF7	; 247
    2d28:	7f 4f       	sbci	r23, 0xFF	; 255
    2d2a:	cb 01       	movw	r24, r22
    2d2c:	0e 94 a6 18 	call	0x314c	; 0x314c <__pack_f>
    2d30:	68 96       	adiw	r28, 0x18	; 24
    2d32:	ea e0       	ldi	r30, 0x0A	; 10
    2d34:	0c 94 f8 1a 	jmp	0x35f0	; 0x35f0 <__epilogue_restores__+0x10>

00002d38 <__gtsf2>:
    2d38:	a8 e1       	ldi	r26, 0x18	; 24
    2d3a:	b0 e0       	ldi	r27, 0x00	; 0
    2d3c:	e2 ea       	ldi	r30, 0xA2	; 162
    2d3e:	f6 e1       	ldi	r31, 0x16	; 22
    2d40:	0c 94 e0 1a 	jmp	0x35c0	; 0x35c0 <__prologue_saves__+0x18>
    2d44:	69 83       	std	Y+1, r22	; 0x01
    2d46:	7a 83       	std	Y+2, r23	; 0x02
    2d48:	8b 83       	std	Y+3, r24	; 0x03
    2d4a:	9c 83       	std	Y+4, r25	; 0x04
    2d4c:	2d 83       	std	Y+5, r18	; 0x05
    2d4e:	3e 83       	std	Y+6, r19	; 0x06
    2d50:	4f 83       	std	Y+7, r20	; 0x07
    2d52:	58 87       	std	Y+8, r21	; 0x08
    2d54:	89 e0       	ldi	r24, 0x09	; 9
    2d56:	e8 2e       	mov	r14, r24
    2d58:	f1 2c       	mov	r15, r1
    2d5a:	ec 0e       	add	r14, r28
    2d5c:	fd 1e       	adc	r15, r29
    2d5e:	ce 01       	movw	r24, r28
    2d60:	01 96       	adiw	r24, 0x01	; 1
    2d62:	b7 01       	movw	r22, r14
    2d64:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <__unpack_f>
    2d68:	8e 01       	movw	r16, r28
    2d6a:	0f 5e       	subi	r16, 0xEF	; 239
    2d6c:	1f 4f       	sbci	r17, 0xFF	; 255
    2d6e:	ce 01       	movw	r24, r28
    2d70:	05 96       	adiw	r24, 0x05	; 5
    2d72:	b8 01       	movw	r22, r16
    2d74:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <__unpack_f>
    2d78:	89 85       	ldd	r24, Y+9	; 0x09
    2d7a:	82 30       	cpi	r24, 0x02	; 2
    2d7c:	40 f0       	brcs	.+16     	; 0x2d8e <__gtsf2+0x56>
    2d7e:	89 89       	ldd	r24, Y+17	; 0x11
    2d80:	82 30       	cpi	r24, 0x02	; 2
    2d82:	28 f0       	brcs	.+10     	; 0x2d8e <__gtsf2+0x56>
    2d84:	c7 01       	movw	r24, r14
    2d86:	b8 01       	movw	r22, r16
    2d88:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <__fpcmp_parts_f>
    2d8c:	01 c0       	rjmp	.+2      	; 0x2d90 <__gtsf2+0x58>
    2d8e:	8f ef       	ldi	r24, 0xFF	; 255
    2d90:	68 96       	adiw	r28, 0x18	; 24
    2d92:	e6 e0       	ldi	r30, 0x06	; 6
    2d94:	0c 94 fc 1a 	jmp	0x35f8	; 0x35f8 <__epilogue_restores__+0x18>

00002d98 <__gesf2>:
    2d98:	a8 e1       	ldi	r26, 0x18	; 24
    2d9a:	b0 e0       	ldi	r27, 0x00	; 0
    2d9c:	e2 ed       	ldi	r30, 0xD2	; 210
    2d9e:	f6 e1       	ldi	r31, 0x16	; 22
    2da0:	0c 94 e0 1a 	jmp	0x35c0	; 0x35c0 <__prologue_saves__+0x18>
    2da4:	69 83       	std	Y+1, r22	; 0x01
    2da6:	7a 83       	std	Y+2, r23	; 0x02
    2da8:	8b 83       	std	Y+3, r24	; 0x03
    2daa:	9c 83       	std	Y+4, r25	; 0x04
    2dac:	2d 83       	std	Y+5, r18	; 0x05
    2dae:	3e 83       	std	Y+6, r19	; 0x06
    2db0:	4f 83       	std	Y+7, r20	; 0x07
    2db2:	58 87       	std	Y+8, r21	; 0x08
    2db4:	89 e0       	ldi	r24, 0x09	; 9
    2db6:	e8 2e       	mov	r14, r24
    2db8:	f1 2c       	mov	r15, r1
    2dba:	ec 0e       	add	r14, r28
    2dbc:	fd 1e       	adc	r15, r29
    2dbe:	ce 01       	movw	r24, r28
    2dc0:	01 96       	adiw	r24, 0x01	; 1
    2dc2:	b7 01       	movw	r22, r14
    2dc4:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <__unpack_f>
    2dc8:	8e 01       	movw	r16, r28
    2dca:	0f 5e       	subi	r16, 0xEF	; 239
    2dcc:	1f 4f       	sbci	r17, 0xFF	; 255
    2dce:	ce 01       	movw	r24, r28
    2dd0:	05 96       	adiw	r24, 0x05	; 5
    2dd2:	b8 01       	movw	r22, r16
    2dd4:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <__unpack_f>
    2dd8:	89 85       	ldd	r24, Y+9	; 0x09
    2dda:	82 30       	cpi	r24, 0x02	; 2
    2ddc:	40 f0       	brcs	.+16     	; 0x2dee <__gesf2+0x56>
    2dde:	89 89       	ldd	r24, Y+17	; 0x11
    2de0:	82 30       	cpi	r24, 0x02	; 2
    2de2:	28 f0       	brcs	.+10     	; 0x2dee <__gesf2+0x56>
    2de4:	c7 01       	movw	r24, r14
    2de6:	b8 01       	movw	r22, r16
    2de8:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <__fpcmp_parts_f>
    2dec:	01 c0       	rjmp	.+2      	; 0x2df0 <__gesf2+0x58>
    2dee:	8f ef       	ldi	r24, 0xFF	; 255
    2df0:	68 96       	adiw	r28, 0x18	; 24
    2df2:	e6 e0       	ldi	r30, 0x06	; 6
    2df4:	0c 94 fc 1a 	jmp	0x35f8	; 0x35f8 <__epilogue_restores__+0x18>

00002df8 <__ltsf2>:
    2df8:	a8 e1       	ldi	r26, 0x18	; 24
    2dfa:	b0 e0       	ldi	r27, 0x00	; 0
    2dfc:	e2 e0       	ldi	r30, 0x02	; 2
    2dfe:	f7 e1       	ldi	r31, 0x17	; 23
    2e00:	0c 94 e0 1a 	jmp	0x35c0	; 0x35c0 <__prologue_saves__+0x18>
    2e04:	69 83       	std	Y+1, r22	; 0x01
    2e06:	7a 83       	std	Y+2, r23	; 0x02
    2e08:	8b 83       	std	Y+3, r24	; 0x03
    2e0a:	9c 83       	std	Y+4, r25	; 0x04
    2e0c:	2d 83       	std	Y+5, r18	; 0x05
    2e0e:	3e 83       	std	Y+6, r19	; 0x06
    2e10:	4f 83       	std	Y+7, r20	; 0x07
    2e12:	58 87       	std	Y+8, r21	; 0x08
    2e14:	89 e0       	ldi	r24, 0x09	; 9
    2e16:	e8 2e       	mov	r14, r24
    2e18:	f1 2c       	mov	r15, r1
    2e1a:	ec 0e       	add	r14, r28
    2e1c:	fd 1e       	adc	r15, r29
    2e1e:	ce 01       	movw	r24, r28
    2e20:	01 96       	adiw	r24, 0x01	; 1
    2e22:	b7 01       	movw	r22, r14
    2e24:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <__unpack_f>
    2e28:	8e 01       	movw	r16, r28
    2e2a:	0f 5e       	subi	r16, 0xEF	; 239
    2e2c:	1f 4f       	sbci	r17, 0xFF	; 255
    2e2e:	ce 01       	movw	r24, r28
    2e30:	05 96       	adiw	r24, 0x05	; 5
    2e32:	b8 01       	movw	r22, r16
    2e34:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <__unpack_f>
    2e38:	89 85       	ldd	r24, Y+9	; 0x09
    2e3a:	82 30       	cpi	r24, 0x02	; 2
    2e3c:	40 f0       	brcs	.+16     	; 0x2e4e <__ltsf2+0x56>
    2e3e:	89 89       	ldd	r24, Y+17	; 0x11
    2e40:	82 30       	cpi	r24, 0x02	; 2
    2e42:	28 f0       	brcs	.+10     	; 0x2e4e <__ltsf2+0x56>
    2e44:	c7 01       	movw	r24, r14
    2e46:	b8 01       	movw	r22, r16
    2e48:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <__fpcmp_parts_f>
    2e4c:	01 c0       	rjmp	.+2      	; 0x2e50 <__ltsf2+0x58>
    2e4e:	81 e0       	ldi	r24, 0x01	; 1
    2e50:	68 96       	adiw	r28, 0x18	; 24
    2e52:	e6 e0       	ldi	r30, 0x06	; 6
    2e54:	0c 94 fc 1a 	jmp	0x35f8	; 0x35f8 <__epilogue_restores__+0x18>

00002e58 <__floatsisf>:
    2e58:	a8 e0       	ldi	r26, 0x08	; 8
    2e5a:	b0 e0       	ldi	r27, 0x00	; 0
    2e5c:	e2 e3       	ldi	r30, 0x32	; 50
    2e5e:	f7 e1       	ldi	r31, 0x17	; 23
    2e60:	0c 94 dd 1a 	jmp	0x35ba	; 0x35ba <__prologue_saves__+0x12>
    2e64:	9b 01       	movw	r18, r22
    2e66:	ac 01       	movw	r20, r24
    2e68:	83 e0       	ldi	r24, 0x03	; 3
    2e6a:	89 83       	std	Y+1, r24	; 0x01
    2e6c:	da 01       	movw	r26, r20
    2e6e:	c9 01       	movw	r24, r18
    2e70:	88 27       	eor	r24, r24
    2e72:	b7 fd       	sbrc	r27, 7
    2e74:	83 95       	inc	r24
    2e76:	99 27       	eor	r25, r25
    2e78:	aa 27       	eor	r26, r26
    2e7a:	bb 27       	eor	r27, r27
    2e7c:	b8 2e       	mov	r11, r24
    2e7e:	21 15       	cp	r18, r1
    2e80:	31 05       	cpc	r19, r1
    2e82:	41 05       	cpc	r20, r1
    2e84:	51 05       	cpc	r21, r1
    2e86:	19 f4       	brne	.+6      	; 0x2e8e <__floatsisf+0x36>
    2e88:	82 e0       	ldi	r24, 0x02	; 2
    2e8a:	89 83       	std	Y+1, r24	; 0x01
    2e8c:	3a c0       	rjmp	.+116    	; 0x2f02 <__floatsisf+0xaa>
    2e8e:	88 23       	and	r24, r24
    2e90:	a9 f0       	breq	.+42     	; 0x2ebc <__floatsisf+0x64>
    2e92:	20 30       	cpi	r18, 0x00	; 0
    2e94:	80 e0       	ldi	r24, 0x00	; 0
    2e96:	38 07       	cpc	r19, r24
    2e98:	80 e0       	ldi	r24, 0x00	; 0
    2e9a:	48 07       	cpc	r20, r24
    2e9c:	80 e8       	ldi	r24, 0x80	; 128
    2e9e:	58 07       	cpc	r21, r24
    2ea0:	29 f4       	brne	.+10     	; 0x2eac <__floatsisf+0x54>
    2ea2:	60 e0       	ldi	r22, 0x00	; 0
    2ea4:	70 e0       	ldi	r23, 0x00	; 0
    2ea6:	80 e0       	ldi	r24, 0x00	; 0
    2ea8:	9f ec       	ldi	r25, 0xCF	; 207
    2eaa:	30 c0       	rjmp	.+96     	; 0x2f0c <__floatsisf+0xb4>
    2eac:	ee 24       	eor	r14, r14
    2eae:	ff 24       	eor	r15, r15
    2eb0:	87 01       	movw	r16, r14
    2eb2:	e2 1a       	sub	r14, r18
    2eb4:	f3 0a       	sbc	r15, r19
    2eb6:	04 0b       	sbc	r16, r20
    2eb8:	15 0b       	sbc	r17, r21
    2eba:	02 c0       	rjmp	.+4      	; 0x2ec0 <__floatsisf+0x68>
    2ebc:	79 01       	movw	r14, r18
    2ebe:	8a 01       	movw	r16, r20
    2ec0:	8e e1       	ldi	r24, 0x1E	; 30
    2ec2:	c8 2e       	mov	r12, r24
    2ec4:	d1 2c       	mov	r13, r1
    2ec6:	dc 82       	std	Y+4, r13	; 0x04
    2ec8:	cb 82       	std	Y+3, r12	; 0x03
    2eca:	ed 82       	std	Y+5, r14	; 0x05
    2ecc:	fe 82       	std	Y+6, r15	; 0x06
    2ece:	0f 83       	std	Y+7, r16	; 0x07
    2ed0:	18 87       	std	Y+8, r17	; 0x08
    2ed2:	c8 01       	movw	r24, r16
    2ed4:	b7 01       	movw	r22, r14
    2ed6:	0e 94 57 18 	call	0x30ae	; 0x30ae <__clzsi2>
    2eda:	01 97       	sbiw	r24, 0x01	; 1
    2edc:	18 16       	cp	r1, r24
    2ede:	19 06       	cpc	r1, r25
    2ee0:	84 f4       	brge	.+32     	; 0x2f02 <__floatsisf+0xaa>
    2ee2:	08 2e       	mov	r0, r24
    2ee4:	04 c0       	rjmp	.+8      	; 0x2eee <__floatsisf+0x96>
    2ee6:	ee 0c       	add	r14, r14
    2ee8:	ff 1c       	adc	r15, r15
    2eea:	00 1f       	adc	r16, r16
    2eec:	11 1f       	adc	r17, r17
    2eee:	0a 94       	dec	r0
    2ef0:	d2 f7       	brpl	.-12     	; 0x2ee6 <__floatsisf+0x8e>
    2ef2:	ed 82       	std	Y+5, r14	; 0x05
    2ef4:	fe 82       	std	Y+6, r15	; 0x06
    2ef6:	0f 83       	std	Y+7, r16	; 0x07
    2ef8:	18 87       	std	Y+8, r17	; 0x08
    2efa:	c8 1a       	sub	r12, r24
    2efc:	d9 0a       	sbc	r13, r25
    2efe:	dc 82       	std	Y+4, r13	; 0x04
    2f00:	cb 82       	std	Y+3, r12	; 0x03
    2f02:	ba 82       	std	Y+2, r11	; 0x02
    2f04:	ce 01       	movw	r24, r28
    2f06:	01 96       	adiw	r24, 0x01	; 1
    2f08:	0e 94 a6 18 	call	0x314c	; 0x314c <__pack_f>
    2f0c:	28 96       	adiw	r28, 0x08	; 8
    2f0e:	e9 e0       	ldi	r30, 0x09	; 9
    2f10:	0c 94 f9 1a 	jmp	0x35f2	; 0x35f2 <__epilogue_restores__+0x12>

00002f14 <__fixsfsi>:
    2f14:	ac e0       	ldi	r26, 0x0C	; 12
    2f16:	b0 e0       	ldi	r27, 0x00	; 0
    2f18:	e0 e9       	ldi	r30, 0x90	; 144
    2f1a:	f7 e1       	ldi	r31, 0x17	; 23
    2f1c:	0c 94 e4 1a 	jmp	0x35c8	; 0x35c8 <__prologue_saves__+0x20>
    2f20:	69 83       	std	Y+1, r22	; 0x01
    2f22:	7a 83       	std	Y+2, r23	; 0x02
    2f24:	8b 83       	std	Y+3, r24	; 0x03
    2f26:	9c 83       	std	Y+4, r25	; 0x04
    2f28:	ce 01       	movw	r24, r28
    2f2a:	01 96       	adiw	r24, 0x01	; 1
    2f2c:	be 01       	movw	r22, r28
    2f2e:	6b 5f       	subi	r22, 0xFB	; 251
    2f30:	7f 4f       	sbci	r23, 0xFF	; 255
    2f32:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <__unpack_f>
    2f36:	8d 81       	ldd	r24, Y+5	; 0x05
    2f38:	82 30       	cpi	r24, 0x02	; 2
    2f3a:	61 f1       	breq	.+88     	; 0x2f94 <__fixsfsi+0x80>
    2f3c:	82 30       	cpi	r24, 0x02	; 2
    2f3e:	50 f1       	brcs	.+84     	; 0x2f94 <__fixsfsi+0x80>
    2f40:	84 30       	cpi	r24, 0x04	; 4
    2f42:	21 f4       	brne	.+8      	; 0x2f4c <__fixsfsi+0x38>
    2f44:	8e 81       	ldd	r24, Y+6	; 0x06
    2f46:	88 23       	and	r24, r24
    2f48:	51 f1       	breq	.+84     	; 0x2f9e <__fixsfsi+0x8a>
    2f4a:	2e c0       	rjmp	.+92     	; 0x2fa8 <__fixsfsi+0x94>
    2f4c:	2f 81       	ldd	r18, Y+7	; 0x07
    2f4e:	38 85       	ldd	r19, Y+8	; 0x08
    2f50:	37 fd       	sbrc	r19, 7
    2f52:	20 c0       	rjmp	.+64     	; 0x2f94 <__fixsfsi+0x80>
    2f54:	6e 81       	ldd	r22, Y+6	; 0x06
    2f56:	2f 31       	cpi	r18, 0x1F	; 31
    2f58:	31 05       	cpc	r19, r1
    2f5a:	1c f0       	brlt	.+6      	; 0x2f62 <__fixsfsi+0x4e>
    2f5c:	66 23       	and	r22, r22
    2f5e:	f9 f0       	breq	.+62     	; 0x2f9e <__fixsfsi+0x8a>
    2f60:	23 c0       	rjmp	.+70     	; 0x2fa8 <__fixsfsi+0x94>
    2f62:	8e e1       	ldi	r24, 0x1E	; 30
    2f64:	90 e0       	ldi	r25, 0x00	; 0
    2f66:	82 1b       	sub	r24, r18
    2f68:	93 0b       	sbc	r25, r19
    2f6a:	29 85       	ldd	r18, Y+9	; 0x09
    2f6c:	3a 85       	ldd	r19, Y+10	; 0x0a
    2f6e:	4b 85       	ldd	r20, Y+11	; 0x0b
    2f70:	5c 85       	ldd	r21, Y+12	; 0x0c
    2f72:	04 c0       	rjmp	.+8      	; 0x2f7c <__fixsfsi+0x68>
    2f74:	56 95       	lsr	r21
    2f76:	47 95       	ror	r20
    2f78:	37 95       	ror	r19
    2f7a:	27 95       	ror	r18
    2f7c:	8a 95       	dec	r24
    2f7e:	d2 f7       	brpl	.-12     	; 0x2f74 <__fixsfsi+0x60>
    2f80:	66 23       	and	r22, r22
    2f82:	b1 f0       	breq	.+44     	; 0x2fb0 <__fixsfsi+0x9c>
    2f84:	50 95       	com	r21
    2f86:	40 95       	com	r20
    2f88:	30 95       	com	r19
    2f8a:	21 95       	neg	r18
    2f8c:	3f 4f       	sbci	r19, 0xFF	; 255
    2f8e:	4f 4f       	sbci	r20, 0xFF	; 255
    2f90:	5f 4f       	sbci	r21, 0xFF	; 255
    2f92:	0e c0       	rjmp	.+28     	; 0x2fb0 <__fixsfsi+0x9c>
    2f94:	20 e0       	ldi	r18, 0x00	; 0
    2f96:	30 e0       	ldi	r19, 0x00	; 0
    2f98:	40 e0       	ldi	r20, 0x00	; 0
    2f9a:	50 e0       	ldi	r21, 0x00	; 0
    2f9c:	09 c0       	rjmp	.+18     	; 0x2fb0 <__fixsfsi+0x9c>
    2f9e:	2f ef       	ldi	r18, 0xFF	; 255
    2fa0:	3f ef       	ldi	r19, 0xFF	; 255
    2fa2:	4f ef       	ldi	r20, 0xFF	; 255
    2fa4:	5f e7       	ldi	r21, 0x7F	; 127
    2fa6:	04 c0       	rjmp	.+8      	; 0x2fb0 <__fixsfsi+0x9c>
    2fa8:	20 e0       	ldi	r18, 0x00	; 0
    2faa:	30 e0       	ldi	r19, 0x00	; 0
    2fac:	40 e0       	ldi	r20, 0x00	; 0
    2fae:	50 e8       	ldi	r21, 0x80	; 128
    2fb0:	b9 01       	movw	r22, r18
    2fb2:	ca 01       	movw	r24, r20
    2fb4:	2c 96       	adiw	r28, 0x0c	; 12
    2fb6:	e2 e0       	ldi	r30, 0x02	; 2
    2fb8:	0c 94 00 1b 	jmp	0x3600	; 0x3600 <__epilogue_restores__+0x20>

00002fbc <__floatunsisf>:
    2fbc:	a8 e0       	ldi	r26, 0x08	; 8
    2fbe:	b0 e0       	ldi	r27, 0x00	; 0
    2fc0:	e4 ee       	ldi	r30, 0xE4	; 228
    2fc2:	f7 e1       	ldi	r31, 0x17	; 23
    2fc4:	0c 94 dc 1a 	jmp	0x35b8	; 0x35b8 <__prologue_saves__+0x10>
    2fc8:	7b 01       	movw	r14, r22
    2fca:	8c 01       	movw	r16, r24
    2fcc:	61 15       	cp	r22, r1
    2fce:	71 05       	cpc	r23, r1
    2fd0:	81 05       	cpc	r24, r1
    2fd2:	91 05       	cpc	r25, r1
    2fd4:	19 f4       	brne	.+6      	; 0x2fdc <__floatunsisf+0x20>
    2fd6:	82 e0       	ldi	r24, 0x02	; 2
    2fd8:	89 83       	std	Y+1, r24	; 0x01
    2fda:	60 c0       	rjmp	.+192    	; 0x309c <__floatunsisf+0xe0>
    2fdc:	83 e0       	ldi	r24, 0x03	; 3
    2fde:	89 83       	std	Y+1, r24	; 0x01
    2fe0:	8e e1       	ldi	r24, 0x1E	; 30
    2fe2:	c8 2e       	mov	r12, r24
    2fe4:	d1 2c       	mov	r13, r1
    2fe6:	dc 82       	std	Y+4, r13	; 0x04
    2fe8:	cb 82       	std	Y+3, r12	; 0x03
    2fea:	ed 82       	std	Y+5, r14	; 0x05
    2fec:	fe 82       	std	Y+6, r15	; 0x06
    2fee:	0f 83       	std	Y+7, r16	; 0x07
    2ff0:	18 87       	std	Y+8, r17	; 0x08
    2ff2:	c8 01       	movw	r24, r16
    2ff4:	b7 01       	movw	r22, r14
    2ff6:	0e 94 57 18 	call	0x30ae	; 0x30ae <__clzsi2>
    2ffa:	fc 01       	movw	r30, r24
    2ffc:	31 97       	sbiw	r30, 0x01	; 1
    2ffe:	f7 ff       	sbrs	r31, 7
    3000:	3b c0       	rjmp	.+118    	; 0x3078 <__floatunsisf+0xbc>
    3002:	22 27       	eor	r18, r18
    3004:	33 27       	eor	r19, r19
    3006:	2e 1b       	sub	r18, r30
    3008:	3f 0b       	sbc	r19, r31
    300a:	57 01       	movw	r10, r14
    300c:	68 01       	movw	r12, r16
    300e:	02 2e       	mov	r0, r18
    3010:	04 c0       	rjmp	.+8      	; 0x301a <__floatunsisf+0x5e>
    3012:	d6 94       	lsr	r13
    3014:	c7 94       	ror	r12
    3016:	b7 94       	ror	r11
    3018:	a7 94       	ror	r10
    301a:	0a 94       	dec	r0
    301c:	d2 f7       	brpl	.-12     	; 0x3012 <__floatunsisf+0x56>
    301e:	40 e0       	ldi	r20, 0x00	; 0
    3020:	50 e0       	ldi	r21, 0x00	; 0
    3022:	60 e0       	ldi	r22, 0x00	; 0
    3024:	70 e0       	ldi	r23, 0x00	; 0
    3026:	81 e0       	ldi	r24, 0x01	; 1
    3028:	90 e0       	ldi	r25, 0x00	; 0
    302a:	a0 e0       	ldi	r26, 0x00	; 0
    302c:	b0 e0       	ldi	r27, 0x00	; 0
    302e:	04 c0       	rjmp	.+8      	; 0x3038 <__floatunsisf+0x7c>
    3030:	88 0f       	add	r24, r24
    3032:	99 1f       	adc	r25, r25
    3034:	aa 1f       	adc	r26, r26
    3036:	bb 1f       	adc	r27, r27
    3038:	2a 95       	dec	r18
    303a:	d2 f7       	brpl	.-12     	; 0x3030 <__floatunsisf+0x74>
    303c:	01 97       	sbiw	r24, 0x01	; 1
    303e:	a1 09       	sbc	r26, r1
    3040:	b1 09       	sbc	r27, r1
    3042:	8e 21       	and	r24, r14
    3044:	9f 21       	and	r25, r15
    3046:	a0 23       	and	r26, r16
    3048:	b1 23       	and	r27, r17
    304a:	00 97       	sbiw	r24, 0x00	; 0
    304c:	a1 05       	cpc	r26, r1
    304e:	b1 05       	cpc	r27, r1
    3050:	21 f0       	breq	.+8      	; 0x305a <__floatunsisf+0x9e>
    3052:	41 e0       	ldi	r20, 0x01	; 1
    3054:	50 e0       	ldi	r21, 0x00	; 0
    3056:	60 e0       	ldi	r22, 0x00	; 0
    3058:	70 e0       	ldi	r23, 0x00	; 0
    305a:	4a 29       	or	r20, r10
    305c:	5b 29       	or	r21, r11
    305e:	6c 29       	or	r22, r12
    3060:	7d 29       	or	r23, r13
    3062:	4d 83       	std	Y+5, r20	; 0x05
    3064:	5e 83       	std	Y+6, r21	; 0x06
    3066:	6f 83       	std	Y+7, r22	; 0x07
    3068:	78 87       	std	Y+8, r23	; 0x08
    306a:	8e e1       	ldi	r24, 0x1E	; 30
    306c:	90 e0       	ldi	r25, 0x00	; 0
    306e:	8e 1b       	sub	r24, r30
    3070:	9f 0b       	sbc	r25, r31
    3072:	9c 83       	std	Y+4, r25	; 0x04
    3074:	8b 83       	std	Y+3, r24	; 0x03
    3076:	12 c0       	rjmp	.+36     	; 0x309c <__floatunsisf+0xe0>
    3078:	30 97       	sbiw	r30, 0x00	; 0
    307a:	81 f0       	breq	.+32     	; 0x309c <__floatunsisf+0xe0>
    307c:	0e 2e       	mov	r0, r30
    307e:	04 c0       	rjmp	.+8      	; 0x3088 <__floatunsisf+0xcc>
    3080:	ee 0c       	add	r14, r14
    3082:	ff 1c       	adc	r15, r15
    3084:	00 1f       	adc	r16, r16
    3086:	11 1f       	adc	r17, r17
    3088:	0a 94       	dec	r0
    308a:	d2 f7       	brpl	.-12     	; 0x3080 <__floatunsisf+0xc4>
    308c:	ed 82       	std	Y+5, r14	; 0x05
    308e:	fe 82       	std	Y+6, r15	; 0x06
    3090:	0f 83       	std	Y+7, r16	; 0x07
    3092:	18 87       	std	Y+8, r17	; 0x08
    3094:	ce 1a       	sub	r12, r30
    3096:	df 0a       	sbc	r13, r31
    3098:	dc 82       	std	Y+4, r13	; 0x04
    309a:	cb 82       	std	Y+3, r12	; 0x03
    309c:	1a 82       	std	Y+2, r1	; 0x02
    309e:	ce 01       	movw	r24, r28
    30a0:	01 96       	adiw	r24, 0x01	; 1
    30a2:	0e 94 a6 18 	call	0x314c	; 0x314c <__pack_f>
    30a6:	28 96       	adiw	r28, 0x08	; 8
    30a8:	ea e0       	ldi	r30, 0x0A	; 10
    30aa:	0c 94 f8 1a 	jmp	0x35f0	; 0x35f0 <__epilogue_restores__+0x10>

000030ae <__clzsi2>:
    30ae:	ef 92       	push	r14
    30b0:	ff 92       	push	r15
    30b2:	0f 93       	push	r16
    30b4:	1f 93       	push	r17
    30b6:	7b 01       	movw	r14, r22
    30b8:	8c 01       	movw	r16, r24
    30ba:	80 e0       	ldi	r24, 0x00	; 0
    30bc:	e8 16       	cp	r14, r24
    30be:	80 e0       	ldi	r24, 0x00	; 0
    30c0:	f8 06       	cpc	r15, r24
    30c2:	81 e0       	ldi	r24, 0x01	; 1
    30c4:	08 07       	cpc	r16, r24
    30c6:	80 e0       	ldi	r24, 0x00	; 0
    30c8:	18 07       	cpc	r17, r24
    30ca:	88 f4       	brcc	.+34     	; 0x30ee <__clzsi2+0x40>
    30cc:	8f ef       	ldi	r24, 0xFF	; 255
    30ce:	e8 16       	cp	r14, r24
    30d0:	f1 04       	cpc	r15, r1
    30d2:	01 05       	cpc	r16, r1
    30d4:	11 05       	cpc	r17, r1
    30d6:	31 f0       	breq	.+12     	; 0x30e4 <__clzsi2+0x36>
    30d8:	28 f0       	brcs	.+10     	; 0x30e4 <__clzsi2+0x36>
    30da:	88 e0       	ldi	r24, 0x08	; 8
    30dc:	90 e0       	ldi	r25, 0x00	; 0
    30de:	a0 e0       	ldi	r26, 0x00	; 0
    30e0:	b0 e0       	ldi	r27, 0x00	; 0
    30e2:	17 c0       	rjmp	.+46     	; 0x3112 <__clzsi2+0x64>
    30e4:	80 e0       	ldi	r24, 0x00	; 0
    30e6:	90 e0       	ldi	r25, 0x00	; 0
    30e8:	a0 e0       	ldi	r26, 0x00	; 0
    30ea:	b0 e0       	ldi	r27, 0x00	; 0
    30ec:	12 c0       	rjmp	.+36     	; 0x3112 <__clzsi2+0x64>
    30ee:	80 e0       	ldi	r24, 0x00	; 0
    30f0:	e8 16       	cp	r14, r24
    30f2:	80 e0       	ldi	r24, 0x00	; 0
    30f4:	f8 06       	cpc	r15, r24
    30f6:	80 e0       	ldi	r24, 0x00	; 0
    30f8:	08 07       	cpc	r16, r24
    30fa:	81 e0       	ldi	r24, 0x01	; 1
    30fc:	18 07       	cpc	r17, r24
    30fe:	28 f0       	brcs	.+10     	; 0x310a <__clzsi2+0x5c>
    3100:	88 e1       	ldi	r24, 0x18	; 24
    3102:	90 e0       	ldi	r25, 0x00	; 0
    3104:	a0 e0       	ldi	r26, 0x00	; 0
    3106:	b0 e0       	ldi	r27, 0x00	; 0
    3108:	04 c0       	rjmp	.+8      	; 0x3112 <__clzsi2+0x64>
    310a:	80 e1       	ldi	r24, 0x10	; 16
    310c:	90 e0       	ldi	r25, 0x00	; 0
    310e:	a0 e0       	ldi	r26, 0x00	; 0
    3110:	b0 e0       	ldi	r27, 0x00	; 0
    3112:	20 e2       	ldi	r18, 0x20	; 32
    3114:	30 e0       	ldi	r19, 0x00	; 0
    3116:	40 e0       	ldi	r20, 0x00	; 0
    3118:	50 e0       	ldi	r21, 0x00	; 0
    311a:	28 1b       	sub	r18, r24
    311c:	39 0b       	sbc	r19, r25
    311e:	4a 0b       	sbc	r20, r26
    3120:	5b 0b       	sbc	r21, r27
    3122:	04 c0       	rjmp	.+8      	; 0x312c <__clzsi2+0x7e>
    3124:	16 95       	lsr	r17
    3126:	07 95       	ror	r16
    3128:	f7 94       	ror	r15
    312a:	e7 94       	ror	r14
    312c:	8a 95       	dec	r24
    312e:	d2 f7       	brpl	.-12     	; 0x3124 <__clzsi2+0x76>
    3130:	f7 01       	movw	r30, r14
    3132:	e1 5b       	subi	r30, 0xB1	; 177
    3134:	fd 4f       	sbci	r31, 0xFD	; 253
    3136:	80 81       	ld	r24, Z
    3138:	28 1b       	sub	r18, r24
    313a:	31 09       	sbc	r19, r1
    313c:	41 09       	sbc	r20, r1
    313e:	51 09       	sbc	r21, r1
    3140:	c9 01       	movw	r24, r18
    3142:	1f 91       	pop	r17
    3144:	0f 91       	pop	r16
    3146:	ff 90       	pop	r15
    3148:	ef 90       	pop	r14
    314a:	08 95       	ret

0000314c <__pack_f>:
    314c:	df 92       	push	r13
    314e:	ef 92       	push	r14
    3150:	ff 92       	push	r15
    3152:	0f 93       	push	r16
    3154:	1f 93       	push	r17
    3156:	fc 01       	movw	r30, r24
    3158:	e4 80       	ldd	r14, Z+4	; 0x04
    315a:	f5 80       	ldd	r15, Z+5	; 0x05
    315c:	06 81       	ldd	r16, Z+6	; 0x06
    315e:	17 81       	ldd	r17, Z+7	; 0x07
    3160:	d1 80       	ldd	r13, Z+1	; 0x01
    3162:	80 81       	ld	r24, Z
    3164:	82 30       	cpi	r24, 0x02	; 2
    3166:	48 f4       	brcc	.+18     	; 0x317a <__pack_f+0x2e>
    3168:	80 e0       	ldi	r24, 0x00	; 0
    316a:	90 e0       	ldi	r25, 0x00	; 0
    316c:	a0 e1       	ldi	r26, 0x10	; 16
    316e:	b0 e0       	ldi	r27, 0x00	; 0
    3170:	e8 2a       	or	r14, r24
    3172:	f9 2a       	or	r15, r25
    3174:	0a 2b       	or	r16, r26
    3176:	1b 2b       	or	r17, r27
    3178:	a5 c0       	rjmp	.+330    	; 0x32c4 <__pack_f+0x178>
    317a:	84 30       	cpi	r24, 0x04	; 4
    317c:	09 f4       	brne	.+2      	; 0x3180 <__pack_f+0x34>
    317e:	9f c0       	rjmp	.+318    	; 0x32be <__pack_f+0x172>
    3180:	82 30       	cpi	r24, 0x02	; 2
    3182:	21 f4       	brne	.+8      	; 0x318c <__pack_f+0x40>
    3184:	ee 24       	eor	r14, r14
    3186:	ff 24       	eor	r15, r15
    3188:	87 01       	movw	r16, r14
    318a:	05 c0       	rjmp	.+10     	; 0x3196 <__pack_f+0x4a>
    318c:	e1 14       	cp	r14, r1
    318e:	f1 04       	cpc	r15, r1
    3190:	01 05       	cpc	r16, r1
    3192:	11 05       	cpc	r17, r1
    3194:	19 f4       	brne	.+6      	; 0x319c <__pack_f+0x50>
    3196:	e0 e0       	ldi	r30, 0x00	; 0
    3198:	f0 e0       	ldi	r31, 0x00	; 0
    319a:	96 c0       	rjmp	.+300    	; 0x32c8 <__pack_f+0x17c>
    319c:	62 81       	ldd	r22, Z+2	; 0x02
    319e:	73 81       	ldd	r23, Z+3	; 0x03
    31a0:	9f ef       	ldi	r25, 0xFF	; 255
    31a2:	62 38       	cpi	r22, 0x82	; 130
    31a4:	79 07       	cpc	r23, r25
    31a6:	0c f0       	brlt	.+2      	; 0x31aa <__pack_f+0x5e>
    31a8:	5b c0       	rjmp	.+182    	; 0x3260 <__pack_f+0x114>
    31aa:	22 e8       	ldi	r18, 0x82	; 130
    31ac:	3f ef       	ldi	r19, 0xFF	; 255
    31ae:	26 1b       	sub	r18, r22
    31b0:	37 0b       	sbc	r19, r23
    31b2:	2a 31       	cpi	r18, 0x1A	; 26
    31b4:	31 05       	cpc	r19, r1
    31b6:	2c f0       	brlt	.+10     	; 0x31c2 <__pack_f+0x76>
    31b8:	20 e0       	ldi	r18, 0x00	; 0
    31ba:	30 e0       	ldi	r19, 0x00	; 0
    31bc:	40 e0       	ldi	r20, 0x00	; 0
    31be:	50 e0       	ldi	r21, 0x00	; 0
    31c0:	2a c0       	rjmp	.+84     	; 0x3216 <__pack_f+0xca>
    31c2:	b8 01       	movw	r22, r16
    31c4:	a7 01       	movw	r20, r14
    31c6:	02 2e       	mov	r0, r18
    31c8:	04 c0       	rjmp	.+8      	; 0x31d2 <__pack_f+0x86>
    31ca:	76 95       	lsr	r23
    31cc:	67 95       	ror	r22
    31ce:	57 95       	ror	r21
    31d0:	47 95       	ror	r20
    31d2:	0a 94       	dec	r0
    31d4:	d2 f7       	brpl	.-12     	; 0x31ca <__pack_f+0x7e>
    31d6:	81 e0       	ldi	r24, 0x01	; 1
    31d8:	90 e0       	ldi	r25, 0x00	; 0
    31da:	a0 e0       	ldi	r26, 0x00	; 0
    31dc:	b0 e0       	ldi	r27, 0x00	; 0
    31de:	04 c0       	rjmp	.+8      	; 0x31e8 <__pack_f+0x9c>
    31e0:	88 0f       	add	r24, r24
    31e2:	99 1f       	adc	r25, r25
    31e4:	aa 1f       	adc	r26, r26
    31e6:	bb 1f       	adc	r27, r27
    31e8:	2a 95       	dec	r18
    31ea:	d2 f7       	brpl	.-12     	; 0x31e0 <__pack_f+0x94>
    31ec:	01 97       	sbiw	r24, 0x01	; 1
    31ee:	a1 09       	sbc	r26, r1
    31f0:	b1 09       	sbc	r27, r1
    31f2:	8e 21       	and	r24, r14
    31f4:	9f 21       	and	r25, r15
    31f6:	a0 23       	and	r26, r16
    31f8:	b1 23       	and	r27, r17
    31fa:	00 97       	sbiw	r24, 0x00	; 0
    31fc:	a1 05       	cpc	r26, r1
    31fe:	b1 05       	cpc	r27, r1
    3200:	21 f0       	breq	.+8      	; 0x320a <__pack_f+0xbe>
    3202:	81 e0       	ldi	r24, 0x01	; 1
    3204:	90 e0       	ldi	r25, 0x00	; 0
    3206:	a0 e0       	ldi	r26, 0x00	; 0
    3208:	b0 e0       	ldi	r27, 0x00	; 0
    320a:	9a 01       	movw	r18, r20
    320c:	ab 01       	movw	r20, r22
    320e:	28 2b       	or	r18, r24
    3210:	39 2b       	or	r19, r25
    3212:	4a 2b       	or	r20, r26
    3214:	5b 2b       	or	r21, r27
    3216:	da 01       	movw	r26, r20
    3218:	c9 01       	movw	r24, r18
    321a:	8f 77       	andi	r24, 0x7F	; 127
    321c:	90 70       	andi	r25, 0x00	; 0
    321e:	a0 70       	andi	r26, 0x00	; 0
    3220:	b0 70       	andi	r27, 0x00	; 0
    3222:	80 34       	cpi	r24, 0x40	; 64
    3224:	91 05       	cpc	r25, r1
    3226:	a1 05       	cpc	r26, r1
    3228:	b1 05       	cpc	r27, r1
    322a:	39 f4       	brne	.+14     	; 0x323a <__pack_f+0xee>
    322c:	27 ff       	sbrs	r18, 7
    322e:	09 c0       	rjmp	.+18     	; 0x3242 <__pack_f+0xf6>
    3230:	20 5c       	subi	r18, 0xC0	; 192
    3232:	3f 4f       	sbci	r19, 0xFF	; 255
    3234:	4f 4f       	sbci	r20, 0xFF	; 255
    3236:	5f 4f       	sbci	r21, 0xFF	; 255
    3238:	04 c0       	rjmp	.+8      	; 0x3242 <__pack_f+0xf6>
    323a:	21 5c       	subi	r18, 0xC1	; 193
    323c:	3f 4f       	sbci	r19, 0xFF	; 255
    323e:	4f 4f       	sbci	r20, 0xFF	; 255
    3240:	5f 4f       	sbci	r21, 0xFF	; 255
    3242:	e0 e0       	ldi	r30, 0x00	; 0
    3244:	f0 e0       	ldi	r31, 0x00	; 0
    3246:	20 30       	cpi	r18, 0x00	; 0
    3248:	a0 e0       	ldi	r26, 0x00	; 0
    324a:	3a 07       	cpc	r19, r26
    324c:	a0 e0       	ldi	r26, 0x00	; 0
    324e:	4a 07       	cpc	r20, r26
    3250:	a0 e4       	ldi	r26, 0x40	; 64
    3252:	5a 07       	cpc	r21, r26
    3254:	10 f0       	brcs	.+4      	; 0x325a <__pack_f+0x10e>
    3256:	e1 e0       	ldi	r30, 0x01	; 1
    3258:	f0 e0       	ldi	r31, 0x00	; 0
    325a:	79 01       	movw	r14, r18
    325c:	8a 01       	movw	r16, r20
    325e:	27 c0       	rjmp	.+78     	; 0x32ae <__pack_f+0x162>
    3260:	60 38       	cpi	r22, 0x80	; 128
    3262:	71 05       	cpc	r23, r1
    3264:	64 f5       	brge	.+88     	; 0x32be <__pack_f+0x172>
    3266:	fb 01       	movw	r30, r22
    3268:	e1 58       	subi	r30, 0x81	; 129
    326a:	ff 4f       	sbci	r31, 0xFF	; 255
    326c:	d8 01       	movw	r26, r16
    326e:	c7 01       	movw	r24, r14
    3270:	8f 77       	andi	r24, 0x7F	; 127
    3272:	90 70       	andi	r25, 0x00	; 0
    3274:	a0 70       	andi	r26, 0x00	; 0
    3276:	b0 70       	andi	r27, 0x00	; 0
    3278:	80 34       	cpi	r24, 0x40	; 64
    327a:	91 05       	cpc	r25, r1
    327c:	a1 05       	cpc	r26, r1
    327e:	b1 05       	cpc	r27, r1
    3280:	39 f4       	brne	.+14     	; 0x3290 <__pack_f+0x144>
    3282:	e7 fe       	sbrs	r14, 7
    3284:	0d c0       	rjmp	.+26     	; 0x32a0 <__pack_f+0x154>
    3286:	80 e4       	ldi	r24, 0x40	; 64
    3288:	90 e0       	ldi	r25, 0x00	; 0
    328a:	a0 e0       	ldi	r26, 0x00	; 0
    328c:	b0 e0       	ldi	r27, 0x00	; 0
    328e:	04 c0       	rjmp	.+8      	; 0x3298 <__pack_f+0x14c>
    3290:	8f e3       	ldi	r24, 0x3F	; 63
    3292:	90 e0       	ldi	r25, 0x00	; 0
    3294:	a0 e0       	ldi	r26, 0x00	; 0
    3296:	b0 e0       	ldi	r27, 0x00	; 0
    3298:	e8 0e       	add	r14, r24
    329a:	f9 1e       	adc	r15, r25
    329c:	0a 1f       	adc	r16, r26
    329e:	1b 1f       	adc	r17, r27
    32a0:	17 ff       	sbrs	r17, 7
    32a2:	05 c0       	rjmp	.+10     	; 0x32ae <__pack_f+0x162>
    32a4:	16 95       	lsr	r17
    32a6:	07 95       	ror	r16
    32a8:	f7 94       	ror	r15
    32aa:	e7 94       	ror	r14
    32ac:	31 96       	adiw	r30, 0x01	; 1
    32ae:	87 e0       	ldi	r24, 0x07	; 7
    32b0:	16 95       	lsr	r17
    32b2:	07 95       	ror	r16
    32b4:	f7 94       	ror	r15
    32b6:	e7 94       	ror	r14
    32b8:	8a 95       	dec	r24
    32ba:	d1 f7       	brne	.-12     	; 0x32b0 <__pack_f+0x164>
    32bc:	05 c0       	rjmp	.+10     	; 0x32c8 <__pack_f+0x17c>
    32be:	ee 24       	eor	r14, r14
    32c0:	ff 24       	eor	r15, r15
    32c2:	87 01       	movw	r16, r14
    32c4:	ef ef       	ldi	r30, 0xFF	; 255
    32c6:	f0 e0       	ldi	r31, 0x00	; 0
    32c8:	6e 2f       	mov	r22, r30
    32ca:	67 95       	ror	r22
    32cc:	66 27       	eor	r22, r22
    32ce:	67 95       	ror	r22
    32d0:	90 2f       	mov	r25, r16
    32d2:	9f 77       	andi	r25, 0x7F	; 127
    32d4:	d7 94       	ror	r13
    32d6:	dd 24       	eor	r13, r13
    32d8:	d7 94       	ror	r13
    32da:	8e 2f       	mov	r24, r30
    32dc:	86 95       	lsr	r24
    32de:	49 2f       	mov	r20, r25
    32e0:	46 2b       	or	r20, r22
    32e2:	58 2f       	mov	r21, r24
    32e4:	5d 29       	or	r21, r13
    32e6:	b7 01       	movw	r22, r14
    32e8:	ca 01       	movw	r24, r20
    32ea:	1f 91       	pop	r17
    32ec:	0f 91       	pop	r16
    32ee:	ff 90       	pop	r15
    32f0:	ef 90       	pop	r14
    32f2:	df 90       	pop	r13
    32f4:	08 95       	ret

000032f6 <__unpack_f>:
    32f6:	fc 01       	movw	r30, r24
    32f8:	db 01       	movw	r26, r22
    32fa:	40 81       	ld	r20, Z
    32fc:	51 81       	ldd	r21, Z+1	; 0x01
    32fe:	22 81       	ldd	r18, Z+2	; 0x02
    3300:	62 2f       	mov	r22, r18
    3302:	6f 77       	andi	r22, 0x7F	; 127
    3304:	70 e0       	ldi	r23, 0x00	; 0
    3306:	22 1f       	adc	r18, r18
    3308:	22 27       	eor	r18, r18
    330a:	22 1f       	adc	r18, r18
    330c:	93 81       	ldd	r25, Z+3	; 0x03
    330e:	89 2f       	mov	r24, r25
    3310:	88 0f       	add	r24, r24
    3312:	82 2b       	or	r24, r18
    3314:	28 2f       	mov	r18, r24
    3316:	30 e0       	ldi	r19, 0x00	; 0
    3318:	99 1f       	adc	r25, r25
    331a:	99 27       	eor	r25, r25
    331c:	99 1f       	adc	r25, r25
    331e:	11 96       	adiw	r26, 0x01	; 1
    3320:	9c 93       	st	X, r25
    3322:	11 97       	sbiw	r26, 0x01	; 1
    3324:	21 15       	cp	r18, r1
    3326:	31 05       	cpc	r19, r1
    3328:	a9 f5       	brne	.+106    	; 0x3394 <__unpack_f+0x9e>
    332a:	41 15       	cp	r20, r1
    332c:	51 05       	cpc	r21, r1
    332e:	61 05       	cpc	r22, r1
    3330:	71 05       	cpc	r23, r1
    3332:	11 f4       	brne	.+4      	; 0x3338 <__unpack_f+0x42>
    3334:	82 e0       	ldi	r24, 0x02	; 2
    3336:	37 c0       	rjmp	.+110    	; 0x33a6 <__unpack_f+0xb0>
    3338:	82 e8       	ldi	r24, 0x82	; 130
    333a:	9f ef       	ldi	r25, 0xFF	; 255
    333c:	13 96       	adiw	r26, 0x03	; 3
    333e:	9c 93       	st	X, r25
    3340:	8e 93       	st	-X, r24
    3342:	12 97       	sbiw	r26, 0x02	; 2
    3344:	9a 01       	movw	r18, r20
    3346:	ab 01       	movw	r20, r22
    3348:	67 e0       	ldi	r22, 0x07	; 7
    334a:	22 0f       	add	r18, r18
    334c:	33 1f       	adc	r19, r19
    334e:	44 1f       	adc	r20, r20
    3350:	55 1f       	adc	r21, r21
    3352:	6a 95       	dec	r22
    3354:	d1 f7       	brne	.-12     	; 0x334a <__unpack_f+0x54>
    3356:	83 e0       	ldi	r24, 0x03	; 3
    3358:	8c 93       	st	X, r24
    335a:	0d c0       	rjmp	.+26     	; 0x3376 <__unpack_f+0x80>
    335c:	22 0f       	add	r18, r18
    335e:	33 1f       	adc	r19, r19
    3360:	44 1f       	adc	r20, r20
    3362:	55 1f       	adc	r21, r21
    3364:	12 96       	adiw	r26, 0x02	; 2
    3366:	8d 91       	ld	r24, X+
    3368:	9c 91       	ld	r25, X
    336a:	13 97       	sbiw	r26, 0x03	; 3
    336c:	01 97       	sbiw	r24, 0x01	; 1
    336e:	13 96       	adiw	r26, 0x03	; 3
    3370:	9c 93       	st	X, r25
    3372:	8e 93       	st	-X, r24
    3374:	12 97       	sbiw	r26, 0x02	; 2
    3376:	20 30       	cpi	r18, 0x00	; 0
    3378:	80 e0       	ldi	r24, 0x00	; 0
    337a:	38 07       	cpc	r19, r24
    337c:	80 e0       	ldi	r24, 0x00	; 0
    337e:	48 07       	cpc	r20, r24
    3380:	80 e4       	ldi	r24, 0x40	; 64
    3382:	58 07       	cpc	r21, r24
    3384:	58 f3       	brcs	.-42     	; 0x335c <__unpack_f+0x66>
    3386:	14 96       	adiw	r26, 0x04	; 4
    3388:	2d 93       	st	X+, r18
    338a:	3d 93       	st	X+, r19
    338c:	4d 93       	st	X+, r20
    338e:	5c 93       	st	X, r21
    3390:	17 97       	sbiw	r26, 0x07	; 7
    3392:	08 95       	ret
    3394:	2f 3f       	cpi	r18, 0xFF	; 255
    3396:	31 05       	cpc	r19, r1
    3398:	79 f4       	brne	.+30     	; 0x33b8 <__unpack_f+0xc2>
    339a:	41 15       	cp	r20, r1
    339c:	51 05       	cpc	r21, r1
    339e:	61 05       	cpc	r22, r1
    33a0:	71 05       	cpc	r23, r1
    33a2:	19 f4       	brne	.+6      	; 0x33aa <__unpack_f+0xb4>
    33a4:	84 e0       	ldi	r24, 0x04	; 4
    33a6:	8c 93       	st	X, r24
    33a8:	08 95       	ret
    33aa:	64 ff       	sbrs	r22, 4
    33ac:	03 c0       	rjmp	.+6      	; 0x33b4 <__unpack_f+0xbe>
    33ae:	81 e0       	ldi	r24, 0x01	; 1
    33b0:	8c 93       	st	X, r24
    33b2:	12 c0       	rjmp	.+36     	; 0x33d8 <__unpack_f+0xe2>
    33b4:	1c 92       	st	X, r1
    33b6:	10 c0       	rjmp	.+32     	; 0x33d8 <__unpack_f+0xe2>
    33b8:	2f 57       	subi	r18, 0x7F	; 127
    33ba:	30 40       	sbci	r19, 0x00	; 0
    33bc:	13 96       	adiw	r26, 0x03	; 3
    33be:	3c 93       	st	X, r19
    33c0:	2e 93       	st	-X, r18
    33c2:	12 97       	sbiw	r26, 0x02	; 2
    33c4:	83 e0       	ldi	r24, 0x03	; 3
    33c6:	8c 93       	st	X, r24
    33c8:	87 e0       	ldi	r24, 0x07	; 7
    33ca:	44 0f       	add	r20, r20
    33cc:	55 1f       	adc	r21, r21
    33ce:	66 1f       	adc	r22, r22
    33d0:	77 1f       	adc	r23, r23
    33d2:	8a 95       	dec	r24
    33d4:	d1 f7       	brne	.-12     	; 0x33ca <__unpack_f+0xd4>
    33d6:	70 64       	ori	r23, 0x40	; 64
    33d8:	14 96       	adiw	r26, 0x04	; 4
    33da:	4d 93       	st	X+, r20
    33dc:	5d 93       	st	X+, r21
    33de:	6d 93       	st	X+, r22
    33e0:	7c 93       	st	X, r23
    33e2:	17 97       	sbiw	r26, 0x07	; 7
    33e4:	08 95       	ret

000033e6 <__fpcmp_parts_f>:
    33e6:	1f 93       	push	r17
    33e8:	dc 01       	movw	r26, r24
    33ea:	fb 01       	movw	r30, r22
    33ec:	9c 91       	ld	r25, X
    33ee:	92 30       	cpi	r25, 0x02	; 2
    33f0:	08 f4       	brcc	.+2      	; 0x33f4 <__fpcmp_parts_f+0xe>
    33f2:	47 c0       	rjmp	.+142    	; 0x3482 <__fpcmp_parts_f+0x9c>
    33f4:	80 81       	ld	r24, Z
    33f6:	82 30       	cpi	r24, 0x02	; 2
    33f8:	08 f4       	brcc	.+2      	; 0x33fc <__fpcmp_parts_f+0x16>
    33fa:	43 c0       	rjmp	.+134    	; 0x3482 <__fpcmp_parts_f+0x9c>
    33fc:	94 30       	cpi	r25, 0x04	; 4
    33fe:	51 f4       	brne	.+20     	; 0x3414 <__fpcmp_parts_f+0x2e>
    3400:	11 96       	adiw	r26, 0x01	; 1
    3402:	1c 91       	ld	r17, X
    3404:	84 30       	cpi	r24, 0x04	; 4
    3406:	99 f5       	brne	.+102    	; 0x346e <__fpcmp_parts_f+0x88>
    3408:	81 81       	ldd	r24, Z+1	; 0x01
    340a:	68 2f       	mov	r22, r24
    340c:	70 e0       	ldi	r23, 0x00	; 0
    340e:	61 1b       	sub	r22, r17
    3410:	71 09       	sbc	r23, r1
    3412:	3f c0       	rjmp	.+126    	; 0x3492 <__fpcmp_parts_f+0xac>
    3414:	84 30       	cpi	r24, 0x04	; 4
    3416:	21 f0       	breq	.+8      	; 0x3420 <__fpcmp_parts_f+0x3a>
    3418:	92 30       	cpi	r25, 0x02	; 2
    341a:	31 f4       	brne	.+12     	; 0x3428 <__fpcmp_parts_f+0x42>
    341c:	82 30       	cpi	r24, 0x02	; 2
    341e:	b9 f1       	breq	.+110    	; 0x348e <__fpcmp_parts_f+0xa8>
    3420:	81 81       	ldd	r24, Z+1	; 0x01
    3422:	88 23       	and	r24, r24
    3424:	89 f1       	breq	.+98     	; 0x3488 <__fpcmp_parts_f+0xa2>
    3426:	2d c0       	rjmp	.+90     	; 0x3482 <__fpcmp_parts_f+0x9c>
    3428:	11 96       	adiw	r26, 0x01	; 1
    342a:	1c 91       	ld	r17, X
    342c:	11 97       	sbiw	r26, 0x01	; 1
    342e:	82 30       	cpi	r24, 0x02	; 2
    3430:	f1 f0       	breq	.+60     	; 0x346e <__fpcmp_parts_f+0x88>
    3432:	81 81       	ldd	r24, Z+1	; 0x01
    3434:	18 17       	cp	r17, r24
    3436:	d9 f4       	brne	.+54     	; 0x346e <__fpcmp_parts_f+0x88>
    3438:	12 96       	adiw	r26, 0x02	; 2
    343a:	2d 91       	ld	r18, X+
    343c:	3c 91       	ld	r19, X
    343e:	13 97       	sbiw	r26, 0x03	; 3
    3440:	82 81       	ldd	r24, Z+2	; 0x02
    3442:	93 81       	ldd	r25, Z+3	; 0x03
    3444:	82 17       	cp	r24, r18
    3446:	93 07       	cpc	r25, r19
    3448:	94 f0       	brlt	.+36     	; 0x346e <__fpcmp_parts_f+0x88>
    344a:	28 17       	cp	r18, r24
    344c:	39 07       	cpc	r19, r25
    344e:	bc f0       	brlt	.+46     	; 0x347e <__fpcmp_parts_f+0x98>
    3450:	14 96       	adiw	r26, 0x04	; 4
    3452:	8d 91       	ld	r24, X+
    3454:	9d 91       	ld	r25, X+
    3456:	0d 90       	ld	r0, X+
    3458:	bc 91       	ld	r27, X
    345a:	a0 2d       	mov	r26, r0
    345c:	24 81       	ldd	r18, Z+4	; 0x04
    345e:	35 81       	ldd	r19, Z+5	; 0x05
    3460:	46 81       	ldd	r20, Z+6	; 0x06
    3462:	57 81       	ldd	r21, Z+7	; 0x07
    3464:	28 17       	cp	r18, r24
    3466:	39 07       	cpc	r19, r25
    3468:	4a 07       	cpc	r20, r26
    346a:	5b 07       	cpc	r21, r27
    346c:	18 f4       	brcc	.+6      	; 0x3474 <__fpcmp_parts_f+0x8e>
    346e:	11 23       	and	r17, r17
    3470:	41 f0       	breq	.+16     	; 0x3482 <__fpcmp_parts_f+0x9c>
    3472:	0a c0       	rjmp	.+20     	; 0x3488 <__fpcmp_parts_f+0xa2>
    3474:	82 17       	cp	r24, r18
    3476:	93 07       	cpc	r25, r19
    3478:	a4 07       	cpc	r26, r20
    347a:	b5 07       	cpc	r27, r21
    347c:	40 f4       	brcc	.+16     	; 0x348e <__fpcmp_parts_f+0xa8>
    347e:	11 23       	and	r17, r17
    3480:	19 f0       	breq	.+6      	; 0x3488 <__fpcmp_parts_f+0xa2>
    3482:	61 e0       	ldi	r22, 0x01	; 1
    3484:	70 e0       	ldi	r23, 0x00	; 0
    3486:	05 c0       	rjmp	.+10     	; 0x3492 <__fpcmp_parts_f+0xac>
    3488:	6f ef       	ldi	r22, 0xFF	; 255
    348a:	7f ef       	ldi	r23, 0xFF	; 255
    348c:	02 c0       	rjmp	.+4      	; 0x3492 <__fpcmp_parts_f+0xac>
    348e:	60 e0       	ldi	r22, 0x00	; 0
    3490:	70 e0       	ldi	r23, 0x00	; 0
    3492:	cb 01       	movw	r24, r22
    3494:	1f 91       	pop	r17
    3496:	08 95       	ret

00003498 <do_rand>:
    3498:	a0 e0       	ldi	r26, 0x00	; 0
    349a:	b0 e0       	ldi	r27, 0x00	; 0
    349c:	e2 e5       	ldi	r30, 0x52	; 82
    349e:	fa e1       	ldi	r31, 0x1A	; 26
    34a0:	0c 94 dc 1a 	jmp	0x35b8	; 0x35b8 <__prologue_saves__+0x10>
    34a4:	ec 01       	movw	r28, r24
    34a6:	a8 80       	ld	r10, Y
    34a8:	b9 80       	ldd	r11, Y+1	; 0x01
    34aa:	ca 80       	ldd	r12, Y+2	; 0x02
    34ac:	db 80       	ldd	r13, Y+3	; 0x03
    34ae:	a1 14       	cp	r10, r1
    34b0:	b1 04       	cpc	r11, r1
    34b2:	c1 04       	cpc	r12, r1
    34b4:	d1 04       	cpc	r13, r1
    34b6:	41 f4       	brne	.+16     	; 0x34c8 <do_rand+0x30>
    34b8:	84 e2       	ldi	r24, 0x24	; 36
    34ba:	a8 2e       	mov	r10, r24
    34bc:	89 ed       	ldi	r24, 0xD9	; 217
    34be:	b8 2e       	mov	r11, r24
    34c0:	8b e5       	ldi	r24, 0x5B	; 91
    34c2:	c8 2e       	mov	r12, r24
    34c4:	87 e0       	ldi	r24, 0x07	; 7
    34c6:	d8 2e       	mov	r13, r24
    34c8:	c6 01       	movw	r24, r12
    34ca:	b5 01       	movw	r22, r10
    34cc:	2d e1       	ldi	r18, 0x1D	; 29
    34ce:	33 ef       	ldi	r19, 0xF3	; 243
    34d0:	41 e0       	ldi	r20, 0x01	; 1
    34d2:	50 e0       	ldi	r21, 0x00	; 0
    34d4:	0e 94 2a 1b 	call	0x3654	; 0x3654 <__divmodsi4>
    34d8:	27 ea       	ldi	r18, 0xA7	; 167
    34da:	31 e4       	ldi	r19, 0x41	; 65
    34dc:	40 e0       	ldi	r20, 0x00	; 0
    34de:	50 e0       	ldi	r21, 0x00	; 0
    34e0:	0e 94 0b 1b 	call	0x3616	; 0x3616 <__mulsi3>
    34e4:	7b 01       	movw	r14, r22
    34e6:	8c 01       	movw	r16, r24
    34e8:	c6 01       	movw	r24, r12
    34ea:	b5 01       	movw	r22, r10
    34ec:	2d e1       	ldi	r18, 0x1D	; 29
    34ee:	33 ef       	ldi	r19, 0xF3	; 243
    34f0:	41 e0       	ldi	r20, 0x01	; 1
    34f2:	50 e0       	ldi	r21, 0x00	; 0
    34f4:	0e 94 2a 1b 	call	0x3654	; 0x3654 <__divmodsi4>
    34f8:	ca 01       	movw	r24, r20
    34fa:	b9 01       	movw	r22, r18
    34fc:	2c ee       	ldi	r18, 0xEC	; 236
    34fe:	34 ef       	ldi	r19, 0xF4	; 244
    3500:	4f ef       	ldi	r20, 0xFF	; 255
    3502:	5f ef       	ldi	r21, 0xFF	; 255
    3504:	0e 94 0b 1b 	call	0x3616	; 0x3616 <__mulsi3>
    3508:	6e 0d       	add	r22, r14
    350a:	7f 1d       	adc	r23, r15
    350c:	80 1f       	adc	r24, r16
    350e:	91 1f       	adc	r25, r17
    3510:	97 ff       	sbrs	r25, 7
    3512:	04 c0       	rjmp	.+8      	; 0x351c <do_rand+0x84>
    3514:	61 50       	subi	r22, 0x01	; 1
    3516:	70 40       	sbci	r23, 0x00	; 0
    3518:	80 40       	sbci	r24, 0x00	; 0
    351a:	90 48       	sbci	r25, 0x80	; 128
    351c:	68 83       	st	Y, r22
    351e:	79 83       	std	Y+1, r23	; 0x01
    3520:	8a 83       	std	Y+2, r24	; 0x02
    3522:	9b 83       	std	Y+3, r25	; 0x03
    3524:	9b 01       	movw	r18, r22
    3526:	3f 77       	andi	r19, 0x7F	; 127
    3528:	c9 01       	movw	r24, r18
    352a:	cd b7       	in	r28, 0x3d	; 61
    352c:	de b7       	in	r29, 0x3e	; 62
    352e:	ea e0       	ldi	r30, 0x0A	; 10
    3530:	0c 94 f8 1a 	jmp	0x35f0	; 0x35f0 <__epilogue_restores__+0x10>

00003534 <rand_r>:
    3534:	0e 94 4c 1a 	call	0x3498	; 0x3498 <do_rand>
    3538:	08 95       	ret

0000353a <rand>:
    353a:	8f e4       	ldi	r24, 0x4F	; 79
    353c:	93 e0       	ldi	r25, 0x03	; 3
    353e:	0e 94 4c 1a 	call	0x3498	; 0x3498 <do_rand>
    3542:	08 95       	ret

00003544 <srand>:
    3544:	a0 e0       	ldi	r26, 0x00	; 0
    3546:	b0 e0       	ldi	r27, 0x00	; 0
    3548:	80 93 4f 03 	sts	0x034F, r24
    354c:	90 93 50 03 	sts	0x0350, r25
    3550:	a0 93 51 03 	sts	0x0351, r26
    3554:	b0 93 52 03 	sts	0x0352, r27
    3558:	08 95       	ret

0000355a <__udivmodhi4>:
    355a:	aa 1b       	sub	r26, r26
    355c:	bb 1b       	sub	r27, r27
    355e:	51 e1       	ldi	r21, 0x11	; 17
    3560:	07 c0       	rjmp	.+14     	; 0x3570 <__udivmodhi4_ep>

00003562 <__udivmodhi4_loop>:
    3562:	aa 1f       	adc	r26, r26
    3564:	bb 1f       	adc	r27, r27
    3566:	a6 17       	cp	r26, r22
    3568:	b7 07       	cpc	r27, r23
    356a:	10 f0       	brcs	.+4      	; 0x3570 <__udivmodhi4_ep>
    356c:	a6 1b       	sub	r26, r22
    356e:	b7 0b       	sbc	r27, r23

00003570 <__udivmodhi4_ep>:
    3570:	88 1f       	adc	r24, r24
    3572:	99 1f       	adc	r25, r25
    3574:	5a 95       	dec	r21
    3576:	a9 f7       	brne	.-22     	; 0x3562 <__udivmodhi4_loop>
    3578:	80 95       	com	r24
    357a:	90 95       	com	r25
    357c:	bc 01       	movw	r22, r24
    357e:	cd 01       	movw	r24, r26
    3580:	08 95       	ret

00003582 <__divmodhi4>:
    3582:	97 fb       	bst	r25, 7
    3584:	09 2e       	mov	r0, r25
    3586:	07 26       	eor	r0, r23
    3588:	0a d0       	rcall	.+20     	; 0x359e <__divmodhi4_neg1>
    358a:	77 fd       	sbrc	r23, 7
    358c:	04 d0       	rcall	.+8      	; 0x3596 <__divmodhi4_neg2>
    358e:	e5 df       	rcall	.-54     	; 0x355a <__udivmodhi4>
    3590:	06 d0       	rcall	.+12     	; 0x359e <__divmodhi4_neg1>
    3592:	00 20       	and	r0, r0
    3594:	1a f4       	brpl	.+6      	; 0x359c <__divmodhi4_exit>

00003596 <__divmodhi4_neg2>:
    3596:	70 95       	com	r23
    3598:	61 95       	neg	r22
    359a:	7f 4f       	sbci	r23, 0xFF	; 255

0000359c <__divmodhi4_exit>:
    359c:	08 95       	ret

0000359e <__divmodhi4_neg1>:
    359e:	f6 f7       	brtc	.-4      	; 0x359c <__divmodhi4_exit>
    35a0:	90 95       	com	r25
    35a2:	81 95       	neg	r24
    35a4:	9f 4f       	sbci	r25, 0xFF	; 255
    35a6:	08 95       	ret

000035a8 <__prologue_saves__>:
    35a8:	2f 92       	push	r2
    35aa:	3f 92       	push	r3
    35ac:	4f 92       	push	r4
    35ae:	5f 92       	push	r5
    35b0:	6f 92       	push	r6
    35b2:	7f 92       	push	r7
    35b4:	8f 92       	push	r8
    35b6:	9f 92       	push	r9
    35b8:	af 92       	push	r10
    35ba:	bf 92       	push	r11
    35bc:	cf 92       	push	r12
    35be:	df 92       	push	r13
    35c0:	ef 92       	push	r14
    35c2:	ff 92       	push	r15
    35c4:	0f 93       	push	r16
    35c6:	1f 93       	push	r17
    35c8:	cf 93       	push	r28
    35ca:	df 93       	push	r29
    35cc:	cd b7       	in	r28, 0x3d	; 61
    35ce:	de b7       	in	r29, 0x3e	; 62
    35d0:	ca 1b       	sub	r28, r26
    35d2:	db 0b       	sbc	r29, r27
    35d4:	0f b6       	in	r0, 0x3f	; 63
    35d6:	f8 94       	cli
    35d8:	de bf       	out	0x3e, r29	; 62
    35da:	0f be       	out	0x3f, r0	; 63
    35dc:	cd bf       	out	0x3d, r28	; 61
    35de:	09 94       	ijmp

000035e0 <__epilogue_restores__>:
    35e0:	2a 88       	ldd	r2, Y+18	; 0x12
    35e2:	39 88       	ldd	r3, Y+17	; 0x11
    35e4:	48 88       	ldd	r4, Y+16	; 0x10
    35e6:	5f 84       	ldd	r5, Y+15	; 0x0f
    35e8:	6e 84       	ldd	r6, Y+14	; 0x0e
    35ea:	7d 84       	ldd	r7, Y+13	; 0x0d
    35ec:	8c 84       	ldd	r8, Y+12	; 0x0c
    35ee:	9b 84       	ldd	r9, Y+11	; 0x0b
    35f0:	aa 84       	ldd	r10, Y+10	; 0x0a
    35f2:	b9 84       	ldd	r11, Y+9	; 0x09
    35f4:	c8 84       	ldd	r12, Y+8	; 0x08
    35f6:	df 80       	ldd	r13, Y+7	; 0x07
    35f8:	ee 80       	ldd	r14, Y+6	; 0x06
    35fa:	fd 80       	ldd	r15, Y+5	; 0x05
    35fc:	0c 81       	ldd	r16, Y+4	; 0x04
    35fe:	1b 81       	ldd	r17, Y+3	; 0x03
    3600:	aa 81       	ldd	r26, Y+2	; 0x02
    3602:	b9 81       	ldd	r27, Y+1	; 0x01
    3604:	ce 0f       	add	r28, r30
    3606:	d1 1d       	adc	r29, r1
    3608:	0f b6       	in	r0, 0x3f	; 63
    360a:	f8 94       	cli
    360c:	de bf       	out	0x3e, r29	; 62
    360e:	0f be       	out	0x3f, r0	; 63
    3610:	cd bf       	out	0x3d, r28	; 61
    3612:	ed 01       	movw	r28, r26
    3614:	08 95       	ret

00003616 <__mulsi3>:
    3616:	62 9f       	mul	r22, r18
    3618:	d0 01       	movw	r26, r0
    361a:	73 9f       	mul	r23, r19
    361c:	f0 01       	movw	r30, r0
    361e:	82 9f       	mul	r24, r18
    3620:	e0 0d       	add	r30, r0
    3622:	f1 1d       	adc	r31, r1
    3624:	64 9f       	mul	r22, r20
    3626:	e0 0d       	add	r30, r0
    3628:	f1 1d       	adc	r31, r1
    362a:	92 9f       	mul	r25, r18
    362c:	f0 0d       	add	r31, r0
    362e:	83 9f       	mul	r24, r19
    3630:	f0 0d       	add	r31, r0
    3632:	74 9f       	mul	r23, r20
    3634:	f0 0d       	add	r31, r0
    3636:	65 9f       	mul	r22, r21
    3638:	f0 0d       	add	r31, r0
    363a:	99 27       	eor	r25, r25
    363c:	72 9f       	mul	r23, r18
    363e:	b0 0d       	add	r27, r0
    3640:	e1 1d       	adc	r30, r1
    3642:	f9 1f       	adc	r31, r25
    3644:	63 9f       	mul	r22, r19
    3646:	b0 0d       	add	r27, r0
    3648:	e1 1d       	adc	r30, r1
    364a:	f9 1f       	adc	r31, r25
    364c:	bd 01       	movw	r22, r26
    364e:	cf 01       	movw	r24, r30
    3650:	11 24       	eor	r1, r1
    3652:	08 95       	ret

00003654 <__divmodsi4>:
    3654:	97 fb       	bst	r25, 7
    3656:	09 2e       	mov	r0, r25
    3658:	05 26       	eor	r0, r21
    365a:	0e d0       	rcall	.+28     	; 0x3678 <__divmodsi4_neg1>
    365c:	57 fd       	sbrc	r21, 7
    365e:	04 d0       	rcall	.+8      	; 0x3668 <__divmodsi4_neg2>
    3660:	14 d0       	rcall	.+40     	; 0x368a <__udivmodsi4>
    3662:	0a d0       	rcall	.+20     	; 0x3678 <__divmodsi4_neg1>
    3664:	00 1c       	adc	r0, r0
    3666:	38 f4       	brcc	.+14     	; 0x3676 <__divmodsi4_exit>

00003668 <__divmodsi4_neg2>:
    3668:	50 95       	com	r21
    366a:	40 95       	com	r20
    366c:	30 95       	com	r19
    366e:	21 95       	neg	r18
    3670:	3f 4f       	sbci	r19, 0xFF	; 255
    3672:	4f 4f       	sbci	r20, 0xFF	; 255
    3674:	5f 4f       	sbci	r21, 0xFF	; 255

00003676 <__divmodsi4_exit>:
    3676:	08 95       	ret

00003678 <__divmodsi4_neg1>:
    3678:	f6 f7       	brtc	.-4      	; 0x3676 <__divmodsi4_exit>
    367a:	90 95       	com	r25
    367c:	80 95       	com	r24
    367e:	70 95       	com	r23
    3680:	61 95       	neg	r22
    3682:	7f 4f       	sbci	r23, 0xFF	; 255
    3684:	8f 4f       	sbci	r24, 0xFF	; 255
    3686:	9f 4f       	sbci	r25, 0xFF	; 255
    3688:	08 95       	ret

0000368a <__udivmodsi4>:
    368a:	a1 e2       	ldi	r26, 0x21	; 33
    368c:	1a 2e       	mov	r1, r26
    368e:	aa 1b       	sub	r26, r26
    3690:	bb 1b       	sub	r27, r27
    3692:	fd 01       	movw	r30, r26
    3694:	0d c0       	rjmp	.+26     	; 0x36b0 <__udivmodsi4_ep>

00003696 <__udivmodsi4_loop>:
    3696:	aa 1f       	adc	r26, r26
    3698:	bb 1f       	adc	r27, r27
    369a:	ee 1f       	adc	r30, r30
    369c:	ff 1f       	adc	r31, r31
    369e:	a2 17       	cp	r26, r18
    36a0:	b3 07       	cpc	r27, r19
    36a2:	e4 07       	cpc	r30, r20
    36a4:	f5 07       	cpc	r31, r21
    36a6:	20 f0       	brcs	.+8      	; 0x36b0 <__udivmodsi4_ep>
    36a8:	a2 1b       	sub	r26, r18
    36aa:	b3 0b       	sbc	r27, r19
    36ac:	e4 0b       	sbc	r30, r20
    36ae:	f5 0b       	sbc	r31, r21

000036b0 <__udivmodsi4_ep>:
    36b0:	66 1f       	adc	r22, r22
    36b2:	77 1f       	adc	r23, r23
    36b4:	88 1f       	adc	r24, r24
    36b6:	99 1f       	adc	r25, r25
    36b8:	1a 94       	dec	r1
    36ba:	69 f7       	brne	.-38     	; 0x3696 <__udivmodsi4_loop>
    36bc:	60 95       	com	r22
    36be:	70 95       	com	r23
    36c0:	80 95       	com	r24
    36c2:	90 95       	com	r25
    36c4:	9b 01       	movw	r18, r22
    36c6:	ac 01       	movw	r20, r24
    36c8:	bd 01       	movw	r22, r26
    36ca:	cf 01       	movw	r24, r30
    36cc:	08 95       	ret

000036ce <_exit>:
    36ce:	f8 94       	cli

000036d0 <__stop_program>:
    36d0:	ff cf       	rjmp	.-2      	; 0x36d0 <__stop_program>
