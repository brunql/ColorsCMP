
ColorsCMP_EclipseEdition.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ddc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000302  00800060  00002ddc  00002e50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000059  00800362  000030de  00003152  2**0
                  ALLOC
  3 .stab         00004f98  00000000  00000000  00003154  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001f63  00000000  00000000  000080ec  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 0a 02 	jmp	0x414	; 0x414 <__ctors_end>
       4:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
       8:	0c 94 af 08 	jmp	0x115e	; 0x115e <__vector_2>
       c:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      10:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      14:	0c 94 4d 07 	jmp	0xe9a	; 0xe9a <__vector_5>
      18:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      1c:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      20:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      24:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      28:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      2c:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      30:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      34:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      38:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      3c:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      40:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      44:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      48:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      4c:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      50:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>

00000054 <FontLookup>:
      54:	00 00 00 00 00 00 00 2f 00 00 00 07 00 07 00 14     ......./........
      64:	7f 14 7f 14 24 2a 7f 2a 12 c4 c8 10 26 46 36 49     ....$*.*....&F6I
      74:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
      84:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 00 50 30     ....>....>....P0
      94:	00 10 10 10 10 10 00 60 60 00 00 20 10 08 04 02     .......``.. ....
      a4:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
      b4:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
      c4:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
      d4:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
      e4:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
      f4:	3e 59 65 65 5e 7e 11 11 11 7e 7f 49 49 49 36 3e     >Yee^~...~.III6>
     104:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     114:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     124:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     134:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     144:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     154:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     164:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     174:	08 07 61 51 49 45 43 00 7f 41 41 00 55 2a 55 2a     ..aQIEC..AA.U*U*
     184:	55 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40     U.AA.......@@@@@
     194:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     1a4:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     1b4:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
     1c4:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     1d4:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     1e4:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     1f4:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     204:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     214:	50 3c 44 64 54 4c 44                                P<DdTLD

0000021b <LcdImage_Upper>:
     21b:	ff ff 7f 7f 45 5d 5d 5d 5d 5d 5d 5d 5d 5d 5d 7f     ....E]]]]]]]]]].
     22b:	7f 41 5f 5d 5d 5d 5d 5d 5d 5d 5d 5d 41 7f 7f 41     .A_]]]]]]]]]A..A
     23b:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 7f 7f 41 5f 5d 5d     __________..A_]]
     24b:	5d 5d 5d 5d 5d 5d 5d 41 7f 7f 43 7d 7d 7d 7d 7d     ]]]]]]]A..C}}}}}
     25b:	7d 7d 7d 7d 7f 7f 51 55 55 55 55 55 55 55 55 45     }}}}..QUUUUUUUUE
     26b:	7f 7f ff ff                                         ....

0000026f <LcdImage_Center>:
     26f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     27f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     28f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     29f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     2af:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     2bf:	ff ff ff ff ff ff ff 0c 0c fc fc fc fc fc fc fc     ................
     2cf:	fc fc fc fc fc fc fc fc fc fc fc fc fc fc ff ff     ................
     2df:	ff 0c 0c fc fc fc fc f0 f0 f3 f3 f3 c3 cf cf cf     ................
     2ef:	cf c3 f3 f3 f3 f0 f0 fc fc fc fc 00 00 ff ff ff     ................
     2ff:	00 00 9f 9f 9c 9c 9c 9c 9c 9c 9c 9c 9c 9c 9c 9c     ................
     30f:	9c 9c 9c 9c 80 80 ff ff ff ff ff e0 e0 e7 e7 e7     ................
     31f:	e7 e7 e7 e7 e7 e7 e7 e7 e7 e7 e7 e7 e7 e7 e7 e7     ................
     32f:	e7 e7 ff ff ff e0 e0 ff ff ff ff ff ff ff ff ff     ................
     33f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff e0     ................
     34f:	e0 ff ff ff e0 e0 ff ff ff ff ff ff ff ff ff ff     ................
     35f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     36f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     37f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     38f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     39f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     3af:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................

000003bf <LcdImage_brunql_gmail_com>:
     3bf:	ff ff ff c8 db db c3 ff cb fb fb fb ff cb df df     ................
     3cf:	c3 ff cb fb fb c3 ff cb db db df 03 7f ff c0 ff     ................
     3df:	ff 01 7e 66 5a 5a 42 5a 5e 62 7f ff c7 bb ab ab     ..~fZZBZ^b......
     3ef:	cf ff cb fb c3 fb c3 ff cb db db c3 db ff c2 ff     ................
     3ff:	c0 ff df ff cb db db ff cb db db c3 ff cb fb c3     ................
     40f:	fb c3 ff ff 00                                      .....

00000414 <__ctors_end>:
     414:	11 24       	eor	r1, r1
     416:	1f be       	out	0x3f, r1	; 63
     418:	cf e5       	ldi	r28, 0x5F	; 95
     41a:	d8 e0       	ldi	r29, 0x08	; 8
     41c:	de bf       	out	0x3e, r29	; 62
     41e:	cd bf       	out	0x3d, r28	; 61

00000420 <__do_copy_data>:
     420:	13 e0       	ldi	r17, 0x03	; 3
     422:	a0 e6       	ldi	r26, 0x60	; 96
     424:	b0 e0       	ldi	r27, 0x00	; 0
     426:	ec ed       	ldi	r30, 0xDC	; 220
     428:	fd e2       	ldi	r31, 0x2D	; 45
     42a:	02 c0       	rjmp	.+4      	; 0x430 <.do_copy_data_start>

0000042c <.do_copy_data_loop>:
     42c:	05 90       	lpm	r0, Z+
     42e:	0d 92       	st	X+, r0

00000430 <.do_copy_data_start>:
     430:	a2 36       	cpi	r26, 0x62	; 98
     432:	b1 07       	cpc	r27, r17
     434:	d9 f7       	brne	.-10     	; 0x42c <.do_copy_data_loop>

00000436 <__do_clear_bss>:
     436:	13 e0       	ldi	r17, 0x03	; 3
     438:	a2 e6       	ldi	r26, 0x62	; 98
     43a:	b3 e0       	ldi	r27, 0x03	; 3
     43c:	01 c0       	rjmp	.+2      	; 0x440 <.do_clear_bss_start>

0000043e <.do_clear_bss_loop>:
     43e:	1d 92       	st	X+, r1

00000440 <.do_clear_bss_start>:
     440:	ab 3b       	cpi	r26, 0xBB	; 187
     442:	b1 07       	cpc	r27, r17
     444:	e1 f7       	brne	.-8      	; 0x43e <.do_clear_bss_loop>
     446:	0e 94 27 07 	call	0xe4e	; 0xe4e <main>
     44a:	0c 94 ec 16 	jmp	0x2dd8	; 0x2dd8 <_exit>

0000044e <__bad_interrupt>:
     44e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000452 <snakegame_InitSnake>:
//================================================//


void snakegame_InitSnake(void)
{
	snake_add_index = SNAKE_START_LEN; // start length of snake
     452:	86 e0       	ldi	r24, 0x06	; 6
     454:	80 93 64 03 	sts	0x0364, r24
	score = (uwin_times<<4) | (snake_add_index - SNAKE_START_LEN);
     458:	80 91 62 03 	lds	r24, 0x0362
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	24 e0       	ldi	r18, 0x04	; 4
     460:	88 0f       	add	r24, r24
     462:	99 1f       	adc	r25, r25
     464:	2a 95       	dec	r18
     466:	e1 f7       	brne	.-8      	; 0x460 <snakegame_InitSnake+0xe>
     468:	80 93 63 03 	sts	0x0363, r24
     46c:	e7 eb       	ldi	r30, 0xB7	; 183
     46e:	f0 e0       	ldi	r31, 0x00	; 0
     470:	88 e2       	ldi	r24, 0x28	; 40
	for(uint8_t i=0; i<SNAKE_LEN; i++){
		snake[i].y = 20;
     472:	24 e1       	ldi	r18, 0x14	; 20
		snake[i].x = 40 - i;
		snake[i].direction = RIGHT;
     474:	92 e0       	ldi	r25, 0x02	; 2
void snakegame_InitSnake(void)
{
	snake_add_index = SNAKE_START_LEN; // start length of snake
	score = (uwin_times<<4) | (snake_add_index - SNAKE_START_LEN);
	for(uint8_t i=0; i<SNAKE_LEN; i++){
		snake[i].y = 20;
     476:	21 83       	std	Z+1, r18	; 0x01
		snake[i].x = 40 - i;
     478:	80 83       	st	Z, r24
		snake[i].direction = RIGHT;
     47a:	92 83       	std	Z+2, r25	; 0x02
     47c:	33 96       	adiw	r30, 0x03	; 3
     47e:	81 50       	subi	r24, 0x01	; 1

void snakegame_InitSnake(void)
{
	snake_add_index = SNAKE_START_LEN; // start length of snake
	score = (uwin_times<<4) | (snake_add_index - SNAKE_START_LEN);
	for(uint8_t i=0; i<SNAKE_LEN; i++){
     480:	8e 31       	cpi	r24, 0x1E	; 30
     482:	c9 f7       	brne	.-14     	; 0x476 <snakegame_InitSnake+0x24>
		snake[i].y = 20;
		snake[i].x = 40 - i;
		snake[i].direction = RIGHT;
	}
}
     484:	08 95       	ret

00000486 <SnakeGame_Stop>:
}

void SnakeGame_Stop(void)
{
	// show results and go to main menu
}
     486:	08 95       	ret

00000488 <SnakeGame_TurnLeft>:


void SnakeGame_TurnLeft(void)
{
	// directions mb: UP = 1, RIGHT = 2, DOWN = 3, LEFT = 4
	if( --snake[0].direction == 0){
     488:	80 91 b9 00 	lds	r24, 0x00B9
     48c:	81 50       	subi	r24, 0x01	; 1
     48e:	80 93 b9 00 	sts	0x00B9, r24
     492:	88 23       	and	r24, r24
     494:	19 f4       	brne	.+6      	; 0x49c <SnakeGame_TurnLeft+0x14>
		snake[0].direction = LEFT;
     496:	84 e0       	ldi	r24, 0x04	; 4
     498:	80 93 b9 00 	sts	0x00B9, r24
     49c:	08 95       	ret

0000049e <SnakeGame_TurnRight>:
	}
}

void SnakeGame_TurnRight(void)
{
	if( ++snake[0].direction == 5){
     49e:	80 91 b9 00 	lds	r24, 0x00B9
     4a2:	8f 5f       	subi	r24, 0xFF	; 255
     4a4:	80 93 b9 00 	sts	0x00B9, r24
     4a8:	85 30       	cpi	r24, 0x05	; 5
     4aa:	19 f4       	brne	.+6      	; 0x4b2 <SnakeGame_TurnRight+0x14>
		snake[0].direction = UP;
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	80 93 b9 00 	sts	0x00B9, r24
     4b2:	08 95       	ret

000004b4 <snakegame_DirectionStep>:
//
//	snake_add_index++; // don't forget to update index
//}

void snakegame_DirectionStep(point *p_snake)
{
     4b4:	fc 01       	movw	r30, r24
	switch(p_snake->direction)
     4b6:	92 81       	ldd	r25, Z+2	; 0x02
     4b8:	92 30       	cpi	r25, 0x02	; 2
     4ba:	09 f1       	breq	.+66     	; 0x4fe <snakegame_DirectionStep+0x4a>
     4bc:	93 30       	cpi	r25, 0x03	; 3
     4be:	18 f4       	brcc	.+6      	; 0x4c6 <snakegame_DirectionStep+0x12>
     4c0:	91 30       	cpi	r25, 0x01	; 1
     4c2:	21 f5       	brne	.+72     	; 0x50c <snakegame_DirectionStep+0x58>
     4c4:	05 c0       	rjmp	.+10     	; 0x4d0 <snakegame_DirectionStep+0x1c>
     4c6:	93 30       	cpi	r25, 0x03	; 3
     4c8:	51 f0       	breq	.+20     	; 0x4de <snakegame_DirectionStep+0x2a>
     4ca:	94 30       	cpi	r25, 0x04	; 4
     4cc:	f9 f4       	brne	.+62     	; 0x50c <snakegame_DirectionStep+0x58>
     4ce:	0f c0       	rjmp	.+30     	; 0x4ee <snakegame_DirectionStep+0x3a>
	{
		case UP:
			if(--p_snake->y < 9) 	p_snake->y = 38;
     4d0:	81 81       	ldd	r24, Z+1	; 0x01
     4d2:	81 50       	subi	r24, 0x01	; 1
     4d4:	81 83       	std	Z+1, r24	; 0x01
     4d6:	89 30       	cpi	r24, 0x09	; 9
     4d8:	f0 f4       	brcc	.+60     	; 0x516 <snakegame_DirectionStep+0x62>
     4da:	86 e2       	ldi	r24, 0x26	; 38
     4dc:	06 c0       	rjmp	.+12     	; 0x4ea <snakegame_DirectionStep+0x36>
			break;
		case DOWN:
			if(++p_snake->y > 38) 	p_snake->y = 9;
     4de:	81 81       	ldd	r24, Z+1	; 0x01
     4e0:	8f 5f       	subi	r24, 0xFF	; 255
     4e2:	81 83       	std	Z+1, r24	; 0x01
     4e4:	87 32       	cpi	r24, 0x27	; 39
     4e6:	b8 f0       	brcs	.+46     	; 0x516 <snakegame_DirectionStep+0x62>
     4e8:	89 e0       	ldi	r24, 0x09	; 9
     4ea:	81 83       	std	Z+1, r24	; 0x01
     4ec:	08 95       	ret
			break;
		case LEFT:
			if(--p_snake->x < 2) 	p_snake->x = 82;
     4ee:	80 81       	ld	r24, Z
     4f0:	81 50       	subi	r24, 0x01	; 1
     4f2:	80 83       	st	Z, r24
     4f4:	82 30       	cpi	r24, 0x02	; 2
     4f6:	78 f4       	brcc	.+30     	; 0x516 <snakegame_DirectionStep+0x62>
     4f8:	82 e5       	ldi	r24, 0x52	; 82
     4fa:	80 83       	st	Z, r24
     4fc:	08 95       	ret
			break;
		case RIGHT:
			if(++p_snake->x > 81) 	p_snake->x = 2;
     4fe:	80 81       	ld	r24, Z
     500:	8f 5f       	subi	r24, 0xFF	; 255
     502:	80 83       	st	Z, r24
     504:	82 35       	cpi	r24, 0x52	; 82
     506:	38 f0       	brcs	.+14     	; 0x516 <snakegame_DirectionStep+0x62>
     508:	90 83       	st	Z, r25
     50a:	08 95       	ret
			break;
		default: // error
			p_snake->x = 0;
     50c:	10 82       	st	Z, r1
			p_snake->y = 17;
     50e:	81 e1       	ldi	r24, 0x11	; 17
     510:	81 83       	std	Z+1, r24	; 0x01
			p_snake->direction = RIGHT;
     512:	82 e0       	ldi	r24, 0x02	; 2
     514:	82 83       	std	Z+2, r24	; 0x02
     516:	08 95       	ret

00000518 <snakegame_UpdateDisplay>:




void snakegame_UpdateDisplay(void)
{
     518:	2f 92       	push	r2
     51a:	3f 92       	push	r3
     51c:	4f 92       	push	r4
     51e:	5f 92       	push	r5
     520:	6f 92       	push	r6
     522:	7f 92       	push	r7
     524:	8f 92       	push	r8
     526:	9f 92       	push	r9
     528:	af 92       	push	r10
     52a:	bf 92       	push	r11
     52c:	cf 92       	push	r12
     52e:	df 92       	push	r13
     530:	ef 92       	push	r14
     532:	ff 92       	push	r15
     534:	0f 93       	push	r16
     536:	1f 93       	push	r17
     538:	cf 93       	push	r28
     53a:	df 93       	push	r29
	Lcd3310_ClearCenter();
     53c:	0e 94 37 0b 	call	0x166e	; 0x166e <Lcd3310_ClearCenter>

	Lcd3310_GotoXY(0, 5);
     540:	80 e0       	ldi	r24, 0x00	; 0
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	65 e0       	ldi	r22, 0x05	; 5
     546:	70 e0       	ldi	r23, 0x00	; 0
     548:	0e 94 20 0b 	call	0x1640	; 0x1640 <Lcd3310_GotoXY>
	Lcd3310_String_P(score_str, WHITE_TEXT_ON_BLACK);
     54c:	80 91 86 00 	lds	r24, 0x0086
     550:	90 91 87 00 	lds	r25, 0x0087
     554:	61 e0       	ldi	r22, 0x01	; 1
     556:	0e 94 1f 0a 	call	0x143e	; 0x143e <Lcd3310_String_P>
	Lcd3310_UInt8AsText(score, WHITE_TEXT_ON_BLACK);
     55a:	80 91 63 03 	lds	r24, 0x0363
     55e:	61 e0       	ldi	r22, 0x01	; 1
     560:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <Lcd3310_UInt8AsText>
	//Lcd3310_UInt8AsText(snake[0].y, WHITE_TEXT_ON_BLACK);

	uint16_t lcd_index = 0x00;

	// eval values for addme pixel show
	uint8_t addme_line = (uint8_t)addme_y / 8;
     564:	20 91 b6 00 	lds	r18, 0x00B6
     568:	82 2e       	mov	r8, r18
     56a:	86 94       	lsr	r8
     56c:	86 94       	lsr	r8
     56e:	86 94       	lsr	r8
	uint8_t addme_display_byte = 1 << ((uint8_t)addme_y % 8);
     570:	27 70       	andi	r18, 0x07	; 7
     572:	81 e0       	ldi	r24, 0x01	; 1
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	98 2e       	mov	r9, r24
     578:	01 c0       	rjmp	.+2      	; 0x57c <snakegame_UpdateDisplay+0x64>
     57a:	99 0c       	add	r9, r9
     57c:	2a 95       	dec	r18
     57e:	ea f7       	brpl	.-6      	; 0x57a <snakegame_UpdateDisplay+0x62>
     580:	aa 24       	eor	r10, r10
	for(uint8_t i=0; i < snake_add_index; i++)
	{
		// GotoXY
		// Eval number of line (mb: 1..5) in display for display_byte
		uint8_t line = (uint8_t) (snake[i].y) / 8;
		lcd_index = (uint16_t) (snake[i].x) + (uint16_t)line * 84;
     582:	64 e5       	ldi	r22, 0x54	; 84
     584:	46 2e       	mov	r4, r22
		Lcd3310_Send( 0x80 | ((uint16_t)lcd_index % LCD_X_RES), LCD_CMD );
		Lcd3310_Send( 0x40 | ((uint16_t)lcd_index / LCD_X_RES), LCD_CMD );

		// Make sendme byte with all point in this display byte
		// Init with snake[i] point
		uint8_t display_byte = 1 << ((uint8_t)snake[i].y % 8);
     586:	51 e0       	ldi	r21, 0x01	; 1
     588:	65 2e       	mov	r6, r21
     58a:	71 2c       	mov	r7, r1
		// Find all point near here (in this display byte)
		for(uint8_t j=0; j<snake_add_index; j++)
     58c:	43 e0       	ldi	r20, 0x03	; 3
     58e:	54 2e       	mov	r5, r20
     590:	6a c0       	rjmp	.+212    	; 0x666 <snakegame_UpdateDisplay+0x14e>
	// Lets draw each point in snake to our lcd.
	for(uint8_t i=0; i < snake_add_index; i++)
	{
		// GotoXY
		// Eval number of line (mb: 1..5) in display for display_byte
		uint8_t line = (uint8_t) (snake[i].y) / 8;
     592:	2a 2c       	mov	r2, r10
     594:	33 24       	eor	r3, r3
     596:	61 01       	movw	r12, r2
     598:	cc 0c       	add	r12, r12
     59a:	dd 1c       	adc	r13, r13
     59c:	76 01       	movw	r14, r12
     59e:	e2 0c       	add	r14, r2
     5a0:	f3 1c       	adc	r15, r3
     5a2:	87 eb       	ldi	r24, 0xB7	; 183
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	e8 0e       	add	r14, r24
     5a8:	f9 1e       	adc	r15, r25
     5aa:	e7 01       	movw	r28, r14
     5ac:	b9 80       	ldd	r11, Y+1	; 0x01
     5ae:	b6 94       	lsr	r11
     5b0:	b6 94       	lsr	r11
     5b2:	b6 94       	lsr	r11
		lcd_index = (uint16_t) (snake[i].x) + (uint16_t)line * 84;
     5b4:	b4 9c       	mul	r11, r4
     5b6:	80 01       	movw	r16, r0
     5b8:	11 24       	eor	r1, r1
     5ba:	88 81       	ld	r24, Y
     5bc:	08 0f       	add	r16, r24
     5be:	11 1d       	adc	r17, r1
		Lcd3310_Send( 0x80 | ((uint16_t)lcd_index % LCD_X_RES), LCD_CMD );
     5c0:	c8 01       	movw	r24, r16
     5c2:	64 e5       	ldi	r22, 0x54	; 84
     5c4:	70 e0       	ldi	r23, 0x00	; 0
     5c6:	0e 94 32 16 	call	0x2c64	; 0x2c64 <__udivmodhi4>
     5ca:	80 68       	ori	r24, 0x80	; 128
     5cc:	60 e0       	ldi	r22, 0x00	; 0
     5ce:	0e 94 36 0c 	call	0x186c	; 0x186c <Lcd3310_Send>
		Lcd3310_Send( 0x40 | ((uint16_t)lcd_index / LCD_X_RES), LCD_CMD );
     5d2:	c8 01       	movw	r24, r16
     5d4:	64 e5       	ldi	r22, 0x54	; 84
     5d6:	70 e0       	ldi	r23, 0x00	; 0
     5d8:	0e 94 32 16 	call	0x2c64	; 0x2c64 <__udivmodhi4>
     5dc:	86 2f       	mov	r24, r22
     5de:	80 64       	ori	r24, 0x40	; 64
     5e0:	60 e0       	ldi	r22, 0x00	; 0
     5e2:	0e 94 36 0c 	call	0x186c	; 0x186c <Lcd3310_Send>

		// Make sendme byte with all point in this display byte
		// Init with snake[i] point
		uint8_t display_byte = 1 << ((uint8_t)snake[i].y % 8);
     5e6:	89 81       	ldd	r24, Y+1	; 0x01
     5e8:	87 70       	andi	r24, 0x07	; 7
     5ea:	36 2d       	mov	r19, r6
     5ec:	01 c0       	rjmp	.+2      	; 0x5f0 <snakegame_UpdateDisplay+0xd8>
     5ee:	33 0f       	add	r19, r19
     5f0:	8a 95       	dec	r24
     5f2:	ea f7       	brpl	.-6      	; 0x5ee <snakegame_UpdateDisplay+0xd6>
		// Find all point near here (in this display byte)
		for(uint8_t j=0; j<snake_add_index; j++)
     5f4:	80 91 64 03 	lds	r24, 0x0364
     5f8:	e7 eb       	ldi	r30, 0xB7	; 183
     5fa:	f0 e0       	ldi	r31, 0x00	; 0
     5fc:	85 9d       	mul	r24, r5
     5fe:	a0 01       	movw	r20, r0
     600:	11 24       	eor	r1, r1
     602:	4e 0f       	add	r20, r30
     604:	5f 1f       	adc	r21, r31
     606:	d6 01       	movw	r26, r12
		{
			uint8_t line_find = (uint8_t)snake[j].y / 8;
			if(snake[i].x == snake[j].x && line == line_find){
     608:	b7 01       	movw	r22, r14
     60a:	15 c0       	rjmp	.+42     	; 0x636 <snakegame_UpdateDisplay+0x11e>
		// Init with snake[i] point
		uint8_t display_byte = 1 << ((uint8_t)snake[i].y % 8);
		// Find all point near here (in this display byte)
		for(uint8_t j=0; j<snake_add_index; j++)
		{
			uint8_t line_find = (uint8_t)snake[j].y / 8;
     60c:	21 81       	ldd	r18, Z+1	; 0x01
			if(snake[i].x == snake[j].x && line == line_find){
     60e:	eb 01       	movw	r28, r22
     610:	98 81       	ld	r25, Y
     612:	80 81       	ld	r24, Z
     614:	98 17       	cp	r25, r24
     616:	71 f4       	brne	.+28     	; 0x634 <snakegame_UpdateDisplay+0x11c>
     618:	82 2f       	mov	r24, r18
     61a:	86 95       	lsr	r24
     61c:	86 95       	lsr	r24
     61e:	86 95       	lsr	r24
     620:	b8 16       	cp	r11, r24
     622:	41 f4       	brne	.+16     	; 0x634 <snakegame_UpdateDisplay+0x11c>
				display_byte |= 1 << ((uint8_t)snake[j].y % 8);
     624:	27 70       	andi	r18, 0x07	; 7
     626:	c3 01       	movw	r24, r6
     628:	02 c0       	rjmp	.+4      	; 0x62e <snakegame_UpdateDisplay+0x116>
     62a:	88 0f       	add	r24, r24
     62c:	99 1f       	adc	r25, r25
     62e:	2a 95       	dec	r18
     630:	e2 f7       	brpl	.-8      	; 0x62a <snakegame_UpdateDisplay+0x112>
     632:	38 2b       	or	r19, r24
     634:	33 96       	adiw	r30, 0x03	; 3

		// Make sendme byte with all point in this display byte
		// Init with snake[i] point
		uint8_t display_byte = 1 << ((uint8_t)snake[i].y % 8);
		// Find all point near here (in this display byte)
		for(uint8_t j=0; j<snake_add_index; j++)
     636:	e4 17       	cp	r30, r20
     638:	f5 07       	cpc	r31, r21
     63a:	41 f7       	brne	.-48     	; 0x60c <snakegame_UpdateDisplay+0xf4>
				display_byte |= 1 << ((uint8_t)snake[j].y % 8);
			}
		}

		// check that snake[i] and addme points are in same display_byte
		if(addme_x == snake[i].x && addme_line == line){
     63c:	a2 0d       	add	r26, r2
     63e:	b3 1d       	adc	r27, r3
     640:	a9 54       	subi	r26, 0x49	; 73
     642:	bf 4f       	sbci	r27, 0xFF	; 255
     644:	90 91 b5 00 	lds	r25, 0x00B5
     648:	8c 91       	ld	r24, X
     64a:	98 17       	cp	r25, r24
     64c:	39 f4       	brne	.+14     	; 0x65c <snakegame_UpdateDisplay+0x144>
     64e:	8b 14       	cp	r8, r11
     650:	29 f4       	brne	.+10     	; 0x65c <snakegame_UpdateDisplay+0x144>
			display_byte |= (addme_display_byte & 0x7f);
     652:	89 2d       	mov	r24, r9
     654:	8f 77       	andi	r24, 0x7F	; 127
     656:	38 2b       	or	r19, r24
			addme_display_byte |= 0x80; // say that we already draw this point
     658:	e0 e8       	ldi	r30, 0x80	; 128
     65a:	9e 2a       	or	r9, r30
		}

		Lcd3310_Send( display_byte, LCD_DATA );
     65c:	83 2f       	mov	r24, r19
     65e:	61 e0       	ldi	r22, 0x01	; 1
     660:	0e 94 36 0c 	call	0x186c	; 0x186c <Lcd3310_Send>
	// eval values for addme pixel show
	uint8_t addme_line = (uint8_t)addme_y / 8;
	uint8_t addme_display_byte = 1 << ((uint8_t)addme_y % 8);

	// Lets draw each point in snake to our lcd.
	for(uint8_t i=0; i < snake_add_index; i++)
     664:	a3 94       	inc	r10
     666:	80 91 64 03 	lds	r24, 0x0364
     66a:	a8 16       	cp	r10, r24
     66c:	08 f4       	brcc	.+2      	; 0x670 <snakegame_UpdateDisplay+0x158>
     66e:	91 cf       	rjmp	.-222    	; 0x592 <snakegame_UpdateDisplay+0x7a>
		Lcd3310_Send( display_byte, LCD_DATA );
	}


	// if we didn't draw it before lets do it now
	if(!(addme_display_byte & 0x80)){
     670:	97 fc       	sbrc	r9, 7
     672:	1f c0       	rjmp	.+62     	; 0x6b2 <snakegame_UpdateDisplay+0x19a>
		lcd_index = (uint16_t)addme_x + (uint16_t)addme_line * 84;
     674:	04 e5       	ldi	r16, 0x54	; 84
     676:	80 9e       	mul	r8, r16
     678:	80 01       	movw	r16, r0
     67a:	11 24       	eor	r1, r1
     67c:	80 91 b5 00 	lds	r24, 0x00B5
     680:	08 0f       	add	r16, r24
     682:	11 1d       	adc	r17, r1
		Lcd3310_Send( 0x80 | (lcd_index % LCD_X_RES), LCD_CMD );
     684:	c8 01       	movw	r24, r16
     686:	64 e5       	ldi	r22, 0x54	; 84
     688:	70 e0       	ldi	r23, 0x00	; 0
     68a:	0e 94 32 16 	call	0x2c64	; 0x2c64 <__udivmodhi4>
     68e:	80 68       	ori	r24, 0x80	; 128
     690:	60 e0       	ldi	r22, 0x00	; 0
     692:	0e 94 36 0c 	call	0x186c	; 0x186c <Lcd3310_Send>
		Lcd3310_Send( 0x40 | (lcd_index / LCD_X_RES), LCD_CMD );
     696:	c8 01       	movw	r24, r16
     698:	64 e5       	ldi	r22, 0x54	; 84
     69a:	70 e0       	ldi	r23, 0x00	; 0
     69c:	0e 94 32 16 	call	0x2c64	; 0x2c64 <__udivmodhi4>
     6a0:	86 2f       	mov	r24, r22
     6a2:	80 64       	ori	r24, 0x40	; 64
     6a4:	60 e0       	ldi	r22, 0x00	; 0
     6a6:	0e 94 36 0c 	call	0x186c	; 0x186c <Lcd3310_Send>
		Lcd3310_Send( addme_display_byte, LCD_DATA );
     6aa:	89 2d       	mov	r24, r9
     6ac:	61 e0       	ldi	r22, 0x01	; 1
     6ae:	0e 94 36 0c 	call	0x186c	; 0x186c <Lcd3310_Send>
	}
}
     6b2:	df 91       	pop	r29
     6b4:	cf 91       	pop	r28
     6b6:	1f 91       	pop	r17
     6b8:	0f 91       	pop	r16
     6ba:	ff 90       	pop	r15
     6bc:	ef 90       	pop	r14
     6be:	df 90       	pop	r13
     6c0:	cf 90       	pop	r12
     6c2:	bf 90       	pop	r11
     6c4:	af 90       	pop	r10
     6c6:	9f 90       	pop	r9
     6c8:	8f 90       	pop	r8
     6ca:	7f 90       	pop	r7
     6cc:	6f 90       	pop	r6
     6ce:	5f 90       	pop	r5
     6d0:	4f 90       	pop	r4
     6d2:	3f 90       	pop	r3
     6d4:	2f 90       	pop	r2
     6d6:	08 95       	ret

000006d8 <SnakeGame_AddmeUpdateXY>:
}


void SnakeGame_AddmeUpdateXY(void)
{
	addme_x = (rand() % 79) + 2; 	// 2..81
     6d8:	0e 94 22 16 	call	0x2c44	; 0x2c44 <rand>
     6dc:	6f e4       	ldi	r22, 0x4F	; 79
     6de:	70 e0       	ldi	r23, 0x00	; 0
     6e0:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <__divmodhi4>
     6e4:	8e 5f       	subi	r24, 0xFE	; 254
     6e6:	80 93 b5 00 	sts	0x00B5, r24
	addme_y = (rand() % 28) + 10; // 10..38
     6ea:	0e 94 22 16 	call	0x2c44	; 0x2c44 <rand>
     6ee:	6c e1       	ldi	r22, 0x1C	; 28
     6f0:	70 e0       	ldi	r23, 0x00	; 0
     6f2:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <__divmodhi4>
     6f6:	86 5f       	subi	r24, 0xF6	; 246
     6f8:	80 93 b6 00 	sts	0x00B6, r24
}
     6fc:	08 95       	ret

000006fe <SnakeGame_Start>:
}


void SnakeGame_Start(void)
{
	SnakeGame_AddmeUpdateXY();
     6fe:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <SnakeGame_AddmeUpdateXY>
//================================================//


void snakegame_InitSnake(void)
{
	snake_add_index = SNAKE_START_LEN; // start length of snake
     702:	86 e0       	ldi	r24, 0x06	; 6
     704:	80 93 64 03 	sts	0x0364, r24
	score = (uwin_times<<4) | (snake_add_index - SNAKE_START_LEN);
     708:	80 91 62 03 	lds	r24, 0x0362
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	74 e0       	ldi	r23, 0x04	; 4
     710:	88 0f       	add	r24, r24
     712:	99 1f       	adc	r25, r25
     714:	7a 95       	dec	r23
     716:	e1 f7       	brne	.-8      	; 0x710 <SnakeGame_Start+0x12>
     718:	80 93 63 03 	sts	0x0363, r24
     71c:	e7 eb       	ldi	r30, 0xB7	; 183
     71e:	f0 e0       	ldi	r31, 0x00	; 0
     720:	88 e2       	ldi	r24, 0x28	; 40
	for(uint8_t i=0; i<SNAKE_LEN; i++){
		snake[i].y = 20;
     722:	24 e1       	ldi	r18, 0x14	; 20
		snake[i].x = 40 - i;
		snake[i].direction = RIGHT;
     724:	92 e0       	ldi	r25, 0x02	; 2
void snakegame_InitSnake(void)
{
	snake_add_index = SNAKE_START_LEN; // start length of snake
	score = (uwin_times<<4) | (snake_add_index - SNAKE_START_LEN);
	for(uint8_t i=0; i<SNAKE_LEN; i++){
		snake[i].y = 20;
     726:	21 83       	std	Z+1, r18	; 0x01
		snake[i].x = 40 - i;
     728:	80 83       	st	Z, r24
		snake[i].direction = RIGHT;
     72a:	92 83       	std	Z+2, r25	; 0x02
     72c:	33 96       	adiw	r30, 0x03	; 3
     72e:	81 50       	subi	r24, 0x01	; 1

void snakegame_InitSnake(void)
{
	snake_add_index = SNAKE_START_LEN; // start length of snake
	score = (uwin_times<<4) | (snake_add_index - SNAKE_START_LEN);
	for(uint8_t i=0; i<SNAKE_LEN; i++){
     730:	8e 31       	cpi	r24, 0x1E	; 30
     732:	c9 f7       	brne	.-14     	; 0x726 <SnakeGame_Start+0x28>
void SnakeGame_Start(void)
{
	SnakeGame_AddmeUpdateXY();
	snakegame_InitSnake();

	Lcd3310_GotoXY(0, 0);
     734:	80 e0       	ldi	r24, 0x00	; 0
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	60 e0       	ldi	r22, 0x00	; 0
     73a:	70 e0       	ldi	r23, 0x00	; 0
     73c:	0e 94 20 0b 	call	0x1640	; 0x1640 <Lcd3310_GotoXY>
	Lcd3310_String_P(snake_str, WHITE_TEXT_ON_BLACK);
     740:	80 91 6f 00 	lds	r24, 0x006F
     744:	90 91 70 00 	lds	r25, 0x0070
     748:	61 e0       	ldi	r22, 0x01	; 1
     74a:	0e 94 1f 0a 	call	0x143e	; 0x143e <Lcd3310_String_P>
	snakegame_UpdateDisplay();
     74e:	0e 94 8c 02 	call	0x518	; 0x518 <snakegame_UpdateDisplay>
}
     752:	08 95       	ret

00000754 <SnakeGame_TakeNextStep>:
{
	// show results and go to main menu
}

void SnakeGame_TakeNextStep(void)
{
     754:	cf 93       	push	r28
     756:	df 93       	push	r29
     758:	c7 eb       	ldi	r28, 0xB7	; 183
     75a:	d0 e0       	ldi	r29, 0x00	; 0

	// Lets go somethere:
	for(uint8_t i=0; i < SNAKE_LEN; i++)
	{
		snakegame_DirectionStep(&snake[i]);
     75c:	ce 01       	movw	r24, r28
     75e:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <snakegame_DirectionStep>
     762:	23 96       	adiw	r28, 0x03	; 3

void SnakeGame_TakeNextStep(void)
{

	// Lets go somethere:
	for(uint8_t i=0; i < SNAKE_LEN; i++)
     764:	80 e0       	ldi	r24, 0x00	; 0
     766:	c5 3d       	cpi	r28, 0xD5	; 213
     768:	d8 07       	cpc	r29, r24
     76a:	c1 f7       	brne	.-16     	; 0x75c <SnakeGame_TakeNextStep+0x8>
     76c:	89 e0       	ldi	r24, 0x09	; 9
     76e:	14 c0       	rjmp	.+40     	; 0x798 <SnakeGame_TakeNextStep+0x44>
	}

	// Update direction of each point from last to first
	for(uint8_t i = SNAKE_LEN-1; i != 0 && i < SNAKE_LEN; i--)
	{
		snake[i].direction = snake[i-1].direction;
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	dc 01       	movw	r26, r24
     774:	aa 0f       	add	r26, r26
     776:	bb 1f       	adc	r27, r27
     778:	a8 0f       	add	r26, r24
     77a:	b9 1f       	adc	r27, r25
     77c:	a9 54       	subi	r26, 0x49	; 73
     77e:	bf 4f       	sbci	r27, 0xFF	; 255
     780:	01 97       	sbiw	r24, 0x01	; 1
     782:	fc 01       	movw	r30, r24
     784:	ee 0f       	add	r30, r30
     786:	ff 1f       	adc	r31, r31
     788:	e8 0f       	add	r30, r24
     78a:	f9 1f       	adc	r31, r25
     78c:	e9 54       	subi	r30, 0x49	; 73
     78e:	ff 4f       	sbci	r31, 0xFF	; 255
     790:	82 81       	ldd	r24, Z+2	; 0x02
     792:	12 96       	adiw	r26, 0x02	; 2
     794:	8c 93       	st	X, r24
     796:	82 2f       	mov	r24, r18
	{
		snakegame_DirectionStep(&snake[i]);
	}

	// Update direction of each point from last to first
	for(uint8_t i = SNAKE_LEN-1; i != 0 && i < SNAKE_LEN; i--)
     798:	28 2f       	mov	r18, r24
     79a:	21 50       	subi	r18, 0x01	; 1
     79c:	48 f7       	brcc	.-46     	; 0x770 <SnakeGame_TakeNextStep+0x1c>
	{
		snake[i].direction = snake[i-1].direction;
	}

	// Check if we come to addme point
	if(snake[0].x == addme_x && snake[0].y == addme_y){
     79e:	90 91 b7 00 	lds	r25, 0x00B7
     7a2:	80 91 b5 00 	lds	r24, 0x00B5
     7a6:	98 17       	cp	r25, r24
     7a8:	09 f0       	breq	.+2      	; 0x7ac <SnakeGame_TakeNextStep+0x58>
     7aa:	ca c0       	rjmp	.+404    	; 0x940 <__stack+0xe1>
     7ac:	90 91 b8 00 	lds	r25, 0x00B8
     7b0:	80 91 b6 00 	lds	r24, 0x00B6
     7b4:	98 17       	cp	r25, r24
     7b6:	09 f0       	breq	.+2      	; 0x7ba <SnakeGame_TakeNextStep+0x66>
     7b8:	c3 c0       	rjmp	.+390    	; 0x940 <__stack+0xe1>
		SnakeGame_AddmeUpdateXY();
     7ba:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <SnakeGame_AddmeUpdateXY>
		snake_add_index++; // add snake point
     7be:	80 91 64 03 	lds	r24, 0x0364
     7c2:	28 2f       	mov	r18, r24
     7c4:	2f 5f       	subi	r18, 0xFF	; 255
     7c6:	20 93 64 03 	sts	0x0364, r18
		score = (uwin_times<<4) | (snake_add_index - SNAKE_START_LEN);
     7ca:	85 50       	subi	r24, 0x05	; 5
     7cc:	90 91 62 03 	lds	r25, 0x0362
     7d0:	92 95       	swap	r25
     7d2:	90 7f       	andi	r25, 0xF0	; 240
     7d4:	98 2b       	or	r25, r24
     7d6:	90 93 63 03 	sts	0x0363, r25
		if(snake_add_index >= SNAKE_LEN){
     7da:	2a 30       	cpi	r18, 0x0A	; 10
     7dc:	08 f4       	brcc	.+2      	; 0x7e0 <SnakeGame_TakeNextStep+0x8c>
     7de:	b0 c0       	rjmp	.+352    	; 0x940 <__stack+0xe1>
			Lcd3310_ClearCenter();
     7e0:	0e 94 37 0b 	call	0x166e	; 0x166e <Lcd3310_ClearCenter>
			uwin_times++;
     7e4:	80 91 62 03 	lds	r24, 0x0362
     7e8:	8f 5f       	subi	r24, 0xFF	; 255
     7ea:	80 93 62 03 	sts	0x0362, r24
			if(uwin_times >= 3){
     7ee:	83 30       	cpi	r24, 0x03	; 3
     7f0:	d0 f1       	brcs	.+116    	; 0x866 <__stack+0x7>
				uwin_times = 0x00;
     7f2:	10 92 62 03 	sts	0x0362, r1
				Lcd3310_GotoXY(3, 2);
     7f6:	83 e0       	ldi	r24, 0x03	; 3
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	62 e0       	ldi	r22, 0x02	; 2
     7fc:	70 e0       	ldi	r23, 0x00	; 0
     7fe:	0e 94 20 0b 	call	0x1640	; 0x1640 <Lcd3310_GotoXY>
				Lcd3310_String_P(got_fun_str, BLACK_TEXT_ON_WHITE);
     802:	80 91 9c 00 	lds	r24, 0x009C
     806:	90 91 9d 00 	lds	r25, 0x009D
     80a:	60 e0       	ldi	r22, 0x00	; 0
     80c:	0e 94 1f 0a 	call	0x143e	; 0x143e <Lcd3310_String_P>
				Lcd3310_GotoXY(3, 3);
     810:	83 e0       	ldi	r24, 0x03	; 3
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	63 e0       	ldi	r22, 0x03	; 3
     816:	70 e0       	ldi	r23, 0x00	; 0
     818:	0e 94 20 0b 	call	0x1640	; 0x1640 <Lcd3310_GotoXY>
				Lcd3310_String_P(go_work_str, BLACK_TEXT_ON_WHITE);
     81c:	80 91 a7 00 	lds	r24, 0x00A7
     820:	90 91 a8 00 	lds	r25, 0x00A8
     824:	60 e0       	ldi	r22, 0x00	; 0
     826:	0e 94 1f 0a 	call	0x143e	; 0x143e <Lcd3310_String_P>
				Lcd3310_GotoXY(0, 5);
     82a:	80 e0       	ldi	r24, 0x00	; 0
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	65 e0       	ldi	r22, 0x05	; 5
     830:	70 e0       	ldi	r23, 0x00	; 0
     832:	0e 94 20 0b 	call	0x1640	; 0x1640 <Lcd3310_GotoXY>
				Lcd3310_String_P(brunql_str, WHITE_TEXT_ON_BLACK);
     836:	80 91 b1 00 	lds	r24, 0x00B1
     83a:	90 91 b2 00 	lds	r25, 0x00B2
     83e:	61 e0       	ldi	r22, 0x01	; 1
     840:	0e 94 1f 0a 	call	0x143e	; 0x143e <Lcd3310_String_P>
				FLAGS_SWITCH_ON( JOYSTICK_CENTER_CLICK_FLAG ); // stop game! go to main menu.
     844:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     846:	f8 94       	cli
     848:	80 91 7b 03 	lds	r24, 0x037B
     84c:	90 91 7c 03 	lds	r25, 0x037C
     850:	82 60       	ori	r24, 0x02	; 2
     852:	90 93 7c 03 	sts	0x037C, r25
     856:	80 93 7b 03 	sts	0x037B, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     85a:	2f bf       	out	0x3f, r18	; 63

				get_present_speed = SPEED_TICKS_TO_GET_PRESENT;
     85c:	88 ec       	ldi	r24, 0xC8	; 200
     85e:	80 93 b4 00 	sts	0x00B4, r24
				step_speed = SPEED_STEP;
     862:	8e e1       	ldi	r24, 0x1E	; 30
     864:	53 c0       	rjmp	.+166    	; 0x90c <__stack+0xad>
			}else{
				Lcd3310_GotoXY(3, 2);
     866:	83 e0       	ldi	r24, 0x03	; 3
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	62 e0       	ldi	r22, 0x02	; 2
     86c:	70 e0       	ldi	r23, 0x00	; 0
     86e:	0e 94 20 0b 	call	0x1640	; 0x1640 <Lcd3310_GotoXY>
				Lcd3310_String_P(uwin_str, BLACK_TEXT_ON_WHITE);
     872:	80 91 7a 00 	lds	r24, 0x007A
     876:	90 91 7b 00 	lds	r25, 0x007B
     87a:	60 e0       	ldi	r22, 0x00	; 0
     87c:	0e 94 1f 0a 	call	0x143e	; 0x143e <Lcd3310_String_P>
				Lcd3310_GotoXY(2, 3);
     880:	82 e0       	ldi	r24, 0x02	; 2
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	63 e0       	ldi	r22, 0x03	; 3
     886:	70 e0       	ldi	r23, 0x00	; 0
     888:	0e 94 20 0b 	call	0x1640	; 0x1640 <Lcd3310_GotoXY>
				Lcd3310_String_P(level_str, BLACK_TEXT_ON_WHITE);
     88c:	80 91 91 00 	lds	r24, 0x0091
     890:	90 91 92 00 	lds	r25, 0x0092
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	0e 94 1f 0a 	call	0x143e	; 0x143e <Lcd3310_String_P>
				Lcd3310_UInt8AsText(uwin_times, BLACK_TEXT_ON_WHITE);
     89a:	80 91 62 03 	lds	r24, 0x0362
     89e:	60 e0       	ldi	r22, 0x00	; 0
     8a0:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <Lcd3310_UInt8AsText>
				Lcd3310_GotoXY(0, 5);
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	65 e0       	ldi	r22, 0x05	; 5
     8aa:	70 e0       	ldi	r23, 0x00	; 0
     8ac:	0e 94 20 0b 	call	0x1640	; 0x1640 <Lcd3310_GotoXY>
				Lcd3310_String_P(score_str, WHITE_TEXT_ON_BLACK);
     8b0:	80 91 86 00 	lds	r24, 0x0086
     8b4:	90 91 87 00 	lds	r25, 0x0087
     8b8:	61 e0       	ldi	r22, 0x01	; 1
     8ba:	0e 94 1f 0a 	call	0x143e	; 0x143e <Lcd3310_String_P>
				Lcd3310_UInt8AsText(score, WHITE_TEXT_ON_BLACK);
     8be:	80 91 63 03 	lds	r24, 0x0363
     8c2:	61 e0       	ldi	r22, 0x01	; 1
     8c4:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <Lcd3310_UInt8AsText>
				Lcd3310_Char(' ', WHITE_TEXT_ON_BLACK);
     8c8:	80 e2       	ldi	r24, 0x20	; 32
     8ca:	61 e0       	ldi	r22, 0x01	; 1
     8cc:	0e 94 ce 09 	call	0x139c	; 0x139c <Lcd3310_Char>

				get_present_speed /= 1.5;
     8d0:	60 91 b4 00 	lds	r22, 0x00B4
     8d4:	70 e0       	ldi	r23, 0x00	; 0
     8d6:	88 27       	eor	r24, r24
     8d8:	77 fd       	sbrc	r23, 7
     8da:	80 95       	com	r24
     8dc:	98 2f       	mov	r25, r24
     8de:	0e 94 b1 12 	call	0x2562	; 0x2562 <__floatsisf>
     8e2:	20 e0       	ldi	r18, 0x00	; 0
     8e4:	30 e0       	ldi	r19, 0x00	; 0
     8e6:	40 ec       	ldi	r20, 0xC0	; 192
     8e8:	5f e3       	ldi	r21, 0x3F	; 63
     8ea:	0e 94 75 11 	call	0x22ea	; 0x22ea <__divsf3>
     8ee:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <__fixunssfsi>
     8f2:	60 93 b4 00 	sts	0x00B4, r22
				step_speed -= 3 * uwin_times;
     8f6:	80 91 62 03 	lds	r24, 0x0362
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	9c 01       	movw	r18, r24
     8fe:	22 0f       	add	r18, r18
     900:	33 1f       	adc	r19, r19
     902:	28 0f       	add	r18, r24
     904:	39 1f       	adc	r19, r25
     906:	80 91 b3 00 	lds	r24, 0x00B3
     90a:	82 1b       	sub	r24, r18
     90c:	80 93 b3 00 	sts	0x00B3, r24
			}
			while(JOYSTICK_INT_CHECK());
     910:	83 99       	sbic	0x10, 3	; 16
     912:	fe cf       	rjmp	.-4      	; 0x910 <__stack+0xb1>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     914:	80 e4       	ldi	r24, 0x40	; 64
     916:	9f e1       	ldi	r25, 0x1F	; 31
     918:	01 97       	sbiw	r24, 0x01	; 1
     91a:	f1 f7       	brne	.-4      	; 0x918 <__stack+0xb9>
			_delay_ms(2);
			GIFR = _BV(INTF1);
     91c:	80 e8       	ldi	r24, 0x80	; 128
     91e:	8a bf       	out	0x3a, r24	; 58


			timer_ticks_to_get_present = get_present_speed;
     920:	80 91 b4 00 	lds	r24, 0x00B4
     924:	80 93 12 01 	sts	0x0112, r24
			timer_delay = step_speed;
     928:	80 91 b3 00 	lds	r24, 0x00B3
     92c:	80 93 82 03 	sts	0x0382, r24

			score = (uwin_times<<4);
     930:	80 91 62 03 	lds	r24, 0x0362
     934:	82 95       	swap	r24
     936:	80 7f       	andi	r24, 0xF0	; 240
     938:	80 93 63 03 	sts	0x0363, r24
			SnakeGame_Start();
     93c:	0e 94 7f 03 	call	0x6fe	; 0x6fe <SnakeGame_Start>
		}
	}

	snakegame_UpdateDisplay();
     940:	0e 94 8c 02 	call	0x518	; 0x518 <snakegame_UpdateDisplay>
}
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	08 95       	ret

0000094a <hex2dec_result>:
PGM_P pstr_complete = "Complete!";
PGM_P pstr_please_wait = "Please wait...";


void hex2dec_result(uint16_t hex, uint8_t result_index, uint8_t result_color)
{
     94a:	cf 92       	push	r12
     94c:	df 92       	push	r13
     94e:	ef 92       	push	r14
     950:	ff 92       	push	r15
     952:	0f 93       	push	r16
     954:	1f 93       	push	r17
     956:	7c 01       	movw	r14, r24
     958:	26 2f       	mov	r18, r22
	uint8_t res2, res1, res0;
	res0 =  hex % 10;
	hex /= 10;
     95a:	6a e0       	ldi	r22, 0x0A	; 10
     95c:	70 e0       	ldi	r23, 0x00	; 0
     95e:	0e 94 32 16 	call	0x2c64	; 0x2c64 <__udivmodhi4>
     962:	d6 2e       	mov	r13, r22
     964:	c7 2e       	mov	r12, r23
	hex /= 10;
	res2 = hex % 10;

	uint16_t dec_result = (res2 << 8) | (res1 << 4)| res0;

	result[result_index][result_color] = dec_result;
     966:	30 e0       	ldi	r19, 0x00	; 0
     968:	89 01       	movw	r16, r18
     96a:	00 0f       	add	r16, r16
     96c:	11 1f       	adc	r17, r17
     96e:	02 0f       	add	r16, r18
     970:	13 1f       	adc	r17, r19
     972:	04 0f       	add	r16, r20
     974:	11 1d       	adc	r17, r1
     976:	00 0f       	add	r16, r16
     978:	11 1f       	adc	r17, r17
     97a:	0b 59       	subi	r16, 0x9B	; 155
     97c:	1c 4f       	sbci	r17, 0xFC	; 252
     97e:	86 2f       	mov	r24, r22
     980:	97 2f       	mov	r25, r23
     982:	6a e0       	ldi	r22, 0x0A	; 10
     984:	70 e0       	ldi	r23, 0x00	; 0
     986:	0e 94 32 16 	call	0x2c64	; 0x2c64 <__udivmodhi4>
     98a:	e8 2f       	mov	r30, r24
     98c:	f0 e0       	ldi	r31, 0x00	; 0
     98e:	84 e0       	ldi	r24, 0x04	; 4
     990:	ee 0f       	add	r30, r30
     992:	ff 1f       	adc	r31, r31
     994:	8a 95       	dec	r24
     996:	e1 f7       	brne	.-8      	; 0x990 <hex2dec_result+0x46>
     998:	c7 01       	movw	r24, r14
     99a:	6a e0       	ldi	r22, 0x0A	; 10
     99c:	70 e0       	ldi	r23, 0x00	; 0
     99e:	0e 94 32 16 	call	0x2c64	; 0x2c64 <__udivmodhi4>
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	e8 2b       	or	r30, r24
     9a6:	f9 2b       	or	r31, r25
     9a8:	8d 2d       	mov	r24, r13
     9aa:	9c 2d       	mov	r25, r12
     9ac:	6a e0       	ldi	r22, 0x0A	; 10
     9ae:	70 e0       	ldi	r23, 0x00	; 0
     9b0:	0e 94 32 16 	call	0x2c64	; 0x2c64 <__udivmodhi4>
     9b4:	cb 01       	movw	r24, r22
     9b6:	6a e0       	ldi	r22, 0x0A	; 10
     9b8:	70 e0       	ldi	r23, 0x00	; 0
     9ba:	0e 94 32 16 	call	0x2c64	; 0x2c64 <__udivmodhi4>
     9be:	38 2f       	mov	r19, r24
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	e2 2b       	or	r30, r18
     9c4:	f3 2b       	or	r31, r19
     9c6:	d8 01       	movw	r26, r16
     9c8:	ed 93       	st	X+, r30
     9ca:	fc 93       	st	X, r31
}
     9cc:	1f 91       	pop	r17
     9ce:	0f 91       	pop	r16
     9d0:	ff 90       	pop	r15
     9d2:	ef 90       	pop	r14
     9d4:	df 90       	pop	r13
     9d6:	cf 90       	pop	r12
     9d8:	08 95       	ret

000009da <StartADC>:


void StartADC(FirstOrSecond first)
{
	if (first){
     9da:	88 23       	and	r24, r24
     9dc:	11 f0       	breq	.+4      	; 0x9e2 <StartADC+0x8>
		ADMUX &= (unsigned char) ~ _BV(MUX0);
     9de:	38 98       	cbi	0x07, 0	; 7
     9e0:	01 c0       	rjmp	.+2      	; 0x9e4 <StartADC+0xa>
	}else{ // second
		ADMUX |= _BV(MUX0);
     9e2:	38 9a       	sbi	0x07, 0	; 7
     9e4:	88 ec       	ldi	r24, 0xC8	; 200
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	01 97       	sbiw	r24, 0x01	; 1
     9ea:	f1 f7       	brne	.-4      	; 0x9e8 <StartADC+0xe>

	// delay for stabilisation on ADC pin (charge intro reference capacitor)
	// TODO: NEED TEST!
	_delay_us(50);

	ADCSRA |= _BV( ADSC ); // start conversation
     9ec:	36 9a       	sbi	0x06, 6	; 6
	while( ADC_CONVERT_IN_PROGRESS() ) {  };
     9ee:	36 99       	sbic	0x06, 6	; 6
     9f0:	fe cf       	rjmp	.-4      	; 0x9ee <StartADC+0x14>
	adc_data = ADC;
     9f2:	84 b1       	in	r24, 0x04	; 4
     9f4:	95 b1       	in	r25, 0x05	; 5
     9f6:	90 93 81 03 	sts	0x0381, r25
     9fa:	80 93 80 03 	sts	0x0380, r24
	//result in adc_data
}
     9fe:	08 95       	ret

00000a00 <GetValuesFromADC>:


void StartADC(FirstOrSecond first)
{
	if (first){
		ADMUX &= (unsigned char) ~ _BV(MUX0);
     a00:	38 98       	cbi	0x07, 0	; 7
     a02:	88 ec       	ldi	r24, 0xC8	; 200
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	01 97       	sbiw	r24, 0x01	; 1
     a08:	f1 f7       	brne	.-4      	; 0xa06 <GetValuesFromADC+0x6>

	// delay for stabilisation on ADC pin (charge intro reference capacitor)
	// TODO: NEED TEST!
	_delay_us(50);

	ADCSRA |= _BV( ADSC ); // start conversation
     a0a:	36 9a       	sbi	0x06, 6	; 6
	while( ADC_CONVERT_IN_PROGRESS() ) {  };
     a0c:	36 99       	sbic	0x06, 6	; 6
     a0e:	fe cf       	rjmp	.-4      	; 0xa0c <GetValuesFromADC+0xc>
	adc_data = ADC;
     a10:	84 b1       	in	r24, 0x04	; 4
     a12:	95 b1       	in	r25, 0x05	; 5
     a14:	90 93 81 03 	sts	0x0381, r25
     a18:	80 93 80 03 	sts	0x0380, r24
	// 2,3:
//	StartADC( FIRST );
//	adc_res_first = adc_data;

	StartADC( SECOND );
	adc_res_second = adc_data;
     a1c:	80 91 80 03 	lds	r24, 0x0380
     a20:	90 91 81 03 	lds	r25, 0x0381
     a24:	90 93 7a 03 	sts	0x037A, r25
     a28:	80 93 79 03 	sts	0x0379, r24
}
     a2c:	08 95       	ret

00000a2e <ADC_64_Times>:



	// 4: using only second sensor and 256 A to D convertions
	uint32_t adc_256_second = 0x00000000;
	adc_res_second = 0x0000;
     a2e:	10 92 7a 03 	sts	0x037A, r1
     a32:	10 92 79 03 	sts	0x0379, r1
	PORTC |= _BV(PC3);
     a36:	ab 9a       	sbi	0x15, 3	; 21
	DDRC  |= _BV(PC3);
     a38:	a3 9a       	sbi	0x14, 3	; 20
     a3a:	20 e0       	ldi	r18, 0x00	; 0
     a3c:	30 e0       	ldi	r19, 0x00	; 0
     a3e:	40 e0       	ldi	r20, 0x00	; 0
     a40:	50 e0       	ldi	r21, 0x00	; 0
     a42:	60 e0       	ldi	r22, 0x00	; 0
     a44:	e8 ec       	ldi	r30, 0xC8	; 200
     a46:	f0 e0       	ldi	r31, 0x00	; 0


void StartADC(FirstOrSecond first)
{
	if (first){
		ADMUX &= (unsigned char) ~ _BV(MUX0);
     a48:	38 98       	cbi	0x07, 0	; 7
     a4a:	cf 01       	movw	r24, r30
     a4c:	01 97       	sbiw	r24, 0x01	; 1
     a4e:	f1 f7       	brne	.-4      	; 0xa4c <ADC_64_Times+0x1e>

	// delay for stabilisation on ADC pin (charge intro reference capacitor)
	// TODO: NEED TEST!
	_delay_us(50);

	ADCSRA |= _BV( ADSC ); // start conversation
     a50:	36 9a       	sbi	0x06, 6	; 6
	while( ADC_CONVERT_IN_PROGRESS() ) {  };
     a52:	36 99       	sbic	0x06, 6	; 6
     a54:	fe cf       	rjmp	.-4      	; 0xa52 <ADC_64_Times+0x24>
	adc_data = ADC;
     a56:	84 b1       	in	r24, 0x04	; 4
     a58:	95 b1       	in	r25, 0x05	; 5
     a5a:	90 93 81 03 	sts	0x0381, r25
     a5e:	80 93 80 03 	sts	0x0380, r24
	// 2,3:
//	StartADC( FIRST );
//	adc_res_first = adc_data;

	StartADC( SECOND );
	adc_res_second = adc_data;
     a62:	80 91 80 03 	lds	r24, 0x0380
     a66:	90 91 81 03 	lds	r25, 0x0381
     a6a:	90 93 7a 03 	sts	0x037A, r25
     a6e:	80 93 79 03 	sts	0x0379, r24
	adc_res_second = 0x0000;
	PORTC |= _BV(PC3);
	DDRC  |= _BV(PC3);
	for(uint8_t i=0; i < 0xff;  i++){
		GetValuesFromADC();
		adc_256_second += (uint32_t) adc_res_second;
     a72:	80 91 79 03 	lds	r24, 0x0379
     a76:	90 91 7a 03 	lds	r25, 0x037A
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	b0 e0       	ldi	r27, 0x00	; 0
     a7e:	28 0f       	add	r18, r24
     a80:	39 1f       	adc	r19, r25
     a82:	4a 1f       	adc	r20, r26
     a84:	5b 1f       	adc	r21, r27
	// 4: using only second sensor and 256 A to D convertions
	uint32_t adc_256_second = 0x00000000;
	adc_res_second = 0x0000;
	PORTC |= _BV(PC3);
	DDRC  |= _BV(PC3);
	for(uint8_t i=0; i < 0xff;  i++){
     a86:	6f 5f       	subi	r22, 0xFF	; 255
     a88:	6f 3f       	cpi	r22, 0xFF	; 255
     a8a:	f1 f6       	brne	.-68     	; 0xa48 <ADC_64_Times+0x1a>
		GetValuesFromADC();
		adc_256_second += (uint32_t) adc_res_second;
	}
	PORTC &= (uint8_t)~_BV(PC3);
     a8c:	ab 98       	cbi	0x15, 3	; 21


void StartADC(FirstOrSecond first)
{
	if (first){
		ADMUX &= (unsigned char) ~ _BV(MUX0);
     a8e:	38 98       	cbi	0x07, 0	; 7
     a90:	88 ec       	ldi	r24, 0xC8	; 200
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	01 97       	sbiw	r24, 0x01	; 1
     a96:	f1 f7       	brne	.-4      	; 0xa94 <ADC_64_Times+0x66>

	// delay for stabilisation on ADC pin (charge intro reference capacitor)
	// TODO: NEED TEST!
	_delay_us(50);

	ADCSRA |= _BV( ADSC ); // start conversation
     a98:	36 9a       	sbi	0x06, 6	; 6
	while( ADC_CONVERT_IN_PROGRESS() ) {  };
     a9a:	36 99       	sbic	0x06, 6	; 6
     a9c:	fe cf       	rjmp	.-4      	; 0xa9a <ADC_64_Times+0x6c>
	adc_data = ADC;
     a9e:	84 b1       	in	r24, 0x04	; 4
     aa0:	95 b1       	in	r25, 0x05	; 5
     aa2:	90 93 81 03 	sts	0x0381, r25
     aa6:	80 93 80 03 	sts	0x0380, r24
	// 2,3:
//	StartADC( FIRST );
//	adc_res_first = adc_data;

	StartADC( SECOND );
	adc_res_second = adc_data;
     aaa:	80 91 80 03 	lds	r24, 0x0380
     aae:	90 91 81 03 	lds	r25, 0x0381
     ab2:	90 93 7a 03 	sts	0x037A, r25
     ab6:	80 93 79 03 	sts	0x0379, r24
		GetValuesFromADC();
		adc_256_second += (uint32_t) adc_res_second;
	}
	PORTC &= (uint8_t)~_BV(PC3);
	GetValuesFromADC();
	adc_256_second += (uint32_t) adc_res_second;
     aba:	80 91 79 03 	lds	r24, 0x0379
     abe:	90 91 7a 03 	lds	r25, 0x037A
     ac2:	a0 e0       	ldi	r26, 0x00	; 0
     ac4:	b0 e0       	ldi	r27, 0x00	; 0
     ac6:	28 0f       	add	r18, r24
     ac8:	39 1f       	adc	r19, r25
     aca:	4a 1f       	adc	r20, r26
     acc:	5b 1f       	adc	r21, r27
	adc_256_second >>= 8; // divide 256

	adc_res_second = (uint16_t) adc_256_second;
     ace:	bb 27       	eor	r27, r27
     ad0:	a5 2f       	mov	r26, r21
     ad2:	94 2f       	mov	r25, r20
     ad4:	83 2f       	mov	r24, r19
     ad6:	90 93 7a 03 	sts	0x037A, r25
     ada:	80 93 79 03 	sts	0x0379, r24
	//===================================//
}
     ade:	08 95       	ret

00000ae0 <CalibrationAlgorithm>:


void CalibrationAlgorithm(uint8_t color)
{
     ae0:	cf 92       	push	r12
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
//	uint8_t adc_res_first_8 = (uint8_t)((uint16_t)adc_res_first >> 2);
//	uint8_t adc_res_second_8 = (uint8_t)((uint16_t)adc_res_second >> 2);
//	coefs[FIRST][color] = (double) EVP_ALG_PERCENT * ADC_MAX_VALUE / adc_res_first_8;
//	coefs[SECOND][color] = (double) EVP_ALG_PERCENT * ADC_MAX_VALUE / adc_res_second_8;
//
	coefs[FIRST][color] = (double) EVP_ALG_PERCENT * ADC_MAX_VALUE / adc_res_first;
     aec:	08 2f       	mov	r16, r24
     aee:	10 e0       	ldi	r17, 0x00	; 0
     af0:	60 91 77 03 	lds	r22, 0x0377
     af4:	70 91 78 03 	lds	r23, 0x0378
     af8:	a5 ed       	ldi	r26, 0xD5	; 213
     afa:	ca 2e       	mov	r12, r26
     afc:	a0 e0       	ldi	r26, 0x00	; 0
     afe:	da 2e       	mov	r13, r26
     b00:	78 01       	movw	r14, r16
     b02:	ee 0c       	add	r14, r14
     b04:	ff 1c       	adc	r15, r15
     b06:	ee 0c       	add	r14, r14
     b08:	ff 1c       	adc	r15, r15
     b0a:	ec 0c       	add	r14, r12
     b0c:	fd 1c       	adc	r15, r13
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	0e 94 63 13 	call	0x26c6	; 0x26c6 <__floatunsisf>
     b16:	9b 01       	movw	r18, r22
     b18:	ac 01       	movw	r20, r24
     b1a:	60 e0       	ldi	r22, 0x00	; 0
     b1c:	70 ec       	ldi	r23, 0xC0	; 192
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	93 e4       	ldi	r25, 0x43	; 67
     b22:	0e 94 75 11 	call	0x22ea	; 0x22ea <__divsf3>
     b26:	f7 01       	movw	r30, r14
     b28:	60 83       	st	Z, r22
     b2a:	71 83       	std	Z+1, r23	; 0x01
     b2c:	82 83       	std	Z+2, r24	; 0x02
     b2e:	93 83       	std	Z+3, r25	; 0x03
	coefs[SECOND][color] = (double) EVP_ALG_PERCENT * ADC_MAX_VALUE / adc_res_second;
     b30:	60 91 79 03 	lds	r22, 0x0379
     b34:	70 91 7a 03 	lds	r23, 0x037A
     b38:	0d 5f       	subi	r16, 0xFD	; 253
     b3a:	1f 4f       	sbci	r17, 0xFF	; 255
     b3c:	00 0f       	add	r16, r16
     b3e:	11 1f       	adc	r17, r17
     b40:	00 0f       	add	r16, r16
     b42:	11 1f       	adc	r17, r17
     b44:	c0 0e       	add	r12, r16
     b46:	d1 1e       	adc	r13, r17
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	0e 94 63 13 	call	0x26c6	; 0x26c6 <__floatunsisf>
     b50:	9b 01       	movw	r18, r22
     b52:	ac 01       	movw	r20, r24
     b54:	60 e0       	ldi	r22, 0x00	; 0
     b56:	70 ec       	ldi	r23, 0xC0	; 192
     b58:	8f ef       	ldi	r24, 0xFF	; 255
     b5a:	93 e4       	ldi	r25, 0x43	; 67
     b5c:	0e 94 75 11 	call	0x22ea	; 0x22ea <__divsf3>
     b60:	f6 01       	movw	r30, r12
     b62:	60 83       	st	Z, r22
     b64:	71 83       	std	Z+1, r23	; 0x01
     b66:	82 83       	std	Z+2, r24	; 0x02
     b68:	93 83       	std	Z+3, r25	; 0x03

#else
	coefs[FIRST][color] = 1;
	coefs[SECOND][color] = (double)adc_res_first / adc_res_second;
#endif
}
     b6a:	1f 91       	pop	r17
     b6c:	0f 91       	pop	r16
     b6e:	ff 90       	pop	r15
     b70:	ef 90       	pop	r14
     b72:	df 90       	pop	r13
     b74:	cf 90       	pop	r12
     b76:	08 95       	ret

00000b78 <SetZeroAlgorithm>:
void SetZeroAlgorithm(uint8_t color)
{
//	zero[FIRST] = adc_res_first;
//	zero[SECOND] = adc_res_second;

	max_diff = ADC_MAX_VALUE;// -  ((adc_res_first < adc_res_second) ? adc_res_first : adc_res_second);
     b78:	8f ef       	ldi	r24, 0xFF	; 255
     b7a:	93 e0       	ldi	r25, 0x03	; 3
     b7c:	90 93 ee 00 	sts	0x00EE, r25
     b80:	80 93 ed 00 	sts	0x00ED, r24
}
     b84:	08 95       	ret

00000b86 <SaveResultsAlgorithm>:

void SaveResultsAlgorithm(uint8_t color)
{
     b86:	df 92       	push	r13
     b88:	ef 92       	push	r14
     b8a:	ff 92       	push	r15
     b8c:	0f 93       	push	r16
     b8e:	1f 93       	push	r17
     b90:	cf 93       	push	r28
     b92:	df 93       	push	r29
     b94:	d8 2e       	mov	r13, r24
//	uint8_t adc_res_second_8 = (uint8_t)((uint16_t)adc_res_second >> 2);
//
//	int16_t result1 = (int16_t)((double)(((double)adc_res_first_8) * coefs[FIRST][color]));
//	int16_t result2 = (int16_t)((double)(((double)adc_res_second_8) * coefs[SECOND][color]));

	int16_t result1 = (int16_t)((double)(((double)adc_res_first) * coefs[FIRST][color]));
     b96:	60 91 77 03 	lds	r22, 0x0377
     b9a:	70 91 78 03 	lds	r23, 0x0378
     b9e:	08 2f       	mov	r16, r24
     ba0:	10 e0       	ldi	r17, 0x00	; 0
     ba2:	80 e0       	ldi	r24, 0x00	; 0
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	0e 94 63 13 	call	0x26c6	; 0x26c6 <__floatunsisf>
     baa:	00 0f       	add	r16, r16
     bac:	11 1f       	adc	r17, r17
     bae:	00 0f       	add	r16, r16
     bb0:	11 1f       	adc	r17, r17
     bb2:	f8 01       	movw	r30, r16
     bb4:	eb 52       	subi	r30, 0x2B	; 43
     bb6:	ff 4f       	sbci	r31, 0xFF	; 255
     bb8:	20 81       	ld	r18, Z
     bba:	31 81       	ldd	r19, Z+1	; 0x01
     bbc:	42 81       	ldd	r20, Z+2	; 0x02
     bbe:	53 81       	ldd	r21, Z+3	; 0x03
     bc0:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <__mulsf3>
     bc4:	0e 94 0f 13 	call	0x261e	; 0x261e <__fixsfsi>
     bc8:	7b 01       	movw	r14, r22
	int16_t result2 = (int16_t)((double)(((double)adc_res_second) * coefs[SECOND][color]));
     bca:	60 91 79 03 	lds	r22, 0x0379
     bce:	70 91 7a 03 	lds	r23, 0x037A
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	0e 94 63 13 	call	0x26c6	; 0x26c6 <__floatunsisf>
     bda:	0f 51       	subi	r16, 0x1F	; 31
     bdc:	1f 4f       	sbci	r17, 0xFF	; 255
     bde:	f8 01       	movw	r30, r16
     be0:	20 81       	ld	r18, Z
     be2:	31 81       	ldd	r19, Z+1	; 0x01
     be4:	42 81       	ldd	r20, Z+2	; 0x02
     be6:	53 81       	ldd	r21, Z+3	; 0x03
     be8:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <__mulsf3>
     bec:	0e 94 0f 13 	call	0x261e	; 0x261e <__fixsfsi>
     bf0:	eb 01       	movw	r28, r22
	uint16_t diff_percent = DIFF(result1, result2) * 100 / max_diff;
     bf2:	97 01       	movw	r18, r14
     bf4:	26 1b       	sub	r18, r22
     bf6:	37 0b       	sbc	r19, r23
     bf8:	37 ff       	sbrs	r19, 7
     bfa:	03 c0       	rjmp	.+6      	; 0xc02 <SaveResultsAlgorithm+0x7c>
     bfc:	30 95       	com	r19
     bfe:	21 95       	neg	r18
     c00:	3f 4f       	sbci	r19, 0xFF	; 255
     c02:	60 91 ed 00 	lds	r22, 0x00ED
     c06:	70 91 ee 00 	lds	r23, 0x00EE
     c0a:	84 e6       	ldi	r24, 0x64	; 100
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	ac 01       	movw	r20, r24
     c10:	24 9f       	mul	r18, r20
     c12:	c0 01       	movw	r24, r0
     c14:	25 9f       	mul	r18, r21
     c16:	90 0d       	add	r25, r0
     c18:	34 9f       	mul	r19, r20
     c1a:	90 0d       	add	r25, r0
     c1c:	11 24       	eor	r1, r1
     c1e:	0e 94 32 16 	call	0x2c64	; 0x2c64 <__udivmodhi4>
     c22:	16 2f       	mov	r17, r22
     c24:	07 2f       	mov	r16, r23

	hex2dec_result(result1, FIRST, color); // result[FIRST][color] = result1;
     c26:	c7 01       	movw	r24, r14
     c28:	60 e0       	ldi	r22, 0x00	; 0
     c2a:	4d 2d       	mov	r20, r13
     c2c:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
	hex2dec_result(result2, SECOND, color); //result[SECOND][color] = result2;
     c30:	ce 01       	movw	r24, r28
     c32:	61 e0       	ldi	r22, 0x01	; 1
     c34:	4d 2d       	mov	r20, r13
     c36:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
	hex2dec_result(diff_percent, PERCENT, color); //result[PERCENT][color] = DIFF(result1, result2);// * 100 / max_diff;
     c3a:	81 2f       	mov	r24, r17
     c3c:	90 2f       	mov	r25, r16
     c3e:	62 e0       	ldi	r22, 0x02	; 2
     c40:	4d 2d       	mov	r20, r13
     c42:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
}
     c46:	df 91       	pop	r29
     c48:	cf 91       	pop	r28
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <ADC_LoadingAndEvalIt>:

void ADC_LoadingAndEvalIt(ptrEvalMe evalMe)
{
     c56:	cf 92       	push	r12
     c58:	df 92       	push	r13
     c5a:	ef 92       	push	r14
     c5c:	ff 92       	push	r15
     c5e:	1f 93       	push	r17
     c60:	cf 93       	push	r28
     c62:	df 93       	push	r29
     c64:	7c 01       	movw	r14, r24
	 *
	 * [############]
	 *
	 * 	 Complete!
	 */
	JOYSTICK_INT_DISABLE();
     c66:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     c68:	f8 94       	cli
     c6a:	8b b7       	in	r24, 0x3b	; 59
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	8b bf       	out	0x3b, r24	; 59
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     c70:	9f bf       	out	0x3f, r25	; 63

	Lcd3310_ClearCenter();
     c72:	0e 94 37 0b 	call	0x166e	; 0x166e <Lcd3310_ClearCenter>
	Lcd3310_GotoXY(0, 1);
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	61 e0       	ldi	r22, 0x01	; 1
     c7c:	70 e0       	ldi	r23, 0x00	; 0
     c7e:	0e 94 20 0b 	call	0x1640	; 0x1640 <Lcd3310_GotoXY>
	Lcd3310_String_P( pstr_please_wait, BLACK_TEXT_ON_WHITE );
     c82:	80 91 10 01 	lds	r24, 0x0110
     c86:	90 91 11 01 	lds	r25, 0x0111
     c8a:	60 e0       	ldi	r22, 0x00	; 0
     c8c:	0e 94 1f 0a 	call	0x143e	; 0x143e <Lcd3310_String_P>
	if(evalMe == SetZeroAlgorithm){
     c90:	8c eb       	ldi	r24, 0xBC	; 188
     c92:	e8 16       	cp	r14, r24
     c94:	85 e0       	ldi	r24, 0x05	; 5
     c96:	f8 06       	cpc	r15, r24
     c98:	19 f4       	brne	.+6      	; 0xca0 <ADC_LoadingAndEvalIt+0x4a>
		Lcd3310_GotoXY(5, 3);
     c9a:	85 e0       	ldi	r24, 0x05	; 5
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	02 c0       	rjmp	.+4      	; 0xca4 <ADC_LoadingAndEvalIt+0x4e>
	}else{
		Lcd3310_GotoXY(1, 3);
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	63 e0       	ldi	r22, 0x03	; 3
     ca6:	70 e0       	ldi	r23, 0x00	; 0
     ca8:	0e 94 20 0b 	call	0x1640	; 0x1640 <Lcd3310_GotoXY>
	}
	Lcd3310_Char('[', BLACK_TEXT_ON_WHITE);
     cac:	8b e5       	ldi	r24, 0x5B	; 91
     cae:	60 e0       	ldi	r22, 0x00	; 0
     cb0:	0e 94 ce 09 	call	0x139c	; 0x139c <Lcd3310_Char>

	LedDriver_SwitchLeds( RED_LEDS | GREEN_LEDS | BLUE_LEDS );
     cb4:	8c ef       	ldi	r24, 0xFC	; 252
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	0e 94 c9 06 	call	0xd92	; 0xd92 <LedDriver_SwitchLeds>
     cbc:	80 e3       	ldi	r24, 0x30	; 48
     cbe:	95 e7       	ldi	r25, 0x75	; 117
     cc0:	20 e9       	ldi	r18, 0x90	; 144
     cc2:	31 e0       	ldi	r19, 0x01	; 1
     cc4:	f9 01       	movw	r30, r18
     cc6:	31 97       	sbiw	r30, 0x01	; 1
     cc8:	f1 f7       	brne	.-4      	; 0xcc6 <ADC_LoadingAndEvalIt+0x70>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cca:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ccc:	d9 f7       	brne	.-10     	; 0xcc4 <ADC_LoadingAndEvalIt+0x6e>
     cce:	cf ee       	ldi	r28, 0xEF	; 239
     cd0:	d0 e0       	ldi	r29, 0x00	; 0
     cd2:	10 e0       	ldi	r17, 0x00	; 0
     cd4:	30 e9       	ldi	r19, 0x90	; 144
     cd6:	c3 2e       	mov	r12, r19
     cd8:	31 e0       	ldi	r19, 0x01	; 1
     cda:	d3 2e       	mov	r13, r19
	_delay_ms( DELAY_BEFORE_START_ADC );

	for(uint8_t color=0; color < 3; color++){
		Lcd3310_Char('#', BLACK_TEXT_ON_WHITE);
     cdc:	83 e2       	ldi	r24, 0x23	; 35
     cde:	60 e0       	ldi	r22, 0x00	; 0
     ce0:	0e 94 ce 09 	call	0x139c	; 0x139c <Lcd3310_Char>
		if(evalMe == SetZeroAlgorithm){
     ce4:	8c eb       	ldi	r24, 0xBC	; 188
     ce6:	e8 16       	cp	r14, r24
     ce8:	85 e0       	ldi	r24, 0x05	; 5
     cea:	f8 06       	cpc	r15, r24
     cec:	19 f4       	brne	.+6      	; 0xcf4 <ADC_LoadingAndEvalIt+0x9e>
			LedDriver_SwitchLeds( 0x00 );
     cee:	80 e0       	ldi	r24, 0x00	; 0
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	02 c0       	rjmp	.+4      	; 0xcf8 <ADC_LoadingAndEvalIt+0xa2>
		}else{
			LedDriver_SwitchLeds( led_show_codes[color] );
     cf4:	88 81       	ld	r24, Y
     cf6:	99 81       	ldd	r25, Y+1	; 0x01
     cf8:	0e 94 c9 06 	call	0xd92	; 0xd92 <LedDriver_SwitchLeds>
     cfc:	80 e3       	ldi	r24, 0x30	; 48
     cfe:	95 e7       	ldi	r25, 0x75	; 117
     d00:	f6 01       	movw	r30, r12
     d02:	31 97       	sbiw	r30, 0x01	; 1
     d04:	f1 f7       	brne	.-4      	; 0xd02 <ADC_LoadingAndEvalIt+0xac>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d06:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d08:	d9 f7       	brne	.-10     	; 0xd00 <ADC_LoadingAndEvalIt+0xaa>
		}
		_delay_ms( DELAY_BEFORE_START_ADC );
		Lcd3310_Char('#', BLACK_TEXT_ON_WHITE);
     d0a:	83 e2       	ldi	r24, 0x23	; 35
     d0c:	60 e0       	ldi	r22, 0x00	; 0
     d0e:	0e 94 ce 09 	call	0x139c	; 0x139c <Lcd3310_Char>
		ADC_64_Times();
     d12:	0e 94 17 05 	call	0xa2e	; 0xa2e <ADC_64_Times>
		Lcd3310_Char('#', BLACK_TEXT_ON_WHITE);
     d16:	83 e2       	ldi	r24, 0x23	; 35
     d18:	60 e0       	ldi	r22, 0x00	; 0
     d1a:	0e 94 ce 09 	call	0x139c	; 0x139c <Lcd3310_Char>

		// Start Algorithm
		(evalMe)(color);
     d1e:	81 2f       	mov	r24, r17
     d20:	f7 01       	movw	r30, r14
     d22:	09 95       	icall

		if(evalMe == SetZeroAlgorithm){
     d24:	8c eb       	ldi	r24, 0xBC	; 188
     d26:	e8 16       	cp	r14, r24
     d28:	85 e0       	ldi	r24, 0x05	; 5
     d2a:	f8 06       	cpc	r15, r24
     d2c:	21 f0       	breq	.+8      	; 0xd36 <ADC_LoadingAndEvalIt+0xe0>
	Lcd3310_Char('[', BLACK_TEXT_ON_WHITE);

	LedDriver_SwitchLeds( RED_LEDS | GREEN_LEDS | BLUE_LEDS );
	_delay_ms( DELAY_BEFORE_START_ADC );

	for(uint8_t color=0; color < 3; color++){
     d2e:	1f 5f       	subi	r17, 0xFF	; 255
     d30:	22 96       	adiw	r28, 0x02	; 2
     d32:	13 30       	cpi	r17, 0x03	; 3
     d34:	99 f6       	brne	.-90     	; 0xcdc <ADC_LoadingAndEvalIt+0x86>

		if(evalMe == SetZeroAlgorithm){
			break; // not need to switch off leds 3 times :)
		}
	}
	LedDriver_SwitchLeds( 0x00 );
     d36:	80 e0       	ldi	r24, 0x00	; 0
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	0e 94 c9 06 	call	0xd92	; 0xd92 <LedDriver_SwitchLeds>
	Lcd3310_Char(']', BLACK_TEXT_ON_WHITE);
     d3e:	8d e5       	ldi	r24, 0x5D	; 93
     d40:	60 e0       	ldi	r22, 0x00	; 0
     d42:	0e 94 ce 09 	call	0x139c	; 0x139c <Lcd3310_Char>
	Lcd3310_GotoXY(2, 5);
     d46:	82 e0       	ldi	r24, 0x02	; 2
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	65 e0       	ldi	r22, 0x05	; 5
     d4c:	70 e0       	ldi	r23, 0x00	; 0
     d4e:	0e 94 20 0b 	call	0x1640	; 0x1640 <Lcd3310_GotoXY>
	Lcd3310_String_P( pstr_complete, BLACK_TEXT_ON_WHITE );
     d52:	80 91 ff 00 	lds	r24, 0x00FF
     d56:	90 91 00 01 	lds	r25, 0x0100
     d5a:	60 e0       	ldi	r22, 0x00	; 0
     d5c:	0e 94 1f 0a 	call	0x143e	; 0x143e <Lcd3310_String_P>
     d60:	88 e8       	ldi	r24, 0x88	; 136
     d62:	93 e1       	ldi	r25, 0x13	; 19
     d64:	20 e9       	ldi	r18, 0x90	; 144
     d66:	31 e0       	ldi	r19, 0x01	; 1
     d68:	f9 01       	movw	r30, r18
     d6a:	31 97       	sbiw	r30, 0x01	; 1
     d6c:	f1 f7       	brne	.-4      	; 0xd6a <ADC_LoadingAndEvalIt+0x114>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d6e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d70:	d9 f7       	brne	.-10     	; 0xd68 <ADC_LoadingAndEvalIt+0x112>
	_delay_ms(500); // show complete and wait 0.5 sec
	JOYSTICK_INT_ENABLE();
     d72:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     d74:	f8 94       	cli
     d76:	80 e4       	ldi	r24, 0x40	; 64
     d78:	8a bf       	out	0x3a, r24	; 58
     d7a:	8b b7       	in	r24, 0x3b	; 59
     d7c:	80 68       	ori	r24, 0x80	; 128
     d7e:	8b bf       	out	0x3b, r24	; 59
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     d80:	9f bf       	out	0x3f, r25	; 63
//	LedDriver_SwitchLeds(GREEN_LEDS);
//	(evalMe)(0);
}
     d82:	df 91       	pop	r29
     d84:	cf 91       	pop	r28
     d86:	1f 91       	pop	r17
     d88:	ff 90       	pop	r15
     d8a:	ef 90       	pop	r14
     d8c:	df 90       	pop	r13
     d8e:	cf 90       	pop	r12
     d90:	08 95       	ret

00000d92 <LedDriver_SwitchLeds>:

#include "led_driver.h"


void LedDriver_SwitchLeds(uint16_t data)
{
     d92:	ac 01       	movw	r20, r24
     d94:	20 e0       	ldi	r18, 0x00	; 0
     d96:	30 e0       	ldi	r19, 0x00	; 0
	char i;
	for(i=0; i<16; i++){
		CLK_DOWN;
		if(data & _BV(i)){
     d98:	61 e0       	ldi	r22, 0x01	; 1
     d9a:	70 e0       	ldi	r23, 0x00	; 0

void LedDriver_SwitchLeds(uint16_t data)
{
	char i;
	for(i=0; i<16; i++){
		CLK_DOWN;
     d9c:	db 98       	cbi	0x1b, 3	; 27
		if(data & _BV(i)){
     d9e:	cb 01       	movw	r24, r22
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <LedDriver_SwitchLeds+0x16>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <LedDriver_SwitchLeds+0x12>
     dac:	84 23       	and	r24, r20
     dae:	95 23       	and	r25, r21
     db0:	89 2b       	or	r24, r25
     db2:	11 f0       	breq	.+4      	; 0xdb8 <LedDriver_SwitchLeds+0x26>
			LED_DR_PORT |= DATA_PIN;
     db4:	da 9a       	sbi	0x1b, 2	; 27
     db6:	01 c0       	rjmp	.+2      	; 0xdba <LedDriver_SwitchLeds+0x28>
		}else{
			LED_DR_PORT &= (unsigned char)~DATA_PIN;
     db8:	da 98       	cbi	0x1b, 2	; 27
		}
		CLK_UP;
     dba:	db 9a       	sbi	0x1b, 3	; 27
     dbc:	2f 5f       	subi	r18, 0xFF	; 255
     dbe:	3f 4f       	sbci	r19, 0xFF	; 255


void LedDriver_SwitchLeds(uint16_t data)
{
	char i;
	for(i=0; i<16; i++){
     dc0:	20 31       	cpi	r18, 0x10	; 16
     dc2:	31 05       	cpc	r19, r1
     dc4:	59 f7       	brne	.-42     	; 0xd9c <LedDriver_SwitchLeds+0xa>
		}else{
			LED_DR_PORT &= (unsigned char)~DATA_PIN;
		}
		CLK_UP;
	}
	LATCH_PULSE;
     dc6:	dc 9a       	sbi	0x1b, 4	; 27
     dc8:	00 00       	nop
     dca:	dc 98       	cbi	0x1b, 4	; 27
}
     dcc:	08 95       	ret

00000dce <LedDriver_PWM>:

void LedDriver_PWM(uint8_t pwm, uint16_t leds)
{
     dce:	1f 93       	push	r17
     dd0:	18 2f       	mov	r17, r24
     dd2:	cb 01       	movw	r24, r22
	uint8_t temp = pwm;
	LedDriver_SwitchLeds(leds); // switch on leds
     dd4:	0e 94 c9 06 	call	0xd92	; 0xd92 <LedDriver_SwitchLeds>
     dd8:	81 2f       	mov	r24, r17
     dda:	02 c0       	rjmp	.+4      	; 0xde0 <LedDriver_PWM+0x12>
	while(temp--){__asm__ __volatile__("nop");}
     ddc:	00 00       	nop
     dde:	81 50       	subi	r24, 0x01	; 1
     de0:	88 23       	and	r24, r24
     de2:	e1 f7       	brne	.-8      	; 0xddc <LedDriver_PWM+0xe>
	temp = (uint8_t)~pwm;
     de4:	10 95       	com	r17
	LedDriver_SwitchLeds(0x00); // switch off all leds
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	0e 94 c9 06 	call	0xd92	; 0xd92 <LedDriver_SwitchLeds>
     dee:	02 c0       	rjmp	.+4      	; 0xdf4 <LedDriver_PWM+0x26>
	while(temp--){__asm__ __volatile__("nop");}
     df0:	00 00       	nop
     df2:	11 50       	subi	r17, 0x01	; 1
     df4:	11 23       	and	r17, r17
     df6:	e1 f7       	brne	.-8      	; 0xdf0 <LedDriver_PWM+0x22>
	LedDriver_SwitchLeds(0x00);
     df8:	80 e0       	ldi	r24, 0x00	; 0
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	0e 94 c9 06 	call	0xd92	; 0xd92 <LedDriver_SwitchLeds>
}
     e00:	1f 91       	pop	r17
     e02:	08 95       	ret

00000e04 <LedDriver_Init>:

void LedDriver_Init(void)
{
	LATCH_DOWN;
     e04:	dc 98       	cbi	0x1b, 4	; 27
	CLK_DOWN;
     e06:	db 98       	cbi	0x1b, 3	; 27
	LED_DR_DDR |= DATA_PIN | CLK_PIN | LATCH_PIN;
     e08:	8a b3       	in	r24, 0x1a	; 26
     e0a:	8c 61       	ori	r24, 0x1C	; 28
     e0c:	8a bb       	out	0x1a, r24	; 26
	LedDriver_SwitchLeds(0x00);
     e0e:	80 e0       	ldi	r24, 0x00	; 0
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	0e 94 c9 06 	call	0xd92	; 0xd92 <LedDriver_SwitchLeds>
}
     e16:	08 95       	ret

00000e18 <LedDriver_Switch_3_Leds>:

void LedDriver_Switch_3_Leds(uint8_t data)
{
     e18:	20 e0       	ldi	r18, 0x00	; 0
     e1a:	30 e0       	ldi	r19, 0x00	; 0
	// data mb: RED_LS, GREEN_LS, BLUE_LS

	for(uint8_t i=0; i < 3; i++){
		CLK_DOWN;
		if(data & _BV(i)){
     e1c:	48 2f       	mov	r20, r24
     e1e:	50 e0       	ldi	r21, 0x00	; 0
void LedDriver_Switch_3_Leds(uint8_t data)
{
	// data mb: RED_LS, GREEN_LS, BLUE_LS

	for(uint8_t i=0; i < 3; i++){
		CLK_DOWN;
     e20:	db 98       	cbi	0x1b, 3	; 27
		if(data & _BV(i)){
     e22:	ca 01       	movw	r24, r20
     e24:	02 2e       	mov	r0, r18
     e26:	02 c0       	rjmp	.+4      	; 0xe2c <LedDriver_Switch_3_Leds+0x14>
     e28:	95 95       	asr	r25
     e2a:	87 95       	ror	r24
     e2c:	0a 94       	dec	r0
     e2e:	e2 f7       	brpl	.-8      	; 0xe28 <LedDriver_Switch_3_Leds+0x10>
     e30:	80 ff       	sbrs	r24, 0
     e32:	02 c0       	rjmp	.+4      	; 0xe38 <LedDriver_Switch_3_Leds+0x20>
			LED_DR_PORT |= DATA_PIN;
     e34:	da 9a       	sbi	0x1b, 2	; 27
     e36:	01 c0       	rjmp	.+2      	; 0xe3a <LedDriver_Switch_3_Leds+0x22>
		}else{
			LED_DR_PORT &= (uint8_t)~DATA_PIN;
     e38:	da 98       	cbi	0x1b, 2	; 27
		}
		CLK_UP;
     e3a:	db 9a       	sbi	0x1b, 3	; 27
     e3c:	2f 5f       	subi	r18, 0xFF	; 255
     e3e:	3f 4f       	sbci	r19, 0xFF	; 255

void LedDriver_Switch_3_Leds(uint8_t data)
{
	// data mb: RED_LS, GREEN_LS, BLUE_LS

	for(uint8_t i=0; i < 3; i++){
     e40:	23 30       	cpi	r18, 0x03	; 3
     e42:	31 05       	cpc	r19, r1
     e44:	69 f7       	brne	.-38     	; 0xe20 <LedDriver_Switch_3_Leds+0x8>
		}else{
			LED_DR_PORT &= (uint8_t)~DATA_PIN;
		}
		CLK_UP;
	}
	LATCH_PULSE;
     e46:	dc 9a       	sbi	0x1b, 4	; 27
     e48:	00 00       	nop
     e4a:	dc 98       	cbi	0x1b, 4	; 27
}
     e4c:	08 95       	ret

00000e4e <main>:

//	DEBUG_INIT(); // Initialize uart if DEBUG != 0
	DEBUG_PRINT_CHAR( 0x01 );

	// Input/Output Ports initialization
    PORTB=0x00;
     e4e:	18 ba       	out	0x18, r1	; 24
    DDRB=0x00;
     e50:	17 ba       	out	0x17, r1	; 23

    PORTC=0x00;
     e52:	15 ba       	out	0x15, r1	; 21
    DDRC=0x00;
     e54:	14 ba       	out	0x14, r1	; 20

    PORTD= _BV(PD3); // pull up joystick center button
     e56:	88 e0       	ldi	r24, 0x08	; 8
     e58:	82 bb       	out	0x12, r24	; 18
    DDRD=0x00;
     e5a:	11 ba       	out	0x11, r1	; 17


    JPORT = (uint8_t)(J_RU | J_LU | J_RD | J_LD);
     e5c:	80 ef       	ldi	r24, 0xF0	; 240
     e5e:	85 bb       	out	0x15, r24	; 21
    JDDR &= (uint8_t)~(J_RU | J_LU | J_RD | J_LD);
     e60:	84 b3       	in	r24, 0x14	; 20
     e62:	8f 70       	andi	r24, 0x0F	; 15
     e64:	84 bb       	out	0x14, r24	; 20

    //TEST_PIN_DDR_INIT();

    ACSR = _BV(ACD); // turn off analog comparer, this is turns ON after RESET... delurium, but the fact ;)
     e66:	80 e8       	ldi	r24, 0x80	; 128
     e68:	88 b9       	out	0x08, r24	; 8

    // External Interrupt(s) initialization
    MCUCR= _BV(ISC11) | _BV(ISC01); // fall
     e6a:	8a e0       	ldi	r24, 0x0A	; 10
     e6c:	85 bf       	out	0x35, r24	; 53
    GICR = _BV(INT0) | _BV(INT1); // int1 int0 enable interrupts
     e6e:	80 ec       	ldi	r24, 0xC0	; 192
     e70:	8b bf       	out	0x3b, r24	; 59
//    TCCR1A = 0x00;
//    TCCR1B = 0x00;
//    TCCR2 = 0x00;
//    TIMSK = 0x00;

	TIM2_INIT(); // see defines.h for details
     e72:	86 e0       	ldi	r24, 0x06	; 6
     e74:	85 bd       	out	0x25, r24	; 37

    // Init ADC
	ADMUX = 0x00; //_BV(ADLAR); // ADC0, result in ADC
     e76:	17 b8       	out	0x07, r1	; 7
	ADCSRA = _BV(ADEN) /*| _BV(ADIE)*/ | _BV(ADPS2)  | _BV(ADPS1) | _BV(ADPS0); // XTAL / 16;
     e78:	87 e8       	ldi	r24, 0x87	; 135
     e7a:	86 b9       	out	0x06, r24	; 6

	LedDriver_Init();
     e7c:	0e 94 02 07 	call	0xe04	; 0xe04 <LedDriver_Init>
	Lcd3310_InitializeDisplay(DELAY_SHOW_SPLASH);
     e80:	88 ee       	ldi	r24, 0xE8	; 232
     e82:	93 e0       	ldi	r25, 0x03	; 3
     e84:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <Lcd3310_InitializeDisplay>


	DEBUG_PRINT_CHAR( 0x02 );


	sei();
     e88:	78 94       	sei
	DEBUG_PRINT_CHAR( 0x03 );

	DEBUG_PRINT_CHAR( 0x00 );


	LedDriver_SwitchLeds(0x0000);
     e8a:	80 e0       	ldi	r24, 0x00	; 0
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	0e 94 c9 06 	call	0xd92	; 0xd92 <LedDriver_SwitchLeds>


	DDRC  |= _BV(PC3);
     e92:	a3 9a       	sbi	0x14, 3	; 20
	ADMUX = _BV(MUX3) | _BV(MUX0); //  ADC = 10 x |ADC0 - ADC1|;  0x000 == 0; 0x3FF = -1;  0x1FF = 512; 0x200 = -512;
     e94:	89 e0       	ldi	r24, 0x09	; 9
     e96:	87 b9       	out	0x07, r24	; 7
     e98:	ff cf       	rjmp	.-2      	; 0xe98 <main+0x4a>

00000e9a <__vector_5>:
}

//================================================//
//== 			Game timer ticks				==//
ISR(TIMER2_OVF_vect)
{
     e9a:	1f 92       	push	r1
     e9c:	0f 92       	push	r0
     e9e:	0f b6       	in	r0, 0x3f	; 63
     ea0:	0f 92       	push	r0
     ea2:	11 24       	eor	r1, r1
     ea4:	2f 93       	push	r18
     ea6:	3f 93       	push	r19
     ea8:	4f 93       	push	r20
     eaa:	5f 93       	push	r21
     eac:	6f 93       	push	r22
     eae:	7f 93       	push	r23
     eb0:	8f 93       	push	r24
     eb2:	9f 93       	push	r25
     eb4:	af 93       	push	r26
     eb6:	bf 93       	push	r27
     eb8:	ef 93       	push	r30
     eba:	ff 93       	push	r31
	if(!timer_delay--){
     ebc:	80 91 82 03 	lds	r24, 0x0382
     ec0:	81 50       	subi	r24, 0x01	; 1
     ec2:	80 93 82 03 	sts	0x0382, r24
     ec6:	8f 5f       	subi	r24, 0xFF	; 255
     ec8:	99 f4       	brne	.+38     	; 0xef0 <__vector_5+0x56>
		if(!timer_ticks_to_get_present--){
     eca:	80 91 12 01 	lds	r24, 0x0112
     ece:	81 50       	subi	r24, 0x01	; 1
     ed0:	80 93 12 01 	sts	0x0112, r24
     ed4:	8f 5f       	subi	r24, 0xFF	; 255
     ed6:	31 f4       	brne	.+12     	; 0xee4 <__vector_5+0x4a>
			timer_ticks_to_get_present = get_present_speed;
     ed8:	80 91 b4 00 	lds	r24, 0x00B4
     edc:	80 93 12 01 	sts	0x0112, r24
			SnakeGame_AddmeUpdateXY();
     ee0:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <SnakeGame_AddmeUpdateXY>
		}
		SnakeGame_TakeNextStep();
     ee4:	0e 94 aa 03 	call	0x754	; 0x754 <SnakeGame_TakeNextStep>
		timer_delay = step_speed;
     ee8:	80 91 b3 00 	lds	r24, 0x00B3
     eec:	80 93 82 03 	sts	0x0382, r24
	}
}
     ef0:	ff 91       	pop	r31
     ef2:	ef 91       	pop	r30
     ef4:	bf 91       	pop	r27
     ef6:	af 91       	pop	r26
     ef8:	9f 91       	pop	r25
     efa:	8f 91       	pop	r24
     efc:	7f 91       	pop	r23
     efe:	6f 91       	pop	r22
     f00:	5f 91       	pop	r21
     f02:	4f 91       	pop	r20
     f04:	3f 91       	pop	r19
     f06:	2f 91       	pop	r18
     f08:	0f 90       	pop	r0
     f0a:	0f be       	out	0x3f, r0	; 63
     f0c:	0f 90       	pop	r0
     f0e:	1f 90       	pop	r1
     f10:	18 95       	reti

00000f12 <ALG_Start>:
		//		}
	}
}

void ALG_Start(void)
{
     f12:	cf 92       	push	r12
     f14:	df 92       	push	r13
     f16:	ef 92       	push	r14
     f18:	ff 92       	push	r15
     f1a:	1f 93       	push	r17
     f1c:	cf 93       	push	r28
     f1e:	df 93       	push	r29
	ADMUX = _BV(ADLAR) | _BV(MUX3) | _BV(MUX0); // 1 x diff
     f20:	89 e2       	ldi	r24, 0x29	; 41
     f22:	87 b9       	out	0x07, r24	; 7

	Lcd3310_GotoXY(0, 0);
     f24:	80 e0       	ldi	r24, 0x00	; 0
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	60 e0       	ldi	r22, 0x00	; 0
     f2a:	70 e0       	ldi	r23, 0x00	; 0
     f2c:	0e 94 20 0b 	call	0x1640	; 0x1640 <Lcd3310_GotoXY>
     f30:	4f e8       	ldi	r20, 0x8F	; 143
     f32:	c4 2e       	mov	r12, r20
     f34:	43 e0       	ldi	r20, 0x03	; 3
     f36:	d4 2e       	mov	r13, r20
     f38:	31 e0       	ldi	r19, 0x01	; 1
     f3a:	e3 2e       	mov	r14, r19
     f3c:	f1 2c       	mov	r15, r1
	for(uint8_t i=0; i<10; i++){
		count = i * 10;
     f3e:	8e 2d       	mov	r24, r14
     f40:	81 50       	subi	r24, 0x01	; 1
     f42:	80 93 13 01 	sts	0x0113, r24

		PORTC |= _BV(PC3);
     f46:	ab 9a       	sbi	0x15, 3	; 21
		__asm__ volatile ("nop"::);
     f48:	00 00       	nop
		PORTC &= (uint8_t)~_BV(PC3);
     f4a:	ab 98       	cbi	0x15, 3	; 21


		time = (uint16_t)(0xFFFF) / (count + 1); // = time_us / (6 * count + 6); 6 * 0xFFFF us
     f4c:	8f ef       	ldi	r24, 0xFF	; 255
     f4e:	9f ef       	ldi	r25, 0xFF	; 255
     f50:	b7 01       	movw	r22, r14
     f52:	0e 94 32 16 	call	0x2c64	; 0x2c64 <__udivmodhi4>
     f56:	cb 01       	movw	r24, r22
		time <<= 1;
     f58:	88 0f       	add	r24, r24
     f5a:	99 1f       	adc	r25, r25
     f5c:	90 93 84 03 	sts	0x0384, r25
     f60:	80 93 83 03 	sts	0x0383, r24
     f64:	c0 e0       	ldi	r28, 0x00	; 0
     f66:	d0 e0       	ldi	r29, 0x00	; 0
     f68:	0f c0       	rjmp	.+30     	; 0xf88 <ALG_Start+0x76>
		for(uint16_t pwm=0; pwm < time; pwm++)
		{
			LedDriver_Switch_3_Leds(data);
     f6a:	80 91 14 01 	lds	r24, 0x0114
     f6e:	0e 94 0c 07 	call	0xe18	; 0xe18 <LedDriver_Switch_3_Leds>
     f72:	10 e0       	ldi	r17, 0x00	; 0
     f74:	04 c0       	rjmp	.+8      	; 0xf7e <ALG_Start+0x6c>
			for(uint8_t down=0; down < count; down++)
				LedDriver_Switch_3_Leds(0b000);
     f76:	80 e0       	ldi	r24, 0x00	; 0
     f78:	0e 94 0c 07 	call	0xe18	; 0xe18 <LedDriver_Switch_3_Leds>
		time = (uint16_t)(0xFFFF) / (count + 1); // = time_us / (6 * count + 6); 6 * 0xFFFF us
		time <<= 1;
		for(uint16_t pwm=0; pwm < time; pwm++)
		{
			LedDriver_Switch_3_Leds(data);
			for(uint8_t down=0; down < count; down++)
     f7c:	1f 5f       	subi	r17, 0xFF	; 255
     f7e:	80 91 13 01 	lds	r24, 0x0113
     f82:	18 17       	cp	r17, r24
     f84:	c0 f3       	brcs	.-16     	; 0xf76 <ALG_Start+0x64>
		PORTC &= (uint8_t)~_BV(PC3);


		time = (uint16_t)(0xFFFF) / (count + 1); // = time_us / (6 * count + 6); 6 * 0xFFFF us
		time <<= 1;
		for(uint16_t pwm=0; pwm < time; pwm++)
     f86:	21 96       	adiw	r28, 0x01	; 1
     f88:	80 91 83 03 	lds	r24, 0x0383
     f8c:	90 91 84 03 	lds	r25, 0x0384
     f90:	c8 17       	cp	r28, r24
     f92:	d9 07       	cpc	r29, r25
     f94:	50 f3       	brcs	.-44     	; 0xf6a <ALG_Start+0x58>
		}
		////		_delay_ms(2);
		//		if( count++ > 20 ) count = 3;

		//		PORTC |= _BV(PC3);
		ADCSRA |= _BV( ADSC ); // start conversation
     f96:	36 9a       	sbi	0x06, 6	; 6
     f98:	0e c0       	rjmp	.+28     	; 0xfb6 <ALG_Start+0xa4>
		while( ADC_CONVERT_IN_PROGRESS() ) {  // 112us
			LedDriver_Switch_3_Leds(data);
     f9a:	80 91 14 01 	lds	r24, 0x0114
     f9e:	0e 94 0c 07 	call	0xe18	; 0xe18 <LedDriver_Switch_3_Leds>
     fa2:	10 e0       	ldi	r17, 0x00	; 0
     fa4:	04 c0       	rjmp	.+8      	; 0xfae <ALG_Start+0x9c>
			for(uint8_t down=0; down < count; down++)
				LedDriver_Switch_3_Leds(0b000);
     fa6:	80 e0       	ldi	r24, 0x00	; 0
     fa8:	0e 94 0c 07 	call	0xe18	; 0xe18 <LedDriver_Switch_3_Leds>

		//		PORTC |= _BV(PC3);
		ADCSRA |= _BV( ADSC ); // start conversation
		while( ADC_CONVERT_IN_PROGRESS() ) {  // 112us
			LedDriver_Switch_3_Leds(data);
			for(uint8_t down=0; down < count; down++)
     fac:	1f 5f       	subi	r17, 0xFF	; 255
     fae:	80 91 13 01 	lds	r24, 0x0113
     fb2:	18 17       	cp	r17, r24
     fb4:	c0 f3       	brcs	.-16     	; 0xfa6 <ALG_Start+0x94>
		////		_delay_ms(2);
		//		if( count++ > 20 ) count = 3;

		//		PORTC |= _BV(PC3);
		ADCSRA |= _BV( ADSC ); // start conversation
		while( ADC_CONVERT_IN_PROGRESS() ) {  // 112us
     fb6:	36 99       	sbic	0x06, 6	; 6
     fb8:	f0 cf       	rjmp	.-32     	; 0xf9a <ALG_Start+0x88>
			LedDriver_Switch_3_Leds(data);
			for(uint8_t down=0; down < count; down++)
				LedDriver_Switch_3_Leds(0b000);
		}
		adc_data = ADCH;
     fba:	85 b1       	in	r24, 0x05	; 5
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	90 93 81 03 	sts	0x0381, r25
     fc2:	80 93 80 03 	sts	0x0380, r24
		adc_data = (uint16_t)((double) adc_data * coefs_2[i]);
     fc6:	60 91 80 03 	lds	r22, 0x0380
     fca:	70 91 81 03 	lds	r23, 0x0381
     fce:	88 27       	eor	r24, r24
     fd0:	77 fd       	sbrc	r23, 7
     fd2:	80 95       	com	r24
     fd4:	98 2f       	mov	r25, r24
     fd6:	0e 94 b1 12 	call	0x2562	; 0x2562 <__floatsisf>
     fda:	f6 01       	movw	r30, r12
     fdc:	21 91       	ld	r18, Z+
     fde:	31 91       	ld	r19, Z+
     fe0:	41 91       	ld	r20, Z+
     fe2:	51 91       	ld	r21, Z+
     fe4:	6f 01       	movw	r12, r30
     fe6:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <__mulsf3>
     fea:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <__fixunssfsi>
     fee:	70 93 81 03 	sts	0x0381, r23
     ff2:	60 93 80 03 	sts	0x0380, r22

		Lcd3310_UInt8AsText(count, WHITE_TEXT_ON_BLACK);
     ff6:	80 91 13 01 	lds	r24, 0x0113
     ffa:	61 e0       	ldi	r22, 0x01	; 1
     ffc:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <Lcd3310_UInt8AsText>
		Lcd3310_Char(':', WHITE_TEXT_ON_BLACK);
    1000:	8a e3       	ldi	r24, 0x3A	; 58
    1002:	61 e0       	ldi	r22, 0x01	; 1
    1004:	0e 94 ce 09 	call	0x139c	; 0x139c <Lcd3310_Char>
		Lcd3310_UInt16AsText_3Chars((uint16_t)adc_data, WHITE_TEXT_ON_BLACK);
    1008:	80 91 80 03 	lds	r24, 0x0380
    100c:	90 91 81 03 	lds	r25, 0x0381
    1010:	61 e0       	ldi	r22, 0x01	; 1
    1012:	0e 94 5f 0c 	call	0x18be	; 0x18be <Lcd3310_UInt16AsText_3Chars>
    1016:	8a e0       	ldi	r24, 0x0A	; 10
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	e8 0e       	add	r14, r24
    101c:	f9 1e       	adc	r15, r25
void ALG_Start(void)
{
	ADMUX = _BV(ADLAR) | _BV(MUX3) | _BV(MUX0); // 1 x diff

	Lcd3310_GotoXY(0, 0);
	for(uint8_t i=0; i<10; i++){
    101e:	95 e6       	ldi	r25, 0x65	; 101
    1020:	e9 16       	cp	r14, r25
    1022:	f1 04       	cpc	r15, r1
    1024:	09 f0       	breq	.+2      	; 0x1028 <ALG_Start+0x116>
    1026:	8b cf       	rjmp	.-234    	; 0xf3e <ALG_Start+0x2c>
		//		PORTC &= (uint8_t)~_BV(PC3);
		//		if(count == 0xff){
		//			_delay_ms(2);
		//		}
	}
}
    1028:	df 91       	pop	r29
    102a:	cf 91       	pop	r28
    102c:	1f 91       	pop	r17
    102e:	ff 90       	pop	r15
    1030:	ef 90       	pop	r14
    1032:	df 90       	pop	r13
    1034:	cf 90       	pop	r12
    1036:	08 95       	ret

00001038 <EvalCoefs_2>:
uint16_t time = 0;//(30000) / (count + 1);



void EvalCoefs_2(void)
{
    1038:	cf 92       	push	r12
    103a:	df 92       	push	r13
    103c:	ef 92       	push	r14
    103e:	ff 92       	push	r15
    1040:	1f 93       	push	r17
    1042:	cf 93       	push	r28
    1044:	df 93       	push	r29
	ADMUX = _BV(ADLAR) | _BV(MUX3) | _BV(MUX0); // 10 x diff
    1046:	89 e2       	ldi	r24, 0x29	; 41
    1048:	87 b9       	out	0x07, r24	; 7


	Lcd3310_GotoXY(0, 0);
    104a:	80 e0       	ldi	r24, 0x00	; 0
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	60 e0       	ldi	r22, 0x00	; 0
    1050:	70 e0       	ldi	r23, 0x00	; 0
    1052:	0e 94 20 0b 	call	0x1640	; 0x1640 <Lcd3310_GotoXY>
    1056:	7f e8       	ldi	r23, 0x8F	; 143
    1058:	c7 2e       	mov	r12, r23
    105a:	73 e0       	ldi	r23, 0x03	; 3
    105c:	d7 2e       	mov	r13, r23
    105e:	61 e0       	ldi	r22, 0x01	; 1
    1060:	e6 2e       	mov	r14, r22
    1062:	f1 2c       	mov	r15, r1
	for(uint8_t i=0; i<10; i++){
		count = i * 10;
    1064:	8e 2d       	mov	r24, r14
    1066:	81 50       	subi	r24, 0x01	; 1
    1068:	80 93 13 01 	sts	0x0113, r24
		PORTC |= _BV(PC3);
    106c:	ab 9a       	sbi	0x15, 3	; 21
		__asm__ volatile ("nop"::);
    106e:	00 00       	nop
		PORTC &= (uint8_t)~_BV(PC3);
    1070:	ab 98       	cbi	0x15, 3	; 21


		time = (uint16_t)(0xFFFF) / (count + 1); // = time_us / (6 * count + 6); 6 * 0xFFFF us
    1072:	8f ef       	ldi	r24, 0xFF	; 255
    1074:	9f ef       	ldi	r25, 0xFF	; 255
    1076:	b7 01       	movw	r22, r14
    1078:	0e 94 32 16 	call	0x2c64	; 0x2c64 <__udivmodhi4>
    107c:	cb 01       	movw	r24, r22
		time <<= 1;
    107e:	88 0f       	add	r24, r24
    1080:	99 1f       	adc	r25, r25
    1082:	90 93 84 03 	sts	0x0384, r25
    1086:	80 93 83 03 	sts	0x0383, r24
    108a:	c0 e0       	ldi	r28, 0x00	; 0
    108c:	d0 e0       	ldi	r29, 0x00	; 0
    108e:	0f c0       	rjmp	.+30     	; 0x10ae <EvalCoefs_2+0x76>
		for(uint16_t pwm=0; pwm < time; pwm++)
		{
			LedDriver_Switch_3_Leds(data);
    1090:	80 91 14 01 	lds	r24, 0x0114
    1094:	0e 94 0c 07 	call	0xe18	; 0xe18 <LedDriver_Switch_3_Leds>
    1098:	10 e0       	ldi	r17, 0x00	; 0
    109a:	04 c0       	rjmp	.+8      	; 0x10a4 <EvalCoefs_2+0x6c>
			for(uint8_t down=0; down < count; down++)
				LedDriver_Switch_3_Leds(0b000);
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	0e 94 0c 07 	call	0xe18	; 0xe18 <LedDriver_Switch_3_Leds>
		time = (uint16_t)(0xFFFF) / (count + 1); // = time_us / (6 * count + 6); 6 * 0xFFFF us
		time <<= 1;
		for(uint16_t pwm=0; pwm < time; pwm++)
		{
			LedDriver_Switch_3_Leds(data);
			for(uint8_t down=0; down < count; down++)
    10a2:	1f 5f       	subi	r17, 0xFF	; 255
    10a4:	80 91 13 01 	lds	r24, 0x0113
    10a8:	18 17       	cp	r17, r24
    10aa:	c0 f3       	brcs	.-16     	; 0x109c <EvalCoefs_2+0x64>
		PORTC &= (uint8_t)~_BV(PC3);


		time = (uint16_t)(0xFFFF) / (count + 1); // = time_us / (6 * count + 6); 6 * 0xFFFF us
		time <<= 1;
		for(uint16_t pwm=0; pwm < time; pwm++)
    10ac:	21 96       	adiw	r28, 0x01	; 1
    10ae:	80 91 83 03 	lds	r24, 0x0383
    10b2:	90 91 84 03 	lds	r25, 0x0384
    10b6:	c8 17       	cp	r28, r24
    10b8:	d9 07       	cpc	r29, r25
    10ba:	50 f3       	brcs	.-44     	; 0x1090 <EvalCoefs_2+0x58>
		}
		////		_delay_ms(2);
		//		if( count++ > 20 ) count = 3;

		//		PORTC |= _BV(PC3);
		ADCSRA |= _BV( ADSC ); // start conversation
    10bc:	36 9a       	sbi	0x06, 6	; 6
    10be:	0e c0       	rjmp	.+28     	; 0x10dc <EvalCoefs_2+0xa4>
		while( ADC_CONVERT_IN_PROGRESS() ) {  // 112us
			LedDriver_Switch_3_Leds(data);
    10c0:	80 91 14 01 	lds	r24, 0x0114
    10c4:	0e 94 0c 07 	call	0xe18	; 0xe18 <LedDriver_Switch_3_Leds>
    10c8:	10 e0       	ldi	r17, 0x00	; 0
    10ca:	04 c0       	rjmp	.+8      	; 0x10d4 <EvalCoefs_2+0x9c>
			for(uint8_t down=0; down < count; down++)
				LedDriver_Switch_3_Leds(0b000);
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	0e 94 0c 07 	call	0xe18	; 0xe18 <LedDriver_Switch_3_Leds>

		//		PORTC |= _BV(PC3);
		ADCSRA |= _BV( ADSC ); // start conversation
		while( ADC_CONVERT_IN_PROGRESS() ) {  // 112us
			LedDriver_Switch_3_Leds(data);
			for(uint8_t down=0; down < count; down++)
    10d2:	1f 5f       	subi	r17, 0xFF	; 255
    10d4:	80 91 13 01 	lds	r24, 0x0113
    10d8:	18 17       	cp	r17, r24
    10da:	c0 f3       	brcs	.-16     	; 0x10cc <EvalCoefs_2+0x94>
		////		_delay_ms(2);
		//		if( count++ > 20 ) count = 3;

		//		PORTC |= _BV(PC3);
		ADCSRA |= _BV( ADSC ); // start conversation
		while( ADC_CONVERT_IN_PROGRESS() ) {  // 112us
    10dc:	36 99       	sbic	0x06, 6	; 6
    10de:	f0 cf       	rjmp	.-32     	; 0x10c0 <EvalCoefs_2+0x88>
			LedDriver_Switch_3_Leds(data);
			for(uint8_t down=0; down < count; down++)
				LedDriver_Switch_3_Leds(0b000);
		}
		adc_data = ADCH;
    10e0:	85 b1       	in	r24, 0x05	; 5
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	90 93 81 03 	sts	0x0381, r25
    10e8:	80 93 80 03 	sts	0x0380, r24
		coefs_2[i] = (double) EVP_ALG_PERCENT * ADC_MAX_VALUE / adc_data;
    10ec:	60 91 80 03 	lds	r22, 0x0380
    10f0:	70 91 81 03 	lds	r23, 0x0381
    10f4:	88 27       	eor	r24, r24
    10f6:	77 fd       	sbrc	r23, 7
    10f8:	80 95       	com	r24
    10fa:	98 2f       	mov	r25, r24
    10fc:	0e 94 b1 12 	call	0x2562	; 0x2562 <__floatsisf>
    1100:	9b 01       	movw	r18, r22
    1102:	ac 01       	movw	r20, r24
    1104:	60 e0       	ldi	r22, 0x00	; 0
    1106:	70 ec       	ldi	r23, 0xC0	; 192
    1108:	8f ef       	ldi	r24, 0xFF	; 255
    110a:	93 e4       	ldi	r25, 0x43	; 67
    110c:	0e 94 75 11 	call	0x22ea	; 0x22ea <__divsf3>
    1110:	f6 01       	movw	r30, r12
    1112:	61 93       	st	Z+, r22
    1114:	71 93       	st	Z+, r23
    1116:	81 93       	st	Z+, r24
    1118:	91 93       	st	Z+, r25
    111a:	6f 01       	movw	r12, r30

		Lcd3310_UInt8AsText(count, WHITE_TEXT_ON_BLACK);
    111c:	80 91 13 01 	lds	r24, 0x0113
    1120:	61 e0       	ldi	r22, 0x01	; 1
    1122:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <Lcd3310_UInt8AsText>
		Lcd3310_Char(':', WHITE_TEXT_ON_BLACK);
    1126:	8a e3       	ldi	r24, 0x3A	; 58
    1128:	61 e0       	ldi	r22, 0x01	; 1
    112a:	0e 94 ce 09 	call	0x139c	; 0x139c <Lcd3310_Char>
		Lcd3310_UInt16AsText_3Chars((uint16_t)adc_data, WHITE_TEXT_ON_BLACK);
    112e:	80 91 80 03 	lds	r24, 0x0380
    1132:	90 91 81 03 	lds	r25, 0x0381
    1136:	61 e0       	ldi	r22, 0x01	; 1
    1138:	0e 94 5f 0c 	call	0x18be	; 0x18be <Lcd3310_UInt16AsText_3Chars>
    113c:	8a e0       	ldi	r24, 0x0A	; 10
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	e8 0e       	add	r14, r24
    1142:	f9 1e       	adc	r15, r25
{
	ADMUX = _BV(ADLAR) | _BV(MUX3) | _BV(MUX0); // 10 x diff


	Lcd3310_GotoXY(0, 0);
	for(uint8_t i=0; i<10; i++){
    1144:	95 e6       	ldi	r25, 0x65	; 101
    1146:	e9 16       	cp	r14, r25
    1148:	f1 04       	cpc	r15, r1
    114a:	09 f0       	breq	.+2      	; 0x114e <EvalCoefs_2+0x116>
    114c:	8b cf       	rjmp	.-234    	; 0x1064 <EvalCoefs_2+0x2c>
		//		PORTC &= (uint8_t)~_BV(PC3);
		//		if(count == 0xff){
		//			_delay_ms(2);
		//		}
	}
}
    114e:	df 91       	pop	r29
    1150:	cf 91       	pop	r28
    1152:	1f 91       	pop	r17
    1154:	ff 90       	pop	r15
    1156:	ef 90       	pop	r14
    1158:	df 90       	pop	r13
    115a:	cf 90       	pop	r12
    115c:	08 95       	ret

0000115e <__vector_2>:


//================================================//
//== 				Joystick click				==//
ISR(INT1_vect)
{
    115e:	1f 92       	push	r1
    1160:	0f 92       	push	r0
    1162:	0f b6       	in	r0, 0x3f	; 63
    1164:	0f 92       	push	r0
    1166:	11 24       	eor	r1, r1
    1168:	2f 93       	push	r18
    116a:	3f 93       	push	r19
    116c:	4f 93       	push	r20
    116e:	5f 93       	push	r21
    1170:	6f 93       	push	r22
    1172:	7f 93       	push	r23
    1174:	8f 93       	push	r24
    1176:	9f 93       	push	r25
    1178:	af 93       	push	r26
    117a:	bf 93       	push	r27
    117c:	ef 93       	push	r30
    117e:	ff 93       	push	r31
    1180:	80 e4       	ldi	r24, 0x40	; 64
    1182:	9f e1       	ldi	r25, 0x1F	; 31
    1184:	01 97       	sbiw	r24, 0x01	; 1
    1186:	f1 f7       	brne	.-4      	; 0x1184 <__vector_2+0x26>
#ifndef ANIMATION_SWITCH_MENU_ITEMS
	menu_before_now = 0x80;
#endif
	_delay_ms(2);	// anti brrrrzzzzrr

	GIFR = _BV(INTF1); // kill int1 flag
    1188:	80 e8       	ldi	r24, 0x80	; 128
    118a:	8a bf       	out	0x3a, r24	; 58

//	Lcd3310_ClearCenter();
//	Lcd3310_GotoXY(0, 0);

	while(1){
		uint8_t jpin_h = (JPIN & 0xf0);
    118c:	83 b3       	in	r24, 0x13	; 19
    118e:	80 7f       	andi	r24, 0xF0	; 240

		if( jpin_h == (uint8_t)(J_LU | J_RU) ){
    1190:	80 39       	cpi	r24, 0x90	; 144
    1192:	11 f4       	brne	.+4      	; 0x1198 <__vector_2+0x3a>
    1194:	82 e0       	ldi	r24, 0x02	; 2
    1196:	0f c0       	rjmp	.+30     	; 0x11b6 <__vector_2+0x58>
					break;
				}
			}
		}

		if( jpin_h == (uint8_t)(J_LD | J_RD) ){
    1198:	80 36       	cpi	r24, 0x60	; 96
    119a:	11 f4       	brne	.+4      	; 0x11a0 <__vector_2+0x42>
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	0b c0       	rjmp	.+22     	; 0x11b6 <__vector_2+0x58>
					break;
				}
			}
		}

		if( jpin_h == (uint8_t)(J_LU | J_LD) ){
    11a0:	80 3c       	cpi	r24, 0xC0	; 192
    11a2:	11 f4       	brne	.+4      	; 0x11a8 <__vector_2+0x4a>
    11a4:	84 e0       	ldi	r24, 0x04	; 4
    11a6:	07 c0       	rjmp	.+14     	; 0x11b6 <__vector_2+0x58>
					break;
				}
			}

		}
		if( jpin_h == (uint8_t)(J_RU | J_RD) ){
    11a8:	80 33       	cpi	r24, 0x30	; 48
    11aa:	11 f4       	brne	.+4      	; 0x11b0 <__vector_2+0x52>
    11ac:	83 e0       	ldi	r24, 0x03	; 3
    11ae:	03 c0       	rjmp	.+6      	; 0x11b6 <__vector_2+0x58>
					break;
				}
			}

		}
		if( jpin_h == (uint8_t)(J_RU | J_LU | J_RD | J_LD) ){
    11b0:	80 3f       	cpi	r24, 0xF0	; 240
    11b2:	61 f7       	brne	.-40     	; 0x118c <__vector_2+0x2e>
    11b4:	80 e0       	ldi	r24, 0x00	; 0
				}
			}
		}
	}

	if (JOYSTICK_INT_CHECK()) { return; } // interrupt on brrzzzz then pulling up joystick, so not need to do smth
    11b6:	83 99       	sbic	0x10, 3	; 16
    11b8:	61 c0       	rjmp	.+194    	; 0x127c <__vector_2+0x11e>

	if (result == J_CENTER){
    11ba:	88 23       	and	r24, r24
    11bc:	69 f4       	brne	.+26     	; 0x11d8 <__vector_2+0x7a>
		FLAGS_SWITCH_ON(JOYSTICK_CENTER_CLICK_FLAG);
    11be:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    11c0:	f8 94       	cli
    11c2:	80 91 7b 03 	lds	r24, 0x037B
    11c6:	90 91 7c 03 	lds	r25, 0x037C
    11ca:	82 60       	ori	r24, 0x02	; 2
    11cc:	90 93 7c 03 	sts	0x037C, r25
    11d0:	80 93 7b 03 	sts	0x037B, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    11d4:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    11d6:	50 c0       	rjmp	.+160    	; 0x1278 <__vector_2+0x11a>

		ALG_Start();

	}else if(result == J_UP){
    11d8:	81 30       	cpi	r24, 0x01	; 1
    11da:	91 f4       	brne	.+36     	; 0x1200 <__vector_2+0xa2>
		menu_now = menu_now->prev;
    11dc:	e0 91 b9 03 	lds	r30, 0x03B9
    11e0:	f0 91 ba 03 	lds	r31, 0x03BA
    11e4:	87 81       	ldd	r24, Z+7	; 0x07
    11e6:	90 85       	ldd	r25, Z+8	; 0x08
    11e8:	90 93 ba 03 	sts	0x03BA, r25
    11ec:	80 93 b9 03 	sts	0x03B9, r24

#ifdef ANIMATION_SWITCH_MENU_ITEMS
		FLAGS_SWITCH_ON( ANIMATION_PREV_FLAG );
    11f0:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    11f2:	f8 94       	cli
    11f4:	80 91 7b 03 	lds	r24, 0x037B
    11f8:	90 91 7c 03 	lds	r25, 0x037C
    11fc:	88 60       	ori	r24, 0x08	; 8
    11fe:	13 c0       	rjmp	.+38     	; 0x1226 <__vector_2+0xc8>
#else
		menu_before_now--;
		FLAGS_SWITCH_ON( UPDATE_DISPLAY_FLAG );
#endif
	}else if(result == J_DOWN){
    1200:	82 30       	cpi	r24, 0x02	; 2
    1202:	b9 f4       	brne	.+46     	; 0x1232 <__vector_2+0xd4>
		menu_now = menu_now->next;
    1204:	e0 91 b9 03 	lds	r30, 0x03B9
    1208:	f0 91 ba 03 	lds	r31, 0x03BA
    120c:	85 81       	ldd	r24, Z+5	; 0x05
    120e:	96 81       	ldd	r25, Z+6	; 0x06
    1210:	90 93 ba 03 	sts	0x03BA, r25
    1214:	80 93 b9 03 	sts	0x03B9, r24

#ifdef ANIMATION_SWITCH_MENU_ITEMS
		FLAGS_SWITCH_ON( ANIMATION_NEXT_FLAG );
    1218:	2f b7       	in	r18, 0x3f	; 63
    121a:	f8 94       	cli
    121c:	80 91 7b 03 	lds	r24, 0x037B
    1220:	90 91 7c 03 	lds	r25, 0x037C
    1224:	84 60       	ori	r24, 0x04	; 4
    1226:	90 93 7c 03 	sts	0x037C, r25
    122a:	80 93 7b 03 	sts	0x037B, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    122e:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    1230:	25 c0       	rjmp	.+74     	; 0x127c <__vector_2+0x11e>
    1232:	20 91 7b 03 	lds	r18, 0x037B
    1236:	30 91 7c 03 	lds	r19, 0x037C
#else
		menu_before_now++;
		FLAGS_SWITCH_ON( UPDATE_DISPLAY_FLAG );
#endif
	}else if(result == J_LEFT){
    123a:	83 30       	cpi	r24, 0x03	; 3
    123c:	81 f4       	brne	.+32     	; 0x125e <__vector_2+0x100>
		IF_FLAG_ON( SNAKE_PLAYING_NOW_FLAG ){
    123e:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1240:	f8 94       	cli
    1242:	30 93 7e 03 	sts	0x037E, r19
    1246:	20 93 7d 03 	sts	0x037D, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    124a:	8f bf       	out	0x3f, r24	; 63
    124c:	80 91 7d 03 	lds	r24, 0x037D
    1250:	87 ff       	sbrs	r24, 7
    1252:	02 c0       	rjmp	.+4      	; 0x1258 <__vector_2+0xfa>
			SnakeGame_TurnLeft();
    1254:	0e 94 44 02 	call	0x488	; 0x488 <SnakeGame_TurnLeft>
		}

		EvalCoefs_2();
    1258:	0e 94 1c 08 	call	0x1038	; 0x1038 <EvalCoefs_2>
    125c:	0f c0       	rjmp	.+30     	; 0x127c <__vector_2+0x11e>

	}else if(result == J_RIGHT){
		IF_FLAG_ON( SNAKE_PLAYING_NOW_FLAG ){
    125e:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1260:	f8 94       	cli
    1262:	30 93 7e 03 	sts	0x037E, r19
    1266:	20 93 7d 03 	sts	0x037D, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    126a:	8f bf       	out	0x3f, r24	; 63
    126c:	80 91 7d 03 	lds	r24, 0x037D
    1270:	87 ff       	sbrs	r24, 7
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <__vector_2+0x11a>
			SnakeGame_TurnRight();
    1274:	0e 94 4f 02 	call	0x49e	; 0x49e <SnakeGame_TurnRight>
		}

		ALG_Start();
    1278:	0e 94 89 07 	call	0xf12	; 0xf12 <ALG_Start>
	}

}
    127c:	ff 91       	pop	r31
    127e:	ef 91       	pop	r30
    1280:	bf 91       	pop	r27
    1282:	af 91       	pop	r26
    1284:	9f 91       	pop	r25
    1286:	8f 91       	pop	r24
    1288:	7f 91       	pop	r23
    128a:	6f 91       	pop	r22
    128c:	5f 91       	pop	r21
    128e:	4f 91       	pop	r20
    1290:	3f 91       	pop	r19
    1292:	2f 91       	pop	r18
    1294:	0f 90       	pop	r0
    1296:	0f be       	out	0x3f, r0	; 63
    1298:	0f 90       	pop	r0
    129a:	1f 90       	pop	r1
    129c:	18 95       	reti

0000129e <HalfByteAsASCII>:
#include "uint8_16_to_string.h"

char to_string_result[] = {0, 0, 0, 0};

char HalfByteAsASCII(char c)
{
    129e:	98 2f       	mov	r25, r24
    if (c >= 0 && c <= 9){
    12a0:	8a 30       	cpi	r24, 0x0A	; 10
    12a2:	10 f4       	brcc	.+4      	; 0x12a8 <HalfByteAsASCII+0xa>
        c += 0x30;
    12a4:	80 5d       	subi	r24, 0xD0	; 208
    12a6:	08 95       	ret
    }else if (c >= 0xA && c <= 0x0F){
    12a8:	8a 50       	subi	r24, 0x0A	; 10
    12aa:	86 30       	cpi	r24, 0x06	; 6
    12ac:	10 f0       	brcs	.+4      	; 0x12b2 <HalfByteAsASCII+0x14>
    12ae:	8f e3       	ldi	r24, 0x3F	; 63
    12b0:	08 95       	ret
        c += 0x37;
    12b2:	89 2f       	mov	r24, r25
    12b4:	89 5c       	subi	r24, 0xC9	; 201
    }else{
        c = '?';
    }
    return c;
}
    12b6:	08 95       	ret

000012b8 <UInt8ToString>:

void UInt8ToString(uint8_t ch)
{
    12b8:	28 2f       	mov	r18, r24
	to_string_result[0] = HalfByteAsASCII( (ch & 0xf0) >>4 );
    12ba:	98 2f       	mov	r25, r24
    12bc:	92 95       	swap	r25
    12be:	9f 70       	andi	r25, 0x0F	; 15

char to_string_result[] = {0, 0, 0, 0};

char HalfByteAsASCII(char c)
{
    if (c >= 0 && c <= 9){
    12c0:	9a 30       	cpi	r25, 0x0A	; 10
    12c2:	18 f4       	brcc	.+6      	; 0x12ca <UInt8ToString+0x12>
        c += 0x30;
    12c4:	89 2f       	mov	r24, r25
    12c6:	80 5d       	subi	r24, 0xD0	; 208
    12c8:	08 c0       	rjmp	.+16     	; 0x12da <UInt8ToString+0x22>
    }else if (c >= 0xA && c <= 0x0F){
    12ca:	89 2f       	mov	r24, r25
    12cc:	8a 50       	subi	r24, 0x0A	; 10
    12ce:	86 30       	cpi	r24, 0x06	; 6
    12d0:	10 f0       	brcs	.+4      	; 0x12d6 <UInt8ToString+0x1e>
    12d2:	8f e3       	ldi	r24, 0x3F	; 63
    12d4:	02 c0       	rjmp	.+4      	; 0x12da <UInt8ToString+0x22>
        c += 0x37;
    12d6:	89 2f       	mov	r24, r25
    12d8:	89 5c       	subi	r24, 0xC9	; 201
    return c;
}

void UInt8ToString(uint8_t ch)
{
	to_string_result[0] = HalfByteAsASCII( (ch & 0xf0) >>4 );
    12da:	80 93 85 03 	sts	0x0385, r24
	to_string_result[1] = HalfByteAsASCII( ch & 0x0f );
    12de:	92 2f       	mov	r25, r18
    12e0:	9f 70       	andi	r25, 0x0F	; 15

char to_string_result[] = {0, 0, 0, 0};

char HalfByteAsASCII(char c)
{
    if (c >= 0 && c <= 9){
    12e2:	9a 30       	cpi	r25, 0x0A	; 10
    12e4:	18 f4       	brcc	.+6      	; 0x12ec <UInt8ToString+0x34>
        c += 0x30;
    12e6:	89 2f       	mov	r24, r25
    12e8:	80 5d       	subi	r24, 0xD0	; 208
    12ea:	08 c0       	rjmp	.+16     	; 0x12fc <UInt8ToString+0x44>
    }else if (c >= 0xA && c <= 0x0F){
    12ec:	89 2f       	mov	r24, r25
    12ee:	8a 50       	subi	r24, 0x0A	; 10
    12f0:	86 30       	cpi	r24, 0x06	; 6
    12f2:	10 f0       	brcs	.+4      	; 0x12f8 <UInt8ToString+0x40>
    12f4:	8f e3       	ldi	r24, 0x3F	; 63
    12f6:	02 c0       	rjmp	.+4      	; 0x12fc <UInt8ToString+0x44>
        c += 0x37;
    12f8:	89 2f       	mov	r24, r25
    12fa:	89 5c       	subi	r24, 0xC9	; 201
}

void UInt8ToString(uint8_t ch)
{
	to_string_result[0] = HalfByteAsASCII( (ch & 0xf0) >>4 );
	to_string_result[1] = HalfByteAsASCII( ch & 0x0f );
    12fc:	80 93 86 03 	sts	0x0386, r24
	//to_string_result[2] = 0x00; // end of result string here
	// result in result_str
}
    1300:	08 95       	ret

00001302 <UInt16ToString>:

void UInt16ToString(uint16_t i)
{
    1302:	9c 01       	movw	r18, r24
	to_string_result[0] = HalfByteAsASCII( (i & 0xf000) >> 12 );
    1304:	93 2f       	mov	r25, r19
    1306:	92 95       	swap	r25
    1308:	9f 70       	andi	r25, 0x0F	; 15

char to_string_result[] = {0, 0, 0, 0};

char HalfByteAsASCII(char c)
{
    if (c >= 0 && c <= 9){
    130a:	9a 30       	cpi	r25, 0x0A	; 10
    130c:	18 f4       	brcc	.+6      	; 0x1314 <UInt16ToString+0x12>
        c += 0x30;
    130e:	89 2f       	mov	r24, r25
    1310:	80 5d       	subi	r24, 0xD0	; 208
    1312:	08 c0       	rjmp	.+16     	; 0x1324 <UInt16ToString+0x22>
    }else if (c >= 0xA && c <= 0x0F){
    1314:	89 2f       	mov	r24, r25
    1316:	8a 50       	subi	r24, 0x0A	; 10
    1318:	86 30       	cpi	r24, 0x06	; 6
    131a:	10 f0       	brcs	.+4      	; 0x1320 <UInt16ToString+0x1e>
    131c:	8f e3       	ldi	r24, 0x3F	; 63
    131e:	02 c0       	rjmp	.+4      	; 0x1324 <UInt16ToString+0x22>
        c += 0x37;
    1320:	89 2f       	mov	r24, r25
    1322:	89 5c       	subi	r24, 0xC9	; 201
	// result in result_str
}

void UInt16ToString(uint16_t i)
{
	to_string_result[0] = HalfByteAsASCII( (i & 0xf000) >> 12 );
    1324:	80 93 85 03 	sts	0x0385, r24
	to_string_result[1] = HalfByteAsASCII( (i & 0x0f00) >> 8  );
    1328:	c9 01       	movw	r24, r18
    132a:	80 70       	andi	r24, 0x00	; 0
    132c:	9f 70       	andi	r25, 0x0F	; 15

char to_string_result[] = {0, 0, 0, 0};

char HalfByteAsASCII(char c)
{
    if (c >= 0 && c <= 9){
    132e:	9a 30       	cpi	r25, 0x0A	; 10
    1330:	18 f4       	brcc	.+6      	; 0x1338 <UInt16ToString+0x36>
        c += 0x30;
    1332:	89 2f       	mov	r24, r25
    1334:	80 5d       	subi	r24, 0xD0	; 208
    1336:	08 c0       	rjmp	.+16     	; 0x1348 <UInt16ToString+0x46>
    }else if (c >= 0xA && c <= 0x0F){
    1338:	89 2f       	mov	r24, r25
    133a:	8a 50       	subi	r24, 0x0A	; 10
    133c:	86 30       	cpi	r24, 0x06	; 6
    133e:	10 f0       	brcs	.+4      	; 0x1344 <UInt16ToString+0x42>
    1340:	8f e3       	ldi	r24, 0x3F	; 63
    1342:	02 c0       	rjmp	.+4      	; 0x1348 <UInt16ToString+0x46>
        c += 0x37;
    1344:	89 2f       	mov	r24, r25
    1346:	89 5c       	subi	r24, 0xC9	; 201
}

void UInt16ToString(uint16_t i)
{
	to_string_result[0] = HalfByteAsASCII( (i & 0xf000) >> 12 );
	to_string_result[1] = HalfByteAsASCII( (i & 0x0f00) >> 8  );
    1348:	80 93 86 03 	sts	0x0386, r24
	to_string_result[2] = HalfByteAsASCII( (i & 0x00f0) >> 4  );
    134c:	c9 01       	movw	r24, r18
    134e:	80 7f       	andi	r24, 0xF0	; 240
    1350:	90 70       	andi	r25, 0x00	; 0
    1352:	34 e0       	ldi	r19, 0x04	; 4
    1354:	96 95       	lsr	r25
    1356:	87 95       	ror	r24
    1358:	3a 95       	dec	r19
    135a:	e1 f7       	brne	.-8      	; 0x1354 <UInt16ToString+0x52>
    135c:	98 2f       	mov	r25, r24

char to_string_result[] = {0, 0, 0, 0};

char HalfByteAsASCII(char c)
{
    if (c >= 0 && c <= 9){
    135e:	8a 30       	cpi	r24, 0x0A	; 10
    1360:	10 f4       	brcc	.+4      	; 0x1366 <UInt16ToString+0x64>
        c += 0x30;
    1362:	80 5d       	subi	r24, 0xD0	; 208
    1364:	07 c0       	rjmp	.+14     	; 0x1374 <UInt16ToString+0x72>
    }else if (c >= 0xA && c <= 0x0F){
    1366:	8a 50       	subi	r24, 0x0A	; 10
    1368:	86 30       	cpi	r24, 0x06	; 6
    136a:	10 f0       	brcs	.+4      	; 0x1370 <UInt16ToString+0x6e>
    136c:	8f e3       	ldi	r24, 0x3F	; 63
    136e:	02 c0       	rjmp	.+4      	; 0x1374 <UInt16ToString+0x72>
        c += 0x37;
    1370:	89 2f       	mov	r24, r25
    1372:	89 5c       	subi	r24, 0xC9	; 201

void UInt16ToString(uint16_t i)
{
	to_string_result[0] = HalfByteAsASCII( (i & 0xf000) >> 12 );
	to_string_result[1] = HalfByteAsASCII( (i & 0x0f00) >> 8  );
	to_string_result[2] = HalfByteAsASCII( (i & 0x00f0) >> 4  );
    1374:	80 93 87 03 	sts	0x0387, r24
	to_string_result[3] = HalfByteAsASCII(  i & 0x000f		);
    1378:	92 2f       	mov	r25, r18
    137a:	9f 70       	andi	r25, 0x0F	; 15

char to_string_result[] = {0, 0, 0, 0};

char HalfByteAsASCII(char c)
{
    if (c >= 0 && c <= 9){
    137c:	9a 30       	cpi	r25, 0x0A	; 10
    137e:	18 f4       	brcc	.+6      	; 0x1386 <UInt16ToString+0x84>
        c += 0x30;
    1380:	89 2f       	mov	r24, r25
    1382:	80 5d       	subi	r24, 0xD0	; 208
    1384:	08 c0       	rjmp	.+16     	; 0x1396 <UInt16ToString+0x94>
    }else if (c >= 0xA && c <= 0x0F){
    1386:	89 2f       	mov	r24, r25
    1388:	8a 50       	subi	r24, 0x0A	; 10
    138a:	86 30       	cpi	r24, 0x06	; 6
    138c:	10 f0       	brcs	.+4      	; 0x1392 <UInt16ToString+0x90>
    138e:	8f e3       	ldi	r24, 0x3F	; 63
    1390:	02 c0       	rjmp	.+4      	; 0x1396 <UInt16ToString+0x94>
        c += 0x37;
    1392:	89 2f       	mov	r24, r25
    1394:	89 5c       	subi	r24, 0xC9	; 201
void UInt16ToString(uint16_t i)
{
	to_string_result[0] = HalfByteAsASCII( (i & 0xf000) >> 12 );
	to_string_result[1] = HalfByteAsASCII( (i & 0x0f00) >> 8  );
	to_string_result[2] = HalfByteAsASCII( (i & 0x00f0) >> 4  );
	to_string_result[3] = HalfByteAsASCII(  i & 0x000f		);
    1396:	80 93 88 03 	sts	0x0388, r24
	// result in result_str
}
    139a:	08 95       	ret

0000139c <Lcd3310_Char>:

	_delay_ms(show_init_data_delay_ms); // show image from LcdCache initial value
}

void Lcd3310_Char(unsigned char ch, WhiteOrBlackText is_invert_colors)
{
    139c:	cf 93       	push	r28
    139e:	df 93       	push	r29
    13a0:	28 2f       	mov	r18, r24
    13a2:	36 2f       	mov	r19, r22
	//  Convert to a printable character.
    if ( (ch < 0x20) ){
    13a4:	80 32       	cpi	r24, 0x20	; 32
    13a6:	08 f4       	brcc	.+2      	; 0x13aa <Lcd3310_Char+0xe>
    13a8:	2c e5       	ldi	r18, 0x5C	; 92
        ch = 92;
    }
	
	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    13aa:	c0 91 89 03 	lds	r28, 0x0389
    13ae:	d0 91 8a 03 	lds	r29, 0x038A
    13b2:	ce 01       	movw	r24, r28
    13b4:	64 e5       	ldi	r22, 0x54	; 84
    13b6:	70 e0       	ldi	r23, 0x00	; 0
    13b8:	0e 94 32 16 	call	0x2c64	; 0x2c64 <__udivmodhi4>
    13bc:	80 68       	ori	r24, 0x80	; 128


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    13be:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    13c0:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    13c2:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    13c4:	77 9b       	sbis	0x0e, 7	; 14
    13c6:	fe cf       	rjmp	.-4      	; 0x13c4 <Lcd3310_Char+0x28>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    13c8:	c3 9a       	sbi	0x18, 3	; 24
    if ( (ch < 0x20) ){
        ch = 92;
    }
	
	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    Lcd3310_Send( 0x40 | (Lcd3310_Index / LCD_X_RES), LCD_CMD );
    13ca:	ce 01       	movw	r24, r28
    13cc:	64 e5       	ldi	r22, 0x54	; 84
    13ce:	70 e0       	ldi	r23, 0x00	; 0
    13d0:	0e 94 32 16 	call	0x2c64	; 0x2c64 <__udivmodhi4>
    13d4:	60 64       	ori	r22, 0x40	; 64


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    13d6:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    13d8:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    13da:	6f b9       	out	0x0f, r22	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    13dc:	77 9b       	sbis	0x0e, 7	; 14
    13de:	fe cf       	rjmp	.-4      	; 0x13dc <Lcd3310_Char+0x40>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    13e0:	c3 9a       	sbi	0x18, 3	; 24
	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    Lcd3310_Send( 0x40 | (Lcd3310_Index / LCD_X_RES), LCD_CMD );
	
	for (char i = 0; i < 5; i++ ){		
		char temp;
		PGM_GET_BYTE_FROM_FONTLOOKUP(temp, ch, i );
    13e2:	85 e0       	ldi	r24, 0x05	; 5
    13e4:	28 9f       	mul	r18, r24
    13e6:	c0 01       	movw	r24, r0
    13e8:	11 24       	eor	r1, r1
    13ea:	fc 01       	movw	r30, r24
    13ec:	ec 54       	subi	r30, 0x4C	; 76
    13ee:	f0 40       	sbci	r31, 0x00	; 0
    }
	
	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    Lcd3310_Send( 0x40 | (Lcd3310_Index / LCD_X_RES), LCD_CMD );
	
	for (char i = 0; i < 5; i++ ){		
    13f0:	87 54       	subi	r24, 0x47	; 71
    13f2:	90 40       	sbci	r25, 0x00	; 0
		char temp;
		PGM_GET_BYTE_FROM_FONTLOOKUP(temp, ch, i );
    13f4:	24 91       	lpm	r18, Z+
    13f6:	22 0f       	add	r18, r18
		if(is_invert_colors) temp = (unsigned char) ~temp;
    13f8:	31 11       	cpse	r19, r1
    13fa:	20 95       	com	r18


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    13fc:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    13fe:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    1400:	2f b9       	out	0x0f, r18	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1402:	77 9b       	sbis	0x0e, 7	; 14
    1404:	fe cf       	rjmp	.-4      	; 0x1402 <Lcd3310_Char+0x66>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1406:	c3 9a       	sbi	0x18, 3	; 24
    1408:	31 96       	adiw	r30, 0x01	; 1
    }
	
	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    Lcd3310_Send( 0x40 | (Lcd3310_Index / LCD_X_RES), LCD_CMD );
	
	for (char i = 0; i < 5; i++ ){		
    140a:	e8 17       	cp	r30, r24
    140c:	f9 07       	cpc	r31, r25
    140e:	91 f7       	brne	.-28     	; 0x13f4 <Lcd3310_Char+0x58>
		char temp;
		PGM_GET_BYTE_FROM_FONTLOOKUP(temp, ch, i );
		if(is_invert_colors) temp = (unsigned char) ~temp;
	    Lcd3310_Send( temp, LCD_DATA );
    }
	if(is_invert_colors) Lcd3310_Send( 0xff, LCD_DATA );
    1410:	33 23       	and	r19, r19
    1412:	39 f0       	breq	.+14     	; 0x1422 <Lcd3310_Char+0x86>


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1414:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    1416:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    1418:	8f ef       	ldi	r24, 0xFF	; 255
    141a:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    141c:	77 9b       	sbis	0x0e, 7	; 14
    141e:	fe cf       	rjmp	.-4      	; 0x141c <Lcd3310_Char+0x80>
    1420:	05 c0       	rjmp	.+10     	; 0x142c <Lcd3310_Char+0x90>


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1422:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    1424:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    1426:	1f b8       	out	0x0f, r1	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1428:	77 9b       	sbis	0x0e, 7	; 14
    142a:	fe cf       	rjmp	.-4      	; 0x1428 <Lcd3310_Char+0x8c>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    142c:	c3 9a       	sbi	0x18, 3	; 24
		if(is_invert_colors) temp = (unsigned char) ~temp;
	    Lcd3310_Send( temp, LCD_DATA );
    }
	if(is_invert_colors) Lcd3310_Send( 0xff, LCD_DATA );
	else Lcd3310_Send( 0x00, LCD_DATA );
	Lcd3310_Index += 6;
    142e:	26 96       	adiw	r28, 0x06	; 6
    1430:	d0 93 8a 03 	sts	0x038A, r29
    1434:	c0 93 89 03 	sts	0x0389, r28
}
    1438:	df 91       	pop	r29
    143a:	cf 91       	pop	r28
    143c:	08 95       	ret

0000143e <Lcd3310_String_P>:

void Lcd3310_String_P(PGM_P str_ptr, WhiteOrBlackText is_invert_colors)
{
    143e:	0f 93       	push	r16
    1440:	1f 93       	push	r17
    1442:	cf 93       	push	r28
    1444:	df 93       	push	r29
    1446:	08 2f       	mov	r16, r24
    1448:	16 2f       	mov	r17, r22
    144a:	28 2f       	mov	r18, r24
    144c:	39 2f       	mov	r19, r25
    144e:	e9 01       	movw	r28, r18
    1450:	04 c0       	rjmp	.+8      	; 0x145a <Lcd3310_String_P+0x1c>
	char count = 0;
    while ( *str_ptr ){
		count++;
        Lcd3310_Char( *(str_ptr++), is_invert_colors );
    1452:	21 96       	adiw	r28, 0x01	; 1
    1454:	61 2f       	mov	r22, r17
    1456:	0e 94 ce 09 	call	0x139c	; 0x139c <Lcd3310_Char>
    145a:	9e 01       	movw	r18, r28
    145c:	20 1b       	sub	r18, r16
    145e:	92 2f       	mov	r25, r18
}

void Lcd3310_String_P(PGM_P str_ptr, WhiteOrBlackText is_invert_colors)
{
	char count = 0;
    while ( *str_ptr ){
    1460:	88 81       	ld	r24, Y
    1462:	88 23       	and	r24, r24
    1464:	b1 f7       	brne	.-20     	; 0x1452 <Lcd3310_String_P+0x14>
		count++;
        Lcd3310_Char( *(str_ptr++), is_invert_colors );
    }
	if(is_invert_colors && count > 0 && count < 14){
    1466:	11 23       	and	r17, r17
    1468:	b9 f0       	breq	.+46     	; 0x1498 <Lcd3310_String_P+0x5a>
    146a:	22 23       	and	r18, r18
    146c:	a9 f0       	breq	.+42     	; 0x1498 <Lcd3310_String_P+0x5a>
    146e:	2e 30       	cpi	r18, 0x0E	; 14
    1470:	98 f4       	brcc	.+38     	; 0x1498 <Lcd3310_String_P+0x5a>
		for(count = (14 - count) * 6; count > 0; count--){
    1472:	2e e0       	ldi	r18, 0x0E	; 14
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	29 1b       	sub	r18, r25
    1478:	31 09       	sbc	r19, r1
    147a:	c9 01       	movw	r24, r18
    147c:	88 0f       	add	r24, r24
    147e:	99 1f       	adc	r25, r25
    1480:	82 0f       	add	r24, r18
    1482:	93 1f       	adc	r25, r19
    1484:	88 0f       	add	r24, r24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    1486:	9f ef       	ldi	r25, 0xFF	; 255


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1488:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    148a:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    148c:	9f b9       	out	0x0f, r25	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    148e:	77 9b       	sbis	0x0e, 7	; 14
    1490:	fe cf       	rjmp	.-4      	; 0x148e <Lcd3310_String_P+0x50>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1492:	c3 9a       	sbi	0x18, 3	; 24
    while ( *str_ptr ){
		count++;
        Lcd3310_Char( *(str_ptr++), is_invert_colors );
    }
	if(is_invert_colors && count > 0 && count < 14){
		for(count = (14 - count) * 6; count > 0; count--){
    1494:	81 50       	subi	r24, 0x01	; 1
    1496:	c1 f7       	brne	.-16     	; 0x1488 <Lcd3310_String_P+0x4a>
			Lcd3310_Send( 0xff, LCD_DATA );
		}
	}
}
    1498:	df 91       	pop	r29
    149a:	cf 91       	pop	r28
    149c:	1f 91       	pop	r17
    149e:	0f 91       	pop	r16
    14a0:	08 95       	ret

000014a2 <Lcd3310_String_P_anime>:

#ifdef ANIMATION_SWITCH_MENU_ITEMS
void Lcd3310_String_P_anime(PGM_P str_ptr, PGM_P str_ptr_next, WhiteOrBlackText is_invert_colors, char num_of_cadr, char is_next)
{
    14a2:	5f 92       	push	r5
    14a4:	6f 92       	push	r6
    14a6:	7f 92       	push	r7
    14a8:	8f 92       	push	r8
    14aa:	9f 92       	push	r9
    14ac:	af 92       	push	r10
    14ae:	bf 92       	push	r11
    14b0:	cf 92       	push	r12
    14b2:	df 92       	push	r13
    14b4:	ef 92       	push	r14
    14b6:	ff 92       	push	r15
    14b8:	0f 93       	push	r16
    14ba:	1f 93       	push	r17
    14bc:	cf 93       	push	r28
    14be:	df 93       	push	r29
    14c0:	5c 01       	movw	r10, r24
    14c2:	6b 01       	movw	r12, r22
    14c4:	84 2e       	mov	r8, r20
    14c6:	70 2e       	mov	r7, r16
	unsigned char ch1 = 1, ch2 = 1, display, temp1, temp2, count = 0;

	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    14c8:	e0 91 89 03 	lds	r30, 0x0389
    14cc:	f0 91 8a 03 	lds	r31, 0x038A
    14d0:	cf 01       	movw	r24, r30
    14d2:	64 e5       	ldi	r22, 0x54	; 84
    14d4:	70 e0       	ldi	r23, 0x00	; 0
    14d6:	0e 94 32 16 	call	0x2c64	; 0x2c64 <__udivmodhi4>
    14da:	80 68       	ori	r24, 0x80	; 128


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    14dc:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    14de:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    14e0:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    14e2:	77 9b       	sbis	0x0e, 7	; 14
    14e4:	fe cf       	rjmp	.-4      	; 0x14e2 <Lcd3310_String_P_anime+0x40>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    14e6:	c3 9a       	sbi	0x18, 3	; 24
void Lcd3310_String_P_anime(PGM_P str_ptr, PGM_P str_ptr_next, WhiteOrBlackText is_invert_colors, char num_of_cadr, char is_next)
{
	unsigned char ch1 = 1, ch2 = 1, display, temp1, temp2, count = 0;

	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    Lcd3310_Send( 0x40 | (Lcd3310_Index / LCD_X_RES), LCD_CMD );
    14e8:	cf 01       	movw	r24, r30
    14ea:	64 e5       	ldi	r22, 0x54	; 84
    14ec:	70 e0       	ldi	r23, 0x00	; 0
    14ee:	0e 94 32 16 	call	0x2c64	; 0x2c64 <__udivmodhi4>
    14f2:	60 64       	ori	r22, 0x40	; 64


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    14f4:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    14f6:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    14f8:	6f b9       	out	0x0f, r22	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    14fa:	77 9b       	sbis	0x0e, 7	; 14
    14fc:	fe cf       	rjmp	.-4      	; 0x14fa <Lcd3310_String_P_anime+0x58>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    14fe:	c3 9a       	sbi	0x18, 3	; 24
    1500:	99 24       	eor	r9, r9

		for (char i = 0; i < 5; i++ ){		
			if(ch1) PGM_GET_BYTE_FROM_FONTLOOKUP(temp1, ch1, i )
			else temp1 = 0x00;

			if(ch2) PGM_GET_BYTE_FROM_FONTLOOKUP(temp2, ch2, i )
    1502:	65 e0       	ldi	r22, 0x05	; 5
    1504:	66 2e       	mov	r6, r22
    1506:	e2 2e       	mov	r14, r18
    1508:	ff 24       	eor	r15, r15
			else temp2 = 0x00;

			if(is_next) display = (temp1 >> num_of_cadr) | ( (temp2 << (8 - num_of_cadr)) );
			else 		display = (temp1 << num_of_cadr) | ( (temp2 >> (8 - num_of_cadr)) );
    150a:	08 e0       	ldi	r16, 0x08	; 8
    150c:	10 e0       	ldi	r17, 0x00	; 0
    150e:	0e 19       	sub	r16, r14
    1510:	1f 09       	sbc	r17, r15
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    1512:	55 24       	eor	r5, r5
    1514:	5a 94       	dec	r5

	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    Lcd3310_Send( 0x40 | (Lcd3310_Index / LCD_X_RES), LCD_CMD );
	
	while ( ch1 || ch2 ){
		count++;
    1516:	93 94       	inc	r9
		if(*str_ptr) ch1 = *(str_ptr++);
    1518:	f5 01       	movw	r30, r10
    151a:	40 81       	ld	r20, Z
    151c:	44 23       	and	r20, r20
    151e:	19 f0       	breq	.+6      	; 0x1526 <Lcd3310_String_P_anime+0x84>
    1520:	08 94       	sec
    1522:	a1 1c       	adc	r10, r1
    1524:	b1 1c       	adc	r11, r1
		else ch1 = 0x00;
		
		if(*str_ptr_next) ch2 = *(str_ptr_next++);
    1526:	f6 01       	movw	r30, r12
    1528:	20 81       	ld	r18, Z
    152a:	22 23       	and	r18, r18
    152c:	19 f0       	breq	.+6      	; 0x1534 <Lcd3310_String_P_anime+0x92>
    152e:	08 94       	sec
    1530:	c1 1c       	adc	r12, r1
    1532:	d1 1c       	adc	r13, r1

		for (char i = 0; i < 5; i++ ){		
			if(ch1) PGM_GET_BYTE_FROM_FONTLOOKUP(temp1, ch1, i )
			else temp1 = 0x00;

			if(ch2) PGM_GET_BYTE_FROM_FONTLOOKUP(temp2, ch2, i )
    1534:	26 9d       	mul	r18, r6
    1536:	c0 01       	movw	r24, r0
    1538:	11 24       	eor	r1, r1
    153a:	ec 01       	movw	r28, r24
    153c:	cc 54       	subi	r28, 0x4C	; 76
    153e:	d0 40       	sbci	r29, 0x00	; 0
    1540:	46 9d       	mul	r20, r6
    1542:	d0 01       	movw	r26, r0
    1544:	11 24       	eor	r1, r1
    1546:	ac 54       	subi	r26, 0x4C	; 76
    1548:	b0 40       	sbci	r27, 0x00	; 0
		else ch1 = 0x00;
		
		if(*str_ptr_next) ch2 = *(str_ptr_next++);
		else ch2 = 0x00;

		for (char i = 0; i < 5; i++ ){		
    154a:	87 54       	subi	r24, 0x47	; 71
    154c:	90 40       	sbci	r25, 0x00	; 0
			if(ch1) PGM_GET_BYTE_FROM_FONTLOOKUP(temp1, ch1, i )
    154e:	44 23       	and	r20, r20
    1550:	11 f4       	brne	.+4      	; 0x1556 <Lcd3310_String_P_anime+0xb4>
    1552:	50 e0       	ldi	r21, 0x00	; 0
    1554:	03 c0       	rjmp	.+6      	; 0x155c <Lcd3310_String_P_anime+0xba>
    1556:	fd 01       	movw	r30, r26
    1558:	54 91       	lpm	r21, Z+
    155a:	55 0f       	add	r21, r21
			else temp1 = 0x00;

			if(ch2) PGM_GET_BYTE_FROM_FONTLOOKUP(temp2, ch2, i )
    155c:	22 23       	and	r18, r18
    155e:	11 f4       	brne	.+4      	; 0x1564 <Lcd3310_String_P_anime+0xc2>
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	03 c0       	rjmp	.+6      	; 0x156a <Lcd3310_String_P_anime+0xc8>
    1564:	fe 01       	movw	r30, r28
    1566:	34 91       	lpm	r19, Z+
    1568:	33 0f       	add	r19, r19
    156a:	e3 2f       	mov	r30, r19
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	65 2f       	mov	r22, r21
    1570:	70 e0       	ldi	r23, 0x00	; 0
			else temp2 = 0x00;

			if(is_next) display = (temp1 >> num_of_cadr) | ( (temp2 << (8 - num_of_cadr)) );
    1572:	77 20       	and	r7, r7
    1574:	69 f0       	breq	.+26     	; 0x1590 <Lcd3310_String_P_anime+0xee>
    1576:	00 2e       	mov	r0, r16
    1578:	02 c0       	rjmp	.+4      	; 0x157e <Lcd3310_String_P_anime+0xdc>
    157a:	ee 0f       	add	r30, r30
    157c:	ff 1f       	adc	r31, r31
    157e:	0a 94       	dec	r0
    1580:	e2 f7       	brpl	.-8      	; 0x157a <Lcd3310_String_P_anime+0xd8>
    1582:	0e 2c       	mov	r0, r14
    1584:	02 c0       	rjmp	.+4      	; 0x158a <Lcd3310_String_P_anime+0xe8>
    1586:	75 95       	asr	r23
    1588:	67 95       	ror	r22
    158a:	0a 94       	dec	r0
    158c:	e2 f7       	brpl	.-8      	; 0x1586 <Lcd3310_String_P_anime+0xe4>
    158e:	0c c0       	rjmp	.+24     	; 0x15a8 <Lcd3310_String_P_anime+0x106>
			else 		display = (temp1 << num_of_cadr) | ( (temp2 >> (8 - num_of_cadr)) );
    1590:	00 2e       	mov	r0, r16
    1592:	02 c0       	rjmp	.+4      	; 0x1598 <Lcd3310_String_P_anime+0xf6>
    1594:	f5 95       	asr	r31
    1596:	e7 95       	ror	r30
    1598:	0a 94       	dec	r0
    159a:	e2 f7       	brpl	.-8      	; 0x1594 <Lcd3310_String_P_anime+0xf2>
    159c:	0e 2c       	mov	r0, r14
    159e:	02 c0       	rjmp	.+4      	; 0x15a4 <Lcd3310_String_P_anime+0x102>
    15a0:	66 0f       	add	r22, r22
    15a2:	77 1f       	adc	r23, r23
    15a4:	0a 94       	dec	r0
    15a6:	e2 f7       	brpl	.-8      	; 0x15a0 <Lcd3310_String_P_anime+0xfe>
    15a8:	3e 2f       	mov	r19, r30
    15aa:	36 2b       	or	r19, r22
			if(is_invert_colors) display = (unsigned char) ~display;
    15ac:	81 10       	cpse	r8, r1
    15ae:	30 95       	com	r19


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    15b0:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    15b2:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    15b4:	3f b9       	out	0x0f, r19	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    15b6:	77 9b       	sbis	0x0e, 7	; 14
    15b8:	fe cf       	rjmp	.-4      	; 0x15b6 <Lcd3310_String_P_anime+0x114>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    15ba:	c3 9a       	sbi	0x18, 3	; 24
    15bc:	21 96       	adiw	r28, 0x01	; 1
    15be:	11 96       	adiw	r26, 0x01	; 1
		else ch1 = 0x00;
		
		if(*str_ptr_next) ch2 = *(str_ptr_next++);
		else ch2 = 0x00;

		for (char i = 0; i < 5; i++ ){		
    15c0:	c8 17       	cp	r28, r24
    15c2:	d9 07       	cpc	r29, r25
    15c4:	09 f0       	breq	.+2      	; 0x15c8 <Lcd3310_String_P_anime+0x126>
    15c6:	c3 cf       	rjmp	.-122    	; 0x154e <Lcd3310_String_P_anime+0xac>
			if(is_next) display = (temp1 >> num_of_cadr) | ( (temp2 << (8 - num_of_cadr)) );
			else 		display = (temp1 << num_of_cadr) | ( (temp2 >> (8 - num_of_cadr)) );
			if(is_invert_colors) display = (unsigned char) ~display;
		    Lcd3310_Send( display, LCD_DATA );
	    }
		if(is_invert_colors) Lcd3310_Send( 0xff, LCD_DATA );
    15c8:	88 20       	and	r8, r8
    15ca:	31 f0       	breq	.+12     	; 0x15d8 <Lcd3310_String_P_anime+0x136>


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    15cc:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    15ce:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    15d0:	5f b8       	out	0x0f, r5	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    15d2:	77 9b       	sbis	0x0e, 7	; 14
    15d4:	fe cf       	rjmp	.-4      	; 0x15d2 <Lcd3310_String_P_anime+0x130>
    15d6:	05 c0       	rjmp	.+10     	; 0x15e2 <Lcd3310_String_P_anime+0x140>


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    15d8:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    15da:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    15dc:	1f b8       	out	0x0f, r1	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    15de:	77 9b       	sbis	0x0e, 7	; 14
    15e0:	fe cf       	rjmp	.-4      	; 0x15de <Lcd3310_String_P_anime+0x13c>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    15e2:	c3 9a       	sbi	0x18, 3	; 24
	unsigned char ch1 = 1, ch2 = 1, display, temp1, temp2, count = 0;

	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    Lcd3310_Send( 0x40 | (Lcd3310_Index / LCD_X_RES), LCD_CMD );
	
	while ( ch1 || ch2 ){
    15e4:	44 23       	and	r20, r20
    15e6:	09 f0       	breq	.+2      	; 0x15ea <Lcd3310_String_P_anime+0x148>
    15e8:	96 cf       	rjmp	.-212    	; 0x1516 <Lcd3310_String_P_anime+0x74>
    15ea:	22 23       	and	r18, r18
    15ec:	09 f0       	breq	.+2      	; 0x15f0 <Lcd3310_String_P_anime+0x14e>
    15ee:	93 cf       	rjmp	.-218    	; 0x1516 <Lcd3310_String_P_anime+0x74>
		    Lcd3310_Send( display, LCD_DATA );
	    }
		if(is_invert_colors) Lcd3310_Send( 0xff, LCD_DATA );
		else Lcd3310_Send( 0x00, LCD_DATA );
	}
	if(is_invert_colors && (count < 14)){
    15f0:	88 20       	and	r8, r8
    15f2:	b1 f0       	breq	.+44     	; 0x1620 <Lcd3310_String_P_anime+0x17e>
    15f4:	fd e0       	ldi	r31, 0x0D	; 13
    15f6:	f9 15       	cp	r31, r9
    15f8:	98 f0       	brcs	.+38     	; 0x1620 <Lcd3310_String_P_anime+0x17e>
		for(count = (14 - count) * 6; count > 0; count--){
    15fa:	2e e0       	ldi	r18, 0x0E	; 14
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	29 19       	sub	r18, r9
    1600:	31 09       	sbc	r19, r1
    1602:	c9 01       	movw	r24, r18
    1604:	88 0f       	add	r24, r24
    1606:	99 1f       	adc	r25, r25
    1608:	82 0f       	add	r24, r18
    160a:	93 1f       	adc	r25, r19
    160c:	88 0f       	add	r24, r24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    160e:	9f ef       	ldi	r25, 0xFF	; 255


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1610:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    1612:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    1614:	9f b9       	out	0x0f, r25	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1616:	77 9b       	sbis	0x0e, 7	; 14
    1618:	fe cf       	rjmp	.-4      	; 0x1616 <Lcd3310_String_P_anime+0x174>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    161a:	c3 9a       	sbi	0x18, 3	; 24
	    }
		if(is_invert_colors) Lcd3310_Send( 0xff, LCD_DATA );
		else Lcd3310_Send( 0x00, LCD_DATA );
	}
	if(is_invert_colors && (count < 14)){
		for(count = (14 - count) * 6; count > 0; count--){
    161c:	81 50       	subi	r24, 0x01	; 1
    161e:	c1 f7       	brne	.-16     	; 0x1610 <Lcd3310_String_P_anime+0x16e>
			Lcd3310_Send( 0xff, LCD_DATA );
		}
	}
}
    1620:	df 91       	pop	r29
    1622:	cf 91       	pop	r28
    1624:	1f 91       	pop	r17
    1626:	0f 91       	pop	r16
    1628:	ff 90       	pop	r15
    162a:	ef 90       	pop	r14
    162c:	df 90       	pop	r13
    162e:	cf 90       	pop	r12
    1630:	bf 90       	pop	r11
    1632:	af 90       	pop	r10
    1634:	9f 90       	pop	r9
    1636:	8f 90       	pop	r8
    1638:	7f 90       	pop	r7
    163a:	6f 90       	pop	r6
    163c:	5f 90       	pop	r5
    163e:	08 95       	ret

00001640 <Lcd3310_GotoXY>:
#endif

void Lcd3310_GotoXY(uint16_t x, uint16_t y)
{
    Lcd3310_Index = (uint16_t)x * 6 + (uint16_t)y * 84;
    1640:	24 e5       	ldi	r18, 0x54	; 84
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	62 9f       	mul	r22, r18
    1646:	a0 01       	movw	r20, r0
    1648:	63 9f       	mul	r22, r19
    164a:	50 0d       	add	r21, r0
    164c:	72 9f       	mul	r23, r18
    164e:	50 0d       	add	r21, r0
    1650:	11 24       	eor	r1, r1
    1652:	9c 01       	movw	r18, r24
    1654:	22 0f       	add	r18, r18
    1656:	33 1f       	adc	r19, r19
    1658:	28 0f       	add	r18, r24
    165a:	39 1f       	adc	r19, r25
    165c:	22 0f       	add	r18, r18
    165e:	33 1f       	adc	r19, r19
    1660:	42 0f       	add	r20, r18
    1662:	53 1f       	adc	r21, r19
    1664:	50 93 8a 03 	sts	0x038A, r21
    1668:	40 93 89 03 	sts	0x0389, r20
}
    166c:	08 95       	ret

0000166e <Lcd3310_ClearCenter>:


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    166e:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    1670:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    1672:	80 e8       	ldi	r24, 0x80	; 128
    1674:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1676:	77 9b       	sbis	0x0e, 7	; 14
    1678:	fe cf       	rjmp	.-4      	; 0x1676 <Lcd3310_ClearCenter+0x8>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    167a:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    167c:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    167e:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    1680:	81 e4       	ldi	r24, 0x41	; 65
    1682:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1684:	77 9b       	sbis	0x0e, 7	; 14
    1686:	fe cf       	rjmp	.-4      	; 0x1684 <Lcd3310_ClearCenter+0x16>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1688:	c3 9a       	sbi	0x18, 3	; 24
    168a:	80 e0       	ldi	r24, 0x00	; 0
    168c:	90 e0       	ldi	r25, 0x00	; 0


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    168e:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    1690:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    1692:	1f b8       	out	0x0f, r1	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1694:	77 9b       	sbis	0x0e, 7	; 14
    1696:	fe cf       	rjmp	.-4      	; 0x1694 <Lcd3310_ClearCenter+0x26>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1698:	c3 9a       	sbi	0x18, 3	; 24
void Lcd3310_ClearCenter(void)
{
#ifdef LCD_IMAGES //  clear only center lines
	Lcd3310_Send( 0x80 | (84 % LCD_X_RES), LCD_CMD );
    Lcd3310_Send( 0x40 | (84 / LCD_X_RES), LCD_CMD );
	for(uint16_t i=0; i < LCD_CENTER_RES; i++){
    169a:	01 96       	adiw	r24, 0x01	; 1
    169c:	21 e0       	ldi	r18, 0x01	; 1
    169e:	84 3a       	cpi	r24, 0xA4	; 164
    16a0:	92 07       	cpc	r25, r18
    16a2:	a9 f7       	brne	.-22     	; 0x168e <Lcd3310_ClearCenter+0x20>
	Lcd3310_Send( 0x40, LCD_CMD );
	for(uint16_t i=0; i < LCD_XY_RES; i++){
		Lcd3310_Send( 0x00, LCD_DATA );
	}
#endif
}
    16a4:	08 95       	ret

000016a6 <Lcd3310_InitFill>:


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    16a6:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    16a8:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    16aa:	80 e8       	ldi	r24, 0x80	; 128
    16ac:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    16ae:	77 9b       	sbis	0x0e, 7	; 14
    16b0:	fe cf       	rjmp	.-4      	; 0x16ae <Lcd3310_InitFill+0x8>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    16b2:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    16b4:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    16b6:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    16b8:	80 e4       	ldi	r24, 0x40	; 64
    16ba:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    16bc:	77 9b       	sbis	0x0e, 7	; 14
    16be:	fe cf       	rjmp	.-4      	; 0x16bc <Lcd3310_InitFill+0x16>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    16c0:	c3 9a       	sbi	0x18, 3	; 24
    16c2:	eb e1       	ldi	r30, 0x1B	; 27
    16c4:	f2 e0       	ldi	r31, 0x02	; 2
	// Goto (0, 0) of display
	Lcd3310_Send( 0x80, LCD_CMD );
    Lcd3310_Send( 0x40, LCD_CMD );

	for (int i = 0; i < 84; i++ ){
        Lcd3310_Send( pgm_read_byte( LcdImage_Upper + i ), LCD_DATA );
    16c6:	84 91       	lpm	r24, Z+


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    16c8:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    16ca:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    16cc:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    16ce:	77 9b       	sbis	0x0e, 7	; 14
    16d0:	fe cf       	rjmp	.-4      	; 0x16ce <Lcd3310_InitFill+0x28>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    16d2:	c3 9a       	sbi	0x18, 3	; 24
    16d4:	31 96       	adiw	r30, 0x01	; 1
#ifdef LCD_IMAGES
	// Goto (0, 0) of display
	Lcd3310_Send( 0x80, LCD_CMD );
    Lcd3310_Send( 0x40, LCD_CMD );

	for (int i = 0; i < 84; i++ ){
    16d6:	82 e0       	ldi	r24, 0x02	; 2
    16d8:	ef 36       	cpi	r30, 0x6F	; 111
    16da:	f8 07       	cpc	r31, r24
    16dc:	a1 f7       	brne	.-24     	; 0x16c6 <Lcd3310_InitFill+0x20>
    16de:	ef e6       	ldi	r30, 0x6F	; 111
    16e0:	f2 e0       	ldi	r31, 0x02	; 2
        Lcd3310_Send( pgm_read_byte( LcdImage_Upper + i ), LCD_DATA );
    }	
	for (uint16_t i=0; i < LCD_CENTER_RES; i++ ){
        Lcd3310_Send( pgm_read_byte( LcdImage_Center + i), LCD_DATA );
    16e2:	84 91       	lpm	r24, Z+


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    16e4:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    16e6:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    16e8:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    16ea:	77 9b       	sbis	0x0e, 7	; 14
    16ec:	fe cf       	rjmp	.-4      	; 0x16ea <Lcd3310_InitFill+0x44>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    16ee:	c3 9a       	sbi	0x18, 3	; 24
    16f0:	31 96       	adiw	r30, 0x01	; 1
    Lcd3310_Send( 0x40, LCD_CMD );

	for (int i = 0; i < 84; i++ ){
        Lcd3310_Send( pgm_read_byte( LcdImage_Upper + i ), LCD_DATA );
    }	
	for (uint16_t i=0; i < LCD_CENTER_RES; i++ ){
    16f2:	84 e0       	ldi	r24, 0x04	; 4
    16f4:	e3 31       	cpi	r30, 0x13	; 19
    16f6:	f8 07       	cpc	r31, r24
    16f8:	a1 f7       	brne	.-24     	; 0x16e2 <Lcd3310_InitFill+0x3c>
    16fa:	ef eb       	ldi	r30, 0xBF	; 191
    16fc:	f3 e0       	ldi	r31, 0x03	; 3
        Lcd3310_Send( pgm_read_byte( LcdImage_Center + i), LCD_DATA );
	}
    for (int i = 0; i < 84; i++ ){
        Lcd3310_Send( pgm_read_byte( LcdImage_brunql_gmail_com + i), LCD_DATA );
    16fe:	84 91       	lpm	r24, Z+


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1700:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    1702:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    1704:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1706:	77 9b       	sbis	0x0e, 7	; 14
    1708:	fe cf       	rjmp	.-4      	; 0x1706 <Lcd3310_InitFill+0x60>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    170a:	c3 9a       	sbi	0x18, 3	; 24
    170c:	31 96       	adiw	r30, 0x01	; 1
        Lcd3310_Send( pgm_read_byte( LcdImage_Upper + i ), LCD_DATA );
    }	
	for (uint16_t i=0; i < LCD_CENTER_RES; i++ ){
        Lcd3310_Send( pgm_read_byte( LcdImage_Center + i), LCD_DATA );
	}
    for (int i = 0; i < 84; i++ ){
    170e:	84 e0       	ldi	r24, 0x04	; 4
    1710:	e3 31       	cpi	r30, 0x13	; 19
    1712:	f8 07       	cpc	r31, r24
    1714:	a1 f7       	brne	.-24     	; 0x16fe <Lcd3310_InitFill+0x58>
        Lcd3310_Send( pgm_read_byte( LcdImage_brunql_gmail_com + i), LCD_DATA );
    }
#else
    Lcd3310_ClearCenter();
#endif
}
    1716:	08 95       	ret

00001718 <Lcd3310_Init>:
void Lcd3310_InitFill (void);



void Lcd3310_Init(uint16_t show_init_data_delay_ms)
{
    1718:	af 92       	push	r10
    171a:	bf 92       	push	r11
    171c:	cf 92       	push	r12
    171e:	df 92       	push	r13
    1720:	ef 92       	push	r14
    1722:	ff 92       	push	r15
    1724:	0f 93       	push	r16
    1726:	1f 93       	push	r17
    1728:	8c 01       	movw	r16, r24
	//  Pull-up on reset pin.
    PORTB |= LCD_RST_PIN;
    172a:	c2 9a       	sbi	0x18, 2	; 24

    //  Set output bits on port B.
    DDRB |= LCD_RST_PIN | LCD_DC_PIN | LCD_CE_PIN | SPI_MOSI_PIN | SPI_CLK_PIN;
    172c:	87 b3       	in	r24, 0x17	; 23
    172e:	8c 6b       	ori	r24, 0xBC	; 188
    1730:	87 bb       	out	0x17, r24	; 23
    1732:	84 ef       	ldi	r24, 0xF4	; 244
    1734:	91 e0       	ldi	r25, 0x01	; 1
    1736:	20 e9       	ldi	r18, 0x90	; 144
    1738:	31 e0       	ldi	r19, 0x01	; 1
    173a:	f9 01       	movw	r30, r18
    173c:	31 97       	sbiw	r30, 0x01	; 1
    173e:	f1 f7       	brne	.-4      	; 0x173c <Lcd3310_Init+0x24>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1740:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1742:	d9 f7       	brne	.-10     	; 0x173a <Lcd3310_Init+0x22>

    _delay_ms(50);

    //  Toggle display reset pin.
    PORTB &= (unsigned char)~LCD_RST_PIN;
    1744:	c2 98       	cbi	0x18, 2	; 24
    1746:	80 ea       	ldi	r24, 0xA0	; 160
    1748:	9f e0       	ldi	r25, 0x0F	; 15
    174a:	01 97       	sbiw	r24, 0x01	; 1
    174c:	f1 f7       	brne	.-4      	; 0x174a <Lcd3310_Init+0x32>
    _delay_ms(1);
    PORTB |= LCD_RST_PIN;
    174e:	c2 9a       	sbi	0x18, 2	; 24

    //  Enable SPI port: No interrupt, MSBit first, Master mode, CPOL->0, CPHA->0, Clk/4
    SPCR = 0x50;
    1750:	80 e5       	ldi	r24, 0x50	; 80
    1752:	8d b9       	out	0x0d, r24	; 13

    //  Disable LCD controller
    PORTB |= LCD_CE_PIN;
    1754:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1756:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    1758:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    175a:	81 e2       	ldi	r24, 0x21	; 33
    175c:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    175e:	77 9b       	sbis	0x0e, 7	; 14
    1760:	fe cf       	rjmp	.-4      	; 0x175e <Lcd3310_Init+0x46>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1762:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1764:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    1766:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    1768:	88 ec       	ldi	r24, 0xC8	; 200
    176a:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    176c:	77 9b       	sbis	0x0e, 7	; 14
    176e:	fe cf       	rjmp	.-4      	; 0x176c <Lcd3310_Init+0x54>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1770:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1772:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    1774:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    1776:	86 e0       	ldi	r24, 0x06	; 6
    1778:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    177a:	77 9b       	sbis	0x0e, 7	; 14
    177c:	fe cf       	rjmp	.-4      	; 0x177a <Lcd3310_Init+0x62>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    177e:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1780:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    1782:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    1784:	83 e1       	ldi	r24, 0x13	; 19
    1786:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1788:	77 9b       	sbis	0x0e, 7	; 14
    178a:	fe cf       	rjmp	.-4      	; 0x1788 <Lcd3310_Init+0x70>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    178c:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    178e:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    1790:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    1792:	80 e2       	ldi	r24, 0x20	; 32
    1794:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1796:	77 9b       	sbis	0x0e, 7	; 14
    1798:	fe cf       	rjmp	.-4      	; 0x1796 <Lcd3310_Init+0x7e>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    179a:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    179c:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    179e:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    17a0:	8c e0       	ldi	r24, 0x0C	; 12
    17a2:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    17a4:	77 9b       	sbis	0x0e, 7	; 14
    17a6:	fe cf       	rjmp	.-4      	; 0x17a4 <Lcd3310_Init+0x8c>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    17a8:	c3 9a       	sbi	0x18, 3	; 24
    Lcd3310_Send( 0x06, LCD_CMD );  // Set Temp coefficent.
    Lcd3310_Send( 0x13, LCD_CMD );  // LCD bias mode 1:48.
    Lcd3310_Send( 0x20, LCD_CMD );  // LCD Standard Commands, Horizontal addressing mode.
    Lcd3310_Send( 0x0C, LCD_CMD );  // LCD in normal mode.

	Lcd3310_InitFill();
    17aa:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <Lcd3310_InitFill>


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    17ae:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    17b0:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    17b2:	81 e2       	ldi	r24, 0x21	; 33
    17b4:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    17b6:	77 9b       	sbis	0x0e, 7	; 14
    17b8:	fe cf       	rjmp	.-4      	; 0x17b6 <Lcd3310_Init+0x9e>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    17ba:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    17bc:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    17be:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    17c0:	8e e9       	ldi	r24, 0x9E	; 158
    17c2:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    17c4:	77 9b       	sbis	0x0e, 7	; 14
    17c6:	fe cf       	rjmp	.-4      	; 0x17c4 <Lcd3310_Init+0xac>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    17c8:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    17ca:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    17cc:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    17ce:	80 e2       	ldi	r24, 0x20	; 32
    17d0:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    17d2:	77 9b       	sbis	0x0e, 7	; 14
    17d4:	fe cf       	rjmp	.-4      	; 0x17d2 <Lcd3310_Init+0xba>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    17d6:	c3 9a       	sbi	0x18, 3	; 24
    Lcd3310_Send( 0x80 | LCD_CONTRAST, LCD_CMD );

    //  LCD Standard Commands, horizontal addressing mode.
    Lcd3310_Send( 0x20, LCD_CMD );

	_delay_ms(show_init_data_delay_ms); // show image from LcdCache initial value
    17d8:	b8 01       	movw	r22, r16
    17da:	80 e0       	ldi	r24, 0x00	; 0
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	0e 94 63 13 	call	0x26c6	; 0x26c6 <__floatunsisf>
    17e2:	5b 01       	movw	r10, r22
    17e4:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17e6:	20 e0       	ldi	r18, 0x00	; 0
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	4a e7       	ldi	r20, 0x7A	; 122
    17ec:	55 e4       	ldi	r21, 0x45	; 69
    17ee:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <__mulsf3>
    17f2:	7b 01       	movw	r14, r22
    17f4:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    17f6:	20 e0       	ldi	r18, 0x00	; 0
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	40 e8       	ldi	r20, 0x80	; 128
    17fc:	5f e3       	ldi	r21, 0x3F	; 63
    17fe:	0e 94 81 12 	call	0x2502	; 0x2502 <__ltsf2>
    1802:	88 23       	and	r24, r24
    1804:	1c f4       	brge	.+6      	; 0x180c <Lcd3310_Init+0xf4>
    1806:	61 e0       	ldi	r22, 0x01	; 1
    1808:	70 e0       	ldi	r23, 0x00	; 0
    180a:	24 c0       	rjmp	.+72     	; 0x1854 <Lcd3310_Init+0x13c>
		__ticks = 1;
	else if (__tmp > 65535)
    180c:	c8 01       	movw	r24, r16
    180e:	b7 01       	movw	r22, r14
    1810:	20 e0       	ldi	r18, 0x00	; 0
    1812:	3f ef       	ldi	r19, 0xFF	; 255
    1814:	4f e7       	ldi	r20, 0x7F	; 127
    1816:	57 e4       	ldi	r21, 0x47	; 71
    1818:	0e 94 21 12 	call	0x2442	; 0x2442 <__gtsf2>
    181c:	18 16       	cp	r1, r24
    181e:	b4 f4       	brge	.+44     	; 0x184c <Lcd3310_Init+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1820:	c6 01       	movw	r24, r12
    1822:	b5 01       	movw	r22, r10
    1824:	20 e0       	ldi	r18, 0x00	; 0
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	40 e2       	ldi	r20, 0x20	; 32
    182a:	51 e4       	ldi	r21, 0x41	; 65
    182c:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <__mulsf3>
    1830:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <__fixunssfsi>
    1834:	80 e9       	ldi	r24, 0x90	; 144
    1836:	91 e0       	ldi	r25, 0x01	; 1
    1838:	05 c0       	rjmp	.+10     	; 0x1844 <Lcd3310_Init+0x12c>
    183a:	fc 01       	movw	r30, r24
    183c:	31 97       	sbiw	r30, 0x01	; 1
    183e:	f1 f7       	brne	.-4      	; 0x183c <Lcd3310_Init+0x124>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1840:	61 50       	subi	r22, 0x01	; 1
    1842:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1844:	61 15       	cp	r22, r1
    1846:	71 05       	cpc	r23, r1
    1848:	c1 f7       	brne	.-16     	; 0x183a <Lcd3310_Init+0x122>
    184a:	07 c0       	rjmp	.+14     	; 0x185a <Lcd3310_Init+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    184c:	c8 01       	movw	r24, r16
    184e:	b7 01       	movw	r22, r14
    1850:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <__fixunssfsi>
    1854:	cb 01       	movw	r24, r22
    1856:	01 97       	sbiw	r24, 0x01	; 1
    1858:	f1 f7       	brne	.-4      	; 0x1856 <Lcd3310_Init+0x13e>
}
    185a:	1f 91       	pop	r17
    185c:	0f 91       	pop	r16
    185e:	ff 90       	pop	r15
    1860:	ef 90       	pop	r14
    1862:	df 90       	pop	r13
    1864:	cf 90       	pop	r12
    1866:	bf 90       	pop	r11
    1868:	af 90       	pop	r10
    186a:	08 95       	ret

0000186c <Lcd3310_Send>:


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    186c:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    186e:	61 30       	cpi	r22, 0x01	; 1
    1870:	11 f4       	brne	.+4      	; 0x1876 <Lcd3310_Send+0xa>
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    1872:	c4 9a       	sbi	0x18, 4	; 24
    1874:	01 c0       	rjmp	.+2      	; 0x1878 <Lcd3310_Send+0xc>
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    1876:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    1878:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    187a:	77 9b       	sbis	0x0e, 7	; 14
    187c:	fe cf       	rjmp	.-4      	; 0x187a <Lcd3310_Send+0xe>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    187e:	c3 9a       	sbi	0x18, 3	; 24
}
    1880:	08 95       	ret

00001882 <Lcd3310_UInt16AsText>:
	}
	Lcd3310_Char( ' ', is_invert_colors );
}

void Lcd3310_UInt16AsText(uint16_t i, WhiteOrBlackText is_invert_colors)
{
    1882:	1f 93       	push	r17
    1884:	16 2f       	mov	r17, r22
	UInt16ToString( i );
    1886:	0e 94 81 09 	call	0x1302	; 0x1302 <UInt16ToString>
	// show three numbers and space
	for(uint8_t count=0; count < 4; count++){ // 4 chars
			Lcd3310_Char( to_string_result[count], is_invert_colors );
    188a:	80 91 85 03 	lds	r24, 0x0385
    188e:	61 2f       	mov	r22, r17
    1890:	0e 94 ce 09 	call	0x139c	; 0x139c <Lcd3310_Char>
    1894:	80 91 86 03 	lds	r24, 0x0386
    1898:	61 2f       	mov	r22, r17
    189a:	0e 94 ce 09 	call	0x139c	; 0x139c <Lcd3310_Char>
    189e:	80 91 87 03 	lds	r24, 0x0387
    18a2:	61 2f       	mov	r22, r17
    18a4:	0e 94 ce 09 	call	0x139c	; 0x139c <Lcd3310_Char>
    18a8:	80 91 88 03 	lds	r24, 0x0388
    18ac:	61 2f       	mov	r22, r17
    18ae:	0e 94 ce 09 	call	0x139c	; 0x139c <Lcd3310_Char>
	}
	Lcd3310_Char( ' ', is_invert_colors );
    18b2:	80 e2       	ldi	r24, 0x20	; 32
    18b4:	61 2f       	mov	r22, r17
    18b6:	0e 94 ce 09 	call	0x139c	; 0x139c <Lcd3310_Char>
}
    18ba:	1f 91       	pop	r17
    18bc:	08 95       	ret

000018be <Lcd3310_UInt16AsText_3Chars>:
		Lcd3310_Char( to_string_result[count], is_invert_colors );
	}
}

void Lcd3310_UInt16AsText_3Chars(uint16_t i, WhiteOrBlackText is_invert_colors)
{
    18be:	1f 93       	push	r17
    18c0:	16 2f       	mov	r17, r22
	UInt16ToString( i );
    18c2:	0e 94 81 09 	call	0x1302	; 0x1302 <UInt16ToString>
	// show three numbers and space
	for(uint8_t count=1; count < 4; count++){ // 0x03ff - max value, show only '3ff'
			Lcd3310_Char( to_string_result[count], is_invert_colors );
    18c6:	80 91 86 03 	lds	r24, 0x0386
    18ca:	61 2f       	mov	r22, r17
    18cc:	0e 94 ce 09 	call	0x139c	; 0x139c <Lcd3310_Char>
    18d0:	80 91 87 03 	lds	r24, 0x0387
    18d4:	61 2f       	mov	r22, r17
    18d6:	0e 94 ce 09 	call	0x139c	; 0x139c <Lcd3310_Char>
    18da:	80 91 88 03 	lds	r24, 0x0388
    18de:	61 2f       	mov	r22, r17
    18e0:	0e 94 ce 09 	call	0x139c	; 0x139c <Lcd3310_Char>
	}
	Lcd3310_Char( ' ', is_invert_colors );
    18e4:	80 e2       	ldi	r24, 0x20	; 32
    18e6:	61 2f       	mov	r22, r17
    18e8:	0e 94 ce 09 	call	0x139c	; 0x139c <Lcd3310_Char>
}
    18ec:	1f 91       	pop	r17
    18ee:	08 95       	ret

000018f0 <Lcd3310_UInt8AsText>:




void Lcd3310_UInt8AsText(uint8_t ch, WhiteOrBlackText is_invert_colors)
{
    18f0:	1f 93       	push	r17
    18f2:	16 2f       	mov	r17, r22
	UInt8ToString( ch );
    18f4:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <UInt8ToString>
	for(uint8_t count=0; count < 2; count++){
		Lcd3310_Char( to_string_result[count], is_invert_colors );
    18f8:	80 91 85 03 	lds	r24, 0x0385
    18fc:	61 2f       	mov	r22, r17
    18fe:	0e 94 ce 09 	call	0x139c	; 0x139c <Lcd3310_Char>
    1902:	80 91 86 03 	lds	r24, 0x0386
    1906:	61 2f       	mov	r22, r17
    1908:	0e 94 ce 09 	call	0x139c	; 0x139c <Lcd3310_Char>
	}
}
    190c:	1f 91       	pop	r17
    190e:	08 95       	ret

00001910 <init_menu_now>:



void init_menu_now(void)
{
	menu_now = &go;
    1910:	86 e3       	ldi	r24, 0x36	; 54
    1912:	91 e0       	ldi	r25, 0x01	; 1
    1914:	90 93 ba 03 	sts	0x03BA, r25
    1918:	80 93 b9 03 	sts	0x03B9, r24
}
    191c:	08 95       	ret

0000191e <Lcd3310_UpdateDisplayInfo>:
}
#endif


void Lcd3310_UpdateDisplayInfo(void)
{
    191e:	ef 92       	push	r14
    1920:	ff 92       	push	r15
    1922:	0f 93       	push	r16
    1924:	1f 93       	push	r17
    1926:	cf 93       	push	r28
    1928:	df 93       	push	r29
    uint8_t number_of_elements_in_menu_now = 1;
    
	Lcd3310_ClearCenter();
    192a:	0e 94 37 0b 	call	0x166e	; 0x166e <Lcd3310_ClearCenter>
	
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { menu_now_atomic = menu_now; }
    192e:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1930:	f8 94       	cli
    1932:	80 91 b9 03 	lds	r24, 0x03B9
    1936:	90 91 ba 03 	lds	r25, 0x03BA
    193a:	90 93 b8 03 	sts	0x03B8, r25
    193e:	80 93 b7 03 	sts	0x03B7, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1942:	2f bf       	out	0x3f, r18	; 63

	struct menu_item *menu_temp = menu_now_atomic->next;
    1944:	e0 91 b7 03 	lds	r30, 0x03B7
    1948:	f0 91 b8 03 	lds	r31, 0x03B8
    194c:	c5 81       	ldd	r28, Z+5	; 0x05
    194e:	d6 81       	ldd	r29, Z+6	; 0x06
    1950:	ff 24       	eor	r15, r15
    1952:	f3 94       	inc	r15
    1954:	04 c0       	rjmp	.+8      	; 0x195e <Lcd3310_UpdateDisplayInfo+0x40>
	while( menu_temp != menu_now_atomic ){
		number_of_elements_in_menu_now++;
    1956:	f3 94       	inc	r15
		menu_temp = menu_temp->next;
    1958:	0d 80       	ldd	r0, Y+5	; 0x05
    195a:	de 81       	ldd	r29, Y+6	; 0x06
    195c:	c0 2d       	mov	r28, r0
	Lcd3310_ClearCenter();
	
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { menu_now_atomic = menu_now; }

	struct menu_item *menu_temp = menu_now_atomic->next;
	while( menu_temp != menu_now_atomic ){
    195e:	ce 17       	cp	r28, r30
    1960:	df 07       	cpc	r29, r31
    1962:	c9 f7       	brne	.-14     	; 0x1956 <Lcd3310_UpdateDisplayInfo+0x38>
		number_of_elements_in_menu_now++;
		menu_temp = menu_temp->next;
	}
	if(number_of_elements_in_menu_now > 4){
    1964:	24 e0       	ldi	r18, 0x04	; 4
    1966:	2f 15       	cp	r18, r15
    1968:	18 f4       	brcc	.+6      	; 0x1970 <Lcd3310_UpdateDisplayInfo+0x52>
    196a:	84 e0       	ldi	r24, 0x04	; 4
    196c:	f8 2e       	mov	r15, r24
    196e:	03 c0       	rjmp	.+6      	; 0x1976 <Lcd3310_UpdateDisplayInfo+0x58>
		number_of_elements_in_menu_now = 4;
	}
	 
#ifdef ANIMATION_SWITCH_MENU_ITEMS
	if(number_of_elements_in_menu_now < 3){
    1970:	82 e0       	ldi	r24, 0x02	; 2
    1972:	8f 15       	cp	r24, r15
    1974:	10 f4       	brcc	.+4      	; 0x197a <Lcd3310_UpdateDisplayInfo+0x5c>
		menu_temp = menu_now_atomic;
	}else{
		menu_temp = menu_now_atomic->prev;
    1976:	c7 81       	ldd	r28, Z+7	; 0x07
    1978:	d0 85       	ldd	r29, Z+8	; 0x08
		menu_temp = menu_temp->prev;
	}
#endif

#	ifdef LCD_FIRST_STR
	Lcd3310_GotoXY(0, 0);
    197a:	80 e0       	ldi	r24, 0x00	; 0
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	60 e0       	ldi	r22, 0x00	; 0
    1980:	70 e0       	ldi	r23, 0x00	; 0
    1982:	0e 94 20 0b 	call	0x1640	; 0x1640 <Lcd3310_GotoXY>
	Lcd3310_String_P(lcd_first_str, WHITE_TEXT_ON_BLACK);
    1986:	80 91 25 01 	lds	r24, 0x0125
    198a:	90 91 26 01 	lds	r25, 0x0126
    198e:	61 e0       	ldi	r22, 0x01	; 1
    1990:	0e 94 1f 0a 	call	0x143e	; 0x143e <Lcd3310_String_P>
    1994:	ee 24       	eor	r14, r14
    1996:	01 e0       	ldi	r16, 0x01	; 1
    1998:	10 e0       	ldi	r17, 0x00	; 0
    199a:	27 c0       	rjmp	.+78     	; 0x19ea <Lcd3310_UpdateDisplayInfo+0xcc>
#	endif

	for(uint8_t i=0; i < number_of_elements_in_menu_now; i++){
#		ifdef LCD_IMAGES
			Lcd3310_GotoXY(0, i + 1);
    199c:	80 e0       	ldi	r24, 0x00	; 0
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	b8 01       	movw	r22, r16
    19a2:	0e 94 20 0b 	call	0x1640	; 0x1640 <Lcd3310_GotoXY>
				Lcd3310_GotoXY(0, i + 2);// show menu from (i+1) line because first line filled with '_COLORS_'
#			else
				Lcd3310_GotoXY(0, i); // no images at top
#			endif
#		endif
		if(menu_temp->str == results.str){
    19a6:	29 85       	ldd	r18, Y+9	; 0x09
    19a8:	3a 85       	ldd	r19, Y+10	; 0x0a
    19aa:	80 91 59 01 	lds	r24, 0x0159
    19ae:	90 91 5a 01 	lds	r25, 0x015A
    19b2:	28 17       	cp	r18, r24
    19b4:	39 07       	cpc	r19, r25
    19b6:	29 f4       	brne	.+10     	; 0x19c2 <Lcd3310_UpdateDisplayInfo+0xa4>
			Lcd3310_GotoXY(0, i + 1);
    19b8:	80 e0       	ldi	r24, 0x00	; 0
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	b8 01       	movw	r22, r16
    19be:	0e 94 20 0b 	call	0x1640	; 0x1640 <Lcd3310_GotoXY>
		}
		Lcd3310_String_P(menu_temp->str, (menu_now_atomic == menu_temp));
    19c2:	29 85       	ldd	r18, Y+9	; 0x09
    19c4:	3a 85       	ldd	r19, Y+10	; 0x0a
    19c6:	60 e0       	ldi	r22, 0x00	; 0
    19c8:	80 91 b7 03 	lds	r24, 0x03B7
    19cc:	90 91 b8 03 	lds	r25, 0x03B8
    19d0:	8c 17       	cp	r24, r28
    19d2:	9d 07       	cpc	r25, r29
    19d4:	09 f4       	brne	.+2      	; 0x19d8 <Lcd3310_UpdateDisplayInfo+0xba>
    19d6:	61 e0       	ldi	r22, 0x01	; 1
    19d8:	c9 01       	movw	r24, r18
    19da:	0e 94 1f 0a 	call	0x143e	; 0x143e <Lcd3310_String_P>
		menu_temp = menu_temp->next;
    19de:	0d 80       	ldd	r0, Y+5	; 0x05
    19e0:	de 81       	ldd	r29, Y+6	; 0x06
    19e2:	c0 2d       	mov	r28, r0
#	ifdef LCD_FIRST_STR
	Lcd3310_GotoXY(0, 0);
	Lcd3310_String_P(lcd_first_str, WHITE_TEXT_ON_BLACK);
#	endif

	for(uint8_t i=0; i < number_of_elements_in_menu_now; i++){
    19e4:	e3 94       	inc	r14
    19e6:	0f 5f       	subi	r16, 0xFF	; 255
    19e8:	1f 4f       	sbci	r17, 0xFF	; 255
    19ea:	ef 14       	cp	r14, r15
    19ec:	b8 f2       	brcs	.-82     	; 0x199c <Lcd3310_UpdateDisplayInfo+0x7e>
		Lcd3310_String_P(menu_temp->str, (menu_now_atomic == menu_temp));
		menu_temp = menu_temp->next;
	}


	if( menu_now_atomic == &results ){
    19ee:	80 91 b7 03 	lds	r24, 0x03B7
    19f2:	90 91 b8 03 	lds	r25, 0x03B8
    19f6:	80 55       	subi	r24, 0x50	; 80
    19f8:	91 40       	sbci	r25, 0x01	; 1
    19fa:	09 f0       	breq	.+2      	; 0x19fe <Lcd3310_UpdateDisplayInfo+0xe0>
    19fc:	8d c0       	rjmp	.+282    	; 0x1b18 <Lcd3310_UpdateDisplayInfo+0x1fa>
		 * |  xxxxxxxxxxx |
		 *
		 */

		// |   B   G   R  |
		Lcd3310_GotoXY(3, 2);
    19fe:	83 e0       	ldi	r24, 0x03	; 3
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	62 e0       	ldi	r22, 0x02	; 2
    1a04:	70 e0       	ldi	r23, 0x00	; 0
    1a06:	0e 94 20 0b 	call	0x1640	; 0x1640 <Lcd3310_GotoXY>
		Lcd3310_Char('R', BLACK_TEXT_ON_WHITE);
    1a0a:	82 e5       	ldi	r24, 0x52	; 82
    1a0c:	60 e0       	ldi	r22, 0x00	; 0
    1a0e:	0e 94 ce 09 	call	0x139c	; 0x139c <Lcd3310_Char>
		Lcd3310_GotoXY(7, 2);
    1a12:	87 e0       	ldi	r24, 0x07	; 7
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	62 e0       	ldi	r22, 0x02	; 2
    1a18:	70 e0       	ldi	r23, 0x00	; 0
    1a1a:	0e 94 20 0b 	call	0x1640	; 0x1640 <Lcd3310_GotoXY>
		Lcd3310_Char('G', BLACK_TEXT_ON_WHITE);
    1a1e:	87 e4       	ldi	r24, 0x47	; 71
    1a20:	60 e0       	ldi	r22, 0x00	; 0
    1a22:	0e 94 ce 09 	call	0x139c	; 0x139c <Lcd3310_Char>
		Lcd3310_GotoXY(11, 2);
    1a26:	8b e0       	ldi	r24, 0x0B	; 11
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	62 e0       	ldi	r22, 0x02	; 2
    1a2c:	70 e0       	ldi	r23, 0x00	; 0
    1a2e:	0e 94 20 0b 	call	0x1640	; 0x1640 <Lcd3310_GotoXY>
		Lcd3310_Char('B', BLACK_TEXT_ON_WHITE);
    1a32:	82 e4       	ldi	r24, 0x42	; 66
    1a34:	60 e0       	ldi	r22, 0x00	; 0
    1a36:	0e 94 ce 09 	call	0x139c	; 0x139c <Lcd3310_Char>

		// |1 *** *** *** |
		Lcd3310_GotoXY(0, 3);
    1a3a:	80 e0       	ldi	r24, 0x00	; 0
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	63 e0       	ldi	r22, 0x03	; 3
    1a40:	70 e0       	ldi	r23, 0x00	; 0
    1a42:	0e 94 20 0b 	call	0x1640	; 0x1640 <Lcd3310_GotoXY>
		Lcd3310_Char('1', BLACK_TEXT_ON_WHITE);
    1a46:	81 e3       	ldi	r24, 0x31	; 49
    1a48:	60 e0       	ldi	r22, 0x00	; 0
    1a4a:	0e 94 ce 09 	call	0x139c	; 0x139c <Lcd3310_Char>
		Lcd3310_GotoXY(2, 3);
    1a4e:	82 e0       	ldi	r24, 0x02	; 2
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	63 e0       	ldi	r22, 0x03	; 3
    1a54:	70 e0       	ldi	r23, 0x00	; 0
    1a56:	0e 94 20 0b 	call	0x1640	; 0x1640 <Lcd3310_GotoXY>
		Lcd3310_UInt16AsText_3Chars(result[FIRST][RED], BLACK_TEXT_ON_WHITE);
    1a5a:	80 91 65 03 	lds	r24, 0x0365
    1a5e:	90 91 66 03 	lds	r25, 0x0366
    1a62:	60 e0       	ldi	r22, 0x00	; 0
    1a64:	0e 94 5f 0c 	call	0x18be	; 0x18be <Lcd3310_UInt16AsText_3Chars>
		Lcd3310_UInt16AsText_3Chars(result[FIRST][GREEN], BLACK_TEXT_ON_WHITE);
    1a68:	80 91 67 03 	lds	r24, 0x0367
    1a6c:	90 91 68 03 	lds	r25, 0x0368
    1a70:	60 e0       	ldi	r22, 0x00	; 0
    1a72:	0e 94 5f 0c 	call	0x18be	; 0x18be <Lcd3310_UInt16AsText_3Chars>
		Lcd3310_UInt16AsText_3Chars(result[FIRST][BLUE], BLACK_TEXT_ON_WHITE);
    1a76:	80 91 69 03 	lds	r24, 0x0369
    1a7a:	90 91 6a 03 	lds	r25, 0x036A
    1a7e:	60 e0       	ldi	r22, 0x00	; 0
    1a80:	0e 94 5f 0c 	call	0x18be	; 0x18be <Lcd3310_UInt16AsText_3Chars>

		// |2 *** *** *** |
		Lcd3310_GotoXY(0, 4);
    1a84:	80 e0       	ldi	r24, 0x00	; 0
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	64 e0       	ldi	r22, 0x04	; 4
    1a8a:	70 e0       	ldi	r23, 0x00	; 0
    1a8c:	0e 94 20 0b 	call	0x1640	; 0x1640 <Lcd3310_GotoXY>
		Lcd3310_Char('2', BLACK_TEXT_ON_WHITE);
    1a90:	82 e3       	ldi	r24, 0x32	; 50
    1a92:	60 e0       	ldi	r22, 0x00	; 0
    1a94:	0e 94 ce 09 	call	0x139c	; 0x139c <Lcd3310_Char>
		Lcd3310_GotoXY(2, 4);
    1a98:	82 e0       	ldi	r24, 0x02	; 2
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	64 e0       	ldi	r22, 0x04	; 4
    1a9e:	70 e0       	ldi	r23, 0x00	; 0
    1aa0:	0e 94 20 0b 	call	0x1640	; 0x1640 <Lcd3310_GotoXY>
		Lcd3310_UInt16AsText_3Chars(result[SECOND][RED], BLACK_TEXT_ON_WHITE);
    1aa4:	80 91 6b 03 	lds	r24, 0x036B
    1aa8:	90 91 6c 03 	lds	r25, 0x036C
    1aac:	60 e0       	ldi	r22, 0x00	; 0
    1aae:	0e 94 5f 0c 	call	0x18be	; 0x18be <Lcd3310_UInt16AsText_3Chars>
		Lcd3310_UInt16AsText_3Chars(result[SECOND][GREEN], BLACK_TEXT_ON_WHITE);
    1ab2:	80 91 6d 03 	lds	r24, 0x036D
    1ab6:	90 91 6e 03 	lds	r25, 0x036E
    1aba:	60 e0       	ldi	r22, 0x00	; 0
    1abc:	0e 94 5f 0c 	call	0x18be	; 0x18be <Lcd3310_UInt16AsText_3Chars>
		Lcd3310_UInt16AsText_3Chars(result[SECOND][BLUE], BLACK_TEXT_ON_WHITE);
    1ac0:	80 91 6f 03 	lds	r24, 0x036F
    1ac4:	90 91 70 03 	lds	r25, 0x0370
    1ac8:	60 e0       	ldi	r22, 0x00	; 0
    1aca:	0e 94 5f 0c 	call	0x18be	; 0x18be <Lcd3310_UInt16AsText_3Chars>

		// |% **% **% **% |
		Lcd3310_GotoXY(0, 5);
    1ace:	80 e0       	ldi	r24, 0x00	; 0
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	65 e0       	ldi	r22, 0x05	; 5
    1ad4:	70 e0       	ldi	r23, 0x00	; 0
    1ad6:	0e 94 20 0b 	call	0x1640	; 0x1640 <Lcd3310_GotoXY>
		Lcd3310_Char('%', BLACK_TEXT_ON_WHITE);
    1ada:	85 e2       	ldi	r24, 0x25	; 37
    1adc:	60 e0       	ldi	r22, 0x00	; 0
    1ade:	0e 94 ce 09 	call	0x139c	; 0x139c <Lcd3310_Char>
		Lcd3310_GotoXY(2, 5);
    1ae2:	82 e0       	ldi	r24, 0x02	; 2
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	65 e0       	ldi	r22, 0x05	; 5
    1ae8:	70 e0       	ldi	r23, 0x00	; 0
    1aea:	0e 94 20 0b 	call	0x1640	; 0x1640 <Lcd3310_GotoXY>
		Lcd3310_UInt16AsText_3Chars(result[PERCENT][RED], BLACK_TEXT_ON_WHITE);
    1aee:	80 91 71 03 	lds	r24, 0x0371
    1af2:	90 91 72 03 	lds	r25, 0x0372
    1af6:	60 e0       	ldi	r22, 0x00	; 0
    1af8:	0e 94 5f 0c 	call	0x18be	; 0x18be <Lcd3310_UInt16AsText_3Chars>
		Lcd3310_UInt16AsText_3Chars(result[PERCENT][GREEN], BLACK_TEXT_ON_WHITE);
    1afc:	80 91 73 03 	lds	r24, 0x0373
    1b00:	90 91 74 03 	lds	r25, 0x0374
    1b04:	60 e0       	ldi	r22, 0x00	; 0
    1b06:	0e 94 5f 0c 	call	0x18be	; 0x18be <Lcd3310_UInt16AsText_3Chars>
		Lcd3310_UInt16AsText_3Chars(result[PERCENT][BLUE], BLACK_TEXT_ON_WHITE);
    1b0a:	80 91 75 03 	lds	r24, 0x0375
    1b0e:	90 91 76 03 	lds	r25, 0x0376
    1b12:	60 e0       	ldi	r22, 0x00	; 0
    1b14:	0e 94 5f 0c 	call	0x18be	; 0x18be <Lcd3310_UInt16AsText_3Chars>
	}
}
    1b18:	df 91       	pop	r29
    1b1a:	cf 91       	pop	r28
    1b1c:	1f 91       	pop	r17
    1b1e:	0f 91       	pop	r16
    1b20:	ff 90       	pop	r15
    1b22:	ef 90       	pop	r14
    1b24:	08 95       	ret

00001b26 <Lcd3310_AnimationSwitchMenuItems>:
}
//==============================================//

#ifdef ANIMATION_SWITCH_MENU_ITEMS
void Lcd3310_AnimationSwitchMenuItems(char is_turn_left)
{
    1b26:	9f 92       	push	r9
    1b28:	af 92       	push	r10
    1b2a:	bf 92       	push	r11
    1b2c:	cf 92       	push	r12
    1b2e:	df 92       	push	r13
    1b30:	ef 92       	push	r14
    1b32:	ff 92       	push	r15
    1b34:	0f 93       	push	r16
    1b36:	1f 93       	push	r17
    1b38:	cf 93       	push	r28
    1b3a:	df 93       	push	r29
    1b3c:	98 2e       	mov	r9, r24
	uint8_t number_of_elements_in_menu_now = 1;
	struct menu_item *menu_temp;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { 
    1b3e:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1b40:	f8 94       	cli
		menu_now_atomic = menu_now; 
    1b42:	20 91 b9 03 	lds	r18, 0x03B9
    1b46:	30 91 ba 03 	lds	r19, 0x03BA
    1b4a:	30 93 b8 03 	sts	0x03B8, r19
    1b4e:	20 93 b7 03 	sts	0x03B7, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1b52:	8f bf       	out	0x3f, r24	; 63
	}
	
	menu_temp = menu_now_atomic->next;
    1b54:	e0 91 b7 03 	lds	r30, 0x03B7
    1b58:	f0 91 b8 03 	lds	r31, 0x03B8
    1b5c:	a5 81       	ldd	r26, Z+5	; 0x05
    1b5e:	b6 81       	ldd	r27, Z+6	; 0x06
	while( menu_temp->str != menu_now_atomic->str ){
    1b60:	21 85       	ldd	r18, Z+9	; 0x09
    1b62:	32 85       	ldd	r19, Z+10	; 0x0a
    1b64:	11 e0       	ldi	r17, 0x01	; 1
    1b66:	05 c0       	rjmp	.+10     	; 0x1b72 <Lcd3310_AnimationSwitchMenuItems+0x4c>
		number_of_elements_in_menu_now++;
    1b68:	1f 5f       	subi	r17, 0xFF	; 255
		menu_temp = menu_temp->next;
    1b6a:	15 96       	adiw	r26, 0x05	; 5
    1b6c:	0d 90       	ld	r0, X+
    1b6e:	bc 91       	ld	r27, X
    1b70:	a0 2d       	mov	r26, r0
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { 
		menu_now_atomic = menu_now; 
	}
	
	menu_temp = menu_now_atomic->next;
	while( menu_temp->str != menu_now_atomic->str ){
    1b72:	19 96       	adiw	r26, 0x09	; 9
    1b74:	8d 91       	ld	r24, X+
    1b76:	9c 91       	ld	r25, X
    1b78:	1a 97       	sbiw	r26, 0x0a	; 10
    1b7a:	82 17       	cp	r24, r18
    1b7c:	93 07       	cpc	r25, r19
    1b7e:	a1 f7       	brne	.-24     	; 0x1b68 <Lcd3310_AnimationSwitchMenuItems+0x42>
		number_of_elements_in_menu_now++;
		menu_temp = menu_temp->next;
	}
	if(number_of_elements_in_menu_now > 4){
    1b80:	15 30       	cpi	r17, 0x05	; 5
    1b82:	08 f0       	brcs	.+2      	; 0x1b86 <Lcd3310_AnimationSwitchMenuItems+0x60>
    1b84:	14 e0       	ldi	r17, 0x04	; 4
		number_of_elements_in_menu_now = 4;
	}

	Lcd3310_ClearCenter();
    1b86:	0e 94 37 0b 	call	0x166e	; 0x166e <Lcd3310_ClearCenter>
    1b8a:	e0 91 b7 03 	lds	r30, 0x03B7
    1b8e:	f0 91 b8 03 	lds	r31, 0x03B8
	if(number_of_elements_in_menu_now < 3){
    1b92:	13 30       	cpi	r17, 0x03	; 3
    1b94:	38 f4       	brcc	.+14     	; 0x1ba4 <Lcd3310_AnimationSwitchMenuItems+0x7e>
		menu_temp = menu_now_atomic;
    1b96:	ef 01       	movw	r28, r30
    1b98:	cc 24       	eor	r12, r12
    1b9a:	20 e9       	ldi	r18, 0x90	; 144
    1b9c:	a2 2e       	mov	r10, r18
    1b9e:	21 e0       	ldi	r18, 0x01	; 1
    1ba0:	b2 2e       	mov	r11, r18
    1ba2:	3f c0       	rjmp	.+126    	; 0x1c22 <Lcd3310_AnimationSwitchMenuItems+0xfc>
	}else{
		menu_temp = menu_now_atomic->prev;
    1ba4:	c7 81       	ldd	r28, Z+7	; 0x07
    1ba6:	d0 85       	ldd	r29, Z+8	; 0x08
    1ba8:	f7 cf       	rjmp	.-18     	; 0x1b98 <Lcd3310_AnimationSwitchMenuItems+0x72>
	}

	for(uint8_t j=0; j<8; j++){
		for(uint8_t i=0; i < number_of_elements_in_menu_now; i++){
#			ifdef LCD_IMAGES
				Lcd3310_GotoXY(0, i + 1);// show menu from (i+1) line because first line filled with '_COLORS_'
    1baa:	80 e0       	ldi	r24, 0x00	; 0
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	b7 01       	movw	r22, r14
    1bb0:	0e 94 20 0b 	call	0x1640	; 0x1640 <Lcd3310_GotoXY>
#			else
				Lcd3310_GotoXY(0, i); // no images at top
#			endif
			Lcd3310_String_P_anime(
    1bb4:	99 20       	and	r9, r9
    1bb6:	19 f0       	breq	.+6      	; 0x1bbe <Lcd3310_AnimationSwitchMenuItems+0x98>
    1bb8:	ef 81       	ldd	r30, Y+7	; 0x07
    1bba:	f8 85       	ldd	r31, Y+8	; 0x08
    1bbc:	02 c0       	rjmp	.+4      	; 0x1bc2 <Lcd3310_AnimationSwitchMenuItems+0x9c>
    1bbe:	ed 81       	ldd	r30, Y+5	; 0x05
    1bc0:	fe 81       	ldd	r31, Y+6	; 0x06
    1bc2:	21 85       	ldd	r18, Z+9	; 0x09
    1bc4:	32 85       	ldd	r19, Z+10	; 0x0a
    1bc6:	69 85       	ldd	r22, Y+9	; 0x09
    1bc8:	7a 85       	ldd	r23, Y+10	; 0x0a
    1bca:	40 e0       	ldi	r20, 0x00	; 0
    1bcc:	80 91 b7 03 	lds	r24, 0x03B7
    1bd0:	90 91 b8 03 	lds	r25, 0x03B8
    1bd4:	8c 17       	cp	r24, r28
    1bd6:	9d 07       	cpc	r25, r29
    1bd8:	09 f4       	brne	.+2      	; 0x1bdc <Lcd3310_AnimationSwitchMenuItems+0xb6>
    1bda:	41 e0       	ldi	r20, 0x01	; 1
    1bdc:	c9 01       	movw	r24, r18
    1bde:	2c 2d       	mov	r18, r12
    1be0:	09 2d       	mov	r16, r9
    1be2:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <Lcd3310_String_P_anime>
							menu_temp->str,
							(menu_now_atomic == menu_temp), // WhiteOrBlackText
							j, // num_of_cadr
							is_turn_left // is_next
							);
			menu_temp = menu_temp->next;
    1be6:	0d 80       	ldd	r0, Y+5	; 0x05
    1be8:	de 81       	ldd	r29, Y+6	; 0x06
    1bea:	c0 2d       	mov	r28, r0
	}else{
		menu_temp = menu_now_atomic->prev;
	}

	for(uint8_t j=0; j<8; j++){
		for(uint8_t i=0; i < number_of_elements_in_menu_now; i++){
    1bec:	d3 94       	inc	r13
    1bee:	08 94       	sec
    1bf0:	e1 1c       	adc	r14, r1
    1bf2:	f1 1c       	adc	r15, r1
    1bf4:	d1 16       	cp	r13, r17
    1bf6:	c8 f2       	brcs	.-78     	; 0x1baa <Lcd3310_AnimationSwitchMenuItems+0x84>
    1bf8:	e0 91 b7 03 	lds	r30, 0x03B7
    1bfc:	f0 91 b8 03 	lds	r31, 0x03B8
							j, // num_of_cadr
							is_turn_left // is_next
							);
			menu_temp = menu_temp->next;
		}
		if(number_of_elements_in_menu_now < 3){
    1c00:	13 30       	cpi	r17, 0x03	; 3
    1c02:	10 f4       	brcc	.+4      	; 0x1c08 <Lcd3310_AnimationSwitchMenuItems+0xe2>
			menu_temp = menu_now_atomic;
    1c04:	ef 01       	movw	r28, r30
    1c06:	02 c0       	rjmp	.+4      	; 0x1c0c <Lcd3310_AnimationSwitchMenuItems+0xe6>
		}else{
			menu_temp = menu_now_atomic->prev;
    1c08:	c7 81       	ldd	r28, Z+7	; 0x07
    1c0a:	d0 85       	ldd	r29, Z+8	; 0x08
    1c0c:	84 ef       	ldi	r24, 0xF4	; 244
    1c0e:	91 e0       	ldi	r25, 0x01	; 1
    1c10:	f5 01       	movw	r30, r10
    1c12:	31 97       	sbiw	r30, 0x01	; 1
    1c14:	f1 f7       	brne	.-4      	; 0x1c12 <Lcd3310_AnimationSwitchMenuItems+0xec>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c16:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c18:	d9 f7       	brne	.-10     	; 0x1c10 <Lcd3310_AnimationSwitchMenuItems+0xea>
		menu_temp = menu_now_atomic;
	}else{
		menu_temp = menu_now_atomic->prev;
	}

	for(uint8_t j=0; j<8; j++){
    1c1a:	c3 94       	inc	r12
    1c1c:	88 e0       	ldi	r24, 0x08	; 8
    1c1e:	c8 16       	cp	r12, r24
    1c20:	29 f0       	breq	.+10     	; 0x1c2c <Lcd3310_AnimationSwitchMenuItems+0x106>
    1c22:	dd 24       	eor	r13, r13
    1c24:	91 e0       	ldi	r25, 0x01	; 1
    1c26:	e9 2e       	mov	r14, r25
    1c28:	f1 2c       	mov	r15, r1
    1c2a:	e4 cf       	rjmp	.-56     	; 0x1bf4 <Lcd3310_AnimationSwitchMenuItems+0xce>
		}else{
			menu_temp = menu_now_atomic->prev;
		}
		_delay_ms(50);
	}
}
    1c2c:	df 91       	pop	r29
    1c2e:	cf 91       	pop	r28
    1c30:	1f 91       	pop	r17
    1c32:	0f 91       	pop	r16
    1c34:	ff 90       	pop	r15
    1c36:	ef 90       	pop	r14
    1c38:	df 90       	pop	r13
    1c3a:	cf 90       	pop	r12
    1c3c:	bf 90       	pop	r11
    1c3e:	af 90       	pop	r10
    1c40:	9f 90       	pop	r9
    1c42:	08 95       	ret

00001c44 <Lcd3310_InitializeDisplay>:



void init_menu_now(void)
{
	menu_now = &go;
    1c44:	26 e3       	ldi	r18, 0x36	; 54
    1c46:	31 e0       	ldi	r19, 0x01	; 1
    1c48:	30 93 ba 03 	sts	0x03BA, r19
    1c4c:	20 93 b9 03 	sts	0x03B9, r18
//==============================================//
void Lcd3310_InitializeDisplay(uint16_t show_image_delay_ms)
{
	init_menu_now();

    Lcd3310_Init(show_image_delay_ms);
    1c50:	0e 94 8c 0b 	call	0x1718	; 0x1718 <Lcd3310_Init>
	//Lcd3310_LcdImageUpperBottom_Fill();
    Lcd3310_UpdateDisplayInfo();
    1c54:	0e 94 8f 0c 	call	0x191e	; 0x191e <Lcd3310_UpdateDisplayInfo>
}
    1c58:	08 95       	ret

00001c5a <Menu_EnterClick>:
struct menu_item readme = {ENTER_MENU_CMD, NULL, &text, &go, &setup, 								"// Readme   //"};
	struct menu_item text = {BACK_CMD, &readme, NULL, &text, &text, "[ Programmer:][   brunql   ][    (at)    ][  gmail.com ]"};

void Menu_EnterClick(void)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { menu_now_atomic = menu_now; }
    1c5a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1c5c:	f8 94       	cli
    1c5e:	20 91 b9 03 	lds	r18, 0x03B9
    1c62:	30 91 ba 03 	lds	r19, 0x03BA
    1c66:	30 93 b8 03 	sts	0x03B8, r19
    1c6a:	20 93 b7 03 	sts	0x03B7, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1c6e:	8f bf       	out	0x3f, r24	; 63
	switch(menu_now_atomic->cmd){
    1c70:	e0 91 b7 03 	lds	r30, 0x03B7
    1c74:	f0 91 b8 03 	lds	r31, 0x03B8
    1c78:	e0 81       	ld	r30, Z
    1c7a:	e3 30       	cpi	r30, 0x03	; 3
    1c7c:	49 f1       	breq	.+82     	; 0x1cd0 <Menu_EnterClick+0x76>
    1c7e:	e4 30       	cpi	r30, 0x04	; 4
    1c80:	28 f4       	brcc	.+10     	; 0x1c8c <Menu_EnterClick+0x32>
    1c82:	e1 30       	cpi	r30, 0x01	; 1
    1c84:	71 f0       	breq	.+28     	; 0x1ca2 <Menu_EnterClick+0x48>
    1c86:	e2 30       	cpi	r30, 0x02	; 2
    1c88:	40 f5       	brcc	.+80     	; 0x1cda <Menu_EnterClick+0x80>
    1c8a:	14 c0       	rjmp	.+40     	; 0x1cb4 <Menu_EnterClick+0x5a>
    1c8c:	e5 30       	cpi	r30, 0x05	; 5
    1c8e:	a9 f1       	breq	.+106    	; 0x1cfa <Menu_EnterClick+0xa0>
    1c90:	e5 30       	cpi	r30, 0x05	; 5
    1c92:	58 f1       	brcs	.+86     	; 0x1cea <Menu_EnterClick+0x90>
    1c94:	e6 30       	cpi	r30, 0x06	; 6
    1c96:	09 f4       	brne	.+2      	; 0x1c9a <Menu_EnterClick+0x40>
    1c98:	3d c0       	rjmp	.+122    	; 0x1d14 <Menu_EnterClick+0xba>
    1c9a:	e7 30       	cpi	r30, 0x07	; 7
    1c9c:	09 f0       	breq	.+2      	; 0x1ca0 <Menu_EnterClick+0x46>
    1c9e:	54 c0       	rjmp	.+168    	; 0x1d48 <Menu_EnterClick+0xee>
    1ca0:	46 c0       	rjmp	.+140    	; 0x1d2e <Menu_EnterClick+0xd4>
		default:
			break;
		case ENTER_MENU_CMD:
		enter_menu_label:
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { menu_now = menu_now->sub_menu; }
    1ca2:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1ca4:	f8 94       	cli
    1ca6:	e0 91 b9 03 	lds	r30, 0x03B9
    1caa:	f0 91 ba 03 	lds	r31, 0x03BA
    1cae:	23 81       	ldd	r18, Z+3	; 0x03
    1cb0:	34 81       	ldd	r19, Z+4	; 0x04
    1cb2:	08 c0       	rjmp	.+16     	; 0x1cc4 <Menu_EnterClick+0x6a>
			break;

		case BACK_CMD:
		back_menu_label:
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { menu_now = menu_now->main_menu; }
    1cb4:	8f b7       	in	r24, 0x3f	; 63
    1cb6:	f8 94       	cli
    1cb8:	e0 91 b9 03 	lds	r30, 0x03B9
    1cbc:	f0 91 ba 03 	lds	r31, 0x03BA
    1cc0:	21 81       	ldd	r18, Z+1	; 0x01
    1cc2:	32 81       	ldd	r19, Z+2	; 0x02
    1cc4:	30 93 ba 03 	sts	0x03BA, r19
    1cc8:	20 93 b9 03 	sts	0x03B9, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1ccc:	8f bf       	out	0x3f, r24	; 63
    1cce:	21 c0       	rjmp	.+66     	; 0x1d12 <Menu_EnterClick+0xb8>
			break;
		
		case results_cmd:
			LedDriver_SwitchLeds( 0x0000 );
    1cd0:	80 e0       	ldi	r24, 0x00	; 0
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	0e 94 c9 06 	call	0xd92	; 0xd92 <LedDriver_SwitchLeds>
    1cd8:	ed cf       	rjmp	.-38     	; 0x1cb4 <Menu_EnterClick+0x5a>
			goto back_menu_label;
	
		case go_cmd:
			FLAGS_SWITCH_ON( ADC_RESULT_FLAG );
    1cda:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1cdc:	f8 94       	cli
    1cde:	80 91 7b 03 	lds	r24, 0x037B
    1ce2:	90 91 7c 03 	lds	r25, 0x037C
    1ce6:	80 61       	ori	r24, 0x10	; 16
    1ce8:	1c c0       	rjmp	.+56     	; 0x1d22 <Menu_EnterClick+0xc8>
			goto enter_menu_label;
		
		case calibration_cmd:
			FLAGS_SWITCH_ON( ADC_CALIBRATE_FLAG );
    1cea:	2f b7       	in	r18, 0x3f	; 63
    1cec:	f8 94       	cli
    1cee:	80 91 7b 03 	lds	r24, 0x037B
    1cf2:	90 91 7c 03 	lds	r25, 0x037C
    1cf6:	80 62       	ori	r24, 0x20	; 32
    1cf8:	07 c0       	rjmp	.+14     	; 0x1d08 <Menu_EnterClick+0xae>
			break;
		case set_zero_cmd:
			FLAGS_SWITCH_ON( ADC_SET_ZERO );
    1cfa:	2f b7       	in	r18, 0x3f	; 63
    1cfc:	f8 94       	cli
    1cfe:	80 91 7b 03 	lds	r24, 0x037B
    1d02:	90 91 7c 03 	lds	r25, 0x037C
    1d06:	80 64       	ori	r24, 0x40	; 64
    1d08:	90 93 7c 03 	sts	0x037C, r25
    1d0c:	80 93 7b 03 	sts	0x037B, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1d10:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    1d12:	08 95       	ret
			break;

		case snake_start_cmd:
			FLAGS_SWITCH_ON( SNAKE_START_GAME_FLAG );
    1d14:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1d16:	f8 94       	cli
    1d18:	80 91 7b 03 	lds	r24, 0x037B
    1d1c:	90 91 7c 03 	lds	r25, 0x037C
    1d20:	91 60       	ori	r25, 0x01	; 1
    1d22:	90 93 7c 03 	sts	0x037C, r25
    1d26:	80 93 7b 03 	sts	0x037B, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1d2a:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    1d2c:	ba cf       	rjmp	.-140    	; 0x1ca2 <Menu_EnterClick+0x48>
			goto enter_menu_label;

		case snake_results_cmd:
			FLAGS_SWITCH_ON( SNAKE_STOP_GAME_FLAG );
    1d2e:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1d30:	f8 94       	cli
    1d32:	80 91 7b 03 	lds	r24, 0x037B
    1d36:	90 91 7c 03 	lds	r25, 0x037C
    1d3a:	92 60       	ori	r25, 0x02	; 2
    1d3c:	90 93 7c 03 	sts	0x037C, r25
    1d40:	80 93 7b 03 	sts	0x037B, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1d44:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    1d46:	b6 cf       	rjmp	.-148    	; 0x1cb4 <Menu_EnterClick+0x5a>
    1d48:	08 95       	ret

00001d4a <__fixunssfsi>:
    1d4a:	ef 92       	push	r14
    1d4c:	ff 92       	push	r15
    1d4e:	0f 93       	push	r16
    1d50:	1f 93       	push	r17
    1d52:	7b 01       	movw	r14, r22
    1d54:	8c 01       	movw	r16, r24
    1d56:	20 e0       	ldi	r18, 0x00	; 0
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	40 e0       	ldi	r20, 0x00	; 0
    1d5c:	5f e4       	ldi	r21, 0x4F	; 79
    1d5e:	0e 94 51 12 	call	0x24a2	; 0x24a2 <__gesf2>
    1d62:	88 23       	and	r24, r24
    1d64:	8c f0       	brlt	.+34     	; 0x1d88 <__fixunssfsi+0x3e>
    1d66:	c8 01       	movw	r24, r16
    1d68:	b7 01       	movw	r22, r14
    1d6a:	20 e0       	ldi	r18, 0x00	; 0
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	40 e0       	ldi	r20, 0x00	; 0
    1d70:	5f e4       	ldi	r21, 0x4F	; 79
    1d72:	0e 94 1d 10 	call	0x203a	; 0x203a <__subsf3>
    1d76:	0e 94 0f 13 	call	0x261e	; 0x261e <__fixsfsi>
    1d7a:	9b 01       	movw	r18, r22
    1d7c:	ac 01       	movw	r20, r24
    1d7e:	20 50       	subi	r18, 0x00	; 0
    1d80:	30 40       	sbci	r19, 0x00	; 0
    1d82:	40 40       	sbci	r20, 0x00	; 0
    1d84:	50 48       	sbci	r21, 0x80	; 128
    1d86:	06 c0       	rjmp	.+12     	; 0x1d94 <__fixunssfsi+0x4a>
    1d88:	c8 01       	movw	r24, r16
    1d8a:	b7 01       	movw	r22, r14
    1d8c:	0e 94 0f 13 	call	0x261e	; 0x261e <__fixsfsi>
    1d90:	9b 01       	movw	r18, r22
    1d92:	ac 01       	movw	r20, r24
    1d94:	b9 01       	movw	r22, r18
    1d96:	ca 01       	movw	r24, r20
    1d98:	1f 91       	pop	r17
    1d9a:	0f 91       	pop	r16
    1d9c:	ff 90       	pop	r15
    1d9e:	ef 90       	pop	r14
    1da0:	08 95       	ret

00001da2 <_fpadd_parts>:
    1da2:	a0 e0       	ldi	r26, 0x00	; 0
    1da4:	b0 e0       	ldi	r27, 0x00	; 0
    1da6:	e7 ed       	ldi	r30, 0xD7	; 215
    1da8:	fe e0       	ldi	r31, 0x0E	; 14
    1daa:	0c 94 59 16 	jmp	0x2cb2	; 0x2cb2 <__prologue_saves__>
    1dae:	dc 01       	movw	r26, r24
    1db0:	2b 01       	movw	r4, r22
    1db2:	fa 01       	movw	r30, r20
    1db4:	9c 91       	ld	r25, X
    1db6:	92 30       	cpi	r25, 0x02	; 2
    1db8:	08 f4       	brcc	.+2      	; 0x1dbc <_fpadd_parts+0x1a>
    1dba:	39 c1       	rjmp	.+626    	; 0x202e <_fpadd_parts+0x28c>
    1dbc:	eb 01       	movw	r28, r22
    1dbe:	88 81       	ld	r24, Y
    1dc0:	82 30       	cpi	r24, 0x02	; 2
    1dc2:	08 f4       	brcc	.+2      	; 0x1dc6 <_fpadd_parts+0x24>
    1dc4:	33 c1       	rjmp	.+614    	; 0x202c <_fpadd_parts+0x28a>
    1dc6:	94 30       	cpi	r25, 0x04	; 4
    1dc8:	69 f4       	brne	.+26     	; 0x1de4 <_fpadd_parts+0x42>
    1dca:	84 30       	cpi	r24, 0x04	; 4
    1dcc:	09 f0       	breq	.+2      	; 0x1dd0 <_fpadd_parts+0x2e>
    1dce:	2f c1       	rjmp	.+606    	; 0x202e <_fpadd_parts+0x28c>
    1dd0:	11 96       	adiw	r26, 0x01	; 1
    1dd2:	9c 91       	ld	r25, X
    1dd4:	11 97       	sbiw	r26, 0x01	; 1
    1dd6:	89 81       	ldd	r24, Y+1	; 0x01
    1dd8:	98 17       	cp	r25, r24
    1dda:	09 f4       	brne	.+2      	; 0x1dde <_fpadd_parts+0x3c>
    1ddc:	28 c1       	rjmp	.+592    	; 0x202e <_fpadd_parts+0x28c>
    1dde:	a5 e5       	ldi	r26, 0x55	; 85
    1de0:	b2 e0       	ldi	r27, 0x02	; 2
    1de2:	25 c1       	rjmp	.+586    	; 0x202e <_fpadd_parts+0x28c>
    1de4:	84 30       	cpi	r24, 0x04	; 4
    1de6:	09 f4       	brne	.+2      	; 0x1dea <_fpadd_parts+0x48>
    1de8:	21 c1       	rjmp	.+578    	; 0x202c <_fpadd_parts+0x28a>
    1dea:	82 30       	cpi	r24, 0x02	; 2
    1dec:	a9 f4       	brne	.+42     	; 0x1e18 <_fpadd_parts+0x76>
    1dee:	92 30       	cpi	r25, 0x02	; 2
    1df0:	09 f0       	breq	.+2      	; 0x1df4 <_fpadd_parts+0x52>
    1df2:	1d c1       	rjmp	.+570    	; 0x202e <_fpadd_parts+0x28c>
    1df4:	9a 01       	movw	r18, r20
    1df6:	ad 01       	movw	r20, r26
    1df8:	88 e0       	ldi	r24, 0x08	; 8
    1dfa:	ea 01       	movw	r28, r20
    1dfc:	09 90       	ld	r0, Y+
    1dfe:	ae 01       	movw	r20, r28
    1e00:	e9 01       	movw	r28, r18
    1e02:	09 92       	st	Y+, r0
    1e04:	9e 01       	movw	r18, r28
    1e06:	81 50       	subi	r24, 0x01	; 1
    1e08:	c1 f7       	brne	.-16     	; 0x1dfa <_fpadd_parts+0x58>
    1e0a:	e2 01       	movw	r28, r4
    1e0c:	89 81       	ldd	r24, Y+1	; 0x01
    1e0e:	11 96       	adiw	r26, 0x01	; 1
    1e10:	9c 91       	ld	r25, X
    1e12:	89 23       	and	r24, r25
    1e14:	81 83       	std	Z+1, r24	; 0x01
    1e16:	08 c1       	rjmp	.+528    	; 0x2028 <_fpadd_parts+0x286>
    1e18:	92 30       	cpi	r25, 0x02	; 2
    1e1a:	09 f4       	brne	.+2      	; 0x1e1e <_fpadd_parts+0x7c>
    1e1c:	07 c1       	rjmp	.+526    	; 0x202c <_fpadd_parts+0x28a>
    1e1e:	12 96       	adiw	r26, 0x02	; 2
    1e20:	2d 90       	ld	r2, X+
    1e22:	3c 90       	ld	r3, X
    1e24:	13 97       	sbiw	r26, 0x03	; 3
    1e26:	eb 01       	movw	r28, r22
    1e28:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e2c:	14 96       	adiw	r26, 0x04	; 4
    1e2e:	ad 90       	ld	r10, X+
    1e30:	bd 90       	ld	r11, X+
    1e32:	cd 90       	ld	r12, X+
    1e34:	dc 90       	ld	r13, X
    1e36:	17 97       	sbiw	r26, 0x07	; 7
    1e38:	ec 80       	ldd	r14, Y+4	; 0x04
    1e3a:	fd 80       	ldd	r15, Y+5	; 0x05
    1e3c:	0e 81       	ldd	r16, Y+6	; 0x06
    1e3e:	1f 81       	ldd	r17, Y+7	; 0x07
    1e40:	91 01       	movw	r18, r2
    1e42:	28 1b       	sub	r18, r24
    1e44:	39 0b       	sbc	r19, r25
    1e46:	b9 01       	movw	r22, r18
    1e48:	37 ff       	sbrs	r19, 7
    1e4a:	04 c0       	rjmp	.+8      	; 0x1e54 <_fpadd_parts+0xb2>
    1e4c:	66 27       	eor	r22, r22
    1e4e:	77 27       	eor	r23, r23
    1e50:	62 1b       	sub	r22, r18
    1e52:	73 0b       	sbc	r23, r19
    1e54:	60 32       	cpi	r22, 0x20	; 32
    1e56:	71 05       	cpc	r23, r1
    1e58:	0c f0       	brlt	.+2      	; 0x1e5c <_fpadd_parts+0xba>
    1e5a:	61 c0       	rjmp	.+194    	; 0x1f1e <_fpadd_parts+0x17c>
    1e5c:	12 16       	cp	r1, r18
    1e5e:	13 06       	cpc	r1, r19
    1e60:	6c f5       	brge	.+90     	; 0x1ebc <_fpadd_parts+0x11a>
    1e62:	37 01       	movw	r6, r14
    1e64:	48 01       	movw	r8, r16
    1e66:	06 2e       	mov	r0, r22
    1e68:	04 c0       	rjmp	.+8      	; 0x1e72 <_fpadd_parts+0xd0>
    1e6a:	96 94       	lsr	r9
    1e6c:	87 94       	ror	r8
    1e6e:	77 94       	ror	r7
    1e70:	67 94       	ror	r6
    1e72:	0a 94       	dec	r0
    1e74:	d2 f7       	brpl	.-12     	; 0x1e6a <_fpadd_parts+0xc8>
    1e76:	21 e0       	ldi	r18, 0x01	; 1
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	40 e0       	ldi	r20, 0x00	; 0
    1e7c:	50 e0       	ldi	r21, 0x00	; 0
    1e7e:	04 c0       	rjmp	.+8      	; 0x1e88 <_fpadd_parts+0xe6>
    1e80:	22 0f       	add	r18, r18
    1e82:	33 1f       	adc	r19, r19
    1e84:	44 1f       	adc	r20, r20
    1e86:	55 1f       	adc	r21, r21
    1e88:	6a 95       	dec	r22
    1e8a:	d2 f7       	brpl	.-12     	; 0x1e80 <_fpadd_parts+0xde>
    1e8c:	21 50       	subi	r18, 0x01	; 1
    1e8e:	30 40       	sbci	r19, 0x00	; 0
    1e90:	40 40       	sbci	r20, 0x00	; 0
    1e92:	50 40       	sbci	r21, 0x00	; 0
    1e94:	2e 21       	and	r18, r14
    1e96:	3f 21       	and	r19, r15
    1e98:	40 23       	and	r20, r16
    1e9a:	51 23       	and	r21, r17
    1e9c:	21 15       	cp	r18, r1
    1e9e:	31 05       	cpc	r19, r1
    1ea0:	41 05       	cpc	r20, r1
    1ea2:	51 05       	cpc	r21, r1
    1ea4:	21 f0       	breq	.+8      	; 0x1eae <_fpadd_parts+0x10c>
    1ea6:	21 e0       	ldi	r18, 0x01	; 1
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	40 e0       	ldi	r20, 0x00	; 0
    1eac:	50 e0       	ldi	r21, 0x00	; 0
    1eae:	79 01       	movw	r14, r18
    1eb0:	8a 01       	movw	r16, r20
    1eb2:	e6 28       	or	r14, r6
    1eb4:	f7 28       	or	r15, r7
    1eb6:	08 29       	or	r16, r8
    1eb8:	19 29       	or	r17, r9
    1eba:	3c c0       	rjmp	.+120    	; 0x1f34 <_fpadd_parts+0x192>
    1ebc:	23 2b       	or	r18, r19
    1ebe:	d1 f1       	breq	.+116    	; 0x1f34 <_fpadd_parts+0x192>
    1ec0:	26 0e       	add	r2, r22
    1ec2:	37 1e       	adc	r3, r23
    1ec4:	35 01       	movw	r6, r10
    1ec6:	46 01       	movw	r8, r12
    1ec8:	06 2e       	mov	r0, r22
    1eca:	04 c0       	rjmp	.+8      	; 0x1ed4 <_fpadd_parts+0x132>
    1ecc:	96 94       	lsr	r9
    1ece:	87 94       	ror	r8
    1ed0:	77 94       	ror	r7
    1ed2:	67 94       	ror	r6
    1ed4:	0a 94       	dec	r0
    1ed6:	d2 f7       	brpl	.-12     	; 0x1ecc <_fpadd_parts+0x12a>
    1ed8:	21 e0       	ldi	r18, 0x01	; 1
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	40 e0       	ldi	r20, 0x00	; 0
    1ede:	50 e0       	ldi	r21, 0x00	; 0
    1ee0:	04 c0       	rjmp	.+8      	; 0x1eea <_fpadd_parts+0x148>
    1ee2:	22 0f       	add	r18, r18
    1ee4:	33 1f       	adc	r19, r19
    1ee6:	44 1f       	adc	r20, r20
    1ee8:	55 1f       	adc	r21, r21
    1eea:	6a 95       	dec	r22
    1eec:	d2 f7       	brpl	.-12     	; 0x1ee2 <_fpadd_parts+0x140>
    1eee:	21 50       	subi	r18, 0x01	; 1
    1ef0:	30 40       	sbci	r19, 0x00	; 0
    1ef2:	40 40       	sbci	r20, 0x00	; 0
    1ef4:	50 40       	sbci	r21, 0x00	; 0
    1ef6:	2a 21       	and	r18, r10
    1ef8:	3b 21       	and	r19, r11
    1efa:	4c 21       	and	r20, r12
    1efc:	5d 21       	and	r21, r13
    1efe:	21 15       	cp	r18, r1
    1f00:	31 05       	cpc	r19, r1
    1f02:	41 05       	cpc	r20, r1
    1f04:	51 05       	cpc	r21, r1
    1f06:	21 f0       	breq	.+8      	; 0x1f10 <_fpadd_parts+0x16e>
    1f08:	21 e0       	ldi	r18, 0x01	; 1
    1f0a:	30 e0       	ldi	r19, 0x00	; 0
    1f0c:	40 e0       	ldi	r20, 0x00	; 0
    1f0e:	50 e0       	ldi	r21, 0x00	; 0
    1f10:	59 01       	movw	r10, r18
    1f12:	6a 01       	movw	r12, r20
    1f14:	a6 28       	or	r10, r6
    1f16:	b7 28       	or	r11, r7
    1f18:	c8 28       	or	r12, r8
    1f1a:	d9 28       	or	r13, r9
    1f1c:	0b c0       	rjmp	.+22     	; 0x1f34 <_fpadd_parts+0x192>
    1f1e:	82 15       	cp	r24, r2
    1f20:	93 05       	cpc	r25, r3
    1f22:	2c f0       	brlt	.+10     	; 0x1f2e <_fpadd_parts+0x18c>
    1f24:	1c 01       	movw	r2, r24
    1f26:	aa 24       	eor	r10, r10
    1f28:	bb 24       	eor	r11, r11
    1f2a:	65 01       	movw	r12, r10
    1f2c:	03 c0       	rjmp	.+6      	; 0x1f34 <_fpadd_parts+0x192>
    1f2e:	ee 24       	eor	r14, r14
    1f30:	ff 24       	eor	r15, r15
    1f32:	87 01       	movw	r16, r14
    1f34:	11 96       	adiw	r26, 0x01	; 1
    1f36:	9c 91       	ld	r25, X
    1f38:	d2 01       	movw	r26, r4
    1f3a:	11 96       	adiw	r26, 0x01	; 1
    1f3c:	8c 91       	ld	r24, X
    1f3e:	98 17       	cp	r25, r24
    1f40:	09 f4       	brne	.+2      	; 0x1f44 <_fpadd_parts+0x1a2>
    1f42:	45 c0       	rjmp	.+138    	; 0x1fce <_fpadd_parts+0x22c>
    1f44:	99 23       	and	r25, r25
    1f46:	39 f0       	breq	.+14     	; 0x1f56 <_fpadd_parts+0x1b4>
    1f48:	a8 01       	movw	r20, r16
    1f4a:	97 01       	movw	r18, r14
    1f4c:	2a 19       	sub	r18, r10
    1f4e:	3b 09       	sbc	r19, r11
    1f50:	4c 09       	sbc	r20, r12
    1f52:	5d 09       	sbc	r21, r13
    1f54:	06 c0       	rjmp	.+12     	; 0x1f62 <_fpadd_parts+0x1c0>
    1f56:	a6 01       	movw	r20, r12
    1f58:	95 01       	movw	r18, r10
    1f5a:	2e 19       	sub	r18, r14
    1f5c:	3f 09       	sbc	r19, r15
    1f5e:	40 0b       	sbc	r20, r16
    1f60:	51 0b       	sbc	r21, r17
    1f62:	57 fd       	sbrc	r21, 7
    1f64:	08 c0       	rjmp	.+16     	; 0x1f76 <_fpadd_parts+0x1d4>
    1f66:	11 82       	std	Z+1, r1	; 0x01
    1f68:	33 82       	std	Z+3, r3	; 0x03
    1f6a:	22 82       	std	Z+2, r2	; 0x02
    1f6c:	24 83       	std	Z+4, r18	; 0x04
    1f6e:	35 83       	std	Z+5, r19	; 0x05
    1f70:	46 83       	std	Z+6, r20	; 0x06
    1f72:	57 83       	std	Z+7, r21	; 0x07
    1f74:	1d c0       	rjmp	.+58     	; 0x1fb0 <_fpadd_parts+0x20e>
    1f76:	81 e0       	ldi	r24, 0x01	; 1
    1f78:	81 83       	std	Z+1, r24	; 0x01
    1f7a:	33 82       	std	Z+3, r3	; 0x03
    1f7c:	22 82       	std	Z+2, r2	; 0x02
    1f7e:	88 27       	eor	r24, r24
    1f80:	99 27       	eor	r25, r25
    1f82:	dc 01       	movw	r26, r24
    1f84:	82 1b       	sub	r24, r18
    1f86:	93 0b       	sbc	r25, r19
    1f88:	a4 0b       	sbc	r26, r20
    1f8a:	b5 0b       	sbc	r27, r21
    1f8c:	84 83       	std	Z+4, r24	; 0x04
    1f8e:	95 83       	std	Z+5, r25	; 0x05
    1f90:	a6 83       	std	Z+6, r26	; 0x06
    1f92:	b7 83       	std	Z+7, r27	; 0x07
    1f94:	0d c0       	rjmp	.+26     	; 0x1fb0 <_fpadd_parts+0x20e>
    1f96:	22 0f       	add	r18, r18
    1f98:	33 1f       	adc	r19, r19
    1f9a:	44 1f       	adc	r20, r20
    1f9c:	55 1f       	adc	r21, r21
    1f9e:	24 83       	std	Z+4, r18	; 0x04
    1fa0:	35 83       	std	Z+5, r19	; 0x05
    1fa2:	46 83       	std	Z+6, r20	; 0x06
    1fa4:	57 83       	std	Z+7, r21	; 0x07
    1fa6:	82 81       	ldd	r24, Z+2	; 0x02
    1fa8:	93 81       	ldd	r25, Z+3	; 0x03
    1faa:	01 97       	sbiw	r24, 0x01	; 1
    1fac:	93 83       	std	Z+3, r25	; 0x03
    1fae:	82 83       	std	Z+2, r24	; 0x02
    1fb0:	24 81       	ldd	r18, Z+4	; 0x04
    1fb2:	35 81       	ldd	r19, Z+5	; 0x05
    1fb4:	46 81       	ldd	r20, Z+6	; 0x06
    1fb6:	57 81       	ldd	r21, Z+7	; 0x07
    1fb8:	da 01       	movw	r26, r20
    1fba:	c9 01       	movw	r24, r18
    1fbc:	01 97       	sbiw	r24, 0x01	; 1
    1fbe:	a1 09       	sbc	r26, r1
    1fc0:	b1 09       	sbc	r27, r1
    1fc2:	8f 5f       	subi	r24, 0xFF	; 255
    1fc4:	9f 4f       	sbci	r25, 0xFF	; 255
    1fc6:	af 4f       	sbci	r26, 0xFF	; 255
    1fc8:	bf 43       	sbci	r27, 0x3F	; 63
    1fca:	28 f3       	brcs	.-54     	; 0x1f96 <_fpadd_parts+0x1f4>
    1fcc:	0b c0       	rjmp	.+22     	; 0x1fe4 <_fpadd_parts+0x242>
    1fce:	91 83       	std	Z+1, r25	; 0x01
    1fd0:	33 82       	std	Z+3, r3	; 0x03
    1fd2:	22 82       	std	Z+2, r2	; 0x02
    1fd4:	ea 0c       	add	r14, r10
    1fd6:	fb 1c       	adc	r15, r11
    1fd8:	0c 1d       	adc	r16, r12
    1fda:	1d 1d       	adc	r17, r13
    1fdc:	e4 82       	std	Z+4, r14	; 0x04
    1fde:	f5 82       	std	Z+5, r15	; 0x05
    1fe0:	06 83       	std	Z+6, r16	; 0x06
    1fe2:	17 83       	std	Z+7, r17	; 0x07
    1fe4:	83 e0       	ldi	r24, 0x03	; 3
    1fe6:	80 83       	st	Z, r24
    1fe8:	24 81       	ldd	r18, Z+4	; 0x04
    1fea:	35 81       	ldd	r19, Z+5	; 0x05
    1fec:	46 81       	ldd	r20, Z+6	; 0x06
    1fee:	57 81       	ldd	r21, Z+7	; 0x07
    1ff0:	57 ff       	sbrs	r21, 7
    1ff2:	1a c0       	rjmp	.+52     	; 0x2028 <_fpadd_parts+0x286>
    1ff4:	c9 01       	movw	r24, r18
    1ff6:	aa 27       	eor	r26, r26
    1ff8:	97 fd       	sbrc	r25, 7
    1ffa:	a0 95       	com	r26
    1ffc:	ba 2f       	mov	r27, r26
    1ffe:	81 70       	andi	r24, 0x01	; 1
    2000:	90 70       	andi	r25, 0x00	; 0
    2002:	a0 70       	andi	r26, 0x00	; 0
    2004:	b0 70       	andi	r27, 0x00	; 0
    2006:	56 95       	lsr	r21
    2008:	47 95       	ror	r20
    200a:	37 95       	ror	r19
    200c:	27 95       	ror	r18
    200e:	82 2b       	or	r24, r18
    2010:	93 2b       	or	r25, r19
    2012:	a4 2b       	or	r26, r20
    2014:	b5 2b       	or	r27, r21
    2016:	84 83       	std	Z+4, r24	; 0x04
    2018:	95 83       	std	Z+5, r25	; 0x05
    201a:	a6 83       	std	Z+6, r26	; 0x06
    201c:	b7 83       	std	Z+7, r27	; 0x07
    201e:	82 81       	ldd	r24, Z+2	; 0x02
    2020:	93 81       	ldd	r25, Z+3	; 0x03
    2022:	01 96       	adiw	r24, 0x01	; 1
    2024:	93 83       	std	Z+3, r25	; 0x03
    2026:	82 83       	std	Z+2, r24	; 0x02
    2028:	df 01       	movw	r26, r30
    202a:	01 c0       	rjmp	.+2      	; 0x202e <_fpadd_parts+0x28c>
    202c:	d2 01       	movw	r26, r4
    202e:	cd 01       	movw	r24, r26
    2030:	cd b7       	in	r28, 0x3d	; 61
    2032:	de b7       	in	r29, 0x3e	; 62
    2034:	e2 e1       	ldi	r30, 0x12	; 18
    2036:	0c 94 75 16 	jmp	0x2cea	; 0x2cea <__epilogue_restores__>

0000203a <__subsf3>:
    203a:	a0 e2       	ldi	r26, 0x20	; 32
    203c:	b0 e0       	ldi	r27, 0x00	; 0
    203e:	e3 e2       	ldi	r30, 0x23	; 35
    2040:	f0 e1       	ldi	r31, 0x10	; 16
    2042:	0c 94 65 16 	jmp	0x2cca	; 0x2cca <__prologue_saves__+0x18>
    2046:	69 83       	std	Y+1, r22	; 0x01
    2048:	7a 83       	std	Y+2, r23	; 0x02
    204a:	8b 83       	std	Y+3, r24	; 0x03
    204c:	9c 83       	std	Y+4, r25	; 0x04
    204e:	2d 83       	std	Y+5, r18	; 0x05
    2050:	3e 83       	std	Y+6, r19	; 0x06
    2052:	4f 83       	std	Y+7, r20	; 0x07
    2054:	58 87       	std	Y+8, r21	; 0x08
    2056:	e9 e0       	ldi	r30, 0x09	; 9
    2058:	ee 2e       	mov	r14, r30
    205a:	f1 2c       	mov	r15, r1
    205c:	ec 0e       	add	r14, r28
    205e:	fd 1e       	adc	r15, r29
    2060:	ce 01       	movw	r24, r28
    2062:	01 96       	adiw	r24, 0x01	; 1
    2064:	b7 01       	movw	r22, r14
    2066:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__unpack_f>
    206a:	8e 01       	movw	r16, r28
    206c:	0f 5e       	subi	r16, 0xEF	; 239
    206e:	1f 4f       	sbci	r17, 0xFF	; 255
    2070:	ce 01       	movw	r24, r28
    2072:	05 96       	adiw	r24, 0x05	; 5
    2074:	b8 01       	movw	r22, r16
    2076:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__unpack_f>
    207a:	8a 89       	ldd	r24, Y+18	; 0x12
    207c:	91 e0       	ldi	r25, 0x01	; 1
    207e:	89 27       	eor	r24, r25
    2080:	8a 8b       	std	Y+18, r24	; 0x12
    2082:	c7 01       	movw	r24, r14
    2084:	b8 01       	movw	r22, r16
    2086:	ae 01       	movw	r20, r28
    2088:	47 5e       	subi	r20, 0xE7	; 231
    208a:	5f 4f       	sbci	r21, 0xFF	; 255
    208c:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <_fpadd_parts>
    2090:	0e 94 2b 14 	call	0x2856	; 0x2856 <__pack_f>
    2094:	a0 96       	adiw	r28, 0x20	; 32
    2096:	e6 e0       	ldi	r30, 0x06	; 6
    2098:	0c 94 81 16 	jmp	0x2d02	; 0x2d02 <__epilogue_restores__+0x18>

0000209c <__addsf3>:
    209c:	a0 e2       	ldi	r26, 0x20	; 32
    209e:	b0 e0       	ldi	r27, 0x00	; 0
    20a0:	e4 e5       	ldi	r30, 0x54	; 84
    20a2:	f0 e1       	ldi	r31, 0x10	; 16
    20a4:	0c 94 65 16 	jmp	0x2cca	; 0x2cca <__prologue_saves__+0x18>
    20a8:	69 83       	std	Y+1, r22	; 0x01
    20aa:	7a 83       	std	Y+2, r23	; 0x02
    20ac:	8b 83       	std	Y+3, r24	; 0x03
    20ae:	9c 83       	std	Y+4, r25	; 0x04
    20b0:	2d 83       	std	Y+5, r18	; 0x05
    20b2:	3e 83       	std	Y+6, r19	; 0x06
    20b4:	4f 83       	std	Y+7, r20	; 0x07
    20b6:	58 87       	std	Y+8, r21	; 0x08
    20b8:	f9 e0       	ldi	r31, 0x09	; 9
    20ba:	ef 2e       	mov	r14, r31
    20bc:	f1 2c       	mov	r15, r1
    20be:	ec 0e       	add	r14, r28
    20c0:	fd 1e       	adc	r15, r29
    20c2:	ce 01       	movw	r24, r28
    20c4:	01 96       	adiw	r24, 0x01	; 1
    20c6:	b7 01       	movw	r22, r14
    20c8:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__unpack_f>
    20cc:	8e 01       	movw	r16, r28
    20ce:	0f 5e       	subi	r16, 0xEF	; 239
    20d0:	1f 4f       	sbci	r17, 0xFF	; 255
    20d2:	ce 01       	movw	r24, r28
    20d4:	05 96       	adiw	r24, 0x05	; 5
    20d6:	b8 01       	movw	r22, r16
    20d8:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__unpack_f>
    20dc:	c7 01       	movw	r24, r14
    20de:	b8 01       	movw	r22, r16
    20e0:	ae 01       	movw	r20, r28
    20e2:	47 5e       	subi	r20, 0xE7	; 231
    20e4:	5f 4f       	sbci	r21, 0xFF	; 255
    20e6:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <_fpadd_parts>
    20ea:	0e 94 2b 14 	call	0x2856	; 0x2856 <__pack_f>
    20ee:	a0 96       	adiw	r28, 0x20	; 32
    20f0:	e6 e0       	ldi	r30, 0x06	; 6
    20f2:	0c 94 81 16 	jmp	0x2d02	; 0x2d02 <__epilogue_restores__+0x18>

000020f6 <__mulsf3>:
    20f6:	a0 e2       	ldi	r26, 0x20	; 32
    20f8:	b0 e0       	ldi	r27, 0x00	; 0
    20fa:	e1 e8       	ldi	r30, 0x81	; 129
    20fc:	f0 e1       	ldi	r31, 0x10	; 16
    20fe:	0c 94 59 16 	jmp	0x2cb2	; 0x2cb2 <__prologue_saves__>
    2102:	69 83       	std	Y+1, r22	; 0x01
    2104:	7a 83       	std	Y+2, r23	; 0x02
    2106:	8b 83       	std	Y+3, r24	; 0x03
    2108:	9c 83       	std	Y+4, r25	; 0x04
    210a:	2d 83       	std	Y+5, r18	; 0x05
    210c:	3e 83       	std	Y+6, r19	; 0x06
    210e:	4f 83       	std	Y+7, r20	; 0x07
    2110:	58 87       	std	Y+8, r21	; 0x08
    2112:	ce 01       	movw	r24, r28
    2114:	01 96       	adiw	r24, 0x01	; 1
    2116:	be 01       	movw	r22, r28
    2118:	67 5f       	subi	r22, 0xF7	; 247
    211a:	7f 4f       	sbci	r23, 0xFF	; 255
    211c:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__unpack_f>
    2120:	ce 01       	movw	r24, r28
    2122:	05 96       	adiw	r24, 0x05	; 5
    2124:	be 01       	movw	r22, r28
    2126:	6f 5e       	subi	r22, 0xEF	; 239
    2128:	7f 4f       	sbci	r23, 0xFF	; 255
    212a:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__unpack_f>
    212e:	99 85       	ldd	r25, Y+9	; 0x09
    2130:	92 30       	cpi	r25, 0x02	; 2
    2132:	88 f0       	brcs	.+34     	; 0x2156 <__mulsf3+0x60>
    2134:	89 89       	ldd	r24, Y+17	; 0x11
    2136:	82 30       	cpi	r24, 0x02	; 2
    2138:	c8 f0       	brcs	.+50     	; 0x216c <__mulsf3+0x76>
    213a:	94 30       	cpi	r25, 0x04	; 4
    213c:	19 f4       	brne	.+6      	; 0x2144 <__mulsf3+0x4e>
    213e:	82 30       	cpi	r24, 0x02	; 2
    2140:	51 f4       	brne	.+20     	; 0x2156 <__mulsf3+0x60>
    2142:	04 c0       	rjmp	.+8      	; 0x214c <__mulsf3+0x56>
    2144:	84 30       	cpi	r24, 0x04	; 4
    2146:	29 f4       	brne	.+10     	; 0x2152 <__mulsf3+0x5c>
    2148:	92 30       	cpi	r25, 0x02	; 2
    214a:	81 f4       	brne	.+32     	; 0x216c <__mulsf3+0x76>
    214c:	85 e5       	ldi	r24, 0x55	; 85
    214e:	92 e0       	ldi	r25, 0x02	; 2
    2150:	c6 c0       	rjmp	.+396    	; 0x22de <__mulsf3+0x1e8>
    2152:	92 30       	cpi	r25, 0x02	; 2
    2154:	49 f4       	brne	.+18     	; 0x2168 <__mulsf3+0x72>
    2156:	20 e0       	ldi	r18, 0x00	; 0
    2158:	9a 85       	ldd	r25, Y+10	; 0x0a
    215a:	8a 89       	ldd	r24, Y+18	; 0x12
    215c:	98 13       	cpse	r25, r24
    215e:	21 e0       	ldi	r18, 0x01	; 1
    2160:	2a 87       	std	Y+10, r18	; 0x0a
    2162:	ce 01       	movw	r24, r28
    2164:	09 96       	adiw	r24, 0x09	; 9
    2166:	bb c0       	rjmp	.+374    	; 0x22de <__mulsf3+0x1e8>
    2168:	82 30       	cpi	r24, 0x02	; 2
    216a:	49 f4       	brne	.+18     	; 0x217e <__mulsf3+0x88>
    216c:	20 e0       	ldi	r18, 0x00	; 0
    216e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2170:	8a 89       	ldd	r24, Y+18	; 0x12
    2172:	98 13       	cpse	r25, r24
    2174:	21 e0       	ldi	r18, 0x01	; 1
    2176:	2a 8b       	std	Y+18, r18	; 0x12
    2178:	ce 01       	movw	r24, r28
    217a:	41 96       	adiw	r24, 0x11	; 17
    217c:	b0 c0       	rjmp	.+352    	; 0x22de <__mulsf3+0x1e8>
    217e:	2d 84       	ldd	r2, Y+13	; 0x0d
    2180:	3e 84       	ldd	r3, Y+14	; 0x0e
    2182:	4f 84       	ldd	r4, Y+15	; 0x0f
    2184:	58 88       	ldd	r5, Y+16	; 0x10
    2186:	6d 88       	ldd	r6, Y+21	; 0x15
    2188:	7e 88       	ldd	r7, Y+22	; 0x16
    218a:	8f 88       	ldd	r8, Y+23	; 0x17
    218c:	98 8c       	ldd	r9, Y+24	; 0x18
    218e:	ee 24       	eor	r14, r14
    2190:	ff 24       	eor	r15, r15
    2192:	87 01       	movw	r16, r14
    2194:	aa 24       	eor	r10, r10
    2196:	bb 24       	eor	r11, r11
    2198:	65 01       	movw	r12, r10
    219a:	40 e0       	ldi	r20, 0x00	; 0
    219c:	50 e0       	ldi	r21, 0x00	; 0
    219e:	60 e0       	ldi	r22, 0x00	; 0
    21a0:	70 e0       	ldi	r23, 0x00	; 0
    21a2:	e0 e0       	ldi	r30, 0x00	; 0
    21a4:	f0 e0       	ldi	r31, 0x00	; 0
    21a6:	c1 01       	movw	r24, r2
    21a8:	81 70       	andi	r24, 0x01	; 1
    21aa:	90 70       	andi	r25, 0x00	; 0
    21ac:	89 2b       	or	r24, r25
    21ae:	e9 f0       	breq	.+58     	; 0x21ea <__mulsf3+0xf4>
    21b0:	e6 0c       	add	r14, r6
    21b2:	f7 1c       	adc	r15, r7
    21b4:	08 1d       	adc	r16, r8
    21b6:	19 1d       	adc	r17, r9
    21b8:	9a 01       	movw	r18, r20
    21ba:	ab 01       	movw	r20, r22
    21bc:	2a 0d       	add	r18, r10
    21be:	3b 1d       	adc	r19, r11
    21c0:	4c 1d       	adc	r20, r12
    21c2:	5d 1d       	adc	r21, r13
    21c4:	80 e0       	ldi	r24, 0x00	; 0
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	a0 e0       	ldi	r26, 0x00	; 0
    21ca:	b0 e0       	ldi	r27, 0x00	; 0
    21cc:	e6 14       	cp	r14, r6
    21ce:	f7 04       	cpc	r15, r7
    21d0:	08 05       	cpc	r16, r8
    21d2:	19 05       	cpc	r17, r9
    21d4:	20 f4       	brcc	.+8      	; 0x21de <__mulsf3+0xe8>
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	a0 e0       	ldi	r26, 0x00	; 0
    21dc:	b0 e0       	ldi	r27, 0x00	; 0
    21de:	ba 01       	movw	r22, r20
    21e0:	a9 01       	movw	r20, r18
    21e2:	48 0f       	add	r20, r24
    21e4:	59 1f       	adc	r21, r25
    21e6:	6a 1f       	adc	r22, r26
    21e8:	7b 1f       	adc	r23, r27
    21ea:	aa 0c       	add	r10, r10
    21ec:	bb 1c       	adc	r11, r11
    21ee:	cc 1c       	adc	r12, r12
    21f0:	dd 1c       	adc	r13, r13
    21f2:	97 fe       	sbrs	r9, 7
    21f4:	08 c0       	rjmp	.+16     	; 0x2206 <__mulsf3+0x110>
    21f6:	81 e0       	ldi	r24, 0x01	; 1
    21f8:	90 e0       	ldi	r25, 0x00	; 0
    21fa:	a0 e0       	ldi	r26, 0x00	; 0
    21fc:	b0 e0       	ldi	r27, 0x00	; 0
    21fe:	a8 2a       	or	r10, r24
    2200:	b9 2a       	or	r11, r25
    2202:	ca 2a       	or	r12, r26
    2204:	db 2a       	or	r13, r27
    2206:	31 96       	adiw	r30, 0x01	; 1
    2208:	e0 32       	cpi	r30, 0x20	; 32
    220a:	f1 05       	cpc	r31, r1
    220c:	49 f0       	breq	.+18     	; 0x2220 <__mulsf3+0x12a>
    220e:	66 0c       	add	r6, r6
    2210:	77 1c       	adc	r7, r7
    2212:	88 1c       	adc	r8, r8
    2214:	99 1c       	adc	r9, r9
    2216:	56 94       	lsr	r5
    2218:	47 94       	ror	r4
    221a:	37 94       	ror	r3
    221c:	27 94       	ror	r2
    221e:	c3 cf       	rjmp	.-122    	; 0x21a6 <__mulsf3+0xb0>
    2220:	fa 85       	ldd	r31, Y+10	; 0x0a
    2222:	ea 89       	ldd	r30, Y+18	; 0x12
    2224:	2b 89       	ldd	r18, Y+19	; 0x13
    2226:	3c 89       	ldd	r19, Y+20	; 0x14
    2228:	8b 85       	ldd	r24, Y+11	; 0x0b
    222a:	9c 85       	ldd	r25, Y+12	; 0x0c
    222c:	28 0f       	add	r18, r24
    222e:	39 1f       	adc	r19, r25
    2230:	2e 5f       	subi	r18, 0xFE	; 254
    2232:	3f 4f       	sbci	r19, 0xFF	; 255
    2234:	17 c0       	rjmp	.+46     	; 0x2264 <__mulsf3+0x16e>
    2236:	ca 01       	movw	r24, r20
    2238:	81 70       	andi	r24, 0x01	; 1
    223a:	90 70       	andi	r25, 0x00	; 0
    223c:	89 2b       	or	r24, r25
    223e:	61 f0       	breq	.+24     	; 0x2258 <__mulsf3+0x162>
    2240:	16 95       	lsr	r17
    2242:	07 95       	ror	r16
    2244:	f7 94       	ror	r15
    2246:	e7 94       	ror	r14
    2248:	80 e0       	ldi	r24, 0x00	; 0
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	a0 e0       	ldi	r26, 0x00	; 0
    224e:	b0 e8       	ldi	r27, 0x80	; 128
    2250:	e8 2a       	or	r14, r24
    2252:	f9 2a       	or	r15, r25
    2254:	0a 2b       	or	r16, r26
    2256:	1b 2b       	or	r17, r27
    2258:	76 95       	lsr	r23
    225a:	67 95       	ror	r22
    225c:	57 95       	ror	r21
    225e:	47 95       	ror	r20
    2260:	2f 5f       	subi	r18, 0xFF	; 255
    2262:	3f 4f       	sbci	r19, 0xFF	; 255
    2264:	77 fd       	sbrc	r23, 7
    2266:	e7 cf       	rjmp	.-50     	; 0x2236 <__mulsf3+0x140>
    2268:	0c c0       	rjmp	.+24     	; 0x2282 <__mulsf3+0x18c>
    226a:	44 0f       	add	r20, r20
    226c:	55 1f       	adc	r21, r21
    226e:	66 1f       	adc	r22, r22
    2270:	77 1f       	adc	r23, r23
    2272:	17 fd       	sbrc	r17, 7
    2274:	41 60       	ori	r20, 0x01	; 1
    2276:	ee 0c       	add	r14, r14
    2278:	ff 1c       	adc	r15, r15
    227a:	00 1f       	adc	r16, r16
    227c:	11 1f       	adc	r17, r17
    227e:	21 50       	subi	r18, 0x01	; 1
    2280:	30 40       	sbci	r19, 0x00	; 0
    2282:	40 30       	cpi	r20, 0x00	; 0
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	59 07       	cpc	r21, r25
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	69 07       	cpc	r22, r25
    228c:	90 e4       	ldi	r25, 0x40	; 64
    228e:	79 07       	cpc	r23, r25
    2290:	60 f3       	brcs	.-40     	; 0x226a <__mulsf3+0x174>
    2292:	2b 8f       	std	Y+27, r18	; 0x1b
    2294:	3c 8f       	std	Y+28, r19	; 0x1c
    2296:	db 01       	movw	r26, r22
    2298:	ca 01       	movw	r24, r20
    229a:	8f 77       	andi	r24, 0x7F	; 127
    229c:	90 70       	andi	r25, 0x00	; 0
    229e:	a0 70       	andi	r26, 0x00	; 0
    22a0:	b0 70       	andi	r27, 0x00	; 0
    22a2:	80 34       	cpi	r24, 0x40	; 64
    22a4:	91 05       	cpc	r25, r1
    22a6:	a1 05       	cpc	r26, r1
    22a8:	b1 05       	cpc	r27, r1
    22aa:	61 f4       	brne	.+24     	; 0x22c4 <__mulsf3+0x1ce>
    22ac:	47 fd       	sbrc	r20, 7
    22ae:	0a c0       	rjmp	.+20     	; 0x22c4 <__mulsf3+0x1ce>
    22b0:	e1 14       	cp	r14, r1
    22b2:	f1 04       	cpc	r15, r1
    22b4:	01 05       	cpc	r16, r1
    22b6:	11 05       	cpc	r17, r1
    22b8:	29 f0       	breq	.+10     	; 0x22c4 <__mulsf3+0x1ce>
    22ba:	40 5c       	subi	r20, 0xC0	; 192
    22bc:	5f 4f       	sbci	r21, 0xFF	; 255
    22be:	6f 4f       	sbci	r22, 0xFF	; 255
    22c0:	7f 4f       	sbci	r23, 0xFF	; 255
    22c2:	40 78       	andi	r20, 0x80	; 128
    22c4:	1a 8e       	std	Y+26, r1	; 0x1a
    22c6:	fe 17       	cp	r31, r30
    22c8:	11 f0       	breq	.+4      	; 0x22ce <__mulsf3+0x1d8>
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	8a 8f       	std	Y+26, r24	; 0x1a
    22ce:	4d 8f       	std	Y+29, r20	; 0x1d
    22d0:	5e 8f       	std	Y+30, r21	; 0x1e
    22d2:	6f 8f       	std	Y+31, r22	; 0x1f
    22d4:	78 a3       	std	Y+32, r23	; 0x20
    22d6:	83 e0       	ldi	r24, 0x03	; 3
    22d8:	89 8f       	std	Y+25, r24	; 0x19
    22da:	ce 01       	movw	r24, r28
    22dc:	49 96       	adiw	r24, 0x19	; 25
    22de:	0e 94 2b 14 	call	0x2856	; 0x2856 <__pack_f>
    22e2:	a0 96       	adiw	r28, 0x20	; 32
    22e4:	e2 e1       	ldi	r30, 0x12	; 18
    22e6:	0c 94 75 16 	jmp	0x2cea	; 0x2cea <__epilogue_restores__>

000022ea <__divsf3>:
    22ea:	a8 e1       	ldi	r26, 0x18	; 24
    22ec:	b0 e0       	ldi	r27, 0x00	; 0
    22ee:	eb e7       	ldi	r30, 0x7B	; 123
    22f0:	f1 e1       	ldi	r31, 0x11	; 17
    22f2:	0c 94 61 16 	jmp	0x2cc2	; 0x2cc2 <__prologue_saves__+0x10>
    22f6:	69 83       	std	Y+1, r22	; 0x01
    22f8:	7a 83       	std	Y+2, r23	; 0x02
    22fa:	8b 83       	std	Y+3, r24	; 0x03
    22fc:	9c 83       	std	Y+4, r25	; 0x04
    22fe:	2d 83       	std	Y+5, r18	; 0x05
    2300:	3e 83       	std	Y+6, r19	; 0x06
    2302:	4f 83       	std	Y+7, r20	; 0x07
    2304:	58 87       	std	Y+8, r21	; 0x08
    2306:	b9 e0       	ldi	r27, 0x09	; 9
    2308:	eb 2e       	mov	r14, r27
    230a:	f1 2c       	mov	r15, r1
    230c:	ec 0e       	add	r14, r28
    230e:	fd 1e       	adc	r15, r29
    2310:	ce 01       	movw	r24, r28
    2312:	01 96       	adiw	r24, 0x01	; 1
    2314:	b7 01       	movw	r22, r14
    2316:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__unpack_f>
    231a:	8e 01       	movw	r16, r28
    231c:	0f 5e       	subi	r16, 0xEF	; 239
    231e:	1f 4f       	sbci	r17, 0xFF	; 255
    2320:	ce 01       	movw	r24, r28
    2322:	05 96       	adiw	r24, 0x05	; 5
    2324:	b8 01       	movw	r22, r16
    2326:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__unpack_f>
    232a:	29 85       	ldd	r18, Y+9	; 0x09
    232c:	22 30       	cpi	r18, 0x02	; 2
    232e:	08 f4       	brcc	.+2      	; 0x2332 <__divsf3+0x48>
    2330:	7e c0       	rjmp	.+252    	; 0x242e <__divsf3+0x144>
    2332:	39 89       	ldd	r19, Y+17	; 0x11
    2334:	32 30       	cpi	r19, 0x02	; 2
    2336:	10 f4       	brcc	.+4      	; 0x233c <__divsf3+0x52>
    2338:	b8 01       	movw	r22, r16
    233a:	7c c0       	rjmp	.+248    	; 0x2434 <__divsf3+0x14a>
    233c:	8a 85       	ldd	r24, Y+10	; 0x0a
    233e:	9a 89       	ldd	r25, Y+18	; 0x12
    2340:	89 27       	eor	r24, r25
    2342:	8a 87       	std	Y+10, r24	; 0x0a
    2344:	24 30       	cpi	r18, 0x04	; 4
    2346:	11 f0       	breq	.+4      	; 0x234c <__divsf3+0x62>
    2348:	22 30       	cpi	r18, 0x02	; 2
    234a:	31 f4       	brne	.+12     	; 0x2358 <__divsf3+0x6e>
    234c:	23 17       	cp	r18, r19
    234e:	09 f0       	breq	.+2      	; 0x2352 <__divsf3+0x68>
    2350:	6e c0       	rjmp	.+220    	; 0x242e <__divsf3+0x144>
    2352:	65 e5       	ldi	r22, 0x55	; 85
    2354:	72 e0       	ldi	r23, 0x02	; 2
    2356:	6e c0       	rjmp	.+220    	; 0x2434 <__divsf3+0x14a>
    2358:	34 30       	cpi	r19, 0x04	; 4
    235a:	39 f4       	brne	.+14     	; 0x236a <__divsf3+0x80>
    235c:	1d 86       	std	Y+13, r1	; 0x0d
    235e:	1e 86       	std	Y+14, r1	; 0x0e
    2360:	1f 86       	std	Y+15, r1	; 0x0f
    2362:	18 8a       	std	Y+16, r1	; 0x10
    2364:	1c 86       	std	Y+12, r1	; 0x0c
    2366:	1b 86       	std	Y+11, r1	; 0x0b
    2368:	04 c0       	rjmp	.+8      	; 0x2372 <__divsf3+0x88>
    236a:	32 30       	cpi	r19, 0x02	; 2
    236c:	21 f4       	brne	.+8      	; 0x2376 <__divsf3+0x8c>
    236e:	84 e0       	ldi	r24, 0x04	; 4
    2370:	89 87       	std	Y+9, r24	; 0x09
    2372:	b7 01       	movw	r22, r14
    2374:	5f c0       	rjmp	.+190    	; 0x2434 <__divsf3+0x14a>
    2376:	2b 85       	ldd	r18, Y+11	; 0x0b
    2378:	3c 85       	ldd	r19, Y+12	; 0x0c
    237a:	8b 89       	ldd	r24, Y+19	; 0x13
    237c:	9c 89       	ldd	r25, Y+20	; 0x14
    237e:	28 1b       	sub	r18, r24
    2380:	39 0b       	sbc	r19, r25
    2382:	3c 87       	std	Y+12, r19	; 0x0c
    2384:	2b 87       	std	Y+11, r18	; 0x0b
    2386:	ed 84       	ldd	r14, Y+13	; 0x0d
    2388:	fe 84       	ldd	r15, Y+14	; 0x0e
    238a:	0f 85       	ldd	r16, Y+15	; 0x0f
    238c:	18 89       	ldd	r17, Y+16	; 0x10
    238e:	ad 88       	ldd	r10, Y+21	; 0x15
    2390:	be 88       	ldd	r11, Y+22	; 0x16
    2392:	cf 88       	ldd	r12, Y+23	; 0x17
    2394:	d8 8c       	ldd	r13, Y+24	; 0x18
    2396:	ea 14       	cp	r14, r10
    2398:	fb 04       	cpc	r15, r11
    239a:	0c 05       	cpc	r16, r12
    239c:	1d 05       	cpc	r17, r13
    239e:	40 f4       	brcc	.+16     	; 0x23b0 <__divsf3+0xc6>
    23a0:	ee 0c       	add	r14, r14
    23a2:	ff 1c       	adc	r15, r15
    23a4:	00 1f       	adc	r16, r16
    23a6:	11 1f       	adc	r17, r17
    23a8:	21 50       	subi	r18, 0x01	; 1
    23aa:	30 40       	sbci	r19, 0x00	; 0
    23ac:	3c 87       	std	Y+12, r19	; 0x0c
    23ae:	2b 87       	std	Y+11, r18	; 0x0b
    23b0:	20 e0       	ldi	r18, 0x00	; 0
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	40 e0       	ldi	r20, 0x00	; 0
    23b6:	50 e0       	ldi	r21, 0x00	; 0
    23b8:	80 e0       	ldi	r24, 0x00	; 0
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	a0 e0       	ldi	r26, 0x00	; 0
    23be:	b0 e4       	ldi	r27, 0x40	; 64
    23c0:	60 e0       	ldi	r22, 0x00	; 0
    23c2:	70 e0       	ldi	r23, 0x00	; 0
    23c4:	ea 14       	cp	r14, r10
    23c6:	fb 04       	cpc	r15, r11
    23c8:	0c 05       	cpc	r16, r12
    23ca:	1d 05       	cpc	r17, r13
    23cc:	40 f0       	brcs	.+16     	; 0x23de <__divsf3+0xf4>
    23ce:	28 2b       	or	r18, r24
    23d0:	39 2b       	or	r19, r25
    23d2:	4a 2b       	or	r20, r26
    23d4:	5b 2b       	or	r21, r27
    23d6:	ea 18       	sub	r14, r10
    23d8:	fb 08       	sbc	r15, r11
    23da:	0c 09       	sbc	r16, r12
    23dc:	1d 09       	sbc	r17, r13
    23de:	b6 95       	lsr	r27
    23e0:	a7 95       	ror	r26
    23e2:	97 95       	ror	r25
    23e4:	87 95       	ror	r24
    23e6:	ee 0c       	add	r14, r14
    23e8:	ff 1c       	adc	r15, r15
    23ea:	00 1f       	adc	r16, r16
    23ec:	11 1f       	adc	r17, r17
    23ee:	6f 5f       	subi	r22, 0xFF	; 255
    23f0:	7f 4f       	sbci	r23, 0xFF	; 255
    23f2:	6f 31       	cpi	r22, 0x1F	; 31
    23f4:	71 05       	cpc	r23, r1
    23f6:	31 f7       	brne	.-52     	; 0x23c4 <__divsf3+0xda>
    23f8:	da 01       	movw	r26, r20
    23fa:	c9 01       	movw	r24, r18
    23fc:	8f 77       	andi	r24, 0x7F	; 127
    23fe:	90 70       	andi	r25, 0x00	; 0
    2400:	a0 70       	andi	r26, 0x00	; 0
    2402:	b0 70       	andi	r27, 0x00	; 0
    2404:	80 34       	cpi	r24, 0x40	; 64
    2406:	91 05       	cpc	r25, r1
    2408:	a1 05       	cpc	r26, r1
    240a:	b1 05       	cpc	r27, r1
    240c:	61 f4       	brne	.+24     	; 0x2426 <__divsf3+0x13c>
    240e:	27 fd       	sbrc	r18, 7
    2410:	0a c0       	rjmp	.+20     	; 0x2426 <__divsf3+0x13c>
    2412:	e1 14       	cp	r14, r1
    2414:	f1 04       	cpc	r15, r1
    2416:	01 05       	cpc	r16, r1
    2418:	11 05       	cpc	r17, r1
    241a:	29 f0       	breq	.+10     	; 0x2426 <__divsf3+0x13c>
    241c:	20 5c       	subi	r18, 0xC0	; 192
    241e:	3f 4f       	sbci	r19, 0xFF	; 255
    2420:	4f 4f       	sbci	r20, 0xFF	; 255
    2422:	5f 4f       	sbci	r21, 0xFF	; 255
    2424:	20 78       	andi	r18, 0x80	; 128
    2426:	2d 87       	std	Y+13, r18	; 0x0d
    2428:	3e 87       	std	Y+14, r19	; 0x0e
    242a:	4f 87       	std	Y+15, r20	; 0x0f
    242c:	58 8b       	std	Y+16, r21	; 0x10
    242e:	be 01       	movw	r22, r28
    2430:	67 5f       	subi	r22, 0xF7	; 247
    2432:	7f 4f       	sbci	r23, 0xFF	; 255
    2434:	cb 01       	movw	r24, r22
    2436:	0e 94 2b 14 	call	0x2856	; 0x2856 <__pack_f>
    243a:	68 96       	adiw	r28, 0x18	; 24
    243c:	ea e0       	ldi	r30, 0x0A	; 10
    243e:	0c 94 7d 16 	jmp	0x2cfa	; 0x2cfa <__epilogue_restores__+0x10>

00002442 <__gtsf2>:
    2442:	a8 e1       	ldi	r26, 0x18	; 24
    2444:	b0 e0       	ldi	r27, 0x00	; 0
    2446:	e7 e2       	ldi	r30, 0x27	; 39
    2448:	f2 e1       	ldi	r31, 0x12	; 18
    244a:	0c 94 65 16 	jmp	0x2cca	; 0x2cca <__prologue_saves__+0x18>
    244e:	69 83       	std	Y+1, r22	; 0x01
    2450:	7a 83       	std	Y+2, r23	; 0x02
    2452:	8b 83       	std	Y+3, r24	; 0x03
    2454:	9c 83       	std	Y+4, r25	; 0x04
    2456:	2d 83       	std	Y+5, r18	; 0x05
    2458:	3e 83       	std	Y+6, r19	; 0x06
    245a:	4f 83       	std	Y+7, r20	; 0x07
    245c:	58 87       	std	Y+8, r21	; 0x08
    245e:	89 e0       	ldi	r24, 0x09	; 9
    2460:	e8 2e       	mov	r14, r24
    2462:	f1 2c       	mov	r15, r1
    2464:	ec 0e       	add	r14, r28
    2466:	fd 1e       	adc	r15, r29
    2468:	ce 01       	movw	r24, r28
    246a:	01 96       	adiw	r24, 0x01	; 1
    246c:	b7 01       	movw	r22, r14
    246e:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__unpack_f>
    2472:	8e 01       	movw	r16, r28
    2474:	0f 5e       	subi	r16, 0xEF	; 239
    2476:	1f 4f       	sbci	r17, 0xFF	; 255
    2478:	ce 01       	movw	r24, r28
    247a:	05 96       	adiw	r24, 0x05	; 5
    247c:	b8 01       	movw	r22, r16
    247e:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__unpack_f>
    2482:	89 85       	ldd	r24, Y+9	; 0x09
    2484:	82 30       	cpi	r24, 0x02	; 2
    2486:	40 f0       	brcs	.+16     	; 0x2498 <__gtsf2+0x56>
    2488:	89 89       	ldd	r24, Y+17	; 0x11
    248a:	82 30       	cpi	r24, 0x02	; 2
    248c:	28 f0       	brcs	.+10     	; 0x2498 <__gtsf2+0x56>
    248e:	c7 01       	movw	r24, r14
    2490:	b8 01       	movw	r22, r16
    2492:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__fpcmp_parts_f>
    2496:	01 c0       	rjmp	.+2      	; 0x249a <__gtsf2+0x58>
    2498:	8f ef       	ldi	r24, 0xFF	; 255
    249a:	68 96       	adiw	r28, 0x18	; 24
    249c:	e6 e0       	ldi	r30, 0x06	; 6
    249e:	0c 94 81 16 	jmp	0x2d02	; 0x2d02 <__epilogue_restores__+0x18>

000024a2 <__gesf2>:
    24a2:	a8 e1       	ldi	r26, 0x18	; 24
    24a4:	b0 e0       	ldi	r27, 0x00	; 0
    24a6:	e7 e5       	ldi	r30, 0x57	; 87
    24a8:	f2 e1       	ldi	r31, 0x12	; 18
    24aa:	0c 94 65 16 	jmp	0x2cca	; 0x2cca <__prologue_saves__+0x18>
    24ae:	69 83       	std	Y+1, r22	; 0x01
    24b0:	7a 83       	std	Y+2, r23	; 0x02
    24b2:	8b 83       	std	Y+3, r24	; 0x03
    24b4:	9c 83       	std	Y+4, r25	; 0x04
    24b6:	2d 83       	std	Y+5, r18	; 0x05
    24b8:	3e 83       	std	Y+6, r19	; 0x06
    24ba:	4f 83       	std	Y+7, r20	; 0x07
    24bc:	58 87       	std	Y+8, r21	; 0x08
    24be:	89 e0       	ldi	r24, 0x09	; 9
    24c0:	e8 2e       	mov	r14, r24
    24c2:	f1 2c       	mov	r15, r1
    24c4:	ec 0e       	add	r14, r28
    24c6:	fd 1e       	adc	r15, r29
    24c8:	ce 01       	movw	r24, r28
    24ca:	01 96       	adiw	r24, 0x01	; 1
    24cc:	b7 01       	movw	r22, r14
    24ce:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__unpack_f>
    24d2:	8e 01       	movw	r16, r28
    24d4:	0f 5e       	subi	r16, 0xEF	; 239
    24d6:	1f 4f       	sbci	r17, 0xFF	; 255
    24d8:	ce 01       	movw	r24, r28
    24da:	05 96       	adiw	r24, 0x05	; 5
    24dc:	b8 01       	movw	r22, r16
    24de:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__unpack_f>
    24e2:	89 85       	ldd	r24, Y+9	; 0x09
    24e4:	82 30       	cpi	r24, 0x02	; 2
    24e6:	40 f0       	brcs	.+16     	; 0x24f8 <__gesf2+0x56>
    24e8:	89 89       	ldd	r24, Y+17	; 0x11
    24ea:	82 30       	cpi	r24, 0x02	; 2
    24ec:	28 f0       	brcs	.+10     	; 0x24f8 <__gesf2+0x56>
    24ee:	c7 01       	movw	r24, r14
    24f0:	b8 01       	movw	r22, r16
    24f2:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__fpcmp_parts_f>
    24f6:	01 c0       	rjmp	.+2      	; 0x24fa <__gesf2+0x58>
    24f8:	8f ef       	ldi	r24, 0xFF	; 255
    24fa:	68 96       	adiw	r28, 0x18	; 24
    24fc:	e6 e0       	ldi	r30, 0x06	; 6
    24fe:	0c 94 81 16 	jmp	0x2d02	; 0x2d02 <__epilogue_restores__+0x18>

00002502 <__ltsf2>:
    2502:	a8 e1       	ldi	r26, 0x18	; 24
    2504:	b0 e0       	ldi	r27, 0x00	; 0
    2506:	e7 e8       	ldi	r30, 0x87	; 135
    2508:	f2 e1       	ldi	r31, 0x12	; 18
    250a:	0c 94 65 16 	jmp	0x2cca	; 0x2cca <__prologue_saves__+0x18>
    250e:	69 83       	std	Y+1, r22	; 0x01
    2510:	7a 83       	std	Y+2, r23	; 0x02
    2512:	8b 83       	std	Y+3, r24	; 0x03
    2514:	9c 83       	std	Y+4, r25	; 0x04
    2516:	2d 83       	std	Y+5, r18	; 0x05
    2518:	3e 83       	std	Y+6, r19	; 0x06
    251a:	4f 83       	std	Y+7, r20	; 0x07
    251c:	58 87       	std	Y+8, r21	; 0x08
    251e:	89 e0       	ldi	r24, 0x09	; 9
    2520:	e8 2e       	mov	r14, r24
    2522:	f1 2c       	mov	r15, r1
    2524:	ec 0e       	add	r14, r28
    2526:	fd 1e       	adc	r15, r29
    2528:	ce 01       	movw	r24, r28
    252a:	01 96       	adiw	r24, 0x01	; 1
    252c:	b7 01       	movw	r22, r14
    252e:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__unpack_f>
    2532:	8e 01       	movw	r16, r28
    2534:	0f 5e       	subi	r16, 0xEF	; 239
    2536:	1f 4f       	sbci	r17, 0xFF	; 255
    2538:	ce 01       	movw	r24, r28
    253a:	05 96       	adiw	r24, 0x05	; 5
    253c:	b8 01       	movw	r22, r16
    253e:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__unpack_f>
    2542:	89 85       	ldd	r24, Y+9	; 0x09
    2544:	82 30       	cpi	r24, 0x02	; 2
    2546:	40 f0       	brcs	.+16     	; 0x2558 <__ltsf2+0x56>
    2548:	89 89       	ldd	r24, Y+17	; 0x11
    254a:	82 30       	cpi	r24, 0x02	; 2
    254c:	28 f0       	brcs	.+10     	; 0x2558 <__ltsf2+0x56>
    254e:	c7 01       	movw	r24, r14
    2550:	b8 01       	movw	r22, r16
    2552:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__fpcmp_parts_f>
    2556:	01 c0       	rjmp	.+2      	; 0x255a <__ltsf2+0x58>
    2558:	81 e0       	ldi	r24, 0x01	; 1
    255a:	68 96       	adiw	r28, 0x18	; 24
    255c:	e6 e0       	ldi	r30, 0x06	; 6
    255e:	0c 94 81 16 	jmp	0x2d02	; 0x2d02 <__epilogue_restores__+0x18>

00002562 <__floatsisf>:
    2562:	a8 e0       	ldi	r26, 0x08	; 8
    2564:	b0 e0       	ldi	r27, 0x00	; 0
    2566:	e7 eb       	ldi	r30, 0xB7	; 183
    2568:	f2 e1       	ldi	r31, 0x12	; 18
    256a:	0c 94 62 16 	jmp	0x2cc4	; 0x2cc4 <__prologue_saves__+0x12>
    256e:	9b 01       	movw	r18, r22
    2570:	ac 01       	movw	r20, r24
    2572:	83 e0       	ldi	r24, 0x03	; 3
    2574:	89 83       	std	Y+1, r24	; 0x01
    2576:	da 01       	movw	r26, r20
    2578:	c9 01       	movw	r24, r18
    257a:	88 27       	eor	r24, r24
    257c:	b7 fd       	sbrc	r27, 7
    257e:	83 95       	inc	r24
    2580:	99 27       	eor	r25, r25
    2582:	aa 27       	eor	r26, r26
    2584:	bb 27       	eor	r27, r27
    2586:	b8 2e       	mov	r11, r24
    2588:	21 15       	cp	r18, r1
    258a:	31 05       	cpc	r19, r1
    258c:	41 05       	cpc	r20, r1
    258e:	51 05       	cpc	r21, r1
    2590:	19 f4       	brne	.+6      	; 0x2598 <__floatsisf+0x36>
    2592:	82 e0       	ldi	r24, 0x02	; 2
    2594:	89 83       	std	Y+1, r24	; 0x01
    2596:	3a c0       	rjmp	.+116    	; 0x260c <__floatsisf+0xaa>
    2598:	88 23       	and	r24, r24
    259a:	a9 f0       	breq	.+42     	; 0x25c6 <__floatsisf+0x64>
    259c:	20 30       	cpi	r18, 0x00	; 0
    259e:	80 e0       	ldi	r24, 0x00	; 0
    25a0:	38 07       	cpc	r19, r24
    25a2:	80 e0       	ldi	r24, 0x00	; 0
    25a4:	48 07       	cpc	r20, r24
    25a6:	80 e8       	ldi	r24, 0x80	; 128
    25a8:	58 07       	cpc	r21, r24
    25aa:	29 f4       	brne	.+10     	; 0x25b6 <__floatsisf+0x54>
    25ac:	60 e0       	ldi	r22, 0x00	; 0
    25ae:	70 e0       	ldi	r23, 0x00	; 0
    25b0:	80 e0       	ldi	r24, 0x00	; 0
    25b2:	9f ec       	ldi	r25, 0xCF	; 207
    25b4:	30 c0       	rjmp	.+96     	; 0x2616 <__floatsisf+0xb4>
    25b6:	ee 24       	eor	r14, r14
    25b8:	ff 24       	eor	r15, r15
    25ba:	87 01       	movw	r16, r14
    25bc:	e2 1a       	sub	r14, r18
    25be:	f3 0a       	sbc	r15, r19
    25c0:	04 0b       	sbc	r16, r20
    25c2:	15 0b       	sbc	r17, r21
    25c4:	02 c0       	rjmp	.+4      	; 0x25ca <__floatsisf+0x68>
    25c6:	79 01       	movw	r14, r18
    25c8:	8a 01       	movw	r16, r20
    25ca:	8e e1       	ldi	r24, 0x1E	; 30
    25cc:	c8 2e       	mov	r12, r24
    25ce:	d1 2c       	mov	r13, r1
    25d0:	dc 82       	std	Y+4, r13	; 0x04
    25d2:	cb 82       	std	Y+3, r12	; 0x03
    25d4:	ed 82       	std	Y+5, r14	; 0x05
    25d6:	fe 82       	std	Y+6, r15	; 0x06
    25d8:	0f 83       	std	Y+7, r16	; 0x07
    25da:	18 87       	std	Y+8, r17	; 0x08
    25dc:	c8 01       	movw	r24, r16
    25de:	b7 01       	movw	r22, r14
    25e0:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <__clzsi2>
    25e4:	01 97       	sbiw	r24, 0x01	; 1
    25e6:	18 16       	cp	r1, r24
    25e8:	19 06       	cpc	r1, r25
    25ea:	84 f4       	brge	.+32     	; 0x260c <__floatsisf+0xaa>
    25ec:	08 2e       	mov	r0, r24
    25ee:	04 c0       	rjmp	.+8      	; 0x25f8 <__floatsisf+0x96>
    25f0:	ee 0c       	add	r14, r14
    25f2:	ff 1c       	adc	r15, r15
    25f4:	00 1f       	adc	r16, r16
    25f6:	11 1f       	adc	r17, r17
    25f8:	0a 94       	dec	r0
    25fa:	d2 f7       	brpl	.-12     	; 0x25f0 <__floatsisf+0x8e>
    25fc:	ed 82       	std	Y+5, r14	; 0x05
    25fe:	fe 82       	std	Y+6, r15	; 0x06
    2600:	0f 83       	std	Y+7, r16	; 0x07
    2602:	18 87       	std	Y+8, r17	; 0x08
    2604:	c8 1a       	sub	r12, r24
    2606:	d9 0a       	sbc	r13, r25
    2608:	dc 82       	std	Y+4, r13	; 0x04
    260a:	cb 82       	std	Y+3, r12	; 0x03
    260c:	ba 82       	std	Y+2, r11	; 0x02
    260e:	ce 01       	movw	r24, r28
    2610:	01 96       	adiw	r24, 0x01	; 1
    2612:	0e 94 2b 14 	call	0x2856	; 0x2856 <__pack_f>
    2616:	28 96       	adiw	r28, 0x08	; 8
    2618:	e9 e0       	ldi	r30, 0x09	; 9
    261a:	0c 94 7e 16 	jmp	0x2cfc	; 0x2cfc <__epilogue_restores__+0x12>

0000261e <__fixsfsi>:
    261e:	ac e0       	ldi	r26, 0x0C	; 12
    2620:	b0 e0       	ldi	r27, 0x00	; 0
    2622:	e5 e1       	ldi	r30, 0x15	; 21
    2624:	f3 e1       	ldi	r31, 0x13	; 19
    2626:	0c 94 69 16 	jmp	0x2cd2	; 0x2cd2 <__prologue_saves__+0x20>
    262a:	69 83       	std	Y+1, r22	; 0x01
    262c:	7a 83       	std	Y+2, r23	; 0x02
    262e:	8b 83       	std	Y+3, r24	; 0x03
    2630:	9c 83       	std	Y+4, r25	; 0x04
    2632:	ce 01       	movw	r24, r28
    2634:	01 96       	adiw	r24, 0x01	; 1
    2636:	be 01       	movw	r22, r28
    2638:	6b 5f       	subi	r22, 0xFB	; 251
    263a:	7f 4f       	sbci	r23, 0xFF	; 255
    263c:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__unpack_f>
    2640:	8d 81       	ldd	r24, Y+5	; 0x05
    2642:	82 30       	cpi	r24, 0x02	; 2
    2644:	61 f1       	breq	.+88     	; 0x269e <__fixsfsi+0x80>
    2646:	82 30       	cpi	r24, 0x02	; 2
    2648:	50 f1       	brcs	.+84     	; 0x269e <__fixsfsi+0x80>
    264a:	84 30       	cpi	r24, 0x04	; 4
    264c:	21 f4       	brne	.+8      	; 0x2656 <__fixsfsi+0x38>
    264e:	8e 81       	ldd	r24, Y+6	; 0x06
    2650:	88 23       	and	r24, r24
    2652:	51 f1       	breq	.+84     	; 0x26a8 <__fixsfsi+0x8a>
    2654:	2e c0       	rjmp	.+92     	; 0x26b2 <__fixsfsi+0x94>
    2656:	2f 81       	ldd	r18, Y+7	; 0x07
    2658:	38 85       	ldd	r19, Y+8	; 0x08
    265a:	37 fd       	sbrc	r19, 7
    265c:	20 c0       	rjmp	.+64     	; 0x269e <__fixsfsi+0x80>
    265e:	6e 81       	ldd	r22, Y+6	; 0x06
    2660:	2f 31       	cpi	r18, 0x1F	; 31
    2662:	31 05       	cpc	r19, r1
    2664:	1c f0       	brlt	.+6      	; 0x266c <__fixsfsi+0x4e>
    2666:	66 23       	and	r22, r22
    2668:	f9 f0       	breq	.+62     	; 0x26a8 <__fixsfsi+0x8a>
    266a:	23 c0       	rjmp	.+70     	; 0x26b2 <__fixsfsi+0x94>
    266c:	8e e1       	ldi	r24, 0x1E	; 30
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	82 1b       	sub	r24, r18
    2672:	93 0b       	sbc	r25, r19
    2674:	29 85       	ldd	r18, Y+9	; 0x09
    2676:	3a 85       	ldd	r19, Y+10	; 0x0a
    2678:	4b 85       	ldd	r20, Y+11	; 0x0b
    267a:	5c 85       	ldd	r21, Y+12	; 0x0c
    267c:	04 c0       	rjmp	.+8      	; 0x2686 <__fixsfsi+0x68>
    267e:	56 95       	lsr	r21
    2680:	47 95       	ror	r20
    2682:	37 95       	ror	r19
    2684:	27 95       	ror	r18
    2686:	8a 95       	dec	r24
    2688:	d2 f7       	brpl	.-12     	; 0x267e <__fixsfsi+0x60>
    268a:	66 23       	and	r22, r22
    268c:	b1 f0       	breq	.+44     	; 0x26ba <__fixsfsi+0x9c>
    268e:	50 95       	com	r21
    2690:	40 95       	com	r20
    2692:	30 95       	com	r19
    2694:	21 95       	neg	r18
    2696:	3f 4f       	sbci	r19, 0xFF	; 255
    2698:	4f 4f       	sbci	r20, 0xFF	; 255
    269a:	5f 4f       	sbci	r21, 0xFF	; 255
    269c:	0e c0       	rjmp	.+28     	; 0x26ba <__fixsfsi+0x9c>
    269e:	20 e0       	ldi	r18, 0x00	; 0
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	40 e0       	ldi	r20, 0x00	; 0
    26a4:	50 e0       	ldi	r21, 0x00	; 0
    26a6:	09 c0       	rjmp	.+18     	; 0x26ba <__fixsfsi+0x9c>
    26a8:	2f ef       	ldi	r18, 0xFF	; 255
    26aa:	3f ef       	ldi	r19, 0xFF	; 255
    26ac:	4f ef       	ldi	r20, 0xFF	; 255
    26ae:	5f e7       	ldi	r21, 0x7F	; 127
    26b0:	04 c0       	rjmp	.+8      	; 0x26ba <__fixsfsi+0x9c>
    26b2:	20 e0       	ldi	r18, 0x00	; 0
    26b4:	30 e0       	ldi	r19, 0x00	; 0
    26b6:	40 e0       	ldi	r20, 0x00	; 0
    26b8:	50 e8       	ldi	r21, 0x80	; 128
    26ba:	b9 01       	movw	r22, r18
    26bc:	ca 01       	movw	r24, r20
    26be:	2c 96       	adiw	r28, 0x0c	; 12
    26c0:	e2 e0       	ldi	r30, 0x02	; 2
    26c2:	0c 94 85 16 	jmp	0x2d0a	; 0x2d0a <__epilogue_restores__+0x20>

000026c6 <__floatunsisf>:
    26c6:	a8 e0       	ldi	r26, 0x08	; 8
    26c8:	b0 e0       	ldi	r27, 0x00	; 0
    26ca:	e9 e6       	ldi	r30, 0x69	; 105
    26cc:	f3 e1       	ldi	r31, 0x13	; 19
    26ce:	0c 94 61 16 	jmp	0x2cc2	; 0x2cc2 <__prologue_saves__+0x10>
    26d2:	7b 01       	movw	r14, r22
    26d4:	8c 01       	movw	r16, r24
    26d6:	61 15       	cp	r22, r1
    26d8:	71 05       	cpc	r23, r1
    26da:	81 05       	cpc	r24, r1
    26dc:	91 05       	cpc	r25, r1
    26de:	19 f4       	brne	.+6      	; 0x26e6 <__floatunsisf+0x20>
    26e0:	82 e0       	ldi	r24, 0x02	; 2
    26e2:	89 83       	std	Y+1, r24	; 0x01
    26e4:	60 c0       	rjmp	.+192    	; 0x27a6 <__floatunsisf+0xe0>
    26e6:	83 e0       	ldi	r24, 0x03	; 3
    26e8:	89 83       	std	Y+1, r24	; 0x01
    26ea:	8e e1       	ldi	r24, 0x1E	; 30
    26ec:	c8 2e       	mov	r12, r24
    26ee:	d1 2c       	mov	r13, r1
    26f0:	dc 82       	std	Y+4, r13	; 0x04
    26f2:	cb 82       	std	Y+3, r12	; 0x03
    26f4:	ed 82       	std	Y+5, r14	; 0x05
    26f6:	fe 82       	std	Y+6, r15	; 0x06
    26f8:	0f 83       	std	Y+7, r16	; 0x07
    26fa:	18 87       	std	Y+8, r17	; 0x08
    26fc:	c8 01       	movw	r24, r16
    26fe:	b7 01       	movw	r22, r14
    2700:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <__clzsi2>
    2704:	fc 01       	movw	r30, r24
    2706:	31 97       	sbiw	r30, 0x01	; 1
    2708:	f7 ff       	sbrs	r31, 7
    270a:	3b c0       	rjmp	.+118    	; 0x2782 <__floatunsisf+0xbc>
    270c:	22 27       	eor	r18, r18
    270e:	33 27       	eor	r19, r19
    2710:	2e 1b       	sub	r18, r30
    2712:	3f 0b       	sbc	r19, r31
    2714:	57 01       	movw	r10, r14
    2716:	68 01       	movw	r12, r16
    2718:	02 2e       	mov	r0, r18
    271a:	04 c0       	rjmp	.+8      	; 0x2724 <__floatunsisf+0x5e>
    271c:	d6 94       	lsr	r13
    271e:	c7 94       	ror	r12
    2720:	b7 94       	ror	r11
    2722:	a7 94       	ror	r10
    2724:	0a 94       	dec	r0
    2726:	d2 f7       	brpl	.-12     	; 0x271c <__floatunsisf+0x56>
    2728:	40 e0       	ldi	r20, 0x00	; 0
    272a:	50 e0       	ldi	r21, 0x00	; 0
    272c:	60 e0       	ldi	r22, 0x00	; 0
    272e:	70 e0       	ldi	r23, 0x00	; 0
    2730:	81 e0       	ldi	r24, 0x01	; 1
    2732:	90 e0       	ldi	r25, 0x00	; 0
    2734:	a0 e0       	ldi	r26, 0x00	; 0
    2736:	b0 e0       	ldi	r27, 0x00	; 0
    2738:	04 c0       	rjmp	.+8      	; 0x2742 <__floatunsisf+0x7c>
    273a:	88 0f       	add	r24, r24
    273c:	99 1f       	adc	r25, r25
    273e:	aa 1f       	adc	r26, r26
    2740:	bb 1f       	adc	r27, r27
    2742:	2a 95       	dec	r18
    2744:	d2 f7       	brpl	.-12     	; 0x273a <__floatunsisf+0x74>
    2746:	01 97       	sbiw	r24, 0x01	; 1
    2748:	a1 09       	sbc	r26, r1
    274a:	b1 09       	sbc	r27, r1
    274c:	8e 21       	and	r24, r14
    274e:	9f 21       	and	r25, r15
    2750:	a0 23       	and	r26, r16
    2752:	b1 23       	and	r27, r17
    2754:	00 97       	sbiw	r24, 0x00	; 0
    2756:	a1 05       	cpc	r26, r1
    2758:	b1 05       	cpc	r27, r1
    275a:	21 f0       	breq	.+8      	; 0x2764 <__floatunsisf+0x9e>
    275c:	41 e0       	ldi	r20, 0x01	; 1
    275e:	50 e0       	ldi	r21, 0x00	; 0
    2760:	60 e0       	ldi	r22, 0x00	; 0
    2762:	70 e0       	ldi	r23, 0x00	; 0
    2764:	4a 29       	or	r20, r10
    2766:	5b 29       	or	r21, r11
    2768:	6c 29       	or	r22, r12
    276a:	7d 29       	or	r23, r13
    276c:	4d 83       	std	Y+5, r20	; 0x05
    276e:	5e 83       	std	Y+6, r21	; 0x06
    2770:	6f 83       	std	Y+7, r22	; 0x07
    2772:	78 87       	std	Y+8, r23	; 0x08
    2774:	8e e1       	ldi	r24, 0x1E	; 30
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	8e 1b       	sub	r24, r30
    277a:	9f 0b       	sbc	r25, r31
    277c:	9c 83       	std	Y+4, r25	; 0x04
    277e:	8b 83       	std	Y+3, r24	; 0x03
    2780:	12 c0       	rjmp	.+36     	; 0x27a6 <__floatunsisf+0xe0>
    2782:	30 97       	sbiw	r30, 0x00	; 0
    2784:	81 f0       	breq	.+32     	; 0x27a6 <__floatunsisf+0xe0>
    2786:	0e 2e       	mov	r0, r30
    2788:	04 c0       	rjmp	.+8      	; 0x2792 <__floatunsisf+0xcc>
    278a:	ee 0c       	add	r14, r14
    278c:	ff 1c       	adc	r15, r15
    278e:	00 1f       	adc	r16, r16
    2790:	11 1f       	adc	r17, r17
    2792:	0a 94       	dec	r0
    2794:	d2 f7       	brpl	.-12     	; 0x278a <__floatunsisf+0xc4>
    2796:	ed 82       	std	Y+5, r14	; 0x05
    2798:	fe 82       	std	Y+6, r15	; 0x06
    279a:	0f 83       	std	Y+7, r16	; 0x07
    279c:	18 87       	std	Y+8, r17	; 0x08
    279e:	ce 1a       	sub	r12, r30
    27a0:	df 0a       	sbc	r13, r31
    27a2:	dc 82       	std	Y+4, r13	; 0x04
    27a4:	cb 82       	std	Y+3, r12	; 0x03
    27a6:	1a 82       	std	Y+2, r1	; 0x02
    27a8:	ce 01       	movw	r24, r28
    27aa:	01 96       	adiw	r24, 0x01	; 1
    27ac:	0e 94 2b 14 	call	0x2856	; 0x2856 <__pack_f>
    27b0:	28 96       	adiw	r28, 0x08	; 8
    27b2:	ea e0       	ldi	r30, 0x0A	; 10
    27b4:	0c 94 7d 16 	jmp	0x2cfa	; 0x2cfa <__epilogue_restores__+0x10>

000027b8 <__clzsi2>:
    27b8:	ef 92       	push	r14
    27ba:	ff 92       	push	r15
    27bc:	0f 93       	push	r16
    27be:	1f 93       	push	r17
    27c0:	7b 01       	movw	r14, r22
    27c2:	8c 01       	movw	r16, r24
    27c4:	80 e0       	ldi	r24, 0x00	; 0
    27c6:	e8 16       	cp	r14, r24
    27c8:	80 e0       	ldi	r24, 0x00	; 0
    27ca:	f8 06       	cpc	r15, r24
    27cc:	81 e0       	ldi	r24, 0x01	; 1
    27ce:	08 07       	cpc	r16, r24
    27d0:	80 e0       	ldi	r24, 0x00	; 0
    27d2:	18 07       	cpc	r17, r24
    27d4:	88 f4       	brcc	.+34     	; 0x27f8 <__clzsi2+0x40>
    27d6:	8f ef       	ldi	r24, 0xFF	; 255
    27d8:	e8 16       	cp	r14, r24
    27da:	f1 04       	cpc	r15, r1
    27dc:	01 05       	cpc	r16, r1
    27de:	11 05       	cpc	r17, r1
    27e0:	31 f0       	breq	.+12     	; 0x27ee <__clzsi2+0x36>
    27e2:	28 f0       	brcs	.+10     	; 0x27ee <__clzsi2+0x36>
    27e4:	88 e0       	ldi	r24, 0x08	; 8
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	a0 e0       	ldi	r26, 0x00	; 0
    27ea:	b0 e0       	ldi	r27, 0x00	; 0
    27ec:	17 c0       	rjmp	.+46     	; 0x281c <__clzsi2+0x64>
    27ee:	80 e0       	ldi	r24, 0x00	; 0
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	a0 e0       	ldi	r26, 0x00	; 0
    27f4:	b0 e0       	ldi	r27, 0x00	; 0
    27f6:	12 c0       	rjmp	.+36     	; 0x281c <__clzsi2+0x64>
    27f8:	80 e0       	ldi	r24, 0x00	; 0
    27fa:	e8 16       	cp	r14, r24
    27fc:	80 e0       	ldi	r24, 0x00	; 0
    27fe:	f8 06       	cpc	r15, r24
    2800:	80 e0       	ldi	r24, 0x00	; 0
    2802:	08 07       	cpc	r16, r24
    2804:	81 e0       	ldi	r24, 0x01	; 1
    2806:	18 07       	cpc	r17, r24
    2808:	28 f0       	brcs	.+10     	; 0x2814 <__clzsi2+0x5c>
    280a:	88 e1       	ldi	r24, 0x18	; 24
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	a0 e0       	ldi	r26, 0x00	; 0
    2810:	b0 e0       	ldi	r27, 0x00	; 0
    2812:	04 c0       	rjmp	.+8      	; 0x281c <__clzsi2+0x64>
    2814:	80 e1       	ldi	r24, 0x10	; 16
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	a0 e0       	ldi	r26, 0x00	; 0
    281a:	b0 e0       	ldi	r27, 0x00	; 0
    281c:	20 e2       	ldi	r18, 0x20	; 32
    281e:	30 e0       	ldi	r19, 0x00	; 0
    2820:	40 e0       	ldi	r20, 0x00	; 0
    2822:	50 e0       	ldi	r21, 0x00	; 0
    2824:	28 1b       	sub	r18, r24
    2826:	39 0b       	sbc	r19, r25
    2828:	4a 0b       	sbc	r20, r26
    282a:	5b 0b       	sbc	r21, r27
    282c:	04 c0       	rjmp	.+8      	; 0x2836 <__clzsi2+0x7e>
    282e:	16 95       	lsr	r17
    2830:	07 95       	ror	r16
    2832:	f7 94       	ror	r15
    2834:	e7 94       	ror	r14
    2836:	8a 95       	dec	r24
    2838:	d2 f7       	brpl	.-12     	; 0x282e <__clzsi2+0x76>
    283a:	f7 01       	movw	r30, r14
    283c:	e3 5a       	subi	r30, 0xA3	; 163
    283e:	fd 4f       	sbci	r31, 0xFD	; 253
    2840:	80 81       	ld	r24, Z
    2842:	28 1b       	sub	r18, r24
    2844:	31 09       	sbc	r19, r1
    2846:	41 09       	sbc	r20, r1
    2848:	51 09       	sbc	r21, r1
    284a:	c9 01       	movw	r24, r18
    284c:	1f 91       	pop	r17
    284e:	0f 91       	pop	r16
    2850:	ff 90       	pop	r15
    2852:	ef 90       	pop	r14
    2854:	08 95       	ret

00002856 <__pack_f>:
    2856:	df 92       	push	r13
    2858:	ef 92       	push	r14
    285a:	ff 92       	push	r15
    285c:	0f 93       	push	r16
    285e:	1f 93       	push	r17
    2860:	fc 01       	movw	r30, r24
    2862:	e4 80       	ldd	r14, Z+4	; 0x04
    2864:	f5 80       	ldd	r15, Z+5	; 0x05
    2866:	06 81       	ldd	r16, Z+6	; 0x06
    2868:	17 81       	ldd	r17, Z+7	; 0x07
    286a:	d1 80       	ldd	r13, Z+1	; 0x01
    286c:	80 81       	ld	r24, Z
    286e:	82 30       	cpi	r24, 0x02	; 2
    2870:	48 f4       	brcc	.+18     	; 0x2884 <__pack_f+0x2e>
    2872:	80 e0       	ldi	r24, 0x00	; 0
    2874:	90 e0       	ldi	r25, 0x00	; 0
    2876:	a0 e1       	ldi	r26, 0x10	; 16
    2878:	b0 e0       	ldi	r27, 0x00	; 0
    287a:	e8 2a       	or	r14, r24
    287c:	f9 2a       	or	r15, r25
    287e:	0a 2b       	or	r16, r26
    2880:	1b 2b       	or	r17, r27
    2882:	a5 c0       	rjmp	.+330    	; 0x29ce <__pack_f+0x178>
    2884:	84 30       	cpi	r24, 0x04	; 4
    2886:	09 f4       	brne	.+2      	; 0x288a <__pack_f+0x34>
    2888:	9f c0       	rjmp	.+318    	; 0x29c8 <__pack_f+0x172>
    288a:	82 30       	cpi	r24, 0x02	; 2
    288c:	21 f4       	brne	.+8      	; 0x2896 <__pack_f+0x40>
    288e:	ee 24       	eor	r14, r14
    2890:	ff 24       	eor	r15, r15
    2892:	87 01       	movw	r16, r14
    2894:	05 c0       	rjmp	.+10     	; 0x28a0 <__pack_f+0x4a>
    2896:	e1 14       	cp	r14, r1
    2898:	f1 04       	cpc	r15, r1
    289a:	01 05       	cpc	r16, r1
    289c:	11 05       	cpc	r17, r1
    289e:	19 f4       	brne	.+6      	; 0x28a6 <__pack_f+0x50>
    28a0:	e0 e0       	ldi	r30, 0x00	; 0
    28a2:	f0 e0       	ldi	r31, 0x00	; 0
    28a4:	96 c0       	rjmp	.+300    	; 0x29d2 <__pack_f+0x17c>
    28a6:	62 81       	ldd	r22, Z+2	; 0x02
    28a8:	73 81       	ldd	r23, Z+3	; 0x03
    28aa:	9f ef       	ldi	r25, 0xFF	; 255
    28ac:	62 38       	cpi	r22, 0x82	; 130
    28ae:	79 07       	cpc	r23, r25
    28b0:	0c f0       	brlt	.+2      	; 0x28b4 <__pack_f+0x5e>
    28b2:	5b c0       	rjmp	.+182    	; 0x296a <__pack_f+0x114>
    28b4:	22 e8       	ldi	r18, 0x82	; 130
    28b6:	3f ef       	ldi	r19, 0xFF	; 255
    28b8:	26 1b       	sub	r18, r22
    28ba:	37 0b       	sbc	r19, r23
    28bc:	2a 31       	cpi	r18, 0x1A	; 26
    28be:	31 05       	cpc	r19, r1
    28c0:	2c f0       	brlt	.+10     	; 0x28cc <__pack_f+0x76>
    28c2:	20 e0       	ldi	r18, 0x00	; 0
    28c4:	30 e0       	ldi	r19, 0x00	; 0
    28c6:	40 e0       	ldi	r20, 0x00	; 0
    28c8:	50 e0       	ldi	r21, 0x00	; 0
    28ca:	2a c0       	rjmp	.+84     	; 0x2920 <__pack_f+0xca>
    28cc:	b8 01       	movw	r22, r16
    28ce:	a7 01       	movw	r20, r14
    28d0:	02 2e       	mov	r0, r18
    28d2:	04 c0       	rjmp	.+8      	; 0x28dc <__pack_f+0x86>
    28d4:	76 95       	lsr	r23
    28d6:	67 95       	ror	r22
    28d8:	57 95       	ror	r21
    28da:	47 95       	ror	r20
    28dc:	0a 94       	dec	r0
    28de:	d2 f7       	brpl	.-12     	; 0x28d4 <__pack_f+0x7e>
    28e0:	81 e0       	ldi	r24, 0x01	; 1
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	a0 e0       	ldi	r26, 0x00	; 0
    28e6:	b0 e0       	ldi	r27, 0x00	; 0
    28e8:	04 c0       	rjmp	.+8      	; 0x28f2 <__pack_f+0x9c>
    28ea:	88 0f       	add	r24, r24
    28ec:	99 1f       	adc	r25, r25
    28ee:	aa 1f       	adc	r26, r26
    28f0:	bb 1f       	adc	r27, r27
    28f2:	2a 95       	dec	r18
    28f4:	d2 f7       	brpl	.-12     	; 0x28ea <__pack_f+0x94>
    28f6:	01 97       	sbiw	r24, 0x01	; 1
    28f8:	a1 09       	sbc	r26, r1
    28fa:	b1 09       	sbc	r27, r1
    28fc:	8e 21       	and	r24, r14
    28fe:	9f 21       	and	r25, r15
    2900:	a0 23       	and	r26, r16
    2902:	b1 23       	and	r27, r17
    2904:	00 97       	sbiw	r24, 0x00	; 0
    2906:	a1 05       	cpc	r26, r1
    2908:	b1 05       	cpc	r27, r1
    290a:	21 f0       	breq	.+8      	; 0x2914 <__pack_f+0xbe>
    290c:	81 e0       	ldi	r24, 0x01	; 1
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	a0 e0       	ldi	r26, 0x00	; 0
    2912:	b0 e0       	ldi	r27, 0x00	; 0
    2914:	9a 01       	movw	r18, r20
    2916:	ab 01       	movw	r20, r22
    2918:	28 2b       	or	r18, r24
    291a:	39 2b       	or	r19, r25
    291c:	4a 2b       	or	r20, r26
    291e:	5b 2b       	or	r21, r27
    2920:	da 01       	movw	r26, r20
    2922:	c9 01       	movw	r24, r18
    2924:	8f 77       	andi	r24, 0x7F	; 127
    2926:	90 70       	andi	r25, 0x00	; 0
    2928:	a0 70       	andi	r26, 0x00	; 0
    292a:	b0 70       	andi	r27, 0x00	; 0
    292c:	80 34       	cpi	r24, 0x40	; 64
    292e:	91 05       	cpc	r25, r1
    2930:	a1 05       	cpc	r26, r1
    2932:	b1 05       	cpc	r27, r1
    2934:	39 f4       	brne	.+14     	; 0x2944 <__pack_f+0xee>
    2936:	27 ff       	sbrs	r18, 7
    2938:	09 c0       	rjmp	.+18     	; 0x294c <__pack_f+0xf6>
    293a:	20 5c       	subi	r18, 0xC0	; 192
    293c:	3f 4f       	sbci	r19, 0xFF	; 255
    293e:	4f 4f       	sbci	r20, 0xFF	; 255
    2940:	5f 4f       	sbci	r21, 0xFF	; 255
    2942:	04 c0       	rjmp	.+8      	; 0x294c <__pack_f+0xf6>
    2944:	21 5c       	subi	r18, 0xC1	; 193
    2946:	3f 4f       	sbci	r19, 0xFF	; 255
    2948:	4f 4f       	sbci	r20, 0xFF	; 255
    294a:	5f 4f       	sbci	r21, 0xFF	; 255
    294c:	e0 e0       	ldi	r30, 0x00	; 0
    294e:	f0 e0       	ldi	r31, 0x00	; 0
    2950:	20 30       	cpi	r18, 0x00	; 0
    2952:	a0 e0       	ldi	r26, 0x00	; 0
    2954:	3a 07       	cpc	r19, r26
    2956:	a0 e0       	ldi	r26, 0x00	; 0
    2958:	4a 07       	cpc	r20, r26
    295a:	a0 e4       	ldi	r26, 0x40	; 64
    295c:	5a 07       	cpc	r21, r26
    295e:	10 f0       	brcs	.+4      	; 0x2964 <__pack_f+0x10e>
    2960:	e1 e0       	ldi	r30, 0x01	; 1
    2962:	f0 e0       	ldi	r31, 0x00	; 0
    2964:	79 01       	movw	r14, r18
    2966:	8a 01       	movw	r16, r20
    2968:	27 c0       	rjmp	.+78     	; 0x29b8 <__pack_f+0x162>
    296a:	60 38       	cpi	r22, 0x80	; 128
    296c:	71 05       	cpc	r23, r1
    296e:	64 f5       	brge	.+88     	; 0x29c8 <__pack_f+0x172>
    2970:	fb 01       	movw	r30, r22
    2972:	e1 58       	subi	r30, 0x81	; 129
    2974:	ff 4f       	sbci	r31, 0xFF	; 255
    2976:	d8 01       	movw	r26, r16
    2978:	c7 01       	movw	r24, r14
    297a:	8f 77       	andi	r24, 0x7F	; 127
    297c:	90 70       	andi	r25, 0x00	; 0
    297e:	a0 70       	andi	r26, 0x00	; 0
    2980:	b0 70       	andi	r27, 0x00	; 0
    2982:	80 34       	cpi	r24, 0x40	; 64
    2984:	91 05       	cpc	r25, r1
    2986:	a1 05       	cpc	r26, r1
    2988:	b1 05       	cpc	r27, r1
    298a:	39 f4       	brne	.+14     	; 0x299a <__pack_f+0x144>
    298c:	e7 fe       	sbrs	r14, 7
    298e:	0d c0       	rjmp	.+26     	; 0x29aa <__pack_f+0x154>
    2990:	80 e4       	ldi	r24, 0x40	; 64
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	a0 e0       	ldi	r26, 0x00	; 0
    2996:	b0 e0       	ldi	r27, 0x00	; 0
    2998:	04 c0       	rjmp	.+8      	; 0x29a2 <__pack_f+0x14c>
    299a:	8f e3       	ldi	r24, 0x3F	; 63
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	a0 e0       	ldi	r26, 0x00	; 0
    29a0:	b0 e0       	ldi	r27, 0x00	; 0
    29a2:	e8 0e       	add	r14, r24
    29a4:	f9 1e       	adc	r15, r25
    29a6:	0a 1f       	adc	r16, r26
    29a8:	1b 1f       	adc	r17, r27
    29aa:	17 ff       	sbrs	r17, 7
    29ac:	05 c0       	rjmp	.+10     	; 0x29b8 <__pack_f+0x162>
    29ae:	16 95       	lsr	r17
    29b0:	07 95       	ror	r16
    29b2:	f7 94       	ror	r15
    29b4:	e7 94       	ror	r14
    29b6:	31 96       	adiw	r30, 0x01	; 1
    29b8:	87 e0       	ldi	r24, 0x07	; 7
    29ba:	16 95       	lsr	r17
    29bc:	07 95       	ror	r16
    29be:	f7 94       	ror	r15
    29c0:	e7 94       	ror	r14
    29c2:	8a 95       	dec	r24
    29c4:	d1 f7       	brne	.-12     	; 0x29ba <__pack_f+0x164>
    29c6:	05 c0       	rjmp	.+10     	; 0x29d2 <__pack_f+0x17c>
    29c8:	ee 24       	eor	r14, r14
    29ca:	ff 24       	eor	r15, r15
    29cc:	87 01       	movw	r16, r14
    29ce:	ef ef       	ldi	r30, 0xFF	; 255
    29d0:	f0 e0       	ldi	r31, 0x00	; 0
    29d2:	6e 2f       	mov	r22, r30
    29d4:	67 95       	ror	r22
    29d6:	66 27       	eor	r22, r22
    29d8:	67 95       	ror	r22
    29da:	90 2f       	mov	r25, r16
    29dc:	9f 77       	andi	r25, 0x7F	; 127
    29de:	d7 94       	ror	r13
    29e0:	dd 24       	eor	r13, r13
    29e2:	d7 94       	ror	r13
    29e4:	8e 2f       	mov	r24, r30
    29e6:	86 95       	lsr	r24
    29e8:	49 2f       	mov	r20, r25
    29ea:	46 2b       	or	r20, r22
    29ec:	58 2f       	mov	r21, r24
    29ee:	5d 29       	or	r21, r13
    29f0:	b7 01       	movw	r22, r14
    29f2:	ca 01       	movw	r24, r20
    29f4:	1f 91       	pop	r17
    29f6:	0f 91       	pop	r16
    29f8:	ff 90       	pop	r15
    29fa:	ef 90       	pop	r14
    29fc:	df 90       	pop	r13
    29fe:	08 95       	ret

00002a00 <__unpack_f>:
    2a00:	fc 01       	movw	r30, r24
    2a02:	db 01       	movw	r26, r22
    2a04:	40 81       	ld	r20, Z
    2a06:	51 81       	ldd	r21, Z+1	; 0x01
    2a08:	22 81       	ldd	r18, Z+2	; 0x02
    2a0a:	62 2f       	mov	r22, r18
    2a0c:	6f 77       	andi	r22, 0x7F	; 127
    2a0e:	70 e0       	ldi	r23, 0x00	; 0
    2a10:	22 1f       	adc	r18, r18
    2a12:	22 27       	eor	r18, r18
    2a14:	22 1f       	adc	r18, r18
    2a16:	93 81       	ldd	r25, Z+3	; 0x03
    2a18:	89 2f       	mov	r24, r25
    2a1a:	88 0f       	add	r24, r24
    2a1c:	82 2b       	or	r24, r18
    2a1e:	28 2f       	mov	r18, r24
    2a20:	30 e0       	ldi	r19, 0x00	; 0
    2a22:	99 1f       	adc	r25, r25
    2a24:	99 27       	eor	r25, r25
    2a26:	99 1f       	adc	r25, r25
    2a28:	11 96       	adiw	r26, 0x01	; 1
    2a2a:	9c 93       	st	X, r25
    2a2c:	11 97       	sbiw	r26, 0x01	; 1
    2a2e:	21 15       	cp	r18, r1
    2a30:	31 05       	cpc	r19, r1
    2a32:	a9 f5       	brne	.+106    	; 0x2a9e <__unpack_f+0x9e>
    2a34:	41 15       	cp	r20, r1
    2a36:	51 05       	cpc	r21, r1
    2a38:	61 05       	cpc	r22, r1
    2a3a:	71 05       	cpc	r23, r1
    2a3c:	11 f4       	brne	.+4      	; 0x2a42 <__unpack_f+0x42>
    2a3e:	82 e0       	ldi	r24, 0x02	; 2
    2a40:	37 c0       	rjmp	.+110    	; 0x2ab0 <__unpack_f+0xb0>
    2a42:	82 e8       	ldi	r24, 0x82	; 130
    2a44:	9f ef       	ldi	r25, 0xFF	; 255
    2a46:	13 96       	adiw	r26, 0x03	; 3
    2a48:	9c 93       	st	X, r25
    2a4a:	8e 93       	st	-X, r24
    2a4c:	12 97       	sbiw	r26, 0x02	; 2
    2a4e:	9a 01       	movw	r18, r20
    2a50:	ab 01       	movw	r20, r22
    2a52:	67 e0       	ldi	r22, 0x07	; 7
    2a54:	22 0f       	add	r18, r18
    2a56:	33 1f       	adc	r19, r19
    2a58:	44 1f       	adc	r20, r20
    2a5a:	55 1f       	adc	r21, r21
    2a5c:	6a 95       	dec	r22
    2a5e:	d1 f7       	brne	.-12     	; 0x2a54 <__unpack_f+0x54>
    2a60:	83 e0       	ldi	r24, 0x03	; 3
    2a62:	8c 93       	st	X, r24
    2a64:	0d c0       	rjmp	.+26     	; 0x2a80 <__unpack_f+0x80>
    2a66:	22 0f       	add	r18, r18
    2a68:	33 1f       	adc	r19, r19
    2a6a:	44 1f       	adc	r20, r20
    2a6c:	55 1f       	adc	r21, r21
    2a6e:	12 96       	adiw	r26, 0x02	; 2
    2a70:	8d 91       	ld	r24, X+
    2a72:	9c 91       	ld	r25, X
    2a74:	13 97       	sbiw	r26, 0x03	; 3
    2a76:	01 97       	sbiw	r24, 0x01	; 1
    2a78:	13 96       	adiw	r26, 0x03	; 3
    2a7a:	9c 93       	st	X, r25
    2a7c:	8e 93       	st	-X, r24
    2a7e:	12 97       	sbiw	r26, 0x02	; 2
    2a80:	20 30       	cpi	r18, 0x00	; 0
    2a82:	80 e0       	ldi	r24, 0x00	; 0
    2a84:	38 07       	cpc	r19, r24
    2a86:	80 e0       	ldi	r24, 0x00	; 0
    2a88:	48 07       	cpc	r20, r24
    2a8a:	80 e4       	ldi	r24, 0x40	; 64
    2a8c:	58 07       	cpc	r21, r24
    2a8e:	58 f3       	brcs	.-42     	; 0x2a66 <__unpack_f+0x66>
    2a90:	14 96       	adiw	r26, 0x04	; 4
    2a92:	2d 93       	st	X+, r18
    2a94:	3d 93       	st	X+, r19
    2a96:	4d 93       	st	X+, r20
    2a98:	5c 93       	st	X, r21
    2a9a:	17 97       	sbiw	r26, 0x07	; 7
    2a9c:	08 95       	ret
    2a9e:	2f 3f       	cpi	r18, 0xFF	; 255
    2aa0:	31 05       	cpc	r19, r1
    2aa2:	79 f4       	brne	.+30     	; 0x2ac2 <__unpack_f+0xc2>
    2aa4:	41 15       	cp	r20, r1
    2aa6:	51 05       	cpc	r21, r1
    2aa8:	61 05       	cpc	r22, r1
    2aaa:	71 05       	cpc	r23, r1
    2aac:	19 f4       	brne	.+6      	; 0x2ab4 <__unpack_f+0xb4>
    2aae:	84 e0       	ldi	r24, 0x04	; 4
    2ab0:	8c 93       	st	X, r24
    2ab2:	08 95       	ret
    2ab4:	64 ff       	sbrs	r22, 4
    2ab6:	03 c0       	rjmp	.+6      	; 0x2abe <__unpack_f+0xbe>
    2ab8:	81 e0       	ldi	r24, 0x01	; 1
    2aba:	8c 93       	st	X, r24
    2abc:	12 c0       	rjmp	.+36     	; 0x2ae2 <__unpack_f+0xe2>
    2abe:	1c 92       	st	X, r1
    2ac0:	10 c0       	rjmp	.+32     	; 0x2ae2 <__unpack_f+0xe2>
    2ac2:	2f 57       	subi	r18, 0x7F	; 127
    2ac4:	30 40       	sbci	r19, 0x00	; 0
    2ac6:	13 96       	adiw	r26, 0x03	; 3
    2ac8:	3c 93       	st	X, r19
    2aca:	2e 93       	st	-X, r18
    2acc:	12 97       	sbiw	r26, 0x02	; 2
    2ace:	83 e0       	ldi	r24, 0x03	; 3
    2ad0:	8c 93       	st	X, r24
    2ad2:	87 e0       	ldi	r24, 0x07	; 7
    2ad4:	44 0f       	add	r20, r20
    2ad6:	55 1f       	adc	r21, r21
    2ad8:	66 1f       	adc	r22, r22
    2ada:	77 1f       	adc	r23, r23
    2adc:	8a 95       	dec	r24
    2ade:	d1 f7       	brne	.-12     	; 0x2ad4 <__unpack_f+0xd4>
    2ae0:	70 64       	ori	r23, 0x40	; 64
    2ae2:	14 96       	adiw	r26, 0x04	; 4
    2ae4:	4d 93       	st	X+, r20
    2ae6:	5d 93       	st	X+, r21
    2ae8:	6d 93       	st	X+, r22
    2aea:	7c 93       	st	X, r23
    2aec:	17 97       	sbiw	r26, 0x07	; 7
    2aee:	08 95       	ret

00002af0 <__fpcmp_parts_f>:
    2af0:	1f 93       	push	r17
    2af2:	dc 01       	movw	r26, r24
    2af4:	fb 01       	movw	r30, r22
    2af6:	9c 91       	ld	r25, X
    2af8:	92 30       	cpi	r25, 0x02	; 2
    2afa:	08 f4       	brcc	.+2      	; 0x2afe <__fpcmp_parts_f+0xe>
    2afc:	47 c0       	rjmp	.+142    	; 0x2b8c <__fpcmp_parts_f+0x9c>
    2afe:	80 81       	ld	r24, Z
    2b00:	82 30       	cpi	r24, 0x02	; 2
    2b02:	08 f4       	brcc	.+2      	; 0x2b06 <__fpcmp_parts_f+0x16>
    2b04:	43 c0       	rjmp	.+134    	; 0x2b8c <__fpcmp_parts_f+0x9c>
    2b06:	94 30       	cpi	r25, 0x04	; 4
    2b08:	51 f4       	brne	.+20     	; 0x2b1e <__fpcmp_parts_f+0x2e>
    2b0a:	11 96       	adiw	r26, 0x01	; 1
    2b0c:	1c 91       	ld	r17, X
    2b0e:	84 30       	cpi	r24, 0x04	; 4
    2b10:	99 f5       	brne	.+102    	; 0x2b78 <__fpcmp_parts_f+0x88>
    2b12:	81 81       	ldd	r24, Z+1	; 0x01
    2b14:	68 2f       	mov	r22, r24
    2b16:	70 e0       	ldi	r23, 0x00	; 0
    2b18:	61 1b       	sub	r22, r17
    2b1a:	71 09       	sbc	r23, r1
    2b1c:	3f c0       	rjmp	.+126    	; 0x2b9c <__fpcmp_parts_f+0xac>
    2b1e:	84 30       	cpi	r24, 0x04	; 4
    2b20:	21 f0       	breq	.+8      	; 0x2b2a <__fpcmp_parts_f+0x3a>
    2b22:	92 30       	cpi	r25, 0x02	; 2
    2b24:	31 f4       	brne	.+12     	; 0x2b32 <__fpcmp_parts_f+0x42>
    2b26:	82 30       	cpi	r24, 0x02	; 2
    2b28:	b9 f1       	breq	.+110    	; 0x2b98 <__fpcmp_parts_f+0xa8>
    2b2a:	81 81       	ldd	r24, Z+1	; 0x01
    2b2c:	88 23       	and	r24, r24
    2b2e:	89 f1       	breq	.+98     	; 0x2b92 <__fpcmp_parts_f+0xa2>
    2b30:	2d c0       	rjmp	.+90     	; 0x2b8c <__fpcmp_parts_f+0x9c>
    2b32:	11 96       	adiw	r26, 0x01	; 1
    2b34:	1c 91       	ld	r17, X
    2b36:	11 97       	sbiw	r26, 0x01	; 1
    2b38:	82 30       	cpi	r24, 0x02	; 2
    2b3a:	f1 f0       	breq	.+60     	; 0x2b78 <__fpcmp_parts_f+0x88>
    2b3c:	81 81       	ldd	r24, Z+1	; 0x01
    2b3e:	18 17       	cp	r17, r24
    2b40:	d9 f4       	brne	.+54     	; 0x2b78 <__fpcmp_parts_f+0x88>
    2b42:	12 96       	adiw	r26, 0x02	; 2
    2b44:	2d 91       	ld	r18, X+
    2b46:	3c 91       	ld	r19, X
    2b48:	13 97       	sbiw	r26, 0x03	; 3
    2b4a:	82 81       	ldd	r24, Z+2	; 0x02
    2b4c:	93 81       	ldd	r25, Z+3	; 0x03
    2b4e:	82 17       	cp	r24, r18
    2b50:	93 07       	cpc	r25, r19
    2b52:	94 f0       	brlt	.+36     	; 0x2b78 <__fpcmp_parts_f+0x88>
    2b54:	28 17       	cp	r18, r24
    2b56:	39 07       	cpc	r19, r25
    2b58:	bc f0       	brlt	.+46     	; 0x2b88 <__fpcmp_parts_f+0x98>
    2b5a:	14 96       	adiw	r26, 0x04	; 4
    2b5c:	8d 91       	ld	r24, X+
    2b5e:	9d 91       	ld	r25, X+
    2b60:	0d 90       	ld	r0, X+
    2b62:	bc 91       	ld	r27, X
    2b64:	a0 2d       	mov	r26, r0
    2b66:	24 81       	ldd	r18, Z+4	; 0x04
    2b68:	35 81       	ldd	r19, Z+5	; 0x05
    2b6a:	46 81       	ldd	r20, Z+6	; 0x06
    2b6c:	57 81       	ldd	r21, Z+7	; 0x07
    2b6e:	28 17       	cp	r18, r24
    2b70:	39 07       	cpc	r19, r25
    2b72:	4a 07       	cpc	r20, r26
    2b74:	5b 07       	cpc	r21, r27
    2b76:	18 f4       	brcc	.+6      	; 0x2b7e <__fpcmp_parts_f+0x8e>
    2b78:	11 23       	and	r17, r17
    2b7a:	41 f0       	breq	.+16     	; 0x2b8c <__fpcmp_parts_f+0x9c>
    2b7c:	0a c0       	rjmp	.+20     	; 0x2b92 <__fpcmp_parts_f+0xa2>
    2b7e:	82 17       	cp	r24, r18
    2b80:	93 07       	cpc	r25, r19
    2b82:	a4 07       	cpc	r26, r20
    2b84:	b5 07       	cpc	r27, r21
    2b86:	40 f4       	brcc	.+16     	; 0x2b98 <__fpcmp_parts_f+0xa8>
    2b88:	11 23       	and	r17, r17
    2b8a:	19 f0       	breq	.+6      	; 0x2b92 <__fpcmp_parts_f+0xa2>
    2b8c:	61 e0       	ldi	r22, 0x01	; 1
    2b8e:	70 e0       	ldi	r23, 0x00	; 0
    2b90:	05 c0       	rjmp	.+10     	; 0x2b9c <__fpcmp_parts_f+0xac>
    2b92:	6f ef       	ldi	r22, 0xFF	; 255
    2b94:	7f ef       	ldi	r23, 0xFF	; 255
    2b96:	02 c0       	rjmp	.+4      	; 0x2b9c <__fpcmp_parts_f+0xac>
    2b98:	60 e0       	ldi	r22, 0x00	; 0
    2b9a:	70 e0       	ldi	r23, 0x00	; 0
    2b9c:	cb 01       	movw	r24, r22
    2b9e:	1f 91       	pop	r17
    2ba0:	08 95       	ret

00002ba2 <do_rand>:
    2ba2:	a0 e0       	ldi	r26, 0x00	; 0
    2ba4:	b0 e0       	ldi	r27, 0x00	; 0
    2ba6:	e7 ed       	ldi	r30, 0xD7	; 215
    2ba8:	f5 e1       	ldi	r31, 0x15	; 21
    2baa:	0c 94 61 16 	jmp	0x2cc2	; 0x2cc2 <__prologue_saves__+0x10>
    2bae:	ec 01       	movw	r28, r24
    2bb0:	a8 80       	ld	r10, Y
    2bb2:	b9 80       	ldd	r11, Y+1	; 0x01
    2bb4:	ca 80       	ldd	r12, Y+2	; 0x02
    2bb6:	db 80       	ldd	r13, Y+3	; 0x03
    2bb8:	a1 14       	cp	r10, r1
    2bba:	b1 04       	cpc	r11, r1
    2bbc:	c1 04       	cpc	r12, r1
    2bbe:	d1 04       	cpc	r13, r1
    2bc0:	41 f4       	brne	.+16     	; 0x2bd2 <do_rand+0x30>
    2bc2:	84 e2       	ldi	r24, 0x24	; 36
    2bc4:	a8 2e       	mov	r10, r24
    2bc6:	89 ed       	ldi	r24, 0xD9	; 217
    2bc8:	b8 2e       	mov	r11, r24
    2bca:	8b e5       	ldi	r24, 0x5B	; 91
    2bcc:	c8 2e       	mov	r12, r24
    2bce:	87 e0       	ldi	r24, 0x07	; 7
    2bd0:	d8 2e       	mov	r13, r24
    2bd2:	c6 01       	movw	r24, r12
    2bd4:	b5 01       	movw	r22, r10
    2bd6:	2d e1       	ldi	r18, 0x1D	; 29
    2bd8:	33 ef       	ldi	r19, 0xF3	; 243
    2bda:	41 e0       	ldi	r20, 0x01	; 1
    2bdc:	50 e0       	ldi	r21, 0x00	; 0
    2bde:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <__divmodsi4>
    2be2:	27 ea       	ldi	r18, 0xA7	; 167
    2be4:	31 e4       	ldi	r19, 0x41	; 65
    2be6:	40 e0       	ldi	r20, 0x00	; 0
    2be8:	50 e0       	ldi	r21, 0x00	; 0
    2bea:	0e 94 90 16 	call	0x2d20	; 0x2d20 <__mulsi3>
    2bee:	7b 01       	movw	r14, r22
    2bf0:	8c 01       	movw	r16, r24
    2bf2:	c6 01       	movw	r24, r12
    2bf4:	b5 01       	movw	r22, r10
    2bf6:	2d e1       	ldi	r18, 0x1D	; 29
    2bf8:	33 ef       	ldi	r19, 0xF3	; 243
    2bfa:	41 e0       	ldi	r20, 0x01	; 1
    2bfc:	50 e0       	ldi	r21, 0x00	; 0
    2bfe:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <__divmodsi4>
    2c02:	ca 01       	movw	r24, r20
    2c04:	b9 01       	movw	r22, r18
    2c06:	2c ee       	ldi	r18, 0xEC	; 236
    2c08:	34 ef       	ldi	r19, 0xF4	; 244
    2c0a:	4f ef       	ldi	r20, 0xFF	; 255
    2c0c:	5f ef       	ldi	r21, 0xFF	; 255
    2c0e:	0e 94 90 16 	call	0x2d20	; 0x2d20 <__mulsi3>
    2c12:	6e 0d       	add	r22, r14
    2c14:	7f 1d       	adc	r23, r15
    2c16:	80 1f       	adc	r24, r16
    2c18:	91 1f       	adc	r25, r17
    2c1a:	97 ff       	sbrs	r25, 7
    2c1c:	04 c0       	rjmp	.+8      	; 0x2c26 <do_rand+0x84>
    2c1e:	61 50       	subi	r22, 0x01	; 1
    2c20:	70 40       	sbci	r23, 0x00	; 0
    2c22:	80 40       	sbci	r24, 0x00	; 0
    2c24:	90 48       	sbci	r25, 0x80	; 128
    2c26:	68 83       	st	Y, r22
    2c28:	79 83       	std	Y+1, r23	; 0x01
    2c2a:	8a 83       	std	Y+2, r24	; 0x02
    2c2c:	9b 83       	std	Y+3, r25	; 0x03
    2c2e:	9b 01       	movw	r18, r22
    2c30:	3f 77       	andi	r19, 0x7F	; 127
    2c32:	c9 01       	movw	r24, r18
    2c34:	cd b7       	in	r28, 0x3d	; 61
    2c36:	de b7       	in	r29, 0x3e	; 62
    2c38:	ea e0       	ldi	r30, 0x0A	; 10
    2c3a:	0c 94 7d 16 	jmp	0x2cfa	; 0x2cfa <__epilogue_restores__+0x10>

00002c3e <rand_r>:
    2c3e:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <do_rand>
    2c42:	08 95       	ret

00002c44 <rand>:
    2c44:	8d e5       	ldi	r24, 0x5D	; 93
    2c46:	93 e0       	ldi	r25, 0x03	; 3
    2c48:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <do_rand>
    2c4c:	08 95       	ret

00002c4e <srand>:
    2c4e:	a0 e0       	ldi	r26, 0x00	; 0
    2c50:	b0 e0       	ldi	r27, 0x00	; 0
    2c52:	80 93 5d 03 	sts	0x035D, r24
    2c56:	90 93 5e 03 	sts	0x035E, r25
    2c5a:	a0 93 5f 03 	sts	0x035F, r26
    2c5e:	b0 93 60 03 	sts	0x0360, r27
    2c62:	08 95       	ret

00002c64 <__udivmodhi4>:
    2c64:	aa 1b       	sub	r26, r26
    2c66:	bb 1b       	sub	r27, r27
    2c68:	51 e1       	ldi	r21, 0x11	; 17
    2c6a:	07 c0       	rjmp	.+14     	; 0x2c7a <__udivmodhi4_ep>

00002c6c <__udivmodhi4_loop>:
    2c6c:	aa 1f       	adc	r26, r26
    2c6e:	bb 1f       	adc	r27, r27
    2c70:	a6 17       	cp	r26, r22
    2c72:	b7 07       	cpc	r27, r23
    2c74:	10 f0       	brcs	.+4      	; 0x2c7a <__udivmodhi4_ep>
    2c76:	a6 1b       	sub	r26, r22
    2c78:	b7 0b       	sbc	r27, r23

00002c7a <__udivmodhi4_ep>:
    2c7a:	88 1f       	adc	r24, r24
    2c7c:	99 1f       	adc	r25, r25
    2c7e:	5a 95       	dec	r21
    2c80:	a9 f7       	brne	.-22     	; 0x2c6c <__udivmodhi4_loop>
    2c82:	80 95       	com	r24
    2c84:	90 95       	com	r25
    2c86:	bc 01       	movw	r22, r24
    2c88:	cd 01       	movw	r24, r26
    2c8a:	08 95       	ret

00002c8c <__divmodhi4>:
    2c8c:	97 fb       	bst	r25, 7
    2c8e:	09 2e       	mov	r0, r25
    2c90:	07 26       	eor	r0, r23
    2c92:	0a d0       	rcall	.+20     	; 0x2ca8 <__divmodhi4_neg1>
    2c94:	77 fd       	sbrc	r23, 7
    2c96:	04 d0       	rcall	.+8      	; 0x2ca0 <__divmodhi4_neg2>
    2c98:	e5 df       	rcall	.-54     	; 0x2c64 <__udivmodhi4>
    2c9a:	06 d0       	rcall	.+12     	; 0x2ca8 <__divmodhi4_neg1>
    2c9c:	00 20       	and	r0, r0
    2c9e:	1a f4       	brpl	.+6      	; 0x2ca6 <__divmodhi4_exit>

00002ca0 <__divmodhi4_neg2>:
    2ca0:	70 95       	com	r23
    2ca2:	61 95       	neg	r22
    2ca4:	7f 4f       	sbci	r23, 0xFF	; 255

00002ca6 <__divmodhi4_exit>:
    2ca6:	08 95       	ret

00002ca8 <__divmodhi4_neg1>:
    2ca8:	f6 f7       	brtc	.-4      	; 0x2ca6 <__divmodhi4_exit>
    2caa:	90 95       	com	r25
    2cac:	81 95       	neg	r24
    2cae:	9f 4f       	sbci	r25, 0xFF	; 255
    2cb0:	08 95       	ret

00002cb2 <__prologue_saves__>:
    2cb2:	2f 92       	push	r2
    2cb4:	3f 92       	push	r3
    2cb6:	4f 92       	push	r4
    2cb8:	5f 92       	push	r5
    2cba:	6f 92       	push	r6
    2cbc:	7f 92       	push	r7
    2cbe:	8f 92       	push	r8
    2cc0:	9f 92       	push	r9
    2cc2:	af 92       	push	r10
    2cc4:	bf 92       	push	r11
    2cc6:	cf 92       	push	r12
    2cc8:	df 92       	push	r13
    2cca:	ef 92       	push	r14
    2ccc:	ff 92       	push	r15
    2cce:	0f 93       	push	r16
    2cd0:	1f 93       	push	r17
    2cd2:	cf 93       	push	r28
    2cd4:	df 93       	push	r29
    2cd6:	cd b7       	in	r28, 0x3d	; 61
    2cd8:	de b7       	in	r29, 0x3e	; 62
    2cda:	ca 1b       	sub	r28, r26
    2cdc:	db 0b       	sbc	r29, r27
    2cde:	0f b6       	in	r0, 0x3f	; 63
    2ce0:	f8 94       	cli
    2ce2:	de bf       	out	0x3e, r29	; 62
    2ce4:	0f be       	out	0x3f, r0	; 63
    2ce6:	cd bf       	out	0x3d, r28	; 61
    2ce8:	09 94       	ijmp

00002cea <__epilogue_restores__>:
    2cea:	2a 88       	ldd	r2, Y+18	; 0x12
    2cec:	39 88       	ldd	r3, Y+17	; 0x11
    2cee:	48 88       	ldd	r4, Y+16	; 0x10
    2cf0:	5f 84       	ldd	r5, Y+15	; 0x0f
    2cf2:	6e 84       	ldd	r6, Y+14	; 0x0e
    2cf4:	7d 84       	ldd	r7, Y+13	; 0x0d
    2cf6:	8c 84       	ldd	r8, Y+12	; 0x0c
    2cf8:	9b 84       	ldd	r9, Y+11	; 0x0b
    2cfa:	aa 84       	ldd	r10, Y+10	; 0x0a
    2cfc:	b9 84       	ldd	r11, Y+9	; 0x09
    2cfe:	c8 84       	ldd	r12, Y+8	; 0x08
    2d00:	df 80       	ldd	r13, Y+7	; 0x07
    2d02:	ee 80       	ldd	r14, Y+6	; 0x06
    2d04:	fd 80       	ldd	r15, Y+5	; 0x05
    2d06:	0c 81       	ldd	r16, Y+4	; 0x04
    2d08:	1b 81       	ldd	r17, Y+3	; 0x03
    2d0a:	aa 81       	ldd	r26, Y+2	; 0x02
    2d0c:	b9 81       	ldd	r27, Y+1	; 0x01
    2d0e:	ce 0f       	add	r28, r30
    2d10:	d1 1d       	adc	r29, r1
    2d12:	0f b6       	in	r0, 0x3f	; 63
    2d14:	f8 94       	cli
    2d16:	de bf       	out	0x3e, r29	; 62
    2d18:	0f be       	out	0x3f, r0	; 63
    2d1a:	cd bf       	out	0x3d, r28	; 61
    2d1c:	ed 01       	movw	r28, r26
    2d1e:	08 95       	ret

00002d20 <__mulsi3>:
    2d20:	62 9f       	mul	r22, r18
    2d22:	d0 01       	movw	r26, r0
    2d24:	73 9f       	mul	r23, r19
    2d26:	f0 01       	movw	r30, r0
    2d28:	82 9f       	mul	r24, r18
    2d2a:	e0 0d       	add	r30, r0
    2d2c:	f1 1d       	adc	r31, r1
    2d2e:	64 9f       	mul	r22, r20
    2d30:	e0 0d       	add	r30, r0
    2d32:	f1 1d       	adc	r31, r1
    2d34:	92 9f       	mul	r25, r18
    2d36:	f0 0d       	add	r31, r0
    2d38:	83 9f       	mul	r24, r19
    2d3a:	f0 0d       	add	r31, r0
    2d3c:	74 9f       	mul	r23, r20
    2d3e:	f0 0d       	add	r31, r0
    2d40:	65 9f       	mul	r22, r21
    2d42:	f0 0d       	add	r31, r0
    2d44:	99 27       	eor	r25, r25
    2d46:	72 9f       	mul	r23, r18
    2d48:	b0 0d       	add	r27, r0
    2d4a:	e1 1d       	adc	r30, r1
    2d4c:	f9 1f       	adc	r31, r25
    2d4e:	63 9f       	mul	r22, r19
    2d50:	b0 0d       	add	r27, r0
    2d52:	e1 1d       	adc	r30, r1
    2d54:	f9 1f       	adc	r31, r25
    2d56:	bd 01       	movw	r22, r26
    2d58:	cf 01       	movw	r24, r30
    2d5a:	11 24       	eor	r1, r1
    2d5c:	08 95       	ret

00002d5e <__divmodsi4>:
    2d5e:	97 fb       	bst	r25, 7
    2d60:	09 2e       	mov	r0, r25
    2d62:	05 26       	eor	r0, r21
    2d64:	0e d0       	rcall	.+28     	; 0x2d82 <__divmodsi4_neg1>
    2d66:	57 fd       	sbrc	r21, 7
    2d68:	04 d0       	rcall	.+8      	; 0x2d72 <__divmodsi4_neg2>
    2d6a:	14 d0       	rcall	.+40     	; 0x2d94 <__udivmodsi4>
    2d6c:	0a d0       	rcall	.+20     	; 0x2d82 <__divmodsi4_neg1>
    2d6e:	00 1c       	adc	r0, r0
    2d70:	38 f4       	brcc	.+14     	; 0x2d80 <__divmodsi4_exit>

00002d72 <__divmodsi4_neg2>:
    2d72:	50 95       	com	r21
    2d74:	40 95       	com	r20
    2d76:	30 95       	com	r19
    2d78:	21 95       	neg	r18
    2d7a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d7c:	4f 4f       	sbci	r20, 0xFF	; 255
    2d7e:	5f 4f       	sbci	r21, 0xFF	; 255

00002d80 <__divmodsi4_exit>:
    2d80:	08 95       	ret

00002d82 <__divmodsi4_neg1>:
    2d82:	f6 f7       	brtc	.-4      	; 0x2d80 <__divmodsi4_exit>
    2d84:	90 95       	com	r25
    2d86:	80 95       	com	r24
    2d88:	70 95       	com	r23
    2d8a:	61 95       	neg	r22
    2d8c:	7f 4f       	sbci	r23, 0xFF	; 255
    2d8e:	8f 4f       	sbci	r24, 0xFF	; 255
    2d90:	9f 4f       	sbci	r25, 0xFF	; 255
    2d92:	08 95       	ret

00002d94 <__udivmodsi4>:
    2d94:	a1 e2       	ldi	r26, 0x21	; 33
    2d96:	1a 2e       	mov	r1, r26
    2d98:	aa 1b       	sub	r26, r26
    2d9a:	bb 1b       	sub	r27, r27
    2d9c:	fd 01       	movw	r30, r26
    2d9e:	0d c0       	rjmp	.+26     	; 0x2dba <__udivmodsi4_ep>

00002da0 <__udivmodsi4_loop>:
    2da0:	aa 1f       	adc	r26, r26
    2da2:	bb 1f       	adc	r27, r27
    2da4:	ee 1f       	adc	r30, r30
    2da6:	ff 1f       	adc	r31, r31
    2da8:	a2 17       	cp	r26, r18
    2daa:	b3 07       	cpc	r27, r19
    2dac:	e4 07       	cpc	r30, r20
    2dae:	f5 07       	cpc	r31, r21
    2db0:	20 f0       	brcs	.+8      	; 0x2dba <__udivmodsi4_ep>
    2db2:	a2 1b       	sub	r26, r18
    2db4:	b3 0b       	sbc	r27, r19
    2db6:	e4 0b       	sbc	r30, r20
    2db8:	f5 0b       	sbc	r31, r21

00002dba <__udivmodsi4_ep>:
    2dba:	66 1f       	adc	r22, r22
    2dbc:	77 1f       	adc	r23, r23
    2dbe:	88 1f       	adc	r24, r24
    2dc0:	99 1f       	adc	r25, r25
    2dc2:	1a 94       	dec	r1
    2dc4:	69 f7       	brne	.-38     	; 0x2da0 <__udivmodsi4_loop>
    2dc6:	60 95       	com	r22
    2dc8:	70 95       	com	r23
    2dca:	80 95       	com	r24
    2dcc:	90 95       	com	r25
    2dce:	9b 01       	movw	r18, r22
    2dd0:	ac 01       	movw	r20, r24
    2dd2:	bd 01       	movw	r22, r26
    2dd4:	cf 01       	movw	r24, r30
    2dd6:	08 95       	ret

00002dd8 <_exit>:
    2dd8:	f8 94       	cli

00002dda <__stop_program>:
    2dda:	ff cf       	rjmp	.-2      	; 0x2dda <__stop_program>
