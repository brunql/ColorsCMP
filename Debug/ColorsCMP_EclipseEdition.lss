
ColorsCMP_EclipseEdition.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d68  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002fc  00800060  00002d68  00002ddc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002f  0080035c  00003064  000030d8  2**0
                  ALLOC
  3 .stab         00005424  00000000  00000000  000030d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001e41  00000000  00000000  000084fc  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 0a 02 	jmp	0x414	; 0x414 <__ctors_end>
       4:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
       8:	0c 94 af 08 	jmp	0x115e	; 0x115e <__vector_2>
       c:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      10:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      14:	0c 94 73 08 	jmp	0x10e6	; 0x10e6 <__vector_5>
      18:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      1c:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      20:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      24:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      28:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      2c:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      30:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      34:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      38:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      3c:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      40:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      44:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      48:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      4c:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      50:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>

00000054 <FontLookup>:
      54:	00 00 00 00 00 00 00 2f 00 00 00 07 00 07 00 14     ......./........
      64:	7f 14 7f 14 24 2a 7f 2a 12 c4 c8 10 26 46 36 49     ....$*.*....&F6I
      74:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
      84:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 00 50 30     ....>....>....P0
      94:	00 10 10 10 10 10 00 60 60 00 00 20 10 08 04 02     .......``.. ....
      a4:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
      b4:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
      c4:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
      d4:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
      e4:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
      f4:	3e 59 65 65 5e 7e 11 11 11 7e 7f 49 49 49 36 3e     >Yee^~...~.III6>
     104:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     114:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     124:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     134:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     144:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     154:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     164:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     174:	08 07 61 51 49 45 43 00 7f 41 41 00 55 2a 55 2a     ..aQIEC..AA.U*U*
     184:	55 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40     U.AA.......@@@@@
     194:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     1a4:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     1b4:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
     1c4:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     1d4:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     1e4:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     1f4:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     204:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     214:	50 3c 44 64 54 4c 44                                P<DdTLD

0000021b <LcdImage_Upper>:
     21b:	ff ff 7f 7f 45 5d 5d 5d 5d 5d 5d 5d 5d 5d 5d 7f     ....E]]]]]]]]]].
     22b:	7f 41 5f 5d 5d 5d 5d 5d 5d 5d 5d 5d 41 7f 7f 41     .A_]]]]]]]]]A..A
     23b:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 7f 7f 41 5f 5d 5d     __________..A_]]
     24b:	5d 5d 5d 5d 5d 5d 5d 41 7f 7f 43 7d 7d 7d 7d 7d     ]]]]]]]A..C}}}}}
     25b:	7d 7d 7d 7d 7f 7f 51 55 55 55 55 55 55 55 55 45     }}}}..QUUUUUUUUE
     26b:	7f 7f ff ff                                         ....

0000026f <LcdImage_Center>:
     26f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     27f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     28f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     29f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     2af:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     2bf:	ff ff ff ff ff ff ff 0c 0c fc fc fc fc fc fc fc     ................
     2cf:	fc fc fc fc fc fc fc fc fc fc fc fc fc fc ff ff     ................
     2df:	ff 0c 0c fc fc fc fc f0 f0 f3 f3 f3 c3 cf cf cf     ................
     2ef:	cf c3 f3 f3 f3 f0 f0 fc fc fc fc 00 00 ff ff ff     ................
     2ff:	00 00 9f 9f 9c 9c 9c 9c 9c 9c 9c 9c 9c 9c 9c 9c     ................
     30f:	9c 9c 9c 9c 80 80 ff ff ff ff ff e0 e0 e7 e7 e7     ................
     31f:	e7 e7 e7 e7 e7 e7 e7 e7 e7 e7 e7 e7 e7 e7 e7 e7     ................
     32f:	e7 e7 ff ff ff e0 e0 ff ff ff ff ff ff ff ff ff     ................
     33f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff e0     ................
     34f:	e0 ff ff ff e0 e0 ff ff ff ff ff ff ff ff ff ff     ................
     35f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     36f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     37f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     38f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     39f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     3af:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................

000003bf <LcdImage_brunql_gmail_com>:
     3bf:	ff ff ff c8 db db c3 ff cb fb fb fb ff cb df df     ................
     3cf:	c3 ff cb fb fb c3 ff cb db db df 03 7f ff c0 ff     ................
     3df:	ff 01 7e 66 5a 5a 42 5a 5e 62 7f ff c7 bb ab ab     ..~fZZBZ^b......
     3ef:	cf ff cb fb c3 fb c3 ff cb db db c3 db ff c2 ff     ................
     3ff:	c0 ff df ff cb db db ff cb db db c3 ff cb fb c3     ................
     40f:	fb c3 ff ff 00                                      .....

00000414 <__ctors_end>:
     414:	11 24       	eor	r1, r1
     416:	1f be       	out	0x3f, r1	; 63
     418:	cf e5       	ldi	r28, 0x5F	; 95
     41a:	d8 e0       	ldi	r29, 0x08	; 8
     41c:	de bf       	out	0x3e, r29	; 62
     41e:	cd bf       	out	0x3d, r28	; 61

00000420 <__do_copy_data>:
     420:	13 e0       	ldi	r17, 0x03	; 3
     422:	a0 e6       	ldi	r26, 0x60	; 96
     424:	b0 e0       	ldi	r27, 0x00	; 0
     426:	e8 e6       	ldi	r30, 0x68	; 104
     428:	fd e2       	ldi	r31, 0x2D	; 45
     42a:	02 c0       	rjmp	.+4      	; 0x430 <.do_copy_data_start>

0000042c <.do_copy_data_loop>:
     42c:	05 90       	lpm	r0, Z+
     42e:	0d 92       	st	X+, r0

00000430 <.do_copy_data_start>:
     430:	ac 35       	cpi	r26, 0x5C	; 92
     432:	b1 07       	cpc	r27, r17
     434:	d9 f7       	brne	.-10     	; 0x42c <.do_copy_data_loop>

00000436 <__do_clear_bss>:
     436:	13 e0       	ldi	r17, 0x03	; 3
     438:	ac e5       	ldi	r26, 0x5C	; 92
     43a:	b3 e0       	ldi	r27, 0x03	; 3
     43c:	01 c0       	rjmp	.+2      	; 0x440 <.do_clear_bss_start>

0000043e <.do_clear_bss_loop>:
     43e:	1d 92       	st	X+, r1

00000440 <.do_clear_bss_start>:
     440:	ab 38       	cpi	r26, 0x8B	; 139
     442:	b1 07       	cpc	r27, r17
     444:	e1 f7       	brne	.-8      	; 0x43e <.do_clear_bss_loop>
     446:	0e 94 cf 06 	call	0xd9e	; 0xd9e <main>
     44a:	0c 94 b2 16 	jmp	0x2d64	; 0x2d64 <_exit>

0000044e <__bad_interrupt>:
     44e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000452 <snakegame_InitSnake>:
//================================================//


void snakegame_InitSnake(void)
{
	snake_add_index = SNAKE_START_LEN; // start length of snake
     452:	86 e0       	ldi	r24, 0x06	; 6
     454:	80 93 5e 03 	sts	0x035E, r24
	score = (uwin_times<<4) | (snake_add_index - SNAKE_START_LEN);
     458:	80 91 5c 03 	lds	r24, 0x035C
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	24 e0       	ldi	r18, 0x04	; 4
     460:	88 0f       	add	r24, r24
     462:	99 1f       	adc	r25, r25
     464:	2a 95       	dec	r18
     466:	e1 f7       	brne	.-8      	; 0x460 <snakegame_InitSnake+0xe>
     468:	80 93 5d 03 	sts	0x035D, r24
     46c:	e7 eb       	ldi	r30, 0xB7	; 183
     46e:	f0 e0       	ldi	r31, 0x00	; 0
     470:	88 e2       	ldi	r24, 0x28	; 40
	for(uint8_t i=0; i<SNAKE_LEN; i++){
		snake[i].y = 20;
     472:	24 e1       	ldi	r18, 0x14	; 20
		snake[i].x = 40 - i;
		snake[i].direction = RIGHT;
     474:	92 e0       	ldi	r25, 0x02	; 2
void snakegame_InitSnake(void)
{
	snake_add_index = SNAKE_START_LEN; // start length of snake
	score = (uwin_times<<4) | (snake_add_index - SNAKE_START_LEN);
	for(uint8_t i=0; i<SNAKE_LEN; i++){
		snake[i].y = 20;
     476:	21 83       	std	Z+1, r18	; 0x01
		snake[i].x = 40 - i;
     478:	80 83       	st	Z, r24
		snake[i].direction = RIGHT;
     47a:	92 83       	std	Z+2, r25	; 0x02
     47c:	33 96       	adiw	r30, 0x03	; 3
     47e:	81 50       	subi	r24, 0x01	; 1

void snakegame_InitSnake(void)
{
	snake_add_index = SNAKE_START_LEN; // start length of snake
	score = (uwin_times<<4) | (snake_add_index - SNAKE_START_LEN);
	for(uint8_t i=0; i<SNAKE_LEN; i++){
     480:	8e 31       	cpi	r24, 0x1E	; 30
     482:	c9 f7       	brne	.-14     	; 0x476 <snakegame_InitSnake+0x24>
		snake[i].y = 20;
		snake[i].x = 40 - i;
		snake[i].direction = RIGHT;
	}
}
     484:	08 95       	ret

00000486 <SnakeGame_Stop>:
}

void SnakeGame_Stop(void)
{
	// show results and go to main menu
}
     486:	08 95       	ret

00000488 <SnakeGame_TurnLeft>:


void SnakeGame_TurnLeft(void)
{
	// directions mb: UP = 1, RIGHT = 2, DOWN = 3, LEFT = 4
	if( --snake[0].direction == 0){
     488:	80 91 b9 00 	lds	r24, 0x00B9
     48c:	81 50       	subi	r24, 0x01	; 1
     48e:	80 93 b9 00 	sts	0x00B9, r24
     492:	88 23       	and	r24, r24
     494:	19 f4       	brne	.+6      	; 0x49c <SnakeGame_TurnLeft+0x14>
		snake[0].direction = LEFT;
     496:	84 e0       	ldi	r24, 0x04	; 4
     498:	80 93 b9 00 	sts	0x00B9, r24
     49c:	08 95       	ret

0000049e <SnakeGame_TurnRight>:
	}
}

void SnakeGame_TurnRight(void)
{
	if( ++snake[0].direction == 5){
     49e:	80 91 b9 00 	lds	r24, 0x00B9
     4a2:	8f 5f       	subi	r24, 0xFF	; 255
     4a4:	80 93 b9 00 	sts	0x00B9, r24
     4a8:	85 30       	cpi	r24, 0x05	; 5
     4aa:	19 f4       	brne	.+6      	; 0x4b2 <SnakeGame_TurnRight+0x14>
		snake[0].direction = UP;
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	80 93 b9 00 	sts	0x00B9, r24
     4b2:	08 95       	ret

000004b4 <snakegame_DirectionStep>:
//
//	snake_add_index++; // don't forget to update index
//}

void snakegame_DirectionStep(point *p_snake)
{
     4b4:	fc 01       	movw	r30, r24
	switch(p_snake->direction)
     4b6:	92 81       	ldd	r25, Z+2	; 0x02
     4b8:	92 30       	cpi	r25, 0x02	; 2
     4ba:	09 f1       	breq	.+66     	; 0x4fe <snakegame_DirectionStep+0x4a>
     4bc:	93 30       	cpi	r25, 0x03	; 3
     4be:	18 f4       	brcc	.+6      	; 0x4c6 <snakegame_DirectionStep+0x12>
     4c0:	91 30       	cpi	r25, 0x01	; 1
     4c2:	21 f5       	brne	.+72     	; 0x50c <snakegame_DirectionStep+0x58>
     4c4:	05 c0       	rjmp	.+10     	; 0x4d0 <snakegame_DirectionStep+0x1c>
     4c6:	93 30       	cpi	r25, 0x03	; 3
     4c8:	51 f0       	breq	.+20     	; 0x4de <snakegame_DirectionStep+0x2a>
     4ca:	94 30       	cpi	r25, 0x04	; 4
     4cc:	f9 f4       	brne	.+62     	; 0x50c <snakegame_DirectionStep+0x58>
     4ce:	0f c0       	rjmp	.+30     	; 0x4ee <snakegame_DirectionStep+0x3a>
	{
		case UP:
			if(--p_snake->y < 9) 	p_snake->y = 38;
     4d0:	81 81       	ldd	r24, Z+1	; 0x01
     4d2:	81 50       	subi	r24, 0x01	; 1
     4d4:	81 83       	std	Z+1, r24	; 0x01
     4d6:	89 30       	cpi	r24, 0x09	; 9
     4d8:	f0 f4       	brcc	.+60     	; 0x516 <snakegame_DirectionStep+0x62>
     4da:	86 e2       	ldi	r24, 0x26	; 38
     4dc:	06 c0       	rjmp	.+12     	; 0x4ea <snakegame_DirectionStep+0x36>
			break;
		case DOWN:
			if(++p_snake->y > 38) 	p_snake->y = 9;
     4de:	81 81       	ldd	r24, Z+1	; 0x01
     4e0:	8f 5f       	subi	r24, 0xFF	; 255
     4e2:	81 83       	std	Z+1, r24	; 0x01
     4e4:	87 32       	cpi	r24, 0x27	; 39
     4e6:	b8 f0       	brcs	.+46     	; 0x516 <snakegame_DirectionStep+0x62>
     4e8:	89 e0       	ldi	r24, 0x09	; 9
     4ea:	81 83       	std	Z+1, r24	; 0x01
     4ec:	08 95       	ret
			break;
		case LEFT:
			if(--p_snake->x < 2) 	p_snake->x = 82;
     4ee:	80 81       	ld	r24, Z
     4f0:	81 50       	subi	r24, 0x01	; 1
     4f2:	80 83       	st	Z, r24
     4f4:	82 30       	cpi	r24, 0x02	; 2
     4f6:	78 f4       	brcc	.+30     	; 0x516 <snakegame_DirectionStep+0x62>
     4f8:	82 e5       	ldi	r24, 0x52	; 82
     4fa:	80 83       	st	Z, r24
     4fc:	08 95       	ret
			break;
		case RIGHT:
			if(++p_snake->x > 81) 	p_snake->x = 2;
     4fe:	80 81       	ld	r24, Z
     500:	8f 5f       	subi	r24, 0xFF	; 255
     502:	80 83       	st	Z, r24
     504:	82 35       	cpi	r24, 0x52	; 82
     506:	38 f0       	brcs	.+14     	; 0x516 <snakegame_DirectionStep+0x62>
     508:	90 83       	st	Z, r25
     50a:	08 95       	ret
			break;
		default: // error
			p_snake->x = 0;
     50c:	10 82       	st	Z, r1
			p_snake->y = 17;
     50e:	81 e1       	ldi	r24, 0x11	; 17
     510:	81 83       	std	Z+1, r24	; 0x01
			p_snake->direction = RIGHT;
     512:	82 e0       	ldi	r24, 0x02	; 2
     514:	82 83       	std	Z+2, r24	; 0x02
     516:	08 95       	ret

00000518 <snakegame_UpdateDisplay>:




void snakegame_UpdateDisplay(void)
{
     518:	2f 92       	push	r2
     51a:	3f 92       	push	r3
     51c:	4f 92       	push	r4
     51e:	5f 92       	push	r5
     520:	6f 92       	push	r6
     522:	7f 92       	push	r7
     524:	8f 92       	push	r8
     526:	9f 92       	push	r9
     528:	af 92       	push	r10
     52a:	bf 92       	push	r11
     52c:	cf 92       	push	r12
     52e:	df 92       	push	r13
     530:	ef 92       	push	r14
     532:	ff 92       	push	r15
     534:	0f 93       	push	r16
     536:	1f 93       	push	r17
     538:	cf 93       	push	r28
     53a:	df 93       	push	r29
	Lcd3310_ClearCenter();
     53c:	0e 94 1b 0b 	call	0x1636	; 0x1636 <Lcd3310_ClearCenter>

	Lcd3310_GotoXY(0, 5);
     540:	80 e0       	ldi	r24, 0x00	; 0
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	65 e0       	ldi	r22, 0x05	; 5
     546:	70 e0       	ldi	r23, 0x00	; 0
     548:	0e 94 04 0b 	call	0x1608	; 0x1608 <Lcd3310_GotoXY>
	Lcd3310_String_P(score_str, WHITE_TEXT_ON_BLACK);
     54c:	80 91 86 00 	lds	r24, 0x0086
     550:	90 91 87 00 	lds	r25, 0x0087
     554:	61 e0       	ldi	r22, 0x01	; 1
     556:	0e 94 03 0a 	call	0x1406	; 0x1406 <Lcd3310_String_P>
	Lcd3310_UInt8AsText(score, WHITE_TEXT_ON_BLACK);
     55a:	80 91 5d 03 	lds	r24, 0x035D
     55e:	61 e0       	ldi	r22, 0x01	; 1
     560:	0e 94 3e 0c 	call	0x187c	; 0x187c <Lcd3310_UInt8AsText>
	//Lcd3310_UInt8AsText(snake[0].y, WHITE_TEXT_ON_BLACK);

	uint16_t lcd_index = 0x00;

	// eval values for addme pixel show
	uint8_t addme_line = (uint8_t)addme_y / 8;
     564:	20 91 b6 00 	lds	r18, 0x00B6
     568:	82 2e       	mov	r8, r18
     56a:	86 94       	lsr	r8
     56c:	86 94       	lsr	r8
     56e:	86 94       	lsr	r8
	uint8_t addme_display_byte = 1 << ((uint8_t)addme_y % 8);
     570:	27 70       	andi	r18, 0x07	; 7
     572:	81 e0       	ldi	r24, 0x01	; 1
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	98 2e       	mov	r9, r24
     578:	01 c0       	rjmp	.+2      	; 0x57c <snakegame_UpdateDisplay+0x64>
     57a:	99 0c       	add	r9, r9
     57c:	2a 95       	dec	r18
     57e:	ea f7       	brpl	.-6      	; 0x57a <snakegame_UpdateDisplay+0x62>
     580:	aa 24       	eor	r10, r10
	for(uint8_t i=0; i < snake_add_index; i++)
	{
		// GotoXY
		// Eval number of line (mb: 1..5) in display for display_byte
		uint8_t line = (uint8_t) (snake[i].y) / 8;
		lcd_index = (uint16_t) (snake[i].x) + (uint16_t)line * 84;
     582:	64 e5       	ldi	r22, 0x54	; 84
     584:	46 2e       	mov	r4, r22
		Lcd3310_Send( 0x80 | ((uint16_t)lcd_index % LCD_X_RES), LCD_CMD );
		Lcd3310_Send( 0x40 | ((uint16_t)lcd_index / LCD_X_RES), LCD_CMD );

		// Make sendme byte with all point in this display byte
		// Init with snake[i] point
		uint8_t display_byte = 1 << ((uint8_t)snake[i].y % 8);
     586:	51 e0       	ldi	r21, 0x01	; 1
     588:	65 2e       	mov	r6, r21
     58a:	71 2c       	mov	r7, r1
		// Find all point near here (in this display byte)
		for(uint8_t j=0; j<snake_add_index; j++)
     58c:	43 e0       	ldi	r20, 0x03	; 3
     58e:	54 2e       	mov	r5, r20
     590:	6a c0       	rjmp	.+212    	; 0x666 <snakegame_UpdateDisplay+0x14e>
	// Lets draw each point in snake to our lcd.
	for(uint8_t i=0; i < snake_add_index; i++)
	{
		// GotoXY
		// Eval number of line (mb: 1..5) in display for display_byte
		uint8_t line = (uint8_t) (snake[i].y) / 8;
     592:	2a 2c       	mov	r2, r10
     594:	33 24       	eor	r3, r3
     596:	61 01       	movw	r12, r2
     598:	cc 0c       	add	r12, r12
     59a:	dd 1c       	adc	r13, r13
     59c:	76 01       	movw	r14, r12
     59e:	e2 0c       	add	r14, r2
     5a0:	f3 1c       	adc	r15, r3
     5a2:	87 eb       	ldi	r24, 0xB7	; 183
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	e8 0e       	add	r14, r24
     5a8:	f9 1e       	adc	r15, r25
     5aa:	e7 01       	movw	r28, r14
     5ac:	b9 80       	ldd	r11, Y+1	; 0x01
     5ae:	b6 94       	lsr	r11
     5b0:	b6 94       	lsr	r11
     5b2:	b6 94       	lsr	r11
		lcd_index = (uint16_t) (snake[i].x) + (uint16_t)line * 84;
     5b4:	b4 9c       	mul	r11, r4
     5b6:	80 01       	movw	r16, r0
     5b8:	11 24       	eor	r1, r1
     5ba:	88 81       	ld	r24, Y
     5bc:	08 0f       	add	r16, r24
     5be:	11 1d       	adc	r17, r1
		Lcd3310_Send( 0x80 | ((uint16_t)lcd_index % LCD_X_RES), LCD_CMD );
     5c0:	c8 01       	movw	r24, r16
     5c2:	64 e5       	ldi	r22, 0x54	; 84
     5c4:	70 e0       	ldi	r23, 0x00	; 0
     5c6:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <__udivmodhi4>
     5ca:	80 68       	ori	r24, 0x80	; 128
     5cc:	60 e0       	ldi	r22, 0x00	; 0
     5ce:	0e 94 1a 0c 	call	0x1834	; 0x1834 <Lcd3310_Send>
		Lcd3310_Send( 0x40 | ((uint16_t)lcd_index / LCD_X_RES), LCD_CMD );
     5d2:	c8 01       	movw	r24, r16
     5d4:	64 e5       	ldi	r22, 0x54	; 84
     5d6:	70 e0       	ldi	r23, 0x00	; 0
     5d8:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <__udivmodhi4>
     5dc:	86 2f       	mov	r24, r22
     5de:	80 64       	ori	r24, 0x40	; 64
     5e0:	60 e0       	ldi	r22, 0x00	; 0
     5e2:	0e 94 1a 0c 	call	0x1834	; 0x1834 <Lcd3310_Send>

		// Make sendme byte with all point in this display byte
		// Init with snake[i] point
		uint8_t display_byte = 1 << ((uint8_t)snake[i].y % 8);
     5e6:	89 81       	ldd	r24, Y+1	; 0x01
     5e8:	87 70       	andi	r24, 0x07	; 7
     5ea:	36 2d       	mov	r19, r6
     5ec:	01 c0       	rjmp	.+2      	; 0x5f0 <snakegame_UpdateDisplay+0xd8>
     5ee:	33 0f       	add	r19, r19
     5f0:	8a 95       	dec	r24
     5f2:	ea f7       	brpl	.-6      	; 0x5ee <snakegame_UpdateDisplay+0xd6>
		// Find all point near here (in this display byte)
		for(uint8_t j=0; j<snake_add_index; j++)
     5f4:	80 91 5e 03 	lds	r24, 0x035E
     5f8:	e7 eb       	ldi	r30, 0xB7	; 183
     5fa:	f0 e0       	ldi	r31, 0x00	; 0
     5fc:	85 9d       	mul	r24, r5
     5fe:	a0 01       	movw	r20, r0
     600:	11 24       	eor	r1, r1
     602:	4e 0f       	add	r20, r30
     604:	5f 1f       	adc	r21, r31
     606:	d6 01       	movw	r26, r12
		{
			uint8_t line_find = (uint8_t)snake[j].y / 8;
			if(snake[i].x == snake[j].x && line == line_find){
     608:	b7 01       	movw	r22, r14
     60a:	15 c0       	rjmp	.+42     	; 0x636 <snakegame_UpdateDisplay+0x11e>
		// Init with snake[i] point
		uint8_t display_byte = 1 << ((uint8_t)snake[i].y % 8);
		// Find all point near here (in this display byte)
		for(uint8_t j=0; j<snake_add_index; j++)
		{
			uint8_t line_find = (uint8_t)snake[j].y / 8;
     60c:	21 81       	ldd	r18, Z+1	; 0x01
			if(snake[i].x == snake[j].x && line == line_find){
     60e:	eb 01       	movw	r28, r22
     610:	98 81       	ld	r25, Y
     612:	80 81       	ld	r24, Z
     614:	98 17       	cp	r25, r24
     616:	71 f4       	brne	.+28     	; 0x634 <snakegame_UpdateDisplay+0x11c>
     618:	82 2f       	mov	r24, r18
     61a:	86 95       	lsr	r24
     61c:	86 95       	lsr	r24
     61e:	86 95       	lsr	r24
     620:	b8 16       	cp	r11, r24
     622:	41 f4       	brne	.+16     	; 0x634 <snakegame_UpdateDisplay+0x11c>
				display_byte |= 1 << ((uint8_t)snake[j].y % 8);
     624:	27 70       	andi	r18, 0x07	; 7
     626:	c3 01       	movw	r24, r6
     628:	02 c0       	rjmp	.+4      	; 0x62e <snakegame_UpdateDisplay+0x116>
     62a:	88 0f       	add	r24, r24
     62c:	99 1f       	adc	r25, r25
     62e:	2a 95       	dec	r18
     630:	e2 f7       	brpl	.-8      	; 0x62a <snakegame_UpdateDisplay+0x112>
     632:	38 2b       	or	r19, r24
     634:	33 96       	adiw	r30, 0x03	; 3

		// Make sendme byte with all point in this display byte
		// Init with snake[i] point
		uint8_t display_byte = 1 << ((uint8_t)snake[i].y % 8);
		// Find all point near here (in this display byte)
		for(uint8_t j=0; j<snake_add_index; j++)
     636:	e4 17       	cp	r30, r20
     638:	f5 07       	cpc	r31, r21
     63a:	41 f7       	brne	.-48     	; 0x60c <snakegame_UpdateDisplay+0xf4>
				display_byte |= 1 << ((uint8_t)snake[j].y % 8);
			}
		}

		// check that snake[i] and addme points are in same display_byte
		if(addme_x == snake[i].x && addme_line == line){
     63c:	a2 0d       	add	r26, r2
     63e:	b3 1d       	adc	r27, r3
     640:	a9 54       	subi	r26, 0x49	; 73
     642:	bf 4f       	sbci	r27, 0xFF	; 255
     644:	90 91 b5 00 	lds	r25, 0x00B5
     648:	8c 91       	ld	r24, X
     64a:	98 17       	cp	r25, r24
     64c:	39 f4       	brne	.+14     	; 0x65c <snakegame_UpdateDisplay+0x144>
     64e:	8b 14       	cp	r8, r11
     650:	29 f4       	brne	.+10     	; 0x65c <snakegame_UpdateDisplay+0x144>
			display_byte |= (addme_display_byte & 0x7f);
     652:	89 2d       	mov	r24, r9
     654:	8f 77       	andi	r24, 0x7F	; 127
     656:	38 2b       	or	r19, r24
			addme_display_byte |= 0x80; // say that we already draw this point
     658:	e0 e8       	ldi	r30, 0x80	; 128
     65a:	9e 2a       	or	r9, r30
		}

		Lcd3310_Send( display_byte, LCD_DATA );
     65c:	83 2f       	mov	r24, r19
     65e:	61 e0       	ldi	r22, 0x01	; 1
     660:	0e 94 1a 0c 	call	0x1834	; 0x1834 <Lcd3310_Send>
	// eval values for addme pixel show
	uint8_t addme_line = (uint8_t)addme_y / 8;
	uint8_t addme_display_byte = 1 << ((uint8_t)addme_y % 8);

	// Lets draw each point in snake to our lcd.
	for(uint8_t i=0; i < snake_add_index; i++)
     664:	a3 94       	inc	r10
     666:	80 91 5e 03 	lds	r24, 0x035E
     66a:	a8 16       	cp	r10, r24
     66c:	08 f4       	brcc	.+2      	; 0x670 <snakegame_UpdateDisplay+0x158>
     66e:	91 cf       	rjmp	.-222    	; 0x592 <snakegame_UpdateDisplay+0x7a>
		Lcd3310_Send( display_byte, LCD_DATA );
	}


	// if we didn't draw it before lets do it now
	if(!(addme_display_byte & 0x80)){
     670:	97 fc       	sbrc	r9, 7
     672:	1f c0       	rjmp	.+62     	; 0x6b2 <snakegame_UpdateDisplay+0x19a>
		lcd_index = (uint16_t)addme_x + (uint16_t)addme_line * 84;
     674:	04 e5       	ldi	r16, 0x54	; 84
     676:	80 9e       	mul	r8, r16
     678:	80 01       	movw	r16, r0
     67a:	11 24       	eor	r1, r1
     67c:	80 91 b5 00 	lds	r24, 0x00B5
     680:	08 0f       	add	r16, r24
     682:	11 1d       	adc	r17, r1
		Lcd3310_Send( 0x80 | (lcd_index % LCD_X_RES), LCD_CMD );
     684:	c8 01       	movw	r24, r16
     686:	64 e5       	ldi	r22, 0x54	; 84
     688:	70 e0       	ldi	r23, 0x00	; 0
     68a:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <__udivmodhi4>
     68e:	80 68       	ori	r24, 0x80	; 128
     690:	60 e0       	ldi	r22, 0x00	; 0
     692:	0e 94 1a 0c 	call	0x1834	; 0x1834 <Lcd3310_Send>
		Lcd3310_Send( 0x40 | (lcd_index / LCD_X_RES), LCD_CMD );
     696:	c8 01       	movw	r24, r16
     698:	64 e5       	ldi	r22, 0x54	; 84
     69a:	70 e0       	ldi	r23, 0x00	; 0
     69c:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <__udivmodhi4>
     6a0:	86 2f       	mov	r24, r22
     6a2:	80 64       	ori	r24, 0x40	; 64
     6a4:	60 e0       	ldi	r22, 0x00	; 0
     6a6:	0e 94 1a 0c 	call	0x1834	; 0x1834 <Lcd3310_Send>
		Lcd3310_Send( addme_display_byte, LCD_DATA );
     6aa:	89 2d       	mov	r24, r9
     6ac:	61 e0       	ldi	r22, 0x01	; 1
     6ae:	0e 94 1a 0c 	call	0x1834	; 0x1834 <Lcd3310_Send>
	}
}
     6b2:	df 91       	pop	r29
     6b4:	cf 91       	pop	r28
     6b6:	1f 91       	pop	r17
     6b8:	0f 91       	pop	r16
     6ba:	ff 90       	pop	r15
     6bc:	ef 90       	pop	r14
     6be:	df 90       	pop	r13
     6c0:	cf 90       	pop	r12
     6c2:	bf 90       	pop	r11
     6c4:	af 90       	pop	r10
     6c6:	9f 90       	pop	r9
     6c8:	8f 90       	pop	r8
     6ca:	7f 90       	pop	r7
     6cc:	6f 90       	pop	r6
     6ce:	5f 90       	pop	r5
     6d0:	4f 90       	pop	r4
     6d2:	3f 90       	pop	r3
     6d4:	2f 90       	pop	r2
     6d6:	08 95       	ret

000006d8 <SnakeGame_AddmeUpdateXY>:
}


void SnakeGame_AddmeUpdateXY(void)
{
	addme_x = rand() % 82 + 1;
     6d8:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <rand>
     6dc:	62 e5       	ldi	r22, 0x52	; 82
     6de:	70 e0       	ldi	r23, 0x00	; 0
     6e0:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <__divmodhi4>
     6e4:	8f 5f       	subi	r24, 0xFF	; 255
     6e6:	80 93 b5 00 	sts	0x00B5, r24
	addme_y = rand() % 31 + 9;
     6ea:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <rand>
     6ee:	6f e1       	ldi	r22, 0x1F	; 31
     6f0:	70 e0       	ldi	r23, 0x00	; 0
     6f2:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <__divmodhi4>
     6f6:	87 5f       	subi	r24, 0xF7	; 247
     6f8:	80 93 b6 00 	sts	0x00B6, r24
}
     6fc:	08 95       	ret

000006fe <SnakeGame_Start>:
}


void SnakeGame_Start(void)
{
	SnakeGame_AddmeUpdateXY();
     6fe:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <SnakeGame_AddmeUpdateXY>
//================================================//


void snakegame_InitSnake(void)
{
	snake_add_index = SNAKE_START_LEN; // start length of snake
     702:	86 e0       	ldi	r24, 0x06	; 6
     704:	80 93 5e 03 	sts	0x035E, r24
	score = (uwin_times<<4) | (snake_add_index - SNAKE_START_LEN);
     708:	80 91 5c 03 	lds	r24, 0x035C
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	74 e0       	ldi	r23, 0x04	; 4
     710:	88 0f       	add	r24, r24
     712:	99 1f       	adc	r25, r25
     714:	7a 95       	dec	r23
     716:	e1 f7       	brne	.-8      	; 0x710 <SnakeGame_Start+0x12>
     718:	80 93 5d 03 	sts	0x035D, r24
     71c:	e7 eb       	ldi	r30, 0xB7	; 183
     71e:	f0 e0       	ldi	r31, 0x00	; 0
     720:	88 e2       	ldi	r24, 0x28	; 40
	for(uint8_t i=0; i<SNAKE_LEN; i++){
		snake[i].y = 20;
     722:	24 e1       	ldi	r18, 0x14	; 20
		snake[i].x = 40 - i;
		snake[i].direction = RIGHT;
     724:	92 e0       	ldi	r25, 0x02	; 2
void snakegame_InitSnake(void)
{
	snake_add_index = SNAKE_START_LEN; // start length of snake
	score = (uwin_times<<4) | (snake_add_index - SNAKE_START_LEN);
	for(uint8_t i=0; i<SNAKE_LEN; i++){
		snake[i].y = 20;
     726:	21 83       	std	Z+1, r18	; 0x01
		snake[i].x = 40 - i;
     728:	80 83       	st	Z, r24
		snake[i].direction = RIGHT;
     72a:	92 83       	std	Z+2, r25	; 0x02
     72c:	33 96       	adiw	r30, 0x03	; 3
     72e:	81 50       	subi	r24, 0x01	; 1

void snakegame_InitSnake(void)
{
	snake_add_index = SNAKE_START_LEN; // start length of snake
	score = (uwin_times<<4) | (snake_add_index - SNAKE_START_LEN);
	for(uint8_t i=0; i<SNAKE_LEN; i++){
     730:	8e 31       	cpi	r24, 0x1E	; 30
     732:	c9 f7       	brne	.-14     	; 0x726 <SnakeGame_Start+0x28>
void SnakeGame_Start(void)
{
	SnakeGame_AddmeUpdateXY();
	snakegame_InitSnake();

	Lcd3310_GotoXY(0, 0);
     734:	80 e0       	ldi	r24, 0x00	; 0
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	60 e0       	ldi	r22, 0x00	; 0
     73a:	70 e0       	ldi	r23, 0x00	; 0
     73c:	0e 94 04 0b 	call	0x1608	; 0x1608 <Lcd3310_GotoXY>
	Lcd3310_String_P(snake_str, WHITE_TEXT_ON_BLACK);
     740:	80 91 6f 00 	lds	r24, 0x006F
     744:	90 91 70 00 	lds	r25, 0x0070
     748:	61 e0       	ldi	r22, 0x01	; 1
     74a:	0e 94 03 0a 	call	0x1406	; 0x1406 <Lcd3310_String_P>
	snakegame_UpdateDisplay();
     74e:	0e 94 8c 02 	call	0x518	; 0x518 <snakegame_UpdateDisplay>
}
     752:	08 95       	ret

00000754 <SnakeGame_TakeNextStep>:
{
	// show results and go to main menu
}

void SnakeGame_TakeNextStep(void)
{
     754:	cf 93       	push	r28
     756:	df 93       	push	r29
     758:	c7 eb       	ldi	r28, 0xB7	; 183
     75a:	d0 e0       	ldi	r29, 0x00	; 0

	// Lets go somethere:
	for(uint8_t i=0; i < SNAKE_LEN; i++)
	{
		snakegame_DirectionStep(&snake[i]);
     75c:	ce 01       	movw	r24, r28
     75e:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <snakegame_DirectionStep>
     762:	23 96       	adiw	r28, 0x03	; 3

void SnakeGame_TakeNextStep(void)
{

	// Lets go somethere:
	for(uint8_t i=0; i < SNAKE_LEN; i++)
     764:	80 e0       	ldi	r24, 0x00	; 0
     766:	c5 3d       	cpi	r28, 0xD5	; 213
     768:	d8 07       	cpc	r29, r24
     76a:	c1 f7       	brne	.-16     	; 0x75c <SnakeGame_TakeNextStep+0x8>
     76c:	89 e0       	ldi	r24, 0x09	; 9
     76e:	14 c0       	rjmp	.+40     	; 0x798 <SnakeGame_TakeNextStep+0x44>
	}

	// Update direction of each point from last to first
	for(uint8_t i = SNAKE_LEN-1; i != 0 && i < SNAKE_LEN; i--)
	{
		snake[i].direction = snake[i-1].direction;
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	dc 01       	movw	r26, r24
     774:	aa 0f       	add	r26, r26
     776:	bb 1f       	adc	r27, r27
     778:	a8 0f       	add	r26, r24
     77a:	b9 1f       	adc	r27, r25
     77c:	a9 54       	subi	r26, 0x49	; 73
     77e:	bf 4f       	sbci	r27, 0xFF	; 255
     780:	01 97       	sbiw	r24, 0x01	; 1
     782:	fc 01       	movw	r30, r24
     784:	ee 0f       	add	r30, r30
     786:	ff 1f       	adc	r31, r31
     788:	e8 0f       	add	r30, r24
     78a:	f9 1f       	adc	r31, r25
     78c:	e9 54       	subi	r30, 0x49	; 73
     78e:	ff 4f       	sbci	r31, 0xFF	; 255
     790:	82 81       	ldd	r24, Z+2	; 0x02
     792:	12 96       	adiw	r26, 0x02	; 2
     794:	8c 93       	st	X, r24
     796:	82 2f       	mov	r24, r18
	{
		snakegame_DirectionStep(&snake[i]);
	}

	// Update direction of each point from last to first
	for(uint8_t i = SNAKE_LEN-1; i != 0 && i < SNAKE_LEN; i--)
     798:	28 2f       	mov	r18, r24
     79a:	21 50       	subi	r18, 0x01	; 1
     79c:	48 f7       	brcc	.-46     	; 0x770 <SnakeGame_TakeNextStep+0x1c>
	{
		snake[i].direction = snake[i-1].direction;
	}

	// Check if we come to addme point
	if(snake[0].x == addme_x && snake[0].y == addme_y){
     79e:	90 91 b7 00 	lds	r25, 0x00B7
     7a2:	80 91 b5 00 	lds	r24, 0x00B5
     7a6:	98 17       	cp	r25, r24
     7a8:	09 f0       	breq	.+2      	; 0x7ac <SnakeGame_TakeNextStep+0x58>
     7aa:	c1 c0       	rjmp	.+386    	; 0x92e <__stack+0xcf>
     7ac:	90 91 b8 00 	lds	r25, 0x00B8
     7b0:	80 91 b6 00 	lds	r24, 0x00B6
     7b4:	98 17       	cp	r25, r24
     7b6:	09 f0       	breq	.+2      	; 0x7ba <SnakeGame_TakeNextStep+0x66>
     7b8:	ba c0       	rjmp	.+372    	; 0x92e <__stack+0xcf>
		SnakeGame_AddmeUpdateXY();
     7ba:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <SnakeGame_AddmeUpdateXY>
		snake_add_index++; // add snake point
     7be:	80 91 5e 03 	lds	r24, 0x035E
     7c2:	28 2f       	mov	r18, r24
     7c4:	2f 5f       	subi	r18, 0xFF	; 255
     7c6:	20 93 5e 03 	sts	0x035E, r18
		score = (uwin_times<<4) | (snake_add_index - SNAKE_START_LEN);
     7ca:	85 50       	subi	r24, 0x05	; 5
     7cc:	90 91 5c 03 	lds	r25, 0x035C
     7d0:	92 95       	swap	r25
     7d2:	90 7f       	andi	r25, 0xF0	; 240
     7d4:	98 2b       	or	r25, r24
     7d6:	90 93 5d 03 	sts	0x035D, r25
		if(snake_add_index >= SNAKE_LEN){
     7da:	2a 30       	cpi	r18, 0x0A	; 10
     7dc:	08 f4       	brcc	.+2      	; 0x7e0 <SnakeGame_TakeNextStep+0x8c>
     7de:	a7 c0       	rjmp	.+334    	; 0x92e <__stack+0xcf>
			Lcd3310_ClearCenter();
     7e0:	0e 94 1b 0b 	call	0x1636	; 0x1636 <Lcd3310_ClearCenter>
			uwin_times++;
     7e4:	80 91 5c 03 	lds	r24, 0x035C
     7e8:	8f 5f       	subi	r24, 0xFF	; 255
     7ea:	80 93 5c 03 	sts	0x035C, r24
			if(uwin_times >= 3){
     7ee:	83 30       	cpi	r24, 0x03	; 3
     7f0:	b0 f1       	brcs	.+108    	; 0x85e <SnakeGame_TakeNextStep+0x10a>
				uwin_times = 0x00;
     7f2:	10 92 5c 03 	sts	0x035C, r1
				Lcd3310_GotoXY(3, 2);
     7f6:	83 e0       	ldi	r24, 0x03	; 3
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	62 e0       	ldi	r22, 0x02	; 2
     7fc:	70 e0       	ldi	r23, 0x00	; 0
     7fe:	0e 94 04 0b 	call	0x1608	; 0x1608 <Lcd3310_GotoXY>
				Lcd3310_String_P(got_fun_str, BLACK_TEXT_ON_WHITE);
     802:	80 91 9c 00 	lds	r24, 0x009C
     806:	90 91 9d 00 	lds	r25, 0x009D
     80a:	60 e0       	ldi	r22, 0x00	; 0
     80c:	0e 94 03 0a 	call	0x1406	; 0x1406 <Lcd3310_String_P>
				Lcd3310_GotoXY(3, 3);
     810:	83 e0       	ldi	r24, 0x03	; 3
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	63 e0       	ldi	r22, 0x03	; 3
     816:	70 e0       	ldi	r23, 0x00	; 0
     818:	0e 94 04 0b 	call	0x1608	; 0x1608 <Lcd3310_GotoXY>
				Lcd3310_String_P(go_work_str, BLACK_TEXT_ON_WHITE);
     81c:	80 91 a7 00 	lds	r24, 0x00A7
     820:	90 91 a8 00 	lds	r25, 0x00A8
     824:	60 e0       	ldi	r22, 0x00	; 0
     826:	0e 94 03 0a 	call	0x1406	; 0x1406 <Lcd3310_String_P>
				Lcd3310_GotoXY(0, 5);
     82a:	80 e0       	ldi	r24, 0x00	; 0
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	65 e0       	ldi	r22, 0x05	; 5
     830:	70 e0       	ldi	r23, 0x00	; 0
     832:	0e 94 04 0b 	call	0x1608	; 0x1608 <Lcd3310_GotoXY>
				Lcd3310_String_P(brunql_str, WHITE_TEXT_ON_BLACK);
     836:	80 91 b1 00 	lds	r24, 0x00B1
     83a:	90 91 b2 00 	lds	r25, 0x00B2
     83e:	61 e0       	ldi	r22, 0x01	; 1
     840:	0e 94 03 0a 	call	0x1406	; 0x1406 <Lcd3310_String_P>
				FLAGS_SWITCH_ON( JOYSTICK_CENTER_CLICK_FLAG ); // stop game! go to main menu.
     844:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     846:	f8 94       	cli
     848:	80 91 75 03 	lds	r24, 0x0375
     84c:	90 91 76 03 	lds	r25, 0x0376
     850:	82 60       	ori	r24, 0x02	; 2
     852:	90 93 76 03 	sts	0x0376, r25
     856:	80 93 75 03 	sts	0x0375, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     85a:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
     85c:	35 c0       	rjmp	.+106    	; 0x8c8 <__stack+0x69>
			}else{
				Lcd3310_GotoXY(3, 2);
     85e:	83 e0       	ldi	r24, 0x03	; 3
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	62 e0       	ldi	r22, 0x02	; 2
     864:	70 e0       	ldi	r23, 0x00	; 0
     866:	0e 94 04 0b 	call	0x1608	; 0x1608 <Lcd3310_GotoXY>
				Lcd3310_String_P(uwin_str, BLACK_TEXT_ON_WHITE);
     86a:	80 91 7a 00 	lds	r24, 0x007A
     86e:	90 91 7b 00 	lds	r25, 0x007B
     872:	60 e0       	ldi	r22, 0x00	; 0
     874:	0e 94 03 0a 	call	0x1406	; 0x1406 <Lcd3310_String_P>
				Lcd3310_GotoXY(2, 3);
     878:	82 e0       	ldi	r24, 0x02	; 2
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	63 e0       	ldi	r22, 0x03	; 3
     87e:	70 e0       	ldi	r23, 0x00	; 0
     880:	0e 94 04 0b 	call	0x1608	; 0x1608 <Lcd3310_GotoXY>
				Lcd3310_String_P(level_str, BLACK_TEXT_ON_WHITE);
     884:	80 91 91 00 	lds	r24, 0x0091
     888:	90 91 92 00 	lds	r25, 0x0092
     88c:	60 e0       	ldi	r22, 0x00	; 0
     88e:	0e 94 03 0a 	call	0x1406	; 0x1406 <Lcd3310_String_P>
				Lcd3310_UInt8AsText(uwin_times, BLACK_TEXT_ON_WHITE);
     892:	80 91 5c 03 	lds	r24, 0x035C
     896:	60 e0       	ldi	r22, 0x00	; 0
     898:	0e 94 3e 0c 	call	0x187c	; 0x187c <Lcd3310_UInt8AsText>
				Lcd3310_GotoXY(0, 5);
     89c:	80 e0       	ldi	r24, 0x00	; 0
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	65 e0       	ldi	r22, 0x05	; 5
     8a2:	70 e0       	ldi	r23, 0x00	; 0
     8a4:	0e 94 04 0b 	call	0x1608	; 0x1608 <Lcd3310_GotoXY>
				Lcd3310_String_P(score_str, WHITE_TEXT_ON_BLACK);
     8a8:	80 91 86 00 	lds	r24, 0x0086
     8ac:	90 91 87 00 	lds	r25, 0x0087
     8b0:	61 e0       	ldi	r22, 0x01	; 1
     8b2:	0e 94 03 0a 	call	0x1406	; 0x1406 <Lcd3310_String_P>
				Lcd3310_UInt8AsText(score, WHITE_TEXT_ON_BLACK);
     8b6:	80 91 5d 03 	lds	r24, 0x035D
     8ba:	61 e0       	ldi	r22, 0x01	; 1
     8bc:	0e 94 3e 0c 	call	0x187c	; 0x187c <Lcd3310_UInt8AsText>
				Lcd3310_Char(' ', WHITE_TEXT_ON_BLACK);
     8c0:	80 e2       	ldi	r24, 0x20	; 32
     8c2:	61 e0       	ldi	r22, 0x01	; 1
     8c4:	0e 94 b2 09 	call	0x1364	; 0x1364 <Lcd3310_Char>
			}
			while(JOYSTICK_INT_CHECK());
     8c8:	83 99       	sbic	0x10, 3	; 16
     8ca:	fe cf       	rjmp	.-4      	; 0x8c8 <__stack+0x69>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     8cc:	80 e4       	ldi	r24, 0x40	; 64
     8ce:	9f e1       	ldi	r25, 0x1F	; 31
     8d0:	01 97       	sbiw	r24, 0x01	; 1
     8d2:	f1 f7       	brne	.-4      	; 0x8d0 <__stack+0x71>
			_delay_ms(2);
			GIFR = _BV(INTF1);
     8d4:	80 e8       	ldi	r24, 0x80	; 128
     8d6:	8a bf       	out	0x3a, r24	; 58

			get_present_speed /= 1.5;
     8d8:	60 91 b4 00 	lds	r22, 0x00B4
     8dc:	70 e0       	ldi	r23, 0x00	; 0
     8de:	88 27       	eor	r24, r24
     8e0:	77 fd       	sbrc	r23, 7
     8e2:	80 95       	com	r24
     8e4:	98 2f       	mov	r25, r24
     8e6:	0e 94 77 12 	call	0x24ee	; 0x24ee <__floatsisf>
     8ea:	20 e0       	ldi	r18, 0x00	; 0
     8ec:	30 e0       	ldi	r19, 0x00	; 0
     8ee:	40 ec       	ldi	r20, 0xC0	; 192
     8f0:	5f e3       	ldi	r21, 0x3F	; 63
     8f2:	0e 94 3b 11 	call	0x2276	; 0x2276 <__divsf3>
     8f6:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <__fixunssfsi>
     8fa:	60 93 b4 00 	sts	0x00B4, r22
			step_speed -= 3 * uwin_times;
     8fe:	40 91 5c 03 	lds	r20, 0x035C
     902:	24 2f       	mov	r18, r20
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	c9 01       	movw	r24, r18
     908:	88 0f       	add	r24, r24
     90a:	99 1f       	adc	r25, r25
     90c:	82 0f       	add	r24, r18
     90e:	93 1f       	adc	r25, r19
     910:	20 91 b3 00 	lds	r18, 0x00B3
     914:	28 1b       	sub	r18, r24
     916:	20 93 b3 00 	sts	0x00B3, r18

			timer_ticks_to_get_present = 0x00;
     91a:	10 92 0e 01 	sts	0x010E, r1
			timer_delay = 0x00;
     91e:	10 92 7c 03 	sts	0x037C, r1

			score = (uwin_times<<4);
     922:	42 95       	swap	r20
     924:	40 7f       	andi	r20, 0xF0	; 240
     926:	40 93 5d 03 	sts	0x035D, r20
			SnakeGame_Start();
     92a:	0e 94 7f 03 	call	0x6fe	; 0x6fe <SnakeGame_Start>
		}
	}

	snakegame_UpdateDisplay();
     92e:	0e 94 8c 02 	call	0x518	; 0x518 <snakegame_UpdateDisplay>
}
     932:	df 91       	pop	r29
     934:	cf 91       	pop	r28
     936:	08 95       	ret

00000938 <hex2dec_result>:
PGM_P pstr_complete = "Done!";
PGM_P pstr_please_wait = "Please wait...";


void hex2dec_result(uint16_t hex, uint8_t result_index, uint8_t result_color)
{
     938:	cf 92       	push	r12
     93a:	df 92       	push	r13
     93c:	ef 92       	push	r14
     93e:	ff 92       	push	r15
     940:	0f 93       	push	r16
     942:	1f 93       	push	r17
     944:	7c 01       	movw	r14, r24
     946:	26 2f       	mov	r18, r22
	uint8_t res2, res1, res0;
	res0 =  hex % 10;
	hex /= 10;
     948:	6a e0       	ldi	r22, 0x0A	; 10
     94a:	70 e0       	ldi	r23, 0x00	; 0
     94c:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <__udivmodhi4>
     950:	d6 2e       	mov	r13, r22
     952:	c7 2e       	mov	r12, r23
	hex /= 10;
	res2 = hex % 10;

	uint16_t dec_result = (res2 << 8) | (res1 << 4)| res0;

	result[result_index][result_color] = dec_result;
     954:	30 e0       	ldi	r19, 0x00	; 0
     956:	89 01       	movw	r16, r18
     958:	00 0f       	add	r16, r16
     95a:	11 1f       	adc	r17, r17
     95c:	02 0f       	add	r16, r18
     95e:	13 1f       	adc	r17, r19
     960:	04 0f       	add	r16, r20
     962:	11 1d       	adc	r17, r1
     964:	00 0f       	add	r16, r16
     966:	11 1f       	adc	r17, r17
     968:	01 5a       	subi	r16, 0xA1	; 161
     96a:	1c 4f       	sbci	r17, 0xFC	; 252
     96c:	86 2f       	mov	r24, r22
     96e:	97 2f       	mov	r25, r23
     970:	6a e0       	ldi	r22, 0x0A	; 10
     972:	70 e0       	ldi	r23, 0x00	; 0
     974:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <__udivmodhi4>
     978:	e8 2f       	mov	r30, r24
     97a:	f0 e0       	ldi	r31, 0x00	; 0
     97c:	84 e0       	ldi	r24, 0x04	; 4
     97e:	ee 0f       	add	r30, r30
     980:	ff 1f       	adc	r31, r31
     982:	8a 95       	dec	r24
     984:	e1 f7       	brne	.-8      	; 0x97e <hex2dec_result+0x46>
     986:	c7 01       	movw	r24, r14
     988:	6a e0       	ldi	r22, 0x0A	; 10
     98a:	70 e0       	ldi	r23, 0x00	; 0
     98c:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <__udivmodhi4>
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	e8 2b       	or	r30, r24
     994:	f9 2b       	or	r31, r25
     996:	8d 2d       	mov	r24, r13
     998:	9c 2d       	mov	r25, r12
     99a:	6a e0       	ldi	r22, 0x0A	; 10
     99c:	70 e0       	ldi	r23, 0x00	; 0
     99e:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <__udivmodhi4>
     9a2:	cb 01       	movw	r24, r22
     9a4:	6a e0       	ldi	r22, 0x0A	; 10
     9a6:	70 e0       	ldi	r23, 0x00	; 0
     9a8:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <__udivmodhi4>
     9ac:	38 2f       	mov	r19, r24
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	e2 2b       	or	r30, r18
     9b2:	f3 2b       	or	r31, r19
     9b4:	d8 01       	movw	r26, r16
     9b6:	ed 93       	st	X+, r30
     9b8:	fc 93       	st	X, r31
}
     9ba:	1f 91       	pop	r17
     9bc:	0f 91       	pop	r16
     9be:	ff 90       	pop	r15
     9c0:	ef 90       	pop	r14
     9c2:	df 90       	pop	r13
     9c4:	cf 90       	pop	r12
     9c6:	08 95       	ret

000009c8 <StartADC>:


void StartADC(FirstOrSecond first)
{
	if (first){
     9c8:	88 23       	and	r24, r24
     9ca:	11 f0       	breq	.+4      	; 0x9d0 <StartADC+0x8>
		ADMUX &= (unsigned char) ~ _BV(MUX0);
     9cc:	38 98       	cbi	0x07, 0	; 7
     9ce:	01 c0       	rjmp	.+2      	; 0x9d2 <StartADC+0xa>
	}else{ // second
		ADMUX |= _BV(MUX0);
     9d0:	38 9a       	sbi	0x07, 0	; 7
     9d2:	88 ec       	ldi	r24, 0xC8	; 200
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	01 97       	sbiw	r24, 0x01	; 1
     9d8:	f1 f7       	brne	.-4      	; 0x9d6 <StartADC+0xe>

	// delay for stabilisation on ADC pin (charge intro reference capacitor)
	// TODO: NEED TEST!
	_delay_us(50);

	ADCSRA |= _BV( ADSC ); // start conversation
     9da:	36 9a       	sbi	0x06, 6	; 6
	while( ADC_CONVERT_IN_PROGRESS() ) {  };
     9dc:	36 99       	sbic	0x06, 6	; 6
     9de:	fe cf       	rjmp	.-4      	; 0x9dc <StartADC+0x14>
	adc_data = ADC;
     9e0:	84 b1       	in	r24, 0x04	; 4
     9e2:	95 b1       	in	r25, 0x05	; 5
     9e4:	90 93 7b 03 	sts	0x037B, r25
     9e8:	80 93 7a 03 	sts	0x037A, r24
	//result in adc_data
}
     9ec:	08 95       	ret

000009ee <GetValuesFromADC>:

void GetValuesFromADC(void) // with simple averaging
{
	uint16_t temp_val = adc_res_first;
     9ee:	20 91 71 03 	lds	r18, 0x0371
     9f2:	30 91 72 03 	lds	r19, 0x0372
void StartADC(FirstOrSecond first)
{
	if (first){
		ADMUX &= (unsigned char) ~ _BV(MUX0);
	}else{ // second
		ADMUX |= _BV(MUX0);
     9f6:	38 9a       	sbi	0x07, 0	; 7
     9f8:	88 ec       	ldi	r24, 0xC8	; 200
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	01 97       	sbiw	r24, 0x01	; 1
     9fe:	f1 f7       	brne	.-4      	; 0x9fc <GetValuesFromADC+0xe>

	// delay for stabilisation on ADC pin (charge intro reference capacitor)
	// TODO: NEED TEST!
	_delay_us(50);

	ADCSRA |= _BV( ADSC ); // start conversation
     a00:	36 9a       	sbi	0x06, 6	; 6
	while( ADC_CONVERT_IN_PROGRESS() ) {  };
     a02:	36 99       	sbic	0x06, 6	; 6
     a04:	fe cf       	rjmp	.-4      	; 0xa02 <GetValuesFromADC+0x14>
	adc_data = ADC;
     a06:	84 b1       	in	r24, 0x04	; 4
     a08:	95 b1       	in	r25, 0x05	; 5
     a0a:	90 93 7b 03 	sts	0x037B, r25
     a0e:	80 93 7a 03 	sts	0x037A, r24

void GetValuesFromADC(void) // with simple averaging
{
	uint16_t temp_val = adc_res_first;
	StartADC( FIRST );
	if(temp_val){
     a12:	21 15       	cp	r18, r1
     a14:	31 05       	cpc	r19, r1
     a16:	49 f0       	breq	.+18     	; 0xa2a <GetValuesFromADC+0x3c>
		adc_res_first = (adc_data + temp_val) / 2;
     a18:	80 91 7a 03 	lds	r24, 0x037A
     a1c:	90 91 7b 03 	lds	r25, 0x037B
     a20:	82 0f       	add	r24, r18
     a22:	93 1f       	adc	r25, r19
     a24:	96 95       	lsr	r25
     a26:	87 95       	ror	r24
     a28:	04 c0       	rjmp	.+8      	; 0xa32 <GetValuesFromADC+0x44>
	}else{
		adc_res_first = adc_data;
     a2a:	80 91 7a 03 	lds	r24, 0x037A
     a2e:	90 91 7b 03 	lds	r25, 0x037B
     a32:	90 93 72 03 	sts	0x0372, r25
     a36:	80 93 71 03 	sts	0x0371, r24
	}

	temp_val = adc_res_second;
     a3a:	20 91 73 03 	lds	r18, 0x0373
     a3e:	30 91 74 03 	lds	r19, 0x0374


void StartADC(FirstOrSecond first)
{
	if (first){
		ADMUX &= (unsigned char) ~ _BV(MUX0);
     a42:	38 98       	cbi	0x07, 0	; 7
     a44:	88 ec       	ldi	r24, 0xC8	; 200
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	01 97       	sbiw	r24, 0x01	; 1
     a4a:	f1 f7       	brne	.-4      	; 0xa48 <GetValuesFromADC+0x5a>

	// delay for stabilisation on ADC pin (charge intro reference capacitor)
	// TODO: NEED TEST!
	_delay_us(50);

	ADCSRA |= _BV( ADSC ); // start conversation
     a4c:	36 9a       	sbi	0x06, 6	; 6
	while( ADC_CONVERT_IN_PROGRESS() ) {  };
     a4e:	36 99       	sbic	0x06, 6	; 6
     a50:	fe cf       	rjmp	.-4      	; 0xa4e <GetValuesFromADC+0x60>
	adc_data = ADC;
     a52:	84 b1       	in	r24, 0x04	; 4
     a54:	95 b1       	in	r25, 0x05	; 5
     a56:	90 93 7b 03 	sts	0x037B, r25
     a5a:	80 93 7a 03 	sts	0x037A, r24
		adc_res_first = adc_data;
	}

	temp_val = adc_res_second;
	StartADC( SECOND );
	if(temp_val){
     a5e:	21 15       	cp	r18, r1
     a60:	31 05       	cpc	r19, r1
     a62:	49 f0       	breq	.+18     	; 0xa76 <GetValuesFromADC+0x88>
		adc_res_second = (adc_data + temp_val) / 2;
     a64:	80 91 7a 03 	lds	r24, 0x037A
     a68:	90 91 7b 03 	lds	r25, 0x037B
     a6c:	82 0f       	add	r24, r18
     a6e:	93 1f       	adc	r25, r19
     a70:	96 95       	lsr	r25
     a72:	87 95       	ror	r24
     a74:	04 c0       	rjmp	.+8      	; 0xa7e <GetValuesFromADC+0x90>
	}else{
		adc_res_second = adc_data;
     a76:	80 91 7a 03 	lds	r24, 0x037A
     a7a:	90 91 7b 03 	lds	r25, 0x037B
     a7e:	90 93 74 03 	sts	0x0374, r25
     a82:	80 93 73 03 	sts	0x0373, r24
     a86:	08 95       	ret

00000a88 <ADC_255_Times>:
	}
}


void ADC_255_Times(void)
{
     a88:	1f 93       	push	r17
	//===================================//
	adc_res_first = 0x00;
     a8a:	10 92 72 03 	sts	0x0372, r1
     a8e:	10 92 71 03 	sts	0x0371, r1
	adc_res_second = 0x00;
     a92:	10 92 74 03 	sts	0x0374, r1
     a96:	10 92 73 03 	sts	0x0373, r1
     a9a:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0; i < 0xff;  i++){
		GetValuesFromADC();
     a9c:	0e 94 f7 04 	call	0x9ee	; 0x9ee <GetValuesFromADC>
void ADC_255_Times(void)
{
	//===================================//
	adc_res_first = 0x00;
	adc_res_second = 0x00;
	for(uint8_t i=0; i < 0xff;  i++){
     aa0:	1f 5f       	subi	r17, 0xFF	; 255
     aa2:	1f 3f       	cpi	r17, 0xFF	; 255
     aa4:	d9 f7       	brne	.-10     	; 0xa9c <ADC_255_Times+0x14>
		GetValuesFromADC();
	}
	//===================================//
}
     aa6:	1f 91       	pop	r17
     aa8:	08 95       	ret

00000aaa <CalibrationAlgorithm>:


void CalibrationAlgorithm(uint8_t color)
{
     aaa:	cf 92       	push	r12
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
//	uint8_t adc_res_first_8 = (uint8_t)((uint16_t)adc_res_first >> 2);
//	uint8_t adc_res_second_8 = (uint8_t)((uint16_t)adc_res_second >> 2);
//	coefs[FIRST][color] = (double) EVP_ALG_PERCENT * ADC_MAX_VALUE / adc_res_first_8;
//	coefs[SECOND][color] = (double) EVP_ALG_PERCENT * ADC_MAX_VALUE / adc_res_second_8;
//
	coefs[FIRST][color] = (double) EVP_ALG_PERCENT * ADC_MAX_VALUE / adc_res_first;
     ab6:	08 2f       	mov	r16, r24
     ab8:	10 e0       	ldi	r17, 0x00	; 0
     aba:	60 91 71 03 	lds	r22, 0x0371
     abe:	70 91 72 03 	lds	r23, 0x0372
     ac2:	a5 ed       	ldi	r26, 0xD5	; 213
     ac4:	ca 2e       	mov	r12, r26
     ac6:	a0 e0       	ldi	r26, 0x00	; 0
     ac8:	da 2e       	mov	r13, r26
     aca:	78 01       	movw	r14, r16
     acc:	ee 0c       	add	r14, r14
     ace:	ff 1c       	adc	r15, r15
     ad0:	ee 0c       	add	r14, r14
     ad2:	ff 1c       	adc	r15, r15
     ad4:	ec 0c       	add	r14, r12
     ad6:	fd 1c       	adc	r15, r13
     ad8:	88 27       	eor	r24, r24
     ada:	77 fd       	sbrc	r23, 7
     adc:	80 95       	com	r24
     ade:	98 2f       	mov	r25, r24
     ae0:	0e 94 77 12 	call	0x24ee	; 0x24ee <__floatsisf>
     ae4:	9b 01       	movw	r18, r22
     ae6:	ac 01       	movw	r20, r24
     ae8:	60 e0       	ldi	r22, 0x00	; 0
     aea:	70 ec       	ldi	r23, 0xC0	; 192
     aec:	8f ef       	ldi	r24, 0xFF	; 255
     aee:	93 e4       	ldi	r25, 0x43	; 67
     af0:	0e 94 3b 11 	call	0x2276	; 0x2276 <__divsf3>
     af4:	f7 01       	movw	r30, r14
     af6:	60 83       	st	Z, r22
     af8:	71 83       	std	Z+1, r23	; 0x01
     afa:	82 83       	std	Z+2, r24	; 0x02
     afc:	93 83       	std	Z+3, r25	; 0x03
	coefs[SECOND][color] = (double) EVP_ALG_PERCENT * ADC_MAX_VALUE / adc_res_second;
     afe:	60 91 73 03 	lds	r22, 0x0373
     b02:	70 91 74 03 	lds	r23, 0x0374
     b06:	0d 5f       	subi	r16, 0xFD	; 253
     b08:	1f 4f       	sbci	r17, 0xFF	; 255
     b0a:	00 0f       	add	r16, r16
     b0c:	11 1f       	adc	r17, r17
     b0e:	00 0f       	add	r16, r16
     b10:	11 1f       	adc	r17, r17
     b12:	c0 0e       	add	r12, r16
     b14:	d1 1e       	adc	r13, r17
     b16:	88 27       	eor	r24, r24
     b18:	77 fd       	sbrc	r23, 7
     b1a:	80 95       	com	r24
     b1c:	98 2f       	mov	r25, r24
     b1e:	0e 94 77 12 	call	0x24ee	; 0x24ee <__floatsisf>
     b22:	9b 01       	movw	r18, r22
     b24:	ac 01       	movw	r20, r24
     b26:	60 e0       	ldi	r22, 0x00	; 0
     b28:	70 ec       	ldi	r23, 0xC0	; 192
     b2a:	8f ef       	ldi	r24, 0xFF	; 255
     b2c:	93 e4       	ldi	r25, 0x43	; 67
     b2e:	0e 94 3b 11 	call	0x2276	; 0x2276 <__divsf3>
     b32:	f6 01       	movw	r30, r12
     b34:	60 83       	st	Z, r22
     b36:	71 83       	std	Z+1, r23	; 0x01
     b38:	82 83       	std	Z+2, r24	; 0x02
     b3a:	93 83       	std	Z+3, r25	; 0x03

#else
	coefs[FIRST][color] = 1;
	coefs[SECOND][color] = (double)adc_res_first / adc_res_second;
#endif
}
     b3c:	1f 91       	pop	r17
     b3e:	0f 91       	pop	r16
     b40:	ff 90       	pop	r15
     b42:	ef 90       	pop	r14
     b44:	df 90       	pop	r13
     b46:	cf 90       	pop	r12
     b48:	08 95       	ret

00000b4a <SetZeroAlgorithm>:
void SetZeroAlgorithm(uint8_t color)
{
//	zero[FIRST] = adc_res_first;
//	zero[SECOND] = adc_res_second;

	max_diff = ADC_MAX_VALUE;// -  ((adc_res_first < adc_res_second) ? adc_res_first : adc_res_second);
     b4a:	8f ef       	ldi	r24, 0xFF	; 255
     b4c:	93 e0       	ldi	r25, 0x03	; 3
     b4e:	90 93 ee 00 	sts	0x00EE, r25
     b52:	80 93 ed 00 	sts	0x00ED, r24
}
     b56:	08 95       	ret

00000b58 <SaveResultsAlgorithm>:

void SaveResultsAlgorithm(uint8_t color)
{
     b58:	df 92       	push	r13
     b5a:	ef 92       	push	r14
     b5c:	ff 92       	push	r15
     b5e:	0f 93       	push	r16
     b60:	1f 93       	push	r17
     b62:	cf 93       	push	r28
     b64:	df 93       	push	r29
     b66:	d8 2e       	mov	r13, r24
//	uint8_t adc_res_second_8 = (uint8_t)((uint16_t)adc_res_second >> 2);
//
//	int16_t result1 = (int16_t)((double)(((double)adc_res_first_8) * coefs[FIRST][color]));
//	int16_t result2 = (int16_t)((double)(((double)adc_res_second_8) * coefs[SECOND][color]));

	int16_t result1 = (int16_t)((double)(((double)adc_res_first) * coefs[FIRST][color]));
     b68:	60 91 71 03 	lds	r22, 0x0371
     b6c:	70 91 72 03 	lds	r23, 0x0372
     b70:	08 2f       	mov	r16, r24
     b72:	10 e0       	ldi	r17, 0x00	; 0
     b74:	88 27       	eor	r24, r24
     b76:	77 fd       	sbrc	r23, 7
     b78:	80 95       	com	r24
     b7a:	98 2f       	mov	r25, r24
     b7c:	0e 94 77 12 	call	0x24ee	; 0x24ee <__floatsisf>
     b80:	00 0f       	add	r16, r16
     b82:	11 1f       	adc	r17, r17
     b84:	00 0f       	add	r16, r16
     b86:	11 1f       	adc	r17, r17
     b88:	f8 01       	movw	r30, r16
     b8a:	eb 52       	subi	r30, 0x2B	; 43
     b8c:	ff 4f       	sbci	r31, 0xFF	; 255
     b8e:	20 81       	ld	r18, Z
     b90:	31 81       	ldd	r19, Z+1	; 0x01
     b92:	42 81       	ldd	r20, Z+2	; 0x02
     b94:	53 81       	ldd	r21, Z+3	; 0x03
     b96:	0e 94 41 10 	call	0x2082	; 0x2082 <__mulsf3>
     b9a:	0e 94 d5 12 	call	0x25aa	; 0x25aa <__fixsfsi>
     b9e:	7b 01       	movw	r14, r22
	int16_t result2 = (int16_t)((double)(((double)adc_res_second) * coefs[SECOND][color]));
     ba0:	60 91 73 03 	lds	r22, 0x0373
     ba4:	70 91 74 03 	lds	r23, 0x0374
     ba8:	88 27       	eor	r24, r24
     baa:	77 fd       	sbrc	r23, 7
     bac:	80 95       	com	r24
     bae:	98 2f       	mov	r25, r24
     bb0:	0e 94 77 12 	call	0x24ee	; 0x24ee <__floatsisf>
     bb4:	0f 51       	subi	r16, 0x1F	; 31
     bb6:	1f 4f       	sbci	r17, 0xFF	; 255
     bb8:	f8 01       	movw	r30, r16
     bba:	20 81       	ld	r18, Z
     bbc:	31 81       	ldd	r19, Z+1	; 0x01
     bbe:	42 81       	ldd	r20, Z+2	; 0x02
     bc0:	53 81       	ldd	r21, Z+3	; 0x03
     bc2:	0e 94 41 10 	call	0x2082	; 0x2082 <__mulsf3>
     bc6:	0e 94 d5 12 	call	0x25aa	; 0x25aa <__fixsfsi>
     bca:	eb 01       	movw	r28, r22
	uint16_t diff_percent = DIFF(result1, result2) * 100 / max_diff;
     bcc:	97 01       	movw	r18, r14
     bce:	26 1b       	sub	r18, r22
     bd0:	37 0b       	sbc	r19, r23
     bd2:	37 ff       	sbrs	r19, 7
     bd4:	03 c0       	rjmp	.+6      	; 0xbdc <SaveResultsAlgorithm+0x84>
     bd6:	30 95       	com	r19
     bd8:	21 95       	neg	r18
     bda:	3f 4f       	sbci	r19, 0xFF	; 255
     bdc:	60 91 ed 00 	lds	r22, 0x00ED
     be0:	70 91 ee 00 	lds	r23, 0x00EE
     be4:	84 e6       	ldi	r24, 0x64	; 100
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	ac 01       	movw	r20, r24
     bea:	24 9f       	mul	r18, r20
     bec:	c0 01       	movw	r24, r0
     bee:	25 9f       	mul	r18, r21
     bf0:	90 0d       	add	r25, r0
     bf2:	34 9f       	mul	r19, r20
     bf4:	90 0d       	add	r25, r0
     bf6:	11 24       	eor	r1, r1
     bf8:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <__udivmodhi4>
     bfc:	16 2f       	mov	r17, r22
     bfe:	07 2f       	mov	r16, r23

	hex2dec_result(result1, FIRST, color); // result[FIRST][color] = result1;
     c00:	c7 01       	movw	r24, r14
     c02:	60 e0       	ldi	r22, 0x00	; 0
     c04:	4d 2d       	mov	r20, r13
     c06:	0e 94 9c 04 	call	0x938	; 0x938 <hex2dec_result>
	hex2dec_result(result2, SECOND, color); //result[SECOND][color] = result2;
     c0a:	ce 01       	movw	r24, r28
     c0c:	61 e0       	ldi	r22, 0x01	; 1
     c0e:	4d 2d       	mov	r20, r13
     c10:	0e 94 9c 04 	call	0x938	; 0x938 <hex2dec_result>
	hex2dec_result(diff_percent, PERCENT, color); //result[PERCENT][color] = DIFF(result1, result2);// * 100 / max_diff;
     c14:	81 2f       	mov	r24, r17
     c16:	90 2f       	mov	r25, r16
     c18:	62 e0       	ldi	r22, 0x02	; 2
     c1a:	4d 2d       	mov	r20, r13
     c1c:	0e 94 9c 04 	call	0x938	; 0x938 <hex2dec_result>
}
     c20:	df 91       	pop	r29
     c22:	cf 91       	pop	r28
     c24:	1f 91       	pop	r17
     c26:	0f 91       	pop	r16
     c28:	ff 90       	pop	r15
     c2a:	ef 90       	pop	r14
     c2c:	df 90       	pop	r13
     c2e:	08 95       	ret

00000c30 <ADC_LoadingAndEvalIt>:

void ADC_LoadingAndEvalIt(ptrEvalMe evalMe)
{
     c30:	cf 92       	push	r12
     c32:	df 92       	push	r13
     c34:	ff 92       	push	r15
     c36:	0f 93       	push	r16
     c38:	1f 93       	push	r17
     c3a:	cf 93       	push	r28
     c3c:	df 93       	push	r29
     c3e:	8c 01       	movw	r16, r24
	 *
	 * [############]
	 *
	 * 	 Complete!
	 */
	JOYSTICK_INT_DISABLE();
     c40:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     c42:	f8 94       	cli
     c44:	8b b7       	in	r24, 0x3b	; 59
     c46:	8f 77       	andi	r24, 0x7F	; 127
     c48:	8b bf       	out	0x3b, r24	; 59
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     c4a:	9f bf       	out	0x3f, r25	; 63

	Lcd3310_ClearCenter();
     c4c:	0e 94 1b 0b 	call	0x1636	; 0x1636 <Lcd3310_ClearCenter>
	Lcd3310_GotoXY(0, 1);
     c50:	80 e0       	ldi	r24, 0x00	; 0
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	61 e0       	ldi	r22, 0x01	; 1
     c56:	70 e0       	ldi	r23, 0x00	; 0
     c58:	0e 94 04 0b 	call	0x1608	; 0x1608 <Lcd3310_GotoXY>
	Lcd3310_String_P( pstr_please_wait, BLACK_TEXT_ON_WHITE );
     c5c:	80 91 0c 01 	lds	r24, 0x010C
     c60:	90 91 0d 01 	lds	r25, 0x010D
     c64:	60 e0       	ldi	r22, 0x00	; 0
     c66:	0e 94 03 0a 	call	0x1406	; 0x1406 <Lcd3310_String_P>
	if(evalMe == SetZeroAlgorithm){
     c6a:	85 e0       	ldi	r24, 0x05	; 5
     c6c:	05 3a       	cpi	r16, 0xA5	; 165
     c6e:	18 07       	cpc	r17, r24
     c70:	19 f4       	brne	.+6      	; 0xc78 <ADC_LoadingAndEvalIt+0x48>
		Lcd3310_GotoXY(5, 3);
     c72:	85 e0       	ldi	r24, 0x05	; 5
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	02 c0       	rjmp	.+4      	; 0xc7c <ADC_LoadingAndEvalIt+0x4c>
	}else{
		Lcd3310_GotoXY(1, 3);
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	63 e0       	ldi	r22, 0x03	; 3
     c7e:	70 e0       	ldi	r23, 0x00	; 0
     c80:	0e 94 04 0b 	call	0x1608	; 0x1608 <Lcd3310_GotoXY>
	}
	Lcd3310_Char('[', BLACK_TEXT_ON_WHITE);
     c84:	8b e5       	ldi	r24, 0x5B	; 91
     c86:	60 e0       	ldi	r22, 0x00	; 0
     c88:	0e 94 b2 09 	call	0x1364	; 0x1364 <Lcd3310_Char>
     c8c:	cf ee       	ldi	r28, 0xEF	; 239
     c8e:	d0 e0       	ldi	r29, 0x00	; 0
     c90:	ff 24       	eor	r15, r15
     c92:	30 e9       	ldi	r19, 0x90	; 144
     c94:	c3 2e       	mov	r12, r19
     c96:	31 e0       	ldi	r19, 0x01	; 1
     c98:	d3 2e       	mov	r13, r19
	for(uint8_t color=0; color < 3; color++){
		Lcd3310_Char('#', BLACK_TEXT_ON_WHITE);
     c9a:	83 e2       	ldi	r24, 0x23	; 35
     c9c:	60 e0       	ldi	r22, 0x00	; 0
     c9e:	0e 94 b2 09 	call	0x1364	; 0x1364 <Lcd3310_Char>
		if(evalMe == SetZeroAlgorithm){
     ca2:	85 e0       	ldi	r24, 0x05	; 5
     ca4:	05 3a       	cpi	r16, 0xA5	; 165
     ca6:	18 07       	cpc	r17, r24
     ca8:	19 f4       	brne	.+6      	; 0xcb0 <ADC_LoadingAndEvalIt+0x80>
			LedDriver_SwitchLeds( 0x00 );
     caa:	80 e0       	ldi	r24, 0x00	; 0
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	02 c0       	rjmp	.+4      	; 0xcb4 <ADC_LoadingAndEvalIt+0x84>
		}else{
			LedDriver_SwitchLeds( led_show_codes[color] );
     cb0:	88 81       	ld	r24, Y
     cb2:	99 81       	ldd	r25, Y+1	; 0x01
     cb4:	0e 94 a7 06 	call	0xd4e	; 0xd4e <LedDriver_SwitchLeds>
     cb8:	80 e2       	ldi	r24, 0x20	; 32
     cba:	9e e4       	ldi	r25, 0x4E	; 78
     cbc:	f6 01       	movw	r30, r12
     cbe:	31 97       	sbiw	r30, 0x01	; 1
     cc0:	f1 f7       	brne	.-4      	; 0xcbe <ADC_LoadingAndEvalIt+0x8e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cc2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cc4:	d9 f7       	brne	.-10     	; 0xcbc <ADC_LoadingAndEvalIt+0x8c>
		}
		_delay_ms( DELAY_BEFORE_START_ADC );
		Lcd3310_Char('#', BLACK_TEXT_ON_WHITE);
     cc6:	83 e2       	ldi	r24, 0x23	; 35
     cc8:	60 e0       	ldi	r22, 0x00	; 0
     cca:	0e 94 b2 09 	call	0x1364	; 0x1364 <Lcd3310_Char>
		ADC_255_Times();
     cce:	0e 94 44 05 	call	0xa88	; 0xa88 <ADC_255_Times>
		Lcd3310_Char('#', BLACK_TEXT_ON_WHITE);
     cd2:	83 e2       	ldi	r24, 0x23	; 35
     cd4:	60 e0       	ldi	r22, 0x00	; 0
     cd6:	0e 94 b2 09 	call	0x1364	; 0x1364 <Lcd3310_Char>

		// Start Algorithm
		(evalMe)(color);
     cda:	8f 2d       	mov	r24, r15
     cdc:	f8 01       	movw	r30, r16
     cde:	09 95       	icall

		if(evalMe == SetZeroAlgorithm){
     ce0:	85 e0       	ldi	r24, 0x05	; 5
     ce2:	05 3a       	cpi	r16, 0xA5	; 165
     ce4:	18 07       	cpc	r17, r24
     ce6:	29 f0       	breq	.+10     	; 0xcf2 <ADC_LoadingAndEvalIt+0xc2>
		Lcd3310_GotoXY(5, 3);
	}else{
		Lcd3310_GotoXY(1, 3);
	}
	Lcd3310_Char('[', BLACK_TEXT_ON_WHITE);
	for(uint8_t color=0; color < 3; color++){
     ce8:	f3 94       	inc	r15
     cea:	22 96       	adiw	r28, 0x02	; 2
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	f8 16       	cp	r15, r24
     cf0:	a1 f6       	brne	.-88     	; 0xc9a <ADC_LoadingAndEvalIt+0x6a>

		if(evalMe == SetZeroAlgorithm){
			break; // not need to switch off leds 3 times :)
		}
	}
	LedDriver_SwitchLeds( 0x00 );
     cf2:	80 e0       	ldi	r24, 0x00	; 0
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	0e 94 a7 06 	call	0xd4e	; 0xd4e <LedDriver_SwitchLeds>
	Lcd3310_Char(']', BLACK_TEXT_ON_WHITE);
     cfa:	8d e5       	ldi	r24, 0x5D	; 93
     cfc:	60 e0       	ldi	r22, 0x00	; 0
     cfe:	0e 94 b2 09 	call	0x1364	; 0x1364 <Lcd3310_Char>
	Lcd3310_GotoXY(2, 5);
     d02:	82 e0       	ldi	r24, 0x02	; 2
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	65 e0       	ldi	r22, 0x05	; 5
     d08:	70 e0       	ldi	r23, 0x00	; 0
     d0a:	0e 94 04 0b 	call	0x1608	; 0x1608 <Lcd3310_GotoXY>
	Lcd3310_String_P( pstr_complete, BLACK_TEXT_ON_WHITE );
     d0e:	80 91 fb 00 	lds	r24, 0x00FB
     d12:	90 91 fc 00 	lds	r25, 0x00FC
     d16:	60 e0       	ldi	r22, 0x00	; 0
     d18:	0e 94 03 0a 	call	0x1406	; 0x1406 <Lcd3310_String_P>
     d1c:	88 e8       	ldi	r24, 0x88	; 136
     d1e:	93 e1       	ldi	r25, 0x13	; 19
     d20:	20 e9       	ldi	r18, 0x90	; 144
     d22:	31 e0       	ldi	r19, 0x01	; 1
     d24:	f9 01       	movw	r30, r18
     d26:	31 97       	sbiw	r30, 0x01	; 1
     d28:	f1 f7       	brne	.-4      	; 0xd26 <ADC_LoadingAndEvalIt+0xf6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d2a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d2c:	d9 f7       	brne	.-10     	; 0xd24 <ADC_LoadingAndEvalIt+0xf4>
	_delay_ms(500); // show complete and wait 0.5 sec
	JOYSTICK_INT_ENABLE();
     d2e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     d30:	f8 94       	cli
     d32:	80 e4       	ldi	r24, 0x40	; 64
     d34:	8a bf       	out	0x3a, r24	; 58
     d36:	8b b7       	in	r24, 0x3b	; 59
     d38:	80 68       	ori	r24, 0x80	; 128
     d3a:	8b bf       	out	0x3b, r24	; 59
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     d3c:	9f bf       	out	0x3f, r25	; 63
//	LedDriver_SwitchLeds(GREEN_LEDS);
//	(evalMe)(0);
}
     d3e:	df 91       	pop	r29
     d40:	cf 91       	pop	r28
     d42:	1f 91       	pop	r17
     d44:	0f 91       	pop	r16
     d46:	ff 90       	pop	r15
     d48:	df 90       	pop	r13
     d4a:	cf 90       	pop	r12
     d4c:	08 95       	ret

00000d4e <LedDriver_SwitchLeds>:

#include "led_driver.h"


void LedDriver_SwitchLeds(uint16_t data)
{
     d4e:	ac 01       	movw	r20, r24
     d50:	20 e0       	ldi	r18, 0x00	; 0
     d52:	30 e0       	ldi	r19, 0x00	; 0
	char i;
	for(i=0; i<16; i++){
		CLK_DOWN;
		if(data & _BV(i)){
     d54:	61 e0       	ldi	r22, 0x01	; 1
     d56:	70 e0       	ldi	r23, 0x00	; 0

void LedDriver_SwitchLeds(uint16_t data)
{
	char i;
	for(i=0; i<16; i++){
		CLK_DOWN;
     d58:	db 98       	cbi	0x1b, 3	; 27
		if(data & _BV(i)){
     d5a:	cb 01       	movw	r24, r22
     d5c:	02 2e       	mov	r0, r18
     d5e:	02 c0       	rjmp	.+4      	; 0xd64 <LedDriver_SwitchLeds+0x16>
     d60:	88 0f       	add	r24, r24
     d62:	99 1f       	adc	r25, r25
     d64:	0a 94       	dec	r0
     d66:	e2 f7       	brpl	.-8      	; 0xd60 <LedDriver_SwitchLeds+0x12>
     d68:	84 23       	and	r24, r20
     d6a:	95 23       	and	r25, r21
     d6c:	89 2b       	or	r24, r25
     d6e:	11 f0       	breq	.+4      	; 0xd74 <LedDriver_SwitchLeds+0x26>
			LED_DR_PORT |= DATA_PIN;
     d70:	da 9a       	sbi	0x1b, 2	; 27
     d72:	01 c0       	rjmp	.+2      	; 0xd76 <LedDriver_SwitchLeds+0x28>
		}else{
			LED_DR_PORT &= (unsigned char)~DATA_PIN;
     d74:	da 98       	cbi	0x1b, 2	; 27
		}
		CLK_UP;
     d76:	db 9a       	sbi	0x1b, 3	; 27
     d78:	2f 5f       	subi	r18, 0xFF	; 255
     d7a:	3f 4f       	sbci	r19, 0xFF	; 255


void LedDriver_SwitchLeds(uint16_t data)
{
	char i;
	for(i=0; i<16; i++){
     d7c:	20 31       	cpi	r18, 0x10	; 16
     d7e:	31 05       	cpc	r19, r1
     d80:	59 f7       	brne	.-42     	; 0xd58 <LedDriver_SwitchLeds+0xa>
		}else{
			LED_DR_PORT &= (unsigned char)~DATA_PIN;
		}
		CLK_UP;
	}
	LATCH_PULSE;
     d82:	dc 9a       	sbi	0x1b, 4	; 27
     d84:	00 00       	nop
     d86:	dc 98       	cbi	0x1b, 4	; 27
}
     d88:	08 95       	ret

00000d8a <LedDriver_Init>:
//	LedDriver_SwitchLeds(0x00);
//}

void LedDriver_Init(void)
{
	LATCH_DOWN;
     d8a:	dc 98       	cbi	0x1b, 4	; 27
	CLK_DOWN;
     d8c:	db 98       	cbi	0x1b, 3	; 27
	LED_DR_DDR |= DATA_PIN | CLK_PIN | LATCH_PIN;
     d8e:	8a b3       	in	r24, 0x1a	; 26
     d90:	8c 61       	ori	r24, 0x1C	; 28
     d92:	8a bb       	out	0x1a, r24	; 26
	LedDriver_SwitchLeds(0x00);
     d94:	80 e0       	ldi	r24, 0x00	; 0
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	0e 94 a7 06 	call	0xd4e	; 0xd4e <LedDriver_SwitchLeds>
}
     d9c:	08 95       	ret

00000d9e <main>:

//	DEBUG_INIT(); // Initialize uart if DEBUG != 0
	DEBUG_PRINT_CHAR( 0x01 );

	// Input/Output Ports initialization
    PORTB=0x00;
     d9e:	18 ba       	out	0x18, r1	; 24
    DDRB=0x00;
     da0:	17 ba       	out	0x17, r1	; 23

    PORTC=0x00;
     da2:	15 ba       	out	0x15, r1	; 21
    DDRC=0x00;
     da4:	14 ba       	out	0x14, r1	; 20

    PORTD= _BV(PD3); // pull up joystick center button
     da6:	88 e0       	ldi	r24, 0x08	; 8
     da8:	82 bb       	out	0x12, r24	; 18
    DDRD=0x00;
     daa:	11 ba       	out	0x11, r1	; 17


    JPORT = (uint8_t)(J_RU | J_LU | J_RD | J_LD);
     dac:	80 ef       	ldi	r24, 0xF0	; 240
     dae:	85 bb       	out	0x15, r24	; 21
    JDDR &= (uint8_t)~(J_RU | J_LU | J_RD | J_LD);
     db0:	84 b3       	in	r24, 0x14	; 20
     db2:	8f 70       	andi	r24, 0x0F	; 15
     db4:	84 bb       	out	0x14, r24	; 20

    //TEST_PIN_DDR_INIT();

    ACSR = _BV(ACD); // turn off analog comparer, this is turns ON after RESET... delurium, but the fact ;)
     db6:	80 e8       	ldi	r24, 0x80	; 128
     db8:	88 b9       	out	0x08, r24	; 8

    // External Interrupt(s) initialization
    MCUCR= _BV(ISC11) | _BV(ISC01); // fall
     dba:	8a e0       	ldi	r24, 0x0A	; 10
     dbc:	85 bf       	out	0x35, r24	; 53
    GICR = _BV(INT0) | _BV(INT1); // int1 int0 enable interrupts
     dbe:	80 ec       	ldi	r24, 0xC0	; 192
     dc0:	8b bf       	out	0x3b, r24	; 59
//    TCCR1A = 0x00;
//    TCCR1B = 0x00;
//    TCCR2 = 0x00;
//    TIMSK = 0x00;

	TIM2_INIT(); // see defines.h for details
     dc2:	86 e0       	ldi	r24, 0x06	; 6
     dc4:	85 bd       	out	0x25, r24	; 37

    // Init ADC
	ADMUX = 0x00; //_BV(ADLAR); // ADC0, result in ADC
     dc6:	17 b8       	out	0x07, r1	; 7
	ADCSRA = _BV(ADEN) /*| _BV(ADIE)*/ | _BV(ADPS2)  | _BV(ADPS1) | _BV(ADPS0); // XTAL / 16;
     dc8:	87 e8       	ldi	r24, 0x87	; 135
     dca:	86 b9       	out	0x06, r24	; 6


	LedDriver_Init();
     dcc:	0e 94 c5 06 	call	0xd8a	; 0xd8a <LedDriver_Init>
	Lcd3310_InitializeDisplay(DELAY_SHOW_SPLASH);
     dd0:	88 ee       	ldi	r24, 0xE8	; 232
     dd2:	93 e0       	ldi	r25, 0x03	; 3
     dd4:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <Lcd3310_InitializeDisplay>


	DEBUG_PRINT_CHAR( 0x02 );


	sei();
     dd8:	78 94       	sei

	DEBUG_PRINT_CHAR( 0x00 );

   	for(;;){

		IF_FLAG_ON( UPDATE_DISPLAY_FLAG ){
     dda:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     ddc:	f8 94       	cli
     dde:	20 91 75 03 	lds	r18, 0x0375
     de2:	30 91 76 03 	lds	r19, 0x0376
     de6:	30 93 78 03 	sts	0x0378, r19
     dea:	20 93 77 03 	sts	0x0377, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     dee:	8f bf       	out	0x3f, r24	; 63
     df0:	80 91 77 03 	lds	r24, 0x0377
     df4:	80 ff       	sbrs	r24, 0
     df6:	1d c0       	rjmp	.+58     	; 0xe32 <main+0x94>
			FLAGS_SWITCH_OFF( UPDATE_DISPLAY_FLAG );
     df8:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     dfa:	f8 94       	cli
     dfc:	80 91 75 03 	lds	r24, 0x0375
     e00:	90 91 76 03 	lds	r25, 0x0376
     e04:	8e 7f       	andi	r24, 0xFE	; 254
     e06:	90 93 76 03 	sts	0x0376, r25
     e0a:	80 93 75 03 	sts	0x0375, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     e0e:	2f bf       	out	0x3f, r18	; 63
			IF_FLAG_OFF( SNAKE_PLAYING_NOW_FLAG ){
     e10:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     e12:	f8 94       	cli
     e14:	80 91 75 03 	lds	r24, 0x0375
     e18:	90 91 76 03 	lds	r25, 0x0376
     e1c:	90 93 78 03 	sts	0x0378, r25
     e20:	80 93 77 03 	sts	0x0377, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     e24:	2f bf       	out	0x3f, r18	; 63
     e26:	80 91 77 03 	lds	r24, 0x0377
     e2a:	87 fd       	sbrc	r24, 7
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <main+0x94>
				Lcd3310_UpdateDisplayInfo();
     e2e:	0e 94 55 0c 	call	0x18aa	; 0x18aa <Lcd3310_UpdateDisplayInfo>
			}
		}

		IF_FLAG_ON( JOYSTICK_CENTER_CLICK_FLAG ){
     e32:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     e34:	f8 94       	cli
     e36:	20 91 75 03 	lds	r18, 0x0375
     e3a:	30 91 76 03 	lds	r19, 0x0376
     e3e:	30 93 78 03 	sts	0x0378, r19
     e42:	20 93 77 03 	sts	0x0377, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     e46:	8f bf       	out	0x3f, r24	; 63
     e48:	80 91 77 03 	lds	r24, 0x0377
     e4c:	81 ff       	sbrs	r24, 1
     e4e:	1a c0       	rjmp	.+52     	; 0xe84 <main+0xe6>
			FLAGS_SWITCH_OFF( JOYSTICK_CENTER_CLICK_FLAG );
     e50:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     e52:	f8 94       	cli
     e54:	80 91 75 03 	lds	r24, 0x0375
     e58:	90 91 76 03 	lds	r25, 0x0376
     e5c:	8d 7f       	andi	r24, 0xFD	; 253
     e5e:	90 93 76 03 	sts	0x0376, r25
     e62:	80 93 75 03 	sts	0x0375, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     e66:	2f bf       	out	0x3f, r18	; 63

			Menu_EnterClick();
     e68:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <Menu_EnterClick>

			FLAGS_SWITCH_ON( UPDATE_DISPLAY_FLAG );
     e6c:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     e6e:	f8 94       	cli
     e70:	80 91 75 03 	lds	r24, 0x0375
     e74:	90 91 76 03 	lds	r25, 0x0376
     e78:	81 60       	ori	r24, 0x01	; 1
     e7a:	90 93 76 03 	sts	0x0376, r25
     e7e:	80 93 75 03 	sts	0x0375, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     e82:	2f bf       	out	0x3f, r18	; 63
		}



		IF_FLAG_ON( ADC_RESULT_FLAG ){ // in menu adc result
     e84:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     e86:	f8 94       	cli
     e88:	20 91 75 03 	lds	r18, 0x0375
     e8c:	30 91 76 03 	lds	r19, 0x0376
     e90:	30 93 78 03 	sts	0x0378, r19
     e94:	20 93 77 03 	sts	0x0377, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     e98:	8f bf       	out	0x3f, r24	; 63
     e9a:	80 91 77 03 	lds	r24, 0x0377
     e9e:	84 ff       	sbrs	r24, 4
     ea0:	1c c0       	rjmp	.+56     	; 0xeda <main+0x13c>

			ADC_LoadingAndEvalIt(SaveResultsAlgorithm);
     ea2:	8c ea       	ldi	r24, 0xAC	; 172
     ea4:	95 e0       	ldi	r25, 0x05	; 5
     ea6:	0e 94 18 06 	call	0xc30	; 0xc30 <ADC_LoadingAndEvalIt>

			FLAGS_SWITCH_OFF( ADC_RESULT_FLAG );
     eaa:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     eac:	f8 94       	cli
     eae:	80 91 75 03 	lds	r24, 0x0375
     eb2:	90 91 76 03 	lds	r25, 0x0376
     eb6:	8f 7e       	andi	r24, 0xEF	; 239
     eb8:	90 93 76 03 	sts	0x0376, r25
     ebc:	80 93 75 03 	sts	0x0375, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     ec0:	2f bf       	out	0x3f, r18	; 63
			FLAGS_SWITCH_ON( UPDATE_DISPLAY_FLAG );
     ec2:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     ec4:	f8 94       	cli
     ec6:	80 91 75 03 	lds	r24, 0x0375
     eca:	90 91 76 03 	lds	r25, 0x0376
     ece:	81 60       	ori	r24, 0x01	; 1
     ed0:	90 93 76 03 	sts	0x0376, r25
     ed4:	80 93 75 03 	sts	0x0375, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     ed8:	2f bf       	out	0x3f, r18	; 63
		}

		IF_FLAG_ON( ADC_CALIBRATE_FLAG ){
     eda:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     edc:	f8 94       	cli
     ede:	20 91 75 03 	lds	r18, 0x0375
     ee2:	30 91 76 03 	lds	r19, 0x0376
     ee6:	30 93 78 03 	sts	0x0378, r19
     eea:	20 93 77 03 	sts	0x0377, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     eee:	8f bf       	out	0x3f, r24	; 63
     ef0:	80 91 77 03 	lds	r24, 0x0377
     ef4:	85 ff       	sbrs	r24, 5
     ef6:	10 c0       	rjmp	.+32     	; 0xf18 <main+0x17a>

			ADC_LoadingAndEvalIt(CalibrationAlgorithm);
     ef8:	85 e5       	ldi	r24, 0x55	; 85
     efa:	95 e0       	ldi	r25, 0x05	; 5
     efc:	0e 94 18 06 	call	0xc30	; 0xc30 <ADC_LoadingAndEvalIt>

			FLAGS_SWITCH_OFF( ADC_CALIBRATE_FLAG );
     f00:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     f02:	f8 94       	cli
     f04:	80 91 75 03 	lds	r24, 0x0375
     f08:	90 91 76 03 	lds	r25, 0x0376
     f0c:	8f 7d       	andi	r24, 0xDF	; 223
     f0e:	90 93 76 03 	sts	0x0376, r25
     f12:	80 93 75 03 	sts	0x0375, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     f16:	2f bf       	out	0x3f, r18	; 63
		}

		IF_FLAG_ON( ADC_SET_ZERO ){
     f18:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     f1a:	f8 94       	cli
     f1c:	20 91 75 03 	lds	r18, 0x0375
     f20:	30 91 76 03 	lds	r19, 0x0376
     f24:	30 93 78 03 	sts	0x0378, r19
     f28:	20 93 77 03 	sts	0x0377, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     f2c:	8f bf       	out	0x3f, r24	; 63
     f2e:	80 91 77 03 	lds	r24, 0x0377
     f32:	86 ff       	sbrs	r24, 6
     f34:	10 c0       	rjmp	.+32     	; 0xf56 <main+0x1b8>

			ADC_LoadingAndEvalIt(SetZeroAlgorithm);
     f36:	85 ea       	ldi	r24, 0xA5	; 165
     f38:	95 e0       	ldi	r25, 0x05	; 5
     f3a:	0e 94 18 06 	call	0xc30	; 0xc30 <ADC_LoadingAndEvalIt>

			FLAGS_SWITCH_OFF( ADC_SET_ZERO );
     f3e:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     f40:	f8 94       	cli
     f42:	80 91 75 03 	lds	r24, 0x0375
     f46:	90 91 76 03 	lds	r25, 0x0376
     f4a:	8f 7b       	andi	r24, 0xBF	; 191
     f4c:	90 93 76 03 	sts	0x0376, r25
     f50:	80 93 75 03 	sts	0x0375, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     f54:	2f bf       	out	0x3f, r18	; 63
		}

	#ifdef ANIMATION_SWITCH_MENU_ITEMS
		IF_FLAG_ON( ANIMATION_NEXT_FLAG ){
     f56:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     f58:	f8 94       	cli
     f5a:	20 91 75 03 	lds	r18, 0x0375
     f5e:	30 91 76 03 	lds	r19, 0x0376
     f62:	30 93 78 03 	sts	0x0378, r19
     f66:	20 93 77 03 	sts	0x0377, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     f6a:	8f bf       	out	0x3f, r24	; 63
     f6c:	80 91 77 03 	lds	r24, 0x0377
     f70:	82 ff       	sbrs	r24, 2
     f72:	26 c0       	rjmp	.+76     	; 0xfc0 <main+0x222>
			FLAGS_SWITCH_OFF( ANIMATION_NEXT_FLAG );
     f74:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     f76:	f8 94       	cli
     f78:	80 91 75 03 	lds	r24, 0x0375
     f7c:	90 91 76 03 	lds	r25, 0x0376
     f80:	8b 7f       	andi	r24, 0xFB	; 251
     f82:	90 93 76 03 	sts	0x0376, r25
     f86:	80 93 75 03 	sts	0x0375, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     f8a:	2f bf       	out	0x3f, r18	; 63
			if(menu_now != &results && menu_now != &snake_results){
     f8c:	80 91 89 03 	lds	r24, 0x0389
     f90:	90 91 8a 03 	lds	r25, 0x038A
     f94:	21 e0       	ldi	r18, 0x01	; 1
     f96:	8a 34       	cpi	r24, 0x4A	; 74
     f98:	92 07       	cpc	r25, r18
     f9a:	31 f0       	breq	.+12     	; 0xfa8 <main+0x20a>
     f9c:	8e 57       	subi	r24, 0x7E	; 126
     f9e:	91 40       	sbci	r25, 0x01	; 1
     fa0:	19 f0       	breq	.+6      	; 0xfa8 <main+0x20a>
				Lcd3310_AnimationSwitchMenuItems(1);
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <Lcd3310_AnimationSwitchMenuItems>
			}
			FLAGS_SWITCH_ON( UPDATE_DISPLAY_FLAG );
     fa8:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     faa:	f8 94       	cli
     fac:	80 91 75 03 	lds	r24, 0x0375
     fb0:	90 91 76 03 	lds	r25, 0x0376
     fb4:	81 60       	ori	r24, 0x01	; 1
     fb6:	90 93 76 03 	sts	0x0376, r25
     fba:	80 93 75 03 	sts	0x0375, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     fbe:	2f bf       	out	0x3f, r18	; 63
		}
		IF_FLAG_ON( ANIMATION_PREV_FLAG ){
     fc0:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     fc2:	f8 94       	cli
     fc4:	20 91 75 03 	lds	r18, 0x0375
     fc8:	30 91 76 03 	lds	r19, 0x0376
     fcc:	30 93 78 03 	sts	0x0378, r19
     fd0:	20 93 77 03 	sts	0x0377, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     fd4:	8f bf       	out	0x3f, r24	; 63
     fd6:	80 91 77 03 	lds	r24, 0x0377
     fda:	83 ff       	sbrs	r24, 3
     fdc:	26 c0       	rjmp	.+76     	; 0x102a <main+0x28c>
			FLAGS_SWITCH_OFF( ANIMATION_PREV_FLAG );
     fde:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     fe0:	f8 94       	cli
     fe2:	80 91 75 03 	lds	r24, 0x0375
     fe6:	90 91 76 03 	lds	r25, 0x0376
     fea:	87 7f       	andi	r24, 0xF7	; 247
     fec:	90 93 76 03 	sts	0x0376, r25
     ff0:	80 93 75 03 	sts	0x0375, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     ff4:	2f bf       	out	0x3f, r18	; 63
			if(menu_now != &results && menu_now != &snake_results){
     ff6:	80 91 89 03 	lds	r24, 0x0389
     ffa:	90 91 8a 03 	lds	r25, 0x038A
     ffe:	21 e0       	ldi	r18, 0x01	; 1
    1000:	8a 34       	cpi	r24, 0x4A	; 74
    1002:	92 07       	cpc	r25, r18
    1004:	31 f0       	breq	.+12     	; 0x1012 <main+0x274>
    1006:	8e 57       	subi	r24, 0x7E	; 126
    1008:	91 40       	sbci	r25, 0x01	; 1
    100a:	19 f0       	breq	.+6      	; 0x1012 <main+0x274>
				Lcd3310_AnimationSwitchMenuItems(0);
    100c:	80 e0       	ldi	r24, 0x00	; 0
    100e:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <Lcd3310_AnimationSwitchMenuItems>
			}
			FLAGS_SWITCH_ON( UPDATE_DISPLAY_FLAG );
    1012:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1014:	f8 94       	cli
    1016:	80 91 75 03 	lds	r24, 0x0375
    101a:	90 91 76 03 	lds	r25, 0x0376
    101e:	81 60       	ori	r24, 0x01	; 1
    1020:	90 93 76 03 	sts	0x0376, r25
    1024:	80 93 75 03 	sts	0x0375, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1028:	2f bf       	out	0x3f, r18	; 63
		}
	#endif

		IF_FLAG_ON( SNAKE_START_GAME_FLAG ){
    102a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    102c:	f8 94       	cli
    102e:	20 91 75 03 	lds	r18, 0x0375
    1032:	30 91 76 03 	lds	r19, 0x0376
    1036:	30 93 78 03 	sts	0x0378, r19
    103a:	20 93 77 03 	sts	0x0377, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    103e:	8f bf       	out	0x3f, r24	; 63
    1040:	80 91 77 03 	lds	r24, 0x0377
    1044:	90 91 78 03 	lds	r25, 0x0378
    1048:	90 ff       	sbrs	r25, 0
    104a:	1e c0       	rjmp	.+60     	; 0x1088 <main+0x2ea>
			FLAGS_SWITCH_OFF( SNAKE_START_GAME_FLAG );
    104c:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    104e:	f8 94       	cli
    1050:	80 91 75 03 	lds	r24, 0x0375
    1054:	90 91 76 03 	lds	r25, 0x0376
    1058:	9e 7f       	andi	r25, 0xFE	; 254
    105a:	90 93 76 03 	sts	0x0376, r25
    105e:	80 93 75 03 	sts	0x0375, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1062:	2f bf       	out	0x3f, r18	; 63
			SnakeGame_Start();
    1064:	0e 94 7f 03 	call	0x6fe	; 0x6fe <SnakeGame_Start>
			TIM2_CLR_COUNTER_AND_OVF_ON();
    1068:	14 bc       	out	0x24, r1	; 36
    106a:	89 b7       	in	r24, 0x39	; 57
    106c:	80 64       	ori	r24, 0x40	; 64
    106e:	89 bf       	out	0x39, r24	; 57
			FLAGS_SWITCH_ON( SNAKE_PLAYING_NOW_FLAG );
    1070:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1072:	f8 94       	cli
    1074:	80 91 75 03 	lds	r24, 0x0375
    1078:	90 91 76 03 	lds	r25, 0x0376
    107c:	80 68       	ori	r24, 0x80	; 128
    107e:	90 93 76 03 	sts	0x0376, r25
    1082:	80 93 75 03 	sts	0x0375, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1086:	2f bf       	out	0x3f, r18	; 63
		}
		IF_FLAG_ON( SNAKE_STOP_GAME_FLAG ){
    1088:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    108a:	f8 94       	cli
    108c:	20 91 75 03 	lds	r18, 0x0375
    1090:	30 91 76 03 	lds	r19, 0x0376
    1094:	30 93 78 03 	sts	0x0378, r19
    1098:	20 93 77 03 	sts	0x0377, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    109c:	8f bf       	out	0x3f, r24	; 63
    109e:	80 91 77 03 	lds	r24, 0x0377
    10a2:	90 91 78 03 	lds	r25, 0x0378
    10a6:	91 ff       	sbrs	r25, 1
    10a8:	98 ce       	rjmp	.-720    	; 0xdda <main+0x3c>
			FLAGS_SWITCH_OFF( SNAKE_STOP_GAME_FLAG );
    10aa:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    10ac:	f8 94       	cli
    10ae:	80 91 75 03 	lds	r24, 0x0375
    10b2:	90 91 76 03 	lds	r25, 0x0376
    10b6:	9d 7f       	andi	r25, 0xFD	; 253
    10b8:	90 93 76 03 	sts	0x0376, r25
    10bc:	80 93 75 03 	sts	0x0375, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    10c0:	2f bf       	out	0x3f, r18	; 63
			TIM2_OVF_OFF();
    10c2:	89 b7       	in	r24, 0x39	; 57
    10c4:	8f 7b       	andi	r24, 0xBF	; 191
    10c6:	89 bf       	out	0x39, r24	; 57
			SnakeGame_Stop();
    10c8:	0e 94 43 02 	call	0x486	; 0x486 <SnakeGame_Stop>
			FLAGS_SWITCH_OFF( SNAKE_PLAYING_NOW_FLAG );
    10cc:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    10ce:	f8 94       	cli
    10d0:	80 91 75 03 	lds	r24, 0x0375
    10d4:	90 91 76 03 	lds	r25, 0x0376
    10d8:	8f 77       	andi	r24, 0x7F	; 127
    10da:	90 93 76 03 	sts	0x0376, r25
    10de:	80 93 75 03 	sts	0x0375, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    10e2:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    10e4:	7a ce       	rjmp	.-780    	; 0xdda <main+0x3c>

000010e6 <__vector_5>:
}

//================================================//
//== 			Game timer ticks				==//
ISR(TIMER2_OVF_vect)
{
    10e6:	1f 92       	push	r1
    10e8:	0f 92       	push	r0
    10ea:	0f b6       	in	r0, 0x3f	; 63
    10ec:	0f 92       	push	r0
    10ee:	11 24       	eor	r1, r1
    10f0:	2f 93       	push	r18
    10f2:	3f 93       	push	r19
    10f4:	4f 93       	push	r20
    10f6:	5f 93       	push	r21
    10f8:	6f 93       	push	r22
    10fa:	7f 93       	push	r23
    10fc:	8f 93       	push	r24
    10fe:	9f 93       	push	r25
    1100:	af 93       	push	r26
    1102:	bf 93       	push	r27
    1104:	ef 93       	push	r30
    1106:	ff 93       	push	r31
	if(!timer_delay--){
    1108:	80 91 7c 03 	lds	r24, 0x037C
    110c:	81 50       	subi	r24, 0x01	; 1
    110e:	80 93 7c 03 	sts	0x037C, r24
    1112:	8f 5f       	subi	r24, 0xFF	; 255
    1114:	99 f4       	brne	.+38     	; 0x113c <__vector_5+0x56>
		if(!timer_ticks_to_get_present--){
    1116:	80 91 0e 01 	lds	r24, 0x010E
    111a:	81 50       	subi	r24, 0x01	; 1
    111c:	80 93 0e 01 	sts	0x010E, r24
    1120:	8f 5f       	subi	r24, 0xFF	; 255
    1122:	31 f4       	brne	.+12     	; 0x1130 <__vector_5+0x4a>
			timer_ticks_to_get_present = get_present_speed;
    1124:	80 91 b4 00 	lds	r24, 0x00B4
    1128:	80 93 0e 01 	sts	0x010E, r24
			SnakeGame_AddmeUpdateXY();
    112c:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <SnakeGame_AddmeUpdateXY>
		}
		SnakeGame_TakeNextStep();
    1130:	0e 94 aa 03 	call	0x754	; 0x754 <SnakeGame_TakeNextStep>
		timer_delay = step_speed;
    1134:	80 91 b3 00 	lds	r24, 0x00B3
    1138:	80 93 7c 03 	sts	0x037C, r24
	}
}
    113c:	ff 91       	pop	r31
    113e:	ef 91       	pop	r30
    1140:	bf 91       	pop	r27
    1142:	af 91       	pop	r26
    1144:	9f 91       	pop	r25
    1146:	8f 91       	pop	r24
    1148:	7f 91       	pop	r23
    114a:	6f 91       	pop	r22
    114c:	5f 91       	pop	r21
    114e:	4f 91       	pop	r20
    1150:	3f 91       	pop	r19
    1152:	2f 91       	pop	r18
    1154:	0f 90       	pop	r0
    1156:	0f be       	out	0x3f, r0	; 63
    1158:	0f 90       	pop	r0
    115a:	1f 90       	pop	r1
    115c:	18 95       	reti

0000115e <__vector_2>:


//================================================//
//== 				Joystick click				==//
ISR(INT1_vect)
{
    115e:	1f 92       	push	r1
    1160:	0f 92       	push	r0
    1162:	0f b6       	in	r0, 0x3f	; 63
    1164:	0f 92       	push	r0
    1166:	11 24       	eor	r1, r1
    1168:	2f 93       	push	r18
    116a:	3f 93       	push	r19
    116c:	4f 93       	push	r20
    116e:	5f 93       	push	r21
    1170:	6f 93       	push	r22
    1172:	7f 93       	push	r23
    1174:	8f 93       	push	r24
    1176:	9f 93       	push	r25
    1178:	af 93       	push	r26
    117a:	bf 93       	push	r27
    117c:	ef 93       	push	r30
    117e:	ff 93       	push	r31
    1180:	80 e4       	ldi	r24, 0x40	; 64
    1182:	9f e1       	ldi	r25, 0x1F	; 31
    1184:	01 97       	sbiw	r24, 0x01	; 1
    1186:	f1 f7       	brne	.-4      	; 0x1184 <__vector_2+0x26>
#ifndef ANIMATION_SWITCH_MENU_ITEMS
	menu_before_now = 0x80;
#endif
	_delay_ms(2);	// anti brrrrzzzzrr

	GIFR = _BV(INTF1); // kill int1 flag
    1188:	80 e8       	ldi	r24, 0x80	; 128
    118a:	8a bf       	out	0x3a, r24	; 58

//	Lcd3310_ClearCenter();
//	Lcd3310_GotoXY(0, 0);

	while(1){
		uint8_t jpin_h = (JPIN & 0xf0);
    118c:	83 b3       	in	r24, 0x13	; 19
    118e:	80 7f       	andi	r24, 0xF0	; 240

		if( jpin_h == (uint8_t)(J_LU | J_RU) ){
    1190:	80 39       	cpi	r24, 0x90	; 144
    1192:	11 f4       	brne	.+4      	; 0x1198 <__vector_2+0x3a>
    1194:	82 e0       	ldi	r24, 0x02	; 2
    1196:	0f c0       	rjmp	.+30     	; 0x11b6 <__vector_2+0x58>
					break;
				}
			}
		}

		if( jpin_h == (uint8_t)(J_LD | J_RD) ){
    1198:	80 36       	cpi	r24, 0x60	; 96
    119a:	11 f4       	brne	.+4      	; 0x11a0 <__vector_2+0x42>
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	0b c0       	rjmp	.+22     	; 0x11b6 <__vector_2+0x58>
					break;
				}
			}
		}

		if( jpin_h == (uint8_t)(J_LU | J_LD) ){
    11a0:	80 3c       	cpi	r24, 0xC0	; 192
    11a2:	11 f4       	brne	.+4      	; 0x11a8 <__vector_2+0x4a>
    11a4:	84 e0       	ldi	r24, 0x04	; 4
    11a6:	07 c0       	rjmp	.+14     	; 0x11b6 <__vector_2+0x58>
					break;
				}
			}

		}
		if( jpin_h == (uint8_t)(J_RU | J_RD) ){
    11a8:	80 33       	cpi	r24, 0x30	; 48
    11aa:	11 f4       	brne	.+4      	; 0x11b0 <__vector_2+0x52>
    11ac:	83 e0       	ldi	r24, 0x03	; 3
    11ae:	03 c0       	rjmp	.+6      	; 0x11b6 <__vector_2+0x58>
					break;
				}
			}

		}
		if( jpin_h == (uint8_t)(J_RU | J_LU | J_RD | J_LD) ){
    11b0:	80 3f       	cpi	r24, 0xF0	; 240
    11b2:	61 f7       	brne	.-40     	; 0x118c <__vector_2+0x2e>
    11b4:	80 e0       	ldi	r24, 0x00	; 0
				}
			}
		}
	}

	if (JOYSTICK_INT_CHECK()) { return; } // interrupt on brrzzzz then pulling up joystick, so not need to do smth
    11b6:	83 99       	sbic	0x10, 3	; 16
    11b8:	58 c0       	rjmp	.+176    	; 0x126a <__vector_2+0x10c>

	if (result == J_CENTER){
    11ba:	88 23       	and	r24, r24
    11bc:	41 f4       	brne	.+16     	; 0x11ce <__vector_2+0x70>
		FLAGS_SWITCH_ON(JOYSTICK_CENTER_CLICK_FLAG);
    11be:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    11c0:	f8 94       	cli
    11c2:	80 91 75 03 	lds	r24, 0x0375
    11c6:	90 91 76 03 	lds	r25, 0x0376
    11ca:	82 60       	ori	r24, 0x02	; 2
    11cc:	13 c0       	rjmp	.+38     	; 0x11f4 <__vector_2+0x96>
	}else if(result == J_UP){
    11ce:	81 30       	cpi	r24, 0x01	; 1
    11d0:	b9 f4       	brne	.+46     	; 0x1200 <__vector_2+0xa2>
		menu_now = menu_now->prev;
    11d2:	e0 91 89 03 	lds	r30, 0x0389
    11d6:	f0 91 8a 03 	lds	r31, 0x038A
    11da:	87 81       	ldd	r24, Z+7	; 0x07
    11dc:	90 85       	ldd	r25, Z+8	; 0x08
    11de:	90 93 8a 03 	sts	0x038A, r25
    11e2:	80 93 89 03 	sts	0x0389, r24

#ifdef ANIMATION_SWITCH_MENU_ITEMS
		FLAGS_SWITCH_ON( ANIMATION_PREV_FLAG );
    11e6:	2f b7       	in	r18, 0x3f	; 63
    11e8:	f8 94       	cli
    11ea:	80 91 75 03 	lds	r24, 0x0375
    11ee:	90 91 76 03 	lds	r25, 0x0376
    11f2:	88 60       	ori	r24, 0x08	; 8
    11f4:	90 93 76 03 	sts	0x0376, r25
    11f8:	80 93 75 03 	sts	0x0375, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    11fc:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    11fe:	35 c0       	rjmp	.+106    	; 0x126a <__vector_2+0x10c>
#else
		menu_before_now--;
		FLAGS_SWITCH_ON( UPDATE_DISPLAY_FLAG );
#endif
	}else if(result == J_DOWN){
    1200:	82 30       	cpi	r24, 0x02	; 2
    1202:	91 f4       	brne	.+36     	; 0x1228 <__vector_2+0xca>
		menu_now = menu_now->next;
    1204:	e0 91 89 03 	lds	r30, 0x0389
    1208:	f0 91 8a 03 	lds	r31, 0x038A
    120c:	85 81       	ldd	r24, Z+5	; 0x05
    120e:	96 81       	ldd	r25, Z+6	; 0x06
    1210:	90 93 8a 03 	sts	0x038A, r25
    1214:	80 93 89 03 	sts	0x0389, r24

#ifdef ANIMATION_SWITCH_MENU_ITEMS
		FLAGS_SWITCH_ON( ANIMATION_NEXT_FLAG );
    1218:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    121a:	f8 94       	cli
    121c:	80 91 75 03 	lds	r24, 0x0375
    1220:	90 91 76 03 	lds	r25, 0x0376
    1224:	84 60       	ori	r24, 0x04	; 4
    1226:	e6 cf       	rjmp	.-52     	; 0x11f4 <__vector_2+0x96>
    1228:	20 91 75 03 	lds	r18, 0x0375
    122c:	30 91 76 03 	lds	r19, 0x0376
#else
		menu_before_now++;
		FLAGS_SWITCH_ON( UPDATE_DISPLAY_FLAG );
#endif
	}else if(result == J_LEFT){
    1230:	83 30       	cpi	r24, 0x03	; 3
    1232:	71 f4       	brne	.+28     	; 0x1250 <__vector_2+0xf2>
		IF_FLAG_ON( SNAKE_PLAYING_NOW_FLAG ){
    1234:	8f b7       	in	r24, 0x3f	; 63
    1236:	f8 94       	cli
    1238:	30 93 78 03 	sts	0x0378, r19
    123c:	20 93 77 03 	sts	0x0377, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1240:	8f bf       	out	0x3f, r24	; 63
    1242:	80 91 77 03 	lds	r24, 0x0377
    1246:	87 ff       	sbrs	r24, 7
    1248:	10 c0       	rjmp	.+32     	; 0x126a <__vector_2+0x10c>
			SnakeGame_TurnLeft();
    124a:	0e 94 44 02 	call	0x488	; 0x488 <SnakeGame_TurnLeft>
    124e:	0d c0       	rjmp	.+26     	; 0x126a <__vector_2+0x10c>
		}
	}else if(result == J_RIGHT){
		IF_FLAG_ON( SNAKE_PLAYING_NOW_FLAG ){
    1250:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1252:	f8 94       	cli
    1254:	30 93 78 03 	sts	0x0378, r19
    1258:	20 93 77 03 	sts	0x0377, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    125c:	8f bf       	out	0x3f, r24	; 63
    125e:	80 91 77 03 	lds	r24, 0x0377
    1262:	87 ff       	sbrs	r24, 7
    1264:	02 c0       	rjmp	.+4      	; 0x126a <__vector_2+0x10c>
			SnakeGame_TurnRight();
    1266:	0e 94 4f 02 	call	0x49e	; 0x49e <SnakeGame_TurnRight>
		}
	}

}
    126a:	ff 91       	pop	r31
    126c:	ef 91       	pop	r30
    126e:	bf 91       	pop	r27
    1270:	af 91       	pop	r26
    1272:	9f 91       	pop	r25
    1274:	8f 91       	pop	r24
    1276:	7f 91       	pop	r23
    1278:	6f 91       	pop	r22
    127a:	5f 91       	pop	r21
    127c:	4f 91       	pop	r20
    127e:	3f 91       	pop	r19
    1280:	2f 91       	pop	r18
    1282:	0f 90       	pop	r0
    1284:	0f be       	out	0x3f, r0	; 63
    1286:	0f 90       	pop	r0
    1288:	1f 90       	pop	r1
    128a:	18 95       	reti

0000128c <HalfByteAsASCII>:
#include "uint8_16_to_string.h"

char to_string_result[] = {0, 0, 0, 0};

char HalfByteAsASCII(char c)
{
    128c:	98 2f       	mov	r25, r24
    if (c >= 0 && c <= 9){
    128e:	8a 30       	cpi	r24, 0x0A	; 10
    1290:	10 f4       	brcc	.+4      	; 0x1296 <HalfByteAsASCII+0xa>
        c += 0x30;
    1292:	80 5d       	subi	r24, 0xD0	; 208
    1294:	08 95       	ret
    }else if (c >= 0xA && c <= 0x0F){
    1296:	8a 50       	subi	r24, 0x0A	; 10
    1298:	86 30       	cpi	r24, 0x06	; 6
    129a:	10 f0       	brcs	.+4      	; 0x12a0 <HalfByteAsASCII+0x14>
    129c:	8f e3       	ldi	r24, 0x3F	; 63
    129e:	08 95       	ret
        c += 0x37;
    12a0:	89 2f       	mov	r24, r25
    12a2:	89 5c       	subi	r24, 0xC9	; 201
    }else{
        c = '?';
    }
    return c;
}
    12a4:	08 95       	ret

000012a6 <UInt8ToString>:

void UInt8ToString(uint8_t ch)
{
    12a6:	28 2f       	mov	r18, r24
	to_string_result[0] = HalfByteAsASCII( (ch & 0xf0) >>4 );
    12a8:	98 2f       	mov	r25, r24
    12aa:	92 95       	swap	r25
    12ac:	9f 70       	andi	r25, 0x0F	; 15

char to_string_result[] = {0, 0, 0, 0};

char HalfByteAsASCII(char c)
{
    if (c >= 0 && c <= 9){
    12ae:	9a 30       	cpi	r25, 0x0A	; 10
    12b0:	18 f4       	brcc	.+6      	; 0x12b8 <UInt8ToString+0x12>
        c += 0x30;
    12b2:	89 2f       	mov	r24, r25
    12b4:	80 5d       	subi	r24, 0xD0	; 208
    12b6:	08 c0       	rjmp	.+16     	; 0x12c8 <UInt8ToString+0x22>
    }else if (c >= 0xA && c <= 0x0F){
    12b8:	89 2f       	mov	r24, r25
    12ba:	8a 50       	subi	r24, 0x0A	; 10
    12bc:	86 30       	cpi	r24, 0x06	; 6
    12be:	10 f0       	brcs	.+4      	; 0x12c4 <UInt8ToString+0x1e>
    12c0:	8f e3       	ldi	r24, 0x3F	; 63
    12c2:	02 c0       	rjmp	.+4      	; 0x12c8 <UInt8ToString+0x22>
        c += 0x37;
    12c4:	89 2f       	mov	r24, r25
    12c6:	89 5c       	subi	r24, 0xC9	; 201
    return c;
}

void UInt8ToString(uint8_t ch)
{
	to_string_result[0] = HalfByteAsASCII( (ch & 0xf0) >>4 );
    12c8:	80 93 7d 03 	sts	0x037D, r24
	to_string_result[1] = HalfByteAsASCII( ch & 0x0f );
    12cc:	92 2f       	mov	r25, r18
    12ce:	9f 70       	andi	r25, 0x0F	; 15

char to_string_result[] = {0, 0, 0, 0};

char HalfByteAsASCII(char c)
{
    if (c >= 0 && c <= 9){
    12d0:	9a 30       	cpi	r25, 0x0A	; 10
    12d2:	18 f4       	brcc	.+6      	; 0x12da <UInt8ToString+0x34>
        c += 0x30;
    12d4:	89 2f       	mov	r24, r25
    12d6:	80 5d       	subi	r24, 0xD0	; 208
    12d8:	08 c0       	rjmp	.+16     	; 0x12ea <UInt8ToString+0x44>
    }else if (c >= 0xA && c <= 0x0F){
    12da:	89 2f       	mov	r24, r25
    12dc:	8a 50       	subi	r24, 0x0A	; 10
    12de:	86 30       	cpi	r24, 0x06	; 6
    12e0:	10 f0       	brcs	.+4      	; 0x12e6 <UInt8ToString+0x40>
    12e2:	8f e3       	ldi	r24, 0x3F	; 63
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <UInt8ToString+0x44>
        c += 0x37;
    12e6:	89 2f       	mov	r24, r25
    12e8:	89 5c       	subi	r24, 0xC9	; 201
}

void UInt8ToString(uint8_t ch)
{
	to_string_result[0] = HalfByteAsASCII( (ch & 0xf0) >>4 );
	to_string_result[1] = HalfByteAsASCII( ch & 0x0f );
    12ea:	80 93 7e 03 	sts	0x037E, r24
	//to_string_result[2] = 0x00; // end of result string here
	// result in result_str
}
    12ee:	08 95       	ret

000012f0 <UInt16ToString>:

void UInt16ToString(uint16_t i)
{
    12f0:	9c 01       	movw	r18, r24
	//to_string_result[0] = HalfByteAsASCII( (i & 0xf000) >> 12 );
	to_string_result[1] = HalfByteAsASCII( (i & 0x0f00) >> 8  );
    12f2:	80 70       	andi	r24, 0x00	; 0
    12f4:	9f 70       	andi	r25, 0x0F	; 15

char to_string_result[] = {0, 0, 0, 0};

char HalfByteAsASCII(char c)
{
    if (c >= 0 && c <= 9){
    12f6:	9a 30       	cpi	r25, 0x0A	; 10
    12f8:	18 f4       	brcc	.+6      	; 0x1300 <UInt16ToString+0x10>
        c += 0x30;
    12fa:	89 2f       	mov	r24, r25
    12fc:	80 5d       	subi	r24, 0xD0	; 208
    12fe:	08 c0       	rjmp	.+16     	; 0x1310 <UInt16ToString+0x20>
    }else if (c >= 0xA && c <= 0x0F){
    1300:	89 2f       	mov	r24, r25
    1302:	8a 50       	subi	r24, 0x0A	; 10
    1304:	86 30       	cpi	r24, 0x06	; 6
    1306:	10 f0       	brcs	.+4      	; 0x130c <UInt16ToString+0x1c>
    1308:	8f e3       	ldi	r24, 0x3F	; 63
    130a:	02 c0       	rjmp	.+4      	; 0x1310 <UInt16ToString+0x20>
        c += 0x37;
    130c:	89 2f       	mov	r24, r25
    130e:	89 5c       	subi	r24, 0xC9	; 201
}

void UInt16ToString(uint16_t i)
{
	//to_string_result[0] = HalfByteAsASCII( (i & 0xf000) >> 12 );
	to_string_result[1] = HalfByteAsASCII( (i & 0x0f00) >> 8  );
    1310:	80 93 7e 03 	sts	0x037E, r24
	to_string_result[2] = HalfByteAsASCII( (i & 0x00f0) >> 4  );
    1314:	c9 01       	movw	r24, r18
    1316:	80 7f       	andi	r24, 0xF0	; 240
    1318:	90 70       	andi	r25, 0x00	; 0
    131a:	34 e0       	ldi	r19, 0x04	; 4
    131c:	96 95       	lsr	r25
    131e:	87 95       	ror	r24
    1320:	3a 95       	dec	r19
    1322:	e1 f7       	brne	.-8      	; 0x131c <UInt16ToString+0x2c>
    1324:	98 2f       	mov	r25, r24

char to_string_result[] = {0, 0, 0, 0};

char HalfByteAsASCII(char c)
{
    if (c >= 0 && c <= 9){
    1326:	8a 30       	cpi	r24, 0x0A	; 10
    1328:	10 f4       	brcc	.+4      	; 0x132e <UInt16ToString+0x3e>
        c += 0x30;
    132a:	80 5d       	subi	r24, 0xD0	; 208
    132c:	07 c0       	rjmp	.+14     	; 0x133c <UInt16ToString+0x4c>
    }else if (c >= 0xA && c <= 0x0F){
    132e:	8a 50       	subi	r24, 0x0A	; 10
    1330:	86 30       	cpi	r24, 0x06	; 6
    1332:	10 f0       	brcs	.+4      	; 0x1338 <UInt16ToString+0x48>
    1334:	8f e3       	ldi	r24, 0x3F	; 63
    1336:	02 c0       	rjmp	.+4      	; 0x133c <UInt16ToString+0x4c>
        c += 0x37;
    1338:	89 2f       	mov	r24, r25
    133a:	89 5c       	subi	r24, 0xC9	; 201

void UInt16ToString(uint16_t i)
{
	//to_string_result[0] = HalfByteAsASCII( (i & 0xf000) >> 12 );
	to_string_result[1] = HalfByteAsASCII( (i & 0x0f00) >> 8  );
	to_string_result[2] = HalfByteAsASCII( (i & 0x00f0) >> 4  );
    133c:	80 93 7f 03 	sts	0x037F, r24
	to_string_result[3] = HalfByteAsASCII(  i & 0x000f		);
    1340:	92 2f       	mov	r25, r18
    1342:	9f 70       	andi	r25, 0x0F	; 15

char to_string_result[] = {0, 0, 0, 0};

char HalfByteAsASCII(char c)
{
    if (c >= 0 && c <= 9){
    1344:	9a 30       	cpi	r25, 0x0A	; 10
    1346:	18 f4       	brcc	.+6      	; 0x134e <UInt16ToString+0x5e>
        c += 0x30;
    1348:	89 2f       	mov	r24, r25
    134a:	80 5d       	subi	r24, 0xD0	; 208
    134c:	08 c0       	rjmp	.+16     	; 0x135e <UInt16ToString+0x6e>
    }else if (c >= 0xA && c <= 0x0F){
    134e:	89 2f       	mov	r24, r25
    1350:	8a 50       	subi	r24, 0x0A	; 10
    1352:	86 30       	cpi	r24, 0x06	; 6
    1354:	10 f0       	brcs	.+4      	; 0x135a <UInt16ToString+0x6a>
    1356:	8f e3       	ldi	r24, 0x3F	; 63
    1358:	02 c0       	rjmp	.+4      	; 0x135e <UInt16ToString+0x6e>
        c += 0x37;
    135a:	89 2f       	mov	r24, r25
    135c:	89 5c       	subi	r24, 0xC9	; 201
void UInt16ToString(uint16_t i)
{
	//to_string_result[0] = HalfByteAsASCII( (i & 0xf000) >> 12 );
	to_string_result[1] = HalfByteAsASCII( (i & 0x0f00) >> 8  );
	to_string_result[2] = HalfByteAsASCII( (i & 0x00f0) >> 4  );
	to_string_result[3] = HalfByteAsASCII(  i & 0x000f		);
    135e:	80 93 80 03 	sts	0x0380, r24
	// result in result_str
}
    1362:	08 95       	ret

00001364 <Lcd3310_Char>:

	_delay_ms(show_init_data_delay_ms); // show image from LcdCache initial value
}

void Lcd3310_Char(unsigned char ch, WhiteOrBlackText is_invert_colors)
{
    1364:	cf 93       	push	r28
    1366:	df 93       	push	r29
    1368:	28 2f       	mov	r18, r24
    136a:	36 2f       	mov	r19, r22
	//  Convert to a printable character.
    if ( (ch < 0x20) ){
    136c:	80 32       	cpi	r24, 0x20	; 32
    136e:	08 f4       	brcc	.+2      	; 0x1372 <Lcd3310_Char+0xe>
    1370:	2c e5       	ldi	r18, 0x5C	; 92
        ch = 92;
    }
	
	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    1372:	c0 91 81 03 	lds	r28, 0x0381
    1376:	d0 91 82 03 	lds	r29, 0x0382
    137a:	ce 01       	movw	r24, r28
    137c:	64 e5       	ldi	r22, 0x54	; 84
    137e:	70 e0       	ldi	r23, 0x00	; 0
    1380:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <__udivmodhi4>
    1384:	80 68       	ori	r24, 0x80	; 128


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1386:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    1388:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    138a:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    138c:	77 9b       	sbis	0x0e, 7	; 14
    138e:	fe cf       	rjmp	.-4      	; 0x138c <Lcd3310_Char+0x28>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1390:	c3 9a       	sbi	0x18, 3	; 24
    if ( (ch < 0x20) ){
        ch = 92;
    }
	
	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    Lcd3310_Send( 0x40 | (Lcd3310_Index / LCD_X_RES), LCD_CMD );
    1392:	ce 01       	movw	r24, r28
    1394:	64 e5       	ldi	r22, 0x54	; 84
    1396:	70 e0       	ldi	r23, 0x00	; 0
    1398:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <__udivmodhi4>
    139c:	60 64       	ori	r22, 0x40	; 64


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    139e:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    13a0:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    13a2:	6f b9       	out	0x0f, r22	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    13a4:	77 9b       	sbis	0x0e, 7	; 14
    13a6:	fe cf       	rjmp	.-4      	; 0x13a4 <Lcd3310_Char+0x40>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    13a8:	c3 9a       	sbi	0x18, 3	; 24
	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    Lcd3310_Send( 0x40 | (Lcd3310_Index / LCD_X_RES), LCD_CMD );
	
	for (char i = 0; i < 5; i++ ){		
		char temp;
		PGM_GET_BYTE_FROM_FONTLOOKUP(temp, ch, i );
    13aa:	85 e0       	ldi	r24, 0x05	; 5
    13ac:	28 9f       	mul	r18, r24
    13ae:	c0 01       	movw	r24, r0
    13b0:	11 24       	eor	r1, r1
    13b2:	fc 01       	movw	r30, r24
    13b4:	ec 54       	subi	r30, 0x4C	; 76
    13b6:	f0 40       	sbci	r31, 0x00	; 0
    }
	
	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    Lcd3310_Send( 0x40 | (Lcd3310_Index / LCD_X_RES), LCD_CMD );
	
	for (char i = 0; i < 5; i++ ){		
    13b8:	87 54       	subi	r24, 0x47	; 71
    13ba:	90 40       	sbci	r25, 0x00	; 0
		char temp;
		PGM_GET_BYTE_FROM_FONTLOOKUP(temp, ch, i );
    13bc:	24 91       	lpm	r18, Z+
    13be:	22 0f       	add	r18, r18
		if(is_invert_colors) temp = (unsigned char) ~temp;
    13c0:	31 11       	cpse	r19, r1
    13c2:	20 95       	com	r18


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    13c4:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    13c6:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    13c8:	2f b9       	out	0x0f, r18	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    13ca:	77 9b       	sbis	0x0e, 7	; 14
    13cc:	fe cf       	rjmp	.-4      	; 0x13ca <Lcd3310_Char+0x66>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    13ce:	c3 9a       	sbi	0x18, 3	; 24
    13d0:	31 96       	adiw	r30, 0x01	; 1
    }
	
	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    Lcd3310_Send( 0x40 | (Lcd3310_Index / LCD_X_RES), LCD_CMD );
	
	for (char i = 0; i < 5; i++ ){		
    13d2:	e8 17       	cp	r30, r24
    13d4:	f9 07       	cpc	r31, r25
    13d6:	91 f7       	brne	.-28     	; 0x13bc <Lcd3310_Char+0x58>
		char temp;
		PGM_GET_BYTE_FROM_FONTLOOKUP(temp, ch, i );
		if(is_invert_colors) temp = (unsigned char) ~temp;
	    Lcd3310_Send( temp, LCD_DATA );
    }
	if(is_invert_colors) Lcd3310_Send( 0xff, LCD_DATA );
    13d8:	33 23       	and	r19, r19
    13da:	39 f0       	breq	.+14     	; 0x13ea <Lcd3310_Char+0x86>


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    13dc:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    13de:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    13e0:	8f ef       	ldi	r24, 0xFF	; 255
    13e2:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    13e4:	77 9b       	sbis	0x0e, 7	; 14
    13e6:	fe cf       	rjmp	.-4      	; 0x13e4 <Lcd3310_Char+0x80>
    13e8:	05 c0       	rjmp	.+10     	; 0x13f4 <Lcd3310_Char+0x90>


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    13ea:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    13ec:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    13ee:	1f b8       	out	0x0f, r1	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    13f0:	77 9b       	sbis	0x0e, 7	; 14
    13f2:	fe cf       	rjmp	.-4      	; 0x13f0 <Lcd3310_Char+0x8c>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    13f4:	c3 9a       	sbi	0x18, 3	; 24
		if(is_invert_colors) temp = (unsigned char) ~temp;
	    Lcd3310_Send( temp, LCD_DATA );
    }
	if(is_invert_colors) Lcd3310_Send( 0xff, LCD_DATA );
	else Lcd3310_Send( 0x00, LCD_DATA );
	Lcd3310_Index += 6;
    13f6:	26 96       	adiw	r28, 0x06	; 6
    13f8:	d0 93 82 03 	sts	0x0382, r29
    13fc:	c0 93 81 03 	sts	0x0381, r28
}
    1400:	df 91       	pop	r29
    1402:	cf 91       	pop	r28
    1404:	08 95       	ret

00001406 <Lcd3310_String_P>:

void Lcd3310_String_P(PGM_P str_ptr, WhiteOrBlackText is_invert_colors)
{
    1406:	0f 93       	push	r16
    1408:	1f 93       	push	r17
    140a:	cf 93       	push	r28
    140c:	df 93       	push	r29
    140e:	08 2f       	mov	r16, r24
    1410:	16 2f       	mov	r17, r22
    1412:	28 2f       	mov	r18, r24
    1414:	39 2f       	mov	r19, r25
    1416:	e9 01       	movw	r28, r18
    1418:	04 c0       	rjmp	.+8      	; 0x1422 <Lcd3310_String_P+0x1c>
	char count = 0;
    while ( *str_ptr ){
		count++;
        Lcd3310_Char( *(str_ptr++), is_invert_colors );
    141a:	21 96       	adiw	r28, 0x01	; 1
    141c:	61 2f       	mov	r22, r17
    141e:	0e 94 b2 09 	call	0x1364	; 0x1364 <Lcd3310_Char>
    1422:	9e 01       	movw	r18, r28
    1424:	20 1b       	sub	r18, r16
    1426:	92 2f       	mov	r25, r18
}

void Lcd3310_String_P(PGM_P str_ptr, WhiteOrBlackText is_invert_colors)
{
	char count = 0;
    while ( *str_ptr ){
    1428:	88 81       	ld	r24, Y
    142a:	88 23       	and	r24, r24
    142c:	b1 f7       	brne	.-20     	; 0x141a <Lcd3310_String_P+0x14>
		count++;
        Lcd3310_Char( *(str_ptr++), is_invert_colors );
    }
	if(is_invert_colors && count > 0 && count < 14){
    142e:	11 23       	and	r17, r17
    1430:	b9 f0       	breq	.+46     	; 0x1460 <Lcd3310_String_P+0x5a>
    1432:	22 23       	and	r18, r18
    1434:	a9 f0       	breq	.+42     	; 0x1460 <Lcd3310_String_P+0x5a>
    1436:	2e 30       	cpi	r18, 0x0E	; 14
    1438:	98 f4       	brcc	.+38     	; 0x1460 <Lcd3310_String_P+0x5a>
		for(count = (14 - count) * 6; count > 0; count--){
    143a:	2e e0       	ldi	r18, 0x0E	; 14
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	29 1b       	sub	r18, r25
    1440:	31 09       	sbc	r19, r1
    1442:	c9 01       	movw	r24, r18
    1444:	88 0f       	add	r24, r24
    1446:	99 1f       	adc	r25, r25
    1448:	82 0f       	add	r24, r18
    144a:	93 1f       	adc	r25, r19
    144c:	88 0f       	add	r24, r24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    144e:	9f ef       	ldi	r25, 0xFF	; 255


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1450:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    1452:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    1454:	9f b9       	out	0x0f, r25	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1456:	77 9b       	sbis	0x0e, 7	; 14
    1458:	fe cf       	rjmp	.-4      	; 0x1456 <Lcd3310_String_P+0x50>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    145a:	c3 9a       	sbi	0x18, 3	; 24
    while ( *str_ptr ){
		count++;
        Lcd3310_Char( *(str_ptr++), is_invert_colors );
    }
	if(is_invert_colors && count > 0 && count < 14){
		for(count = (14 - count) * 6; count > 0; count--){
    145c:	81 50       	subi	r24, 0x01	; 1
    145e:	c1 f7       	brne	.-16     	; 0x1450 <Lcd3310_String_P+0x4a>
			Lcd3310_Send( 0xff, LCD_DATA );
		}
	}
}
    1460:	df 91       	pop	r29
    1462:	cf 91       	pop	r28
    1464:	1f 91       	pop	r17
    1466:	0f 91       	pop	r16
    1468:	08 95       	ret

0000146a <Lcd3310_String_P_anime>:

#ifdef ANIMATION_SWITCH_MENU_ITEMS
void Lcd3310_String_P_anime(PGM_P str_ptr, PGM_P str_ptr_next, WhiteOrBlackText is_invert_colors, char num_of_cadr, char is_next)
{
    146a:	5f 92       	push	r5
    146c:	6f 92       	push	r6
    146e:	7f 92       	push	r7
    1470:	8f 92       	push	r8
    1472:	9f 92       	push	r9
    1474:	af 92       	push	r10
    1476:	bf 92       	push	r11
    1478:	cf 92       	push	r12
    147a:	df 92       	push	r13
    147c:	ef 92       	push	r14
    147e:	ff 92       	push	r15
    1480:	0f 93       	push	r16
    1482:	1f 93       	push	r17
    1484:	cf 93       	push	r28
    1486:	df 93       	push	r29
    1488:	5c 01       	movw	r10, r24
    148a:	6b 01       	movw	r12, r22
    148c:	84 2e       	mov	r8, r20
    148e:	70 2e       	mov	r7, r16
	unsigned char ch1 = 1, ch2 = 1, display, temp1, temp2, count = 0;

	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    1490:	e0 91 81 03 	lds	r30, 0x0381
    1494:	f0 91 82 03 	lds	r31, 0x0382
    1498:	cf 01       	movw	r24, r30
    149a:	64 e5       	ldi	r22, 0x54	; 84
    149c:	70 e0       	ldi	r23, 0x00	; 0
    149e:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <__udivmodhi4>
    14a2:	80 68       	ori	r24, 0x80	; 128


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    14a4:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    14a6:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    14a8:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    14aa:	77 9b       	sbis	0x0e, 7	; 14
    14ac:	fe cf       	rjmp	.-4      	; 0x14aa <Lcd3310_String_P_anime+0x40>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    14ae:	c3 9a       	sbi	0x18, 3	; 24
void Lcd3310_String_P_anime(PGM_P str_ptr, PGM_P str_ptr_next, WhiteOrBlackText is_invert_colors, char num_of_cadr, char is_next)
{
	unsigned char ch1 = 1, ch2 = 1, display, temp1, temp2, count = 0;

	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    Lcd3310_Send( 0x40 | (Lcd3310_Index / LCD_X_RES), LCD_CMD );
    14b0:	cf 01       	movw	r24, r30
    14b2:	64 e5       	ldi	r22, 0x54	; 84
    14b4:	70 e0       	ldi	r23, 0x00	; 0
    14b6:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <__udivmodhi4>
    14ba:	60 64       	ori	r22, 0x40	; 64


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    14bc:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    14be:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    14c0:	6f b9       	out	0x0f, r22	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    14c2:	77 9b       	sbis	0x0e, 7	; 14
    14c4:	fe cf       	rjmp	.-4      	; 0x14c2 <Lcd3310_String_P_anime+0x58>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    14c6:	c3 9a       	sbi	0x18, 3	; 24
    14c8:	99 24       	eor	r9, r9

		for (char i = 0; i < 5; i++ ){		
			if(ch1) PGM_GET_BYTE_FROM_FONTLOOKUP(temp1, ch1, i )
			else temp1 = 0x00;

			if(ch2) PGM_GET_BYTE_FROM_FONTLOOKUP(temp2, ch2, i )
    14ca:	65 e0       	ldi	r22, 0x05	; 5
    14cc:	66 2e       	mov	r6, r22
    14ce:	e2 2e       	mov	r14, r18
    14d0:	ff 24       	eor	r15, r15
			else temp2 = 0x00;

			if(is_next) display = (temp1 >> num_of_cadr) | ( (temp2 << (8 - num_of_cadr)) );
			else 		display = (temp1 << num_of_cadr) | ( (temp2 >> (8 - num_of_cadr)) );
    14d2:	08 e0       	ldi	r16, 0x08	; 8
    14d4:	10 e0       	ldi	r17, 0x00	; 0
    14d6:	0e 19       	sub	r16, r14
    14d8:	1f 09       	sbc	r17, r15
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    14da:	55 24       	eor	r5, r5
    14dc:	5a 94       	dec	r5

	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    Lcd3310_Send( 0x40 | (Lcd3310_Index / LCD_X_RES), LCD_CMD );
	
	while ( ch1 || ch2 ){
		count++;
    14de:	93 94       	inc	r9
		if(*str_ptr) ch1 = *(str_ptr++);
    14e0:	f5 01       	movw	r30, r10
    14e2:	40 81       	ld	r20, Z
    14e4:	44 23       	and	r20, r20
    14e6:	19 f0       	breq	.+6      	; 0x14ee <Lcd3310_String_P_anime+0x84>
    14e8:	08 94       	sec
    14ea:	a1 1c       	adc	r10, r1
    14ec:	b1 1c       	adc	r11, r1
		else ch1 = 0x00;
		
		if(*str_ptr_next) ch2 = *(str_ptr_next++);
    14ee:	f6 01       	movw	r30, r12
    14f0:	20 81       	ld	r18, Z
    14f2:	22 23       	and	r18, r18
    14f4:	19 f0       	breq	.+6      	; 0x14fc <Lcd3310_String_P_anime+0x92>
    14f6:	08 94       	sec
    14f8:	c1 1c       	adc	r12, r1
    14fa:	d1 1c       	adc	r13, r1

		for (char i = 0; i < 5; i++ ){		
			if(ch1) PGM_GET_BYTE_FROM_FONTLOOKUP(temp1, ch1, i )
			else temp1 = 0x00;

			if(ch2) PGM_GET_BYTE_FROM_FONTLOOKUP(temp2, ch2, i )
    14fc:	26 9d       	mul	r18, r6
    14fe:	c0 01       	movw	r24, r0
    1500:	11 24       	eor	r1, r1
    1502:	ec 01       	movw	r28, r24
    1504:	cc 54       	subi	r28, 0x4C	; 76
    1506:	d0 40       	sbci	r29, 0x00	; 0
    1508:	46 9d       	mul	r20, r6
    150a:	d0 01       	movw	r26, r0
    150c:	11 24       	eor	r1, r1
    150e:	ac 54       	subi	r26, 0x4C	; 76
    1510:	b0 40       	sbci	r27, 0x00	; 0
		else ch1 = 0x00;
		
		if(*str_ptr_next) ch2 = *(str_ptr_next++);
		else ch2 = 0x00;

		for (char i = 0; i < 5; i++ ){		
    1512:	87 54       	subi	r24, 0x47	; 71
    1514:	90 40       	sbci	r25, 0x00	; 0
			if(ch1) PGM_GET_BYTE_FROM_FONTLOOKUP(temp1, ch1, i )
    1516:	44 23       	and	r20, r20
    1518:	11 f4       	brne	.+4      	; 0x151e <Lcd3310_String_P_anime+0xb4>
    151a:	50 e0       	ldi	r21, 0x00	; 0
    151c:	03 c0       	rjmp	.+6      	; 0x1524 <Lcd3310_String_P_anime+0xba>
    151e:	fd 01       	movw	r30, r26
    1520:	54 91       	lpm	r21, Z+
    1522:	55 0f       	add	r21, r21
			else temp1 = 0x00;

			if(ch2) PGM_GET_BYTE_FROM_FONTLOOKUP(temp2, ch2, i )
    1524:	22 23       	and	r18, r18
    1526:	11 f4       	brne	.+4      	; 0x152c <Lcd3310_String_P_anime+0xc2>
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	03 c0       	rjmp	.+6      	; 0x1532 <Lcd3310_String_P_anime+0xc8>
    152c:	fe 01       	movw	r30, r28
    152e:	34 91       	lpm	r19, Z+
    1530:	33 0f       	add	r19, r19
    1532:	e3 2f       	mov	r30, r19
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	65 2f       	mov	r22, r21
    1538:	70 e0       	ldi	r23, 0x00	; 0
			else temp2 = 0x00;

			if(is_next) display = (temp1 >> num_of_cadr) | ( (temp2 << (8 - num_of_cadr)) );
    153a:	77 20       	and	r7, r7
    153c:	69 f0       	breq	.+26     	; 0x1558 <Lcd3310_String_P_anime+0xee>
    153e:	00 2e       	mov	r0, r16
    1540:	02 c0       	rjmp	.+4      	; 0x1546 <Lcd3310_String_P_anime+0xdc>
    1542:	ee 0f       	add	r30, r30
    1544:	ff 1f       	adc	r31, r31
    1546:	0a 94       	dec	r0
    1548:	e2 f7       	brpl	.-8      	; 0x1542 <Lcd3310_String_P_anime+0xd8>
    154a:	0e 2c       	mov	r0, r14
    154c:	02 c0       	rjmp	.+4      	; 0x1552 <Lcd3310_String_P_anime+0xe8>
    154e:	75 95       	asr	r23
    1550:	67 95       	ror	r22
    1552:	0a 94       	dec	r0
    1554:	e2 f7       	brpl	.-8      	; 0x154e <Lcd3310_String_P_anime+0xe4>
    1556:	0c c0       	rjmp	.+24     	; 0x1570 <Lcd3310_String_P_anime+0x106>
			else 		display = (temp1 << num_of_cadr) | ( (temp2 >> (8 - num_of_cadr)) );
    1558:	00 2e       	mov	r0, r16
    155a:	02 c0       	rjmp	.+4      	; 0x1560 <Lcd3310_String_P_anime+0xf6>
    155c:	f5 95       	asr	r31
    155e:	e7 95       	ror	r30
    1560:	0a 94       	dec	r0
    1562:	e2 f7       	brpl	.-8      	; 0x155c <Lcd3310_String_P_anime+0xf2>
    1564:	0e 2c       	mov	r0, r14
    1566:	02 c0       	rjmp	.+4      	; 0x156c <Lcd3310_String_P_anime+0x102>
    1568:	66 0f       	add	r22, r22
    156a:	77 1f       	adc	r23, r23
    156c:	0a 94       	dec	r0
    156e:	e2 f7       	brpl	.-8      	; 0x1568 <Lcd3310_String_P_anime+0xfe>
    1570:	3e 2f       	mov	r19, r30
    1572:	36 2b       	or	r19, r22
			if(is_invert_colors) display = (unsigned char) ~display;
    1574:	81 10       	cpse	r8, r1
    1576:	30 95       	com	r19


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1578:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    157a:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    157c:	3f b9       	out	0x0f, r19	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    157e:	77 9b       	sbis	0x0e, 7	; 14
    1580:	fe cf       	rjmp	.-4      	; 0x157e <Lcd3310_String_P_anime+0x114>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1582:	c3 9a       	sbi	0x18, 3	; 24
    1584:	21 96       	adiw	r28, 0x01	; 1
    1586:	11 96       	adiw	r26, 0x01	; 1
		else ch1 = 0x00;
		
		if(*str_ptr_next) ch2 = *(str_ptr_next++);
		else ch2 = 0x00;

		for (char i = 0; i < 5; i++ ){		
    1588:	c8 17       	cp	r28, r24
    158a:	d9 07       	cpc	r29, r25
    158c:	09 f0       	breq	.+2      	; 0x1590 <Lcd3310_String_P_anime+0x126>
    158e:	c3 cf       	rjmp	.-122    	; 0x1516 <Lcd3310_String_P_anime+0xac>
			if(is_next) display = (temp1 >> num_of_cadr) | ( (temp2 << (8 - num_of_cadr)) );
			else 		display = (temp1 << num_of_cadr) | ( (temp2 >> (8 - num_of_cadr)) );
			if(is_invert_colors) display = (unsigned char) ~display;
		    Lcd3310_Send( display, LCD_DATA );
	    }
		if(is_invert_colors) Lcd3310_Send( 0xff, LCD_DATA );
    1590:	88 20       	and	r8, r8
    1592:	31 f0       	breq	.+12     	; 0x15a0 <Lcd3310_String_P_anime+0x136>


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1594:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    1596:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    1598:	5f b8       	out	0x0f, r5	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    159a:	77 9b       	sbis	0x0e, 7	; 14
    159c:	fe cf       	rjmp	.-4      	; 0x159a <Lcd3310_String_P_anime+0x130>
    159e:	05 c0       	rjmp	.+10     	; 0x15aa <Lcd3310_String_P_anime+0x140>


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    15a0:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    15a2:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    15a4:	1f b8       	out	0x0f, r1	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    15a6:	77 9b       	sbis	0x0e, 7	; 14
    15a8:	fe cf       	rjmp	.-4      	; 0x15a6 <Lcd3310_String_P_anime+0x13c>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    15aa:	c3 9a       	sbi	0x18, 3	; 24
	unsigned char ch1 = 1, ch2 = 1, display, temp1, temp2, count = 0;

	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    Lcd3310_Send( 0x40 | (Lcd3310_Index / LCD_X_RES), LCD_CMD );
	
	while ( ch1 || ch2 ){
    15ac:	44 23       	and	r20, r20
    15ae:	09 f0       	breq	.+2      	; 0x15b2 <Lcd3310_String_P_anime+0x148>
    15b0:	96 cf       	rjmp	.-212    	; 0x14de <Lcd3310_String_P_anime+0x74>
    15b2:	22 23       	and	r18, r18
    15b4:	09 f0       	breq	.+2      	; 0x15b8 <Lcd3310_String_P_anime+0x14e>
    15b6:	93 cf       	rjmp	.-218    	; 0x14de <Lcd3310_String_P_anime+0x74>
		    Lcd3310_Send( display, LCD_DATA );
	    }
		if(is_invert_colors) Lcd3310_Send( 0xff, LCD_DATA );
		else Lcd3310_Send( 0x00, LCD_DATA );
	}
	if(is_invert_colors && (count < 14)){
    15b8:	88 20       	and	r8, r8
    15ba:	b1 f0       	breq	.+44     	; 0x15e8 <Lcd3310_String_P_anime+0x17e>
    15bc:	fd e0       	ldi	r31, 0x0D	; 13
    15be:	f9 15       	cp	r31, r9
    15c0:	98 f0       	brcs	.+38     	; 0x15e8 <Lcd3310_String_P_anime+0x17e>
		for(count = (14 - count) * 6; count > 0; count--){
    15c2:	2e e0       	ldi	r18, 0x0E	; 14
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	29 19       	sub	r18, r9
    15c8:	31 09       	sbc	r19, r1
    15ca:	c9 01       	movw	r24, r18
    15cc:	88 0f       	add	r24, r24
    15ce:	99 1f       	adc	r25, r25
    15d0:	82 0f       	add	r24, r18
    15d2:	93 1f       	adc	r25, r19
    15d4:	88 0f       	add	r24, r24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    15d6:	9f ef       	ldi	r25, 0xFF	; 255


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    15d8:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    15da:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    15dc:	9f b9       	out	0x0f, r25	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    15de:	77 9b       	sbis	0x0e, 7	; 14
    15e0:	fe cf       	rjmp	.-4      	; 0x15de <Lcd3310_String_P_anime+0x174>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    15e2:	c3 9a       	sbi	0x18, 3	; 24
	    }
		if(is_invert_colors) Lcd3310_Send( 0xff, LCD_DATA );
		else Lcd3310_Send( 0x00, LCD_DATA );
	}
	if(is_invert_colors && (count < 14)){
		for(count = (14 - count) * 6; count > 0; count--){
    15e4:	81 50       	subi	r24, 0x01	; 1
    15e6:	c1 f7       	brne	.-16     	; 0x15d8 <Lcd3310_String_P_anime+0x16e>
			Lcd3310_Send( 0xff, LCD_DATA );
		}
	}
}
    15e8:	df 91       	pop	r29
    15ea:	cf 91       	pop	r28
    15ec:	1f 91       	pop	r17
    15ee:	0f 91       	pop	r16
    15f0:	ff 90       	pop	r15
    15f2:	ef 90       	pop	r14
    15f4:	df 90       	pop	r13
    15f6:	cf 90       	pop	r12
    15f8:	bf 90       	pop	r11
    15fa:	af 90       	pop	r10
    15fc:	9f 90       	pop	r9
    15fe:	8f 90       	pop	r8
    1600:	7f 90       	pop	r7
    1602:	6f 90       	pop	r6
    1604:	5f 90       	pop	r5
    1606:	08 95       	ret

00001608 <Lcd3310_GotoXY>:
#endif

void Lcd3310_GotoXY(uint16_t x, uint16_t y)
{
    Lcd3310_Index = (uint16_t)x * 6 + (uint16_t)y * 84;
    1608:	24 e5       	ldi	r18, 0x54	; 84
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	62 9f       	mul	r22, r18
    160e:	a0 01       	movw	r20, r0
    1610:	63 9f       	mul	r22, r19
    1612:	50 0d       	add	r21, r0
    1614:	72 9f       	mul	r23, r18
    1616:	50 0d       	add	r21, r0
    1618:	11 24       	eor	r1, r1
    161a:	9c 01       	movw	r18, r24
    161c:	22 0f       	add	r18, r18
    161e:	33 1f       	adc	r19, r19
    1620:	28 0f       	add	r18, r24
    1622:	39 1f       	adc	r19, r25
    1624:	22 0f       	add	r18, r18
    1626:	33 1f       	adc	r19, r19
    1628:	42 0f       	add	r20, r18
    162a:	53 1f       	adc	r21, r19
    162c:	50 93 82 03 	sts	0x0382, r21
    1630:	40 93 81 03 	sts	0x0381, r20
}
    1634:	08 95       	ret

00001636 <Lcd3310_ClearCenter>:


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1636:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    1638:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    163a:	80 e8       	ldi	r24, 0x80	; 128
    163c:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    163e:	77 9b       	sbis	0x0e, 7	; 14
    1640:	fe cf       	rjmp	.-4      	; 0x163e <Lcd3310_ClearCenter+0x8>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1642:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1644:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    1646:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    1648:	81 e4       	ldi	r24, 0x41	; 65
    164a:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    164c:	77 9b       	sbis	0x0e, 7	; 14
    164e:	fe cf       	rjmp	.-4      	; 0x164c <Lcd3310_ClearCenter+0x16>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1650:	c3 9a       	sbi	0x18, 3	; 24
    1652:	80 e0       	ldi	r24, 0x00	; 0
    1654:	90 e0       	ldi	r25, 0x00	; 0


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1656:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    1658:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    165a:	1f b8       	out	0x0f, r1	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    165c:	77 9b       	sbis	0x0e, 7	; 14
    165e:	fe cf       	rjmp	.-4      	; 0x165c <Lcd3310_ClearCenter+0x26>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1660:	c3 9a       	sbi	0x18, 3	; 24
void Lcd3310_ClearCenter(void)
{
#ifdef LCD_IMAGES //  clear only center lines
	Lcd3310_Send( 0x80 | (84 % LCD_X_RES), LCD_CMD );
    Lcd3310_Send( 0x40 | (84 / LCD_X_RES), LCD_CMD );
	for(uint16_t i=0; i < LCD_CENTER_RES; i++){
    1662:	01 96       	adiw	r24, 0x01	; 1
    1664:	21 e0       	ldi	r18, 0x01	; 1
    1666:	84 3a       	cpi	r24, 0xA4	; 164
    1668:	92 07       	cpc	r25, r18
    166a:	a9 f7       	brne	.-22     	; 0x1656 <Lcd3310_ClearCenter+0x20>
	Lcd3310_Send( 0x40, LCD_CMD );
	for(uint16_t i=0; i < LCD_XY_RES; i++){
		Lcd3310_Send( 0x00, LCD_DATA );
	}
#endif
}
    166c:	08 95       	ret

0000166e <Lcd3310_InitFill>:


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    166e:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    1670:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    1672:	80 e8       	ldi	r24, 0x80	; 128
    1674:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1676:	77 9b       	sbis	0x0e, 7	; 14
    1678:	fe cf       	rjmp	.-4      	; 0x1676 <Lcd3310_InitFill+0x8>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    167a:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    167c:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    167e:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    1680:	80 e4       	ldi	r24, 0x40	; 64
    1682:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1684:	77 9b       	sbis	0x0e, 7	; 14
    1686:	fe cf       	rjmp	.-4      	; 0x1684 <Lcd3310_InitFill+0x16>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1688:	c3 9a       	sbi	0x18, 3	; 24
    168a:	eb e1       	ldi	r30, 0x1B	; 27
    168c:	f2 e0       	ldi	r31, 0x02	; 2
	// Goto (0, 0) of display
	Lcd3310_Send( 0x80, LCD_CMD );
    Lcd3310_Send( 0x40, LCD_CMD );

	for (int i = 0; i < 84; i++ ){
        Lcd3310_Send( pgm_read_byte( LcdImage_Upper + i ), LCD_DATA );
    168e:	84 91       	lpm	r24, Z+


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1690:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    1692:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    1694:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1696:	77 9b       	sbis	0x0e, 7	; 14
    1698:	fe cf       	rjmp	.-4      	; 0x1696 <Lcd3310_InitFill+0x28>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    169a:	c3 9a       	sbi	0x18, 3	; 24
    169c:	31 96       	adiw	r30, 0x01	; 1
#ifdef LCD_IMAGES
	// Goto (0, 0) of display
	Lcd3310_Send( 0x80, LCD_CMD );
    Lcd3310_Send( 0x40, LCD_CMD );

	for (int i = 0; i < 84; i++ ){
    169e:	82 e0       	ldi	r24, 0x02	; 2
    16a0:	ef 36       	cpi	r30, 0x6F	; 111
    16a2:	f8 07       	cpc	r31, r24
    16a4:	a1 f7       	brne	.-24     	; 0x168e <Lcd3310_InitFill+0x20>
    16a6:	ef e6       	ldi	r30, 0x6F	; 111
    16a8:	f2 e0       	ldi	r31, 0x02	; 2
        Lcd3310_Send( pgm_read_byte( LcdImage_Upper + i ), LCD_DATA );
    }	
	for (uint16_t i=0; i < LCD_CENTER_RES; i++ ){
        Lcd3310_Send( pgm_read_byte( LcdImage_Center + i), LCD_DATA );
    16aa:	84 91       	lpm	r24, Z+


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    16ac:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    16ae:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    16b0:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    16b2:	77 9b       	sbis	0x0e, 7	; 14
    16b4:	fe cf       	rjmp	.-4      	; 0x16b2 <Lcd3310_InitFill+0x44>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    16b6:	c3 9a       	sbi	0x18, 3	; 24
    16b8:	31 96       	adiw	r30, 0x01	; 1
    Lcd3310_Send( 0x40, LCD_CMD );

	for (int i = 0; i < 84; i++ ){
        Lcd3310_Send( pgm_read_byte( LcdImage_Upper + i ), LCD_DATA );
    }	
	for (uint16_t i=0; i < LCD_CENTER_RES; i++ ){
    16ba:	84 e0       	ldi	r24, 0x04	; 4
    16bc:	e3 31       	cpi	r30, 0x13	; 19
    16be:	f8 07       	cpc	r31, r24
    16c0:	a1 f7       	brne	.-24     	; 0x16aa <Lcd3310_InitFill+0x3c>
    16c2:	ef eb       	ldi	r30, 0xBF	; 191
    16c4:	f3 e0       	ldi	r31, 0x03	; 3
        Lcd3310_Send( pgm_read_byte( LcdImage_Center + i), LCD_DATA );
	}
    for (int i = 0; i < 84; i++ ){
        Lcd3310_Send( pgm_read_byte( LcdImage_brunql_gmail_com + i), LCD_DATA );
    16c6:	84 91       	lpm	r24, Z+


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    16c8:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    16ca:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    16cc:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    16ce:	77 9b       	sbis	0x0e, 7	; 14
    16d0:	fe cf       	rjmp	.-4      	; 0x16ce <Lcd3310_InitFill+0x60>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    16d2:	c3 9a       	sbi	0x18, 3	; 24
    16d4:	31 96       	adiw	r30, 0x01	; 1
        Lcd3310_Send( pgm_read_byte( LcdImage_Upper + i ), LCD_DATA );
    }	
	for (uint16_t i=0; i < LCD_CENTER_RES; i++ ){
        Lcd3310_Send( pgm_read_byte( LcdImage_Center + i), LCD_DATA );
	}
    for (int i = 0; i < 84; i++ ){
    16d6:	84 e0       	ldi	r24, 0x04	; 4
    16d8:	e3 31       	cpi	r30, 0x13	; 19
    16da:	f8 07       	cpc	r31, r24
    16dc:	a1 f7       	brne	.-24     	; 0x16c6 <Lcd3310_InitFill+0x58>
        Lcd3310_Send( pgm_read_byte( LcdImage_brunql_gmail_com + i), LCD_DATA );
    }
#else
    Lcd3310_ClearCenter();
#endif
}
    16de:	08 95       	ret

000016e0 <Lcd3310_Init>:
void Lcd3310_InitFill (void);



void Lcd3310_Init(uint16_t show_init_data_delay_ms)
{
    16e0:	af 92       	push	r10
    16e2:	bf 92       	push	r11
    16e4:	cf 92       	push	r12
    16e6:	df 92       	push	r13
    16e8:	ef 92       	push	r14
    16ea:	ff 92       	push	r15
    16ec:	0f 93       	push	r16
    16ee:	1f 93       	push	r17
    16f0:	8c 01       	movw	r16, r24
	//  Pull-up on reset pin.
    PORTB |= LCD_RST_PIN;
    16f2:	c2 9a       	sbi	0x18, 2	; 24

    //  Set output bits on port B.
    DDRB |= LCD_RST_PIN | LCD_DC_PIN | LCD_CE_PIN | SPI_MOSI_PIN | SPI_CLK_PIN;
    16f4:	87 b3       	in	r24, 0x17	; 23
    16f6:	8c 6b       	ori	r24, 0xBC	; 188
    16f8:	87 bb       	out	0x17, r24	; 23
    16fa:	84 ef       	ldi	r24, 0xF4	; 244
    16fc:	91 e0       	ldi	r25, 0x01	; 1
    16fe:	20 e9       	ldi	r18, 0x90	; 144
    1700:	31 e0       	ldi	r19, 0x01	; 1
    1702:	f9 01       	movw	r30, r18
    1704:	31 97       	sbiw	r30, 0x01	; 1
    1706:	f1 f7       	brne	.-4      	; 0x1704 <Lcd3310_Init+0x24>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1708:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    170a:	d9 f7       	brne	.-10     	; 0x1702 <Lcd3310_Init+0x22>

    _delay_ms(50);

    //  Toggle display reset pin.
    PORTB &= (unsigned char)~LCD_RST_PIN;
    170c:	c2 98       	cbi	0x18, 2	; 24
    170e:	80 ea       	ldi	r24, 0xA0	; 160
    1710:	9f e0       	ldi	r25, 0x0F	; 15
    1712:	01 97       	sbiw	r24, 0x01	; 1
    1714:	f1 f7       	brne	.-4      	; 0x1712 <Lcd3310_Init+0x32>
    _delay_ms(1);
    PORTB |= LCD_RST_PIN;
    1716:	c2 9a       	sbi	0x18, 2	; 24

    //  Enable SPI port: No interrupt, MSBit first, Master mode, CPOL->0, CPHA->0, Clk/4
    SPCR = 0x50;
    1718:	80 e5       	ldi	r24, 0x50	; 80
    171a:	8d b9       	out	0x0d, r24	; 13

    //  Disable LCD controller
    PORTB |= LCD_CE_PIN;
    171c:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    171e:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    1720:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    1722:	81 e2       	ldi	r24, 0x21	; 33
    1724:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1726:	77 9b       	sbis	0x0e, 7	; 14
    1728:	fe cf       	rjmp	.-4      	; 0x1726 <Lcd3310_Init+0x46>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    172a:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    172c:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    172e:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    1730:	88 ec       	ldi	r24, 0xC8	; 200
    1732:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1734:	77 9b       	sbis	0x0e, 7	; 14
    1736:	fe cf       	rjmp	.-4      	; 0x1734 <Lcd3310_Init+0x54>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1738:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    173a:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    173c:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    173e:	86 e0       	ldi	r24, 0x06	; 6
    1740:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1742:	77 9b       	sbis	0x0e, 7	; 14
    1744:	fe cf       	rjmp	.-4      	; 0x1742 <Lcd3310_Init+0x62>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1746:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1748:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    174a:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    174c:	83 e1       	ldi	r24, 0x13	; 19
    174e:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1750:	77 9b       	sbis	0x0e, 7	; 14
    1752:	fe cf       	rjmp	.-4      	; 0x1750 <Lcd3310_Init+0x70>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1754:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1756:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    1758:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    175a:	80 e2       	ldi	r24, 0x20	; 32
    175c:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    175e:	77 9b       	sbis	0x0e, 7	; 14
    1760:	fe cf       	rjmp	.-4      	; 0x175e <Lcd3310_Init+0x7e>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1762:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1764:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    1766:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    1768:	8c e0       	ldi	r24, 0x0C	; 12
    176a:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    176c:	77 9b       	sbis	0x0e, 7	; 14
    176e:	fe cf       	rjmp	.-4      	; 0x176c <Lcd3310_Init+0x8c>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1770:	c3 9a       	sbi	0x18, 3	; 24
    Lcd3310_Send( 0x06, LCD_CMD );  // Set Temp coefficent.
    Lcd3310_Send( 0x13, LCD_CMD );  // LCD bias mode 1:48.
    Lcd3310_Send( 0x20, LCD_CMD );  // LCD Standard Commands, Horizontal addressing mode.
    Lcd3310_Send( 0x0C, LCD_CMD );  // LCD in normal mode.

	Lcd3310_InitFill();
    1772:	0e 94 37 0b 	call	0x166e	; 0x166e <Lcd3310_InitFill>


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1776:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    1778:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    177a:	81 e2       	ldi	r24, 0x21	; 33
    177c:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    177e:	77 9b       	sbis	0x0e, 7	; 14
    1780:	fe cf       	rjmp	.-4      	; 0x177e <Lcd3310_Init+0x9e>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1782:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1784:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    1786:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    1788:	8e e9       	ldi	r24, 0x9E	; 158
    178a:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    178c:	77 9b       	sbis	0x0e, 7	; 14
    178e:	fe cf       	rjmp	.-4      	; 0x178c <Lcd3310_Init+0xac>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1790:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1792:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    1794:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    1796:	80 e2       	ldi	r24, 0x20	; 32
    1798:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    179a:	77 9b       	sbis	0x0e, 7	; 14
    179c:	fe cf       	rjmp	.-4      	; 0x179a <Lcd3310_Init+0xba>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    179e:	c3 9a       	sbi	0x18, 3	; 24
    Lcd3310_Send( 0x80 | LCD_CONTRAST, LCD_CMD );

    //  LCD Standard Commands, horizontal addressing mode.
    Lcd3310_Send( 0x20, LCD_CMD );

	_delay_ms(show_init_data_delay_ms); // show image from LcdCache initial value
    17a0:	b8 01       	movw	r22, r16
    17a2:	80 e0       	ldi	r24, 0x00	; 0
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	0e 94 29 13 	call	0x2652	; 0x2652 <__floatunsisf>
    17aa:	5b 01       	movw	r10, r22
    17ac:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17ae:	20 e0       	ldi	r18, 0x00	; 0
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	4a e7       	ldi	r20, 0x7A	; 122
    17b4:	55 e4       	ldi	r21, 0x45	; 69
    17b6:	0e 94 41 10 	call	0x2082	; 0x2082 <__mulsf3>
    17ba:	7b 01       	movw	r14, r22
    17bc:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    17be:	20 e0       	ldi	r18, 0x00	; 0
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	40 e8       	ldi	r20, 0x80	; 128
    17c4:	5f e3       	ldi	r21, 0x3F	; 63
    17c6:	0e 94 47 12 	call	0x248e	; 0x248e <__ltsf2>
    17ca:	88 23       	and	r24, r24
    17cc:	1c f4       	brge	.+6      	; 0x17d4 <Lcd3310_Init+0xf4>
    17ce:	61 e0       	ldi	r22, 0x01	; 1
    17d0:	70 e0       	ldi	r23, 0x00	; 0
    17d2:	24 c0       	rjmp	.+72     	; 0x181c <Lcd3310_Init+0x13c>
		__ticks = 1;
	else if (__tmp > 65535)
    17d4:	c8 01       	movw	r24, r16
    17d6:	b7 01       	movw	r22, r14
    17d8:	20 e0       	ldi	r18, 0x00	; 0
    17da:	3f ef       	ldi	r19, 0xFF	; 255
    17dc:	4f e7       	ldi	r20, 0x7F	; 127
    17de:	57 e4       	ldi	r21, 0x47	; 71
    17e0:	0e 94 e7 11 	call	0x23ce	; 0x23ce <__gtsf2>
    17e4:	18 16       	cp	r1, r24
    17e6:	b4 f4       	brge	.+44     	; 0x1814 <Lcd3310_Init+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17e8:	c6 01       	movw	r24, r12
    17ea:	b5 01       	movw	r22, r10
    17ec:	20 e0       	ldi	r18, 0x00	; 0
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	40 e2       	ldi	r20, 0x20	; 32
    17f2:	51 e4       	ldi	r21, 0x41	; 65
    17f4:	0e 94 41 10 	call	0x2082	; 0x2082 <__mulsf3>
    17f8:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <__fixunssfsi>
    17fc:	80 e9       	ldi	r24, 0x90	; 144
    17fe:	91 e0       	ldi	r25, 0x01	; 1
    1800:	05 c0       	rjmp	.+10     	; 0x180c <Lcd3310_Init+0x12c>
    1802:	fc 01       	movw	r30, r24
    1804:	31 97       	sbiw	r30, 0x01	; 1
    1806:	f1 f7       	brne	.-4      	; 0x1804 <Lcd3310_Init+0x124>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1808:	61 50       	subi	r22, 0x01	; 1
    180a:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    180c:	61 15       	cp	r22, r1
    180e:	71 05       	cpc	r23, r1
    1810:	c1 f7       	brne	.-16     	; 0x1802 <Lcd3310_Init+0x122>
    1812:	07 c0       	rjmp	.+14     	; 0x1822 <Lcd3310_Init+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1814:	c8 01       	movw	r24, r16
    1816:	b7 01       	movw	r22, r14
    1818:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <__fixunssfsi>
    181c:	cb 01       	movw	r24, r22
    181e:	01 97       	sbiw	r24, 0x01	; 1
    1820:	f1 f7       	brne	.-4      	; 0x181e <Lcd3310_Init+0x13e>
}
    1822:	1f 91       	pop	r17
    1824:	0f 91       	pop	r16
    1826:	ff 90       	pop	r15
    1828:	ef 90       	pop	r14
    182a:	df 90       	pop	r13
    182c:	cf 90       	pop	r12
    182e:	bf 90       	pop	r11
    1830:	af 90       	pop	r10
    1832:	08 95       	ret

00001834 <Lcd3310_Send>:


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1834:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    1836:	61 30       	cpi	r22, 0x01	; 1
    1838:	11 f4       	brne	.+4      	; 0x183e <Lcd3310_Send+0xa>
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    183a:	c4 9a       	sbi	0x18, 4	; 24
    183c:	01 c0       	rjmp	.+2      	; 0x1840 <Lcd3310_Send+0xc>
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    183e:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    1840:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1842:	77 9b       	sbis	0x0e, 7	; 14
    1844:	fe cf       	rjmp	.-4      	; 0x1842 <Lcd3310_Send+0xe>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1846:	c3 9a       	sbi	0x18, 3	; 24
}
    1848:	08 95       	ret

0000184a <Lcd3310_UInt16AsText>:
		Lcd3310_Char( to_string_result[count], is_invert_colors );
	}
}

void Lcd3310_UInt16AsText(uint16_t i, WhiteOrBlackText is_invert_colors)
{
    184a:	1f 93       	push	r17
    184c:	16 2f       	mov	r17, r22
	UInt16ToString( i );
    184e:	0e 94 78 09 	call	0x12f0	; 0x12f0 <UInt16ToString>
	// show three numbers and space
	for(uint8_t count=1; count < 4; count++){ // 0x03ff - max value, show only '3ff'
			Lcd3310_Char( to_string_result[count], is_invert_colors );
    1852:	80 91 7e 03 	lds	r24, 0x037E
    1856:	61 2f       	mov	r22, r17
    1858:	0e 94 b2 09 	call	0x1364	; 0x1364 <Lcd3310_Char>
    185c:	80 91 7f 03 	lds	r24, 0x037F
    1860:	61 2f       	mov	r22, r17
    1862:	0e 94 b2 09 	call	0x1364	; 0x1364 <Lcd3310_Char>
    1866:	80 91 80 03 	lds	r24, 0x0380
    186a:	61 2f       	mov	r22, r17
    186c:	0e 94 b2 09 	call	0x1364	; 0x1364 <Lcd3310_Char>
	}
	Lcd3310_Char( ' ', is_invert_colors );
    1870:	80 e2       	ldi	r24, 0x20	; 32
    1872:	61 2f       	mov	r22, r17
    1874:	0e 94 b2 09 	call	0x1364	; 0x1364 <Lcd3310_Char>
}
    1878:	1f 91       	pop	r17
    187a:	08 95       	ret

0000187c <Lcd3310_UInt8AsText>:




void Lcd3310_UInt8AsText(uint8_t ch, WhiteOrBlackText is_invert_colors)
{
    187c:	1f 93       	push	r17
    187e:	16 2f       	mov	r17, r22
	UInt8ToString( ch );
    1880:	0e 94 53 09 	call	0x12a6	; 0x12a6 <UInt8ToString>
	for(uint8_t count=0; count < 2; count++){
		Lcd3310_Char( to_string_result[count], is_invert_colors );
    1884:	80 91 7d 03 	lds	r24, 0x037D
    1888:	61 2f       	mov	r22, r17
    188a:	0e 94 b2 09 	call	0x1364	; 0x1364 <Lcd3310_Char>
    188e:	80 91 7e 03 	lds	r24, 0x037E
    1892:	61 2f       	mov	r22, r17
    1894:	0e 94 b2 09 	call	0x1364	; 0x1364 <Lcd3310_Char>
	}
}
    1898:	1f 91       	pop	r17
    189a:	08 95       	ret

0000189c <init_menu_now>:



void init_menu_now(void)
{
	menu_now = &go;
    189c:	80 e3       	ldi	r24, 0x30	; 48
    189e:	91 e0       	ldi	r25, 0x01	; 1
    18a0:	90 93 8a 03 	sts	0x038A, r25
    18a4:	80 93 89 03 	sts	0x0389, r24
}
    18a8:	08 95       	ret

000018aa <Lcd3310_UpdateDisplayInfo>:
}
#endif


void Lcd3310_UpdateDisplayInfo(void)
{
    18aa:	ef 92       	push	r14
    18ac:	ff 92       	push	r15
    18ae:	0f 93       	push	r16
    18b0:	1f 93       	push	r17
    18b2:	cf 93       	push	r28
    18b4:	df 93       	push	r29
    uint8_t number_of_elements_in_menu_now = 1;
    
	Lcd3310_ClearCenter();
    18b6:	0e 94 1b 0b 	call	0x1636	; 0x1636 <Lcd3310_ClearCenter>
	
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { menu_now_atomic = menu_now; }
    18ba:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    18bc:	f8 94       	cli
    18be:	80 91 89 03 	lds	r24, 0x0389
    18c2:	90 91 8a 03 	lds	r25, 0x038A
    18c6:	90 93 88 03 	sts	0x0388, r25
    18ca:	80 93 87 03 	sts	0x0387, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    18ce:	2f bf       	out	0x3f, r18	; 63

	struct menu_item *menu_temp = menu_now_atomic->next;
    18d0:	e0 91 87 03 	lds	r30, 0x0387
    18d4:	f0 91 88 03 	lds	r31, 0x0388
    18d8:	c5 81       	ldd	r28, Z+5	; 0x05
    18da:	d6 81       	ldd	r29, Z+6	; 0x06
    18dc:	ff 24       	eor	r15, r15
    18de:	f3 94       	inc	r15
    18e0:	04 c0       	rjmp	.+8      	; 0x18ea <Lcd3310_UpdateDisplayInfo+0x40>
	while( menu_temp != menu_now_atomic ){
		number_of_elements_in_menu_now++;
    18e2:	f3 94       	inc	r15
		menu_temp = menu_temp->next;
    18e4:	0d 80       	ldd	r0, Y+5	; 0x05
    18e6:	de 81       	ldd	r29, Y+6	; 0x06
    18e8:	c0 2d       	mov	r28, r0
	Lcd3310_ClearCenter();
	
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { menu_now_atomic = menu_now; }

	struct menu_item *menu_temp = menu_now_atomic->next;
	while( menu_temp != menu_now_atomic ){
    18ea:	ce 17       	cp	r28, r30
    18ec:	df 07       	cpc	r29, r31
    18ee:	c9 f7       	brne	.-14     	; 0x18e2 <Lcd3310_UpdateDisplayInfo+0x38>
		number_of_elements_in_menu_now++;
		menu_temp = menu_temp->next;
	}
	if(number_of_elements_in_menu_now > 4){
    18f0:	24 e0       	ldi	r18, 0x04	; 4
    18f2:	2f 15       	cp	r18, r15
    18f4:	18 f4       	brcc	.+6      	; 0x18fc <Lcd3310_UpdateDisplayInfo+0x52>
    18f6:	84 e0       	ldi	r24, 0x04	; 4
    18f8:	f8 2e       	mov	r15, r24
    18fa:	03 c0       	rjmp	.+6      	; 0x1902 <Lcd3310_UpdateDisplayInfo+0x58>
		number_of_elements_in_menu_now = 4;
	}
	 
#ifdef ANIMATION_SWITCH_MENU_ITEMS
	if(number_of_elements_in_menu_now < 3){
    18fc:	82 e0       	ldi	r24, 0x02	; 2
    18fe:	8f 15       	cp	r24, r15
    1900:	10 f4       	brcc	.+4      	; 0x1906 <Lcd3310_UpdateDisplayInfo+0x5c>
		menu_temp = menu_now_atomic;
	}else{
		menu_temp = menu_now_atomic->prev;
    1902:	c7 81       	ldd	r28, Z+7	; 0x07
    1904:	d0 85       	ldd	r29, Z+8	; 0x08
		menu_temp = menu_temp->prev;
	}
#endif

#	ifdef LCD_FIRST_STR
	Lcd3310_GotoXY(0, 0);
    1906:	80 e0       	ldi	r24, 0x00	; 0
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	60 e0       	ldi	r22, 0x00	; 0
    190c:	70 e0       	ldi	r23, 0x00	; 0
    190e:	0e 94 04 0b 	call	0x1608	; 0x1608 <Lcd3310_GotoXY>
	Lcd3310_String_P(lcd_first_str, WHITE_TEXT_ON_BLACK);
    1912:	80 91 1f 01 	lds	r24, 0x011F
    1916:	90 91 20 01 	lds	r25, 0x0120
    191a:	61 e0       	ldi	r22, 0x01	; 1
    191c:	0e 94 03 0a 	call	0x1406	; 0x1406 <Lcd3310_String_P>
    1920:	ee 24       	eor	r14, r14
    1922:	01 e0       	ldi	r16, 0x01	; 1
    1924:	10 e0       	ldi	r17, 0x00	; 0
    1926:	27 c0       	rjmp	.+78     	; 0x1976 <Lcd3310_UpdateDisplayInfo+0xcc>
#	endif

	for(uint8_t i=0; i < number_of_elements_in_menu_now; i++){
#		ifdef LCD_IMAGES
			Lcd3310_GotoXY(0, i + 1);
    1928:	80 e0       	ldi	r24, 0x00	; 0
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	b8 01       	movw	r22, r16
    192e:	0e 94 04 0b 	call	0x1608	; 0x1608 <Lcd3310_GotoXY>
				Lcd3310_GotoXY(0, i + 2);// show menu from (i+1) line because first line filled with '_COLORS_'
#			else
				Lcd3310_GotoXY(0, i); // no images at top
#			endif
#		endif
		if(menu_temp->str == results.str){
    1932:	29 85       	ldd	r18, Y+9	; 0x09
    1934:	3a 85       	ldd	r19, Y+10	; 0x0a
    1936:	80 91 53 01 	lds	r24, 0x0153
    193a:	90 91 54 01 	lds	r25, 0x0154
    193e:	28 17       	cp	r18, r24
    1940:	39 07       	cpc	r19, r25
    1942:	29 f4       	brne	.+10     	; 0x194e <Lcd3310_UpdateDisplayInfo+0xa4>
			Lcd3310_GotoXY(0, i + 1);
    1944:	80 e0       	ldi	r24, 0x00	; 0
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	b8 01       	movw	r22, r16
    194a:	0e 94 04 0b 	call	0x1608	; 0x1608 <Lcd3310_GotoXY>
		}
		Lcd3310_String_P(menu_temp->str, (menu_now_atomic == menu_temp));
    194e:	29 85       	ldd	r18, Y+9	; 0x09
    1950:	3a 85       	ldd	r19, Y+10	; 0x0a
    1952:	60 e0       	ldi	r22, 0x00	; 0
    1954:	80 91 87 03 	lds	r24, 0x0387
    1958:	90 91 88 03 	lds	r25, 0x0388
    195c:	8c 17       	cp	r24, r28
    195e:	9d 07       	cpc	r25, r29
    1960:	09 f4       	brne	.+2      	; 0x1964 <Lcd3310_UpdateDisplayInfo+0xba>
    1962:	61 e0       	ldi	r22, 0x01	; 1
    1964:	c9 01       	movw	r24, r18
    1966:	0e 94 03 0a 	call	0x1406	; 0x1406 <Lcd3310_String_P>
		menu_temp = menu_temp->next;
    196a:	0d 80       	ldd	r0, Y+5	; 0x05
    196c:	de 81       	ldd	r29, Y+6	; 0x06
    196e:	c0 2d       	mov	r28, r0
#	ifdef LCD_FIRST_STR
	Lcd3310_GotoXY(0, 0);
	Lcd3310_String_P(lcd_first_str, WHITE_TEXT_ON_BLACK);
#	endif

	for(uint8_t i=0; i < number_of_elements_in_menu_now; i++){
    1970:	e3 94       	inc	r14
    1972:	0f 5f       	subi	r16, 0xFF	; 255
    1974:	1f 4f       	sbci	r17, 0xFF	; 255
    1976:	ef 14       	cp	r14, r15
    1978:	b8 f2       	brcs	.-82     	; 0x1928 <Lcd3310_UpdateDisplayInfo+0x7e>
		Lcd3310_String_P(menu_temp->str, (menu_now_atomic == menu_temp));
		menu_temp = menu_temp->next;
	}


	if( menu_now_atomic == &results ){
    197a:	80 91 87 03 	lds	r24, 0x0387
    197e:	90 91 88 03 	lds	r25, 0x0388
    1982:	8a 54       	subi	r24, 0x4A	; 74
    1984:	91 40       	sbci	r25, 0x01	; 1
    1986:	09 f0       	breq	.+2      	; 0x198a <Lcd3310_UpdateDisplayInfo+0xe0>
    1988:	8d c0       	rjmp	.+282    	; 0x1aa4 <Lcd3310_UpdateDisplayInfo+0x1fa>
		 * |  xxxxxxxxxxx |
		 *
		 */

		// |   R   G   B  |
		Lcd3310_GotoXY(3, 2);
    198a:	83 e0       	ldi	r24, 0x03	; 3
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	62 e0       	ldi	r22, 0x02	; 2
    1990:	70 e0       	ldi	r23, 0x00	; 0
    1992:	0e 94 04 0b 	call	0x1608	; 0x1608 <Lcd3310_GotoXY>
		Lcd3310_Char('R', BLACK_TEXT_ON_WHITE);
    1996:	82 e5       	ldi	r24, 0x52	; 82
    1998:	60 e0       	ldi	r22, 0x00	; 0
    199a:	0e 94 b2 09 	call	0x1364	; 0x1364 <Lcd3310_Char>
		Lcd3310_GotoXY(7, 2);
    199e:	87 e0       	ldi	r24, 0x07	; 7
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	62 e0       	ldi	r22, 0x02	; 2
    19a4:	70 e0       	ldi	r23, 0x00	; 0
    19a6:	0e 94 04 0b 	call	0x1608	; 0x1608 <Lcd3310_GotoXY>
		Lcd3310_Char('G', BLACK_TEXT_ON_WHITE);
    19aa:	87 e4       	ldi	r24, 0x47	; 71
    19ac:	60 e0       	ldi	r22, 0x00	; 0
    19ae:	0e 94 b2 09 	call	0x1364	; 0x1364 <Lcd3310_Char>
		Lcd3310_GotoXY(11, 2);
    19b2:	8b e0       	ldi	r24, 0x0B	; 11
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	62 e0       	ldi	r22, 0x02	; 2
    19b8:	70 e0       	ldi	r23, 0x00	; 0
    19ba:	0e 94 04 0b 	call	0x1608	; 0x1608 <Lcd3310_GotoXY>
		Lcd3310_Char('B', BLACK_TEXT_ON_WHITE);
    19be:	82 e4       	ldi	r24, 0x42	; 66
    19c0:	60 e0       	ldi	r22, 0x00	; 0
    19c2:	0e 94 b2 09 	call	0x1364	; 0x1364 <Lcd3310_Char>

		// |1 *** *** *** |
		Lcd3310_GotoXY(0, 3);
    19c6:	80 e0       	ldi	r24, 0x00	; 0
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	63 e0       	ldi	r22, 0x03	; 3
    19cc:	70 e0       	ldi	r23, 0x00	; 0
    19ce:	0e 94 04 0b 	call	0x1608	; 0x1608 <Lcd3310_GotoXY>
		Lcd3310_Char('1', BLACK_TEXT_ON_WHITE);
    19d2:	81 e3       	ldi	r24, 0x31	; 49
    19d4:	60 e0       	ldi	r22, 0x00	; 0
    19d6:	0e 94 b2 09 	call	0x1364	; 0x1364 <Lcd3310_Char>
		Lcd3310_GotoXY(2, 3);
    19da:	82 e0       	ldi	r24, 0x02	; 2
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	63 e0       	ldi	r22, 0x03	; 3
    19e0:	70 e0       	ldi	r23, 0x00	; 0
    19e2:	0e 94 04 0b 	call	0x1608	; 0x1608 <Lcd3310_GotoXY>
		Lcd3310_UInt16AsText(result[FIRST][RED], BLACK_TEXT_ON_WHITE);
    19e6:	80 91 5f 03 	lds	r24, 0x035F
    19ea:	90 91 60 03 	lds	r25, 0x0360
    19ee:	60 e0       	ldi	r22, 0x00	; 0
    19f0:	0e 94 25 0c 	call	0x184a	; 0x184a <Lcd3310_UInt16AsText>
		Lcd3310_UInt16AsText(result[FIRST][GREEN], BLACK_TEXT_ON_WHITE);
    19f4:	80 91 61 03 	lds	r24, 0x0361
    19f8:	90 91 62 03 	lds	r25, 0x0362
    19fc:	60 e0       	ldi	r22, 0x00	; 0
    19fe:	0e 94 25 0c 	call	0x184a	; 0x184a <Lcd3310_UInt16AsText>
		Lcd3310_UInt16AsText(result[FIRST][BLUE], BLACK_TEXT_ON_WHITE);
    1a02:	80 91 63 03 	lds	r24, 0x0363
    1a06:	90 91 64 03 	lds	r25, 0x0364
    1a0a:	60 e0       	ldi	r22, 0x00	; 0
    1a0c:	0e 94 25 0c 	call	0x184a	; 0x184a <Lcd3310_UInt16AsText>

		// |2 *** *** *** |
		Lcd3310_GotoXY(0, 4);
    1a10:	80 e0       	ldi	r24, 0x00	; 0
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	64 e0       	ldi	r22, 0x04	; 4
    1a16:	70 e0       	ldi	r23, 0x00	; 0
    1a18:	0e 94 04 0b 	call	0x1608	; 0x1608 <Lcd3310_GotoXY>
		Lcd3310_Char('2', BLACK_TEXT_ON_WHITE);
    1a1c:	82 e3       	ldi	r24, 0x32	; 50
    1a1e:	60 e0       	ldi	r22, 0x00	; 0
    1a20:	0e 94 b2 09 	call	0x1364	; 0x1364 <Lcd3310_Char>
		Lcd3310_GotoXY(2, 4);
    1a24:	82 e0       	ldi	r24, 0x02	; 2
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	64 e0       	ldi	r22, 0x04	; 4
    1a2a:	70 e0       	ldi	r23, 0x00	; 0
    1a2c:	0e 94 04 0b 	call	0x1608	; 0x1608 <Lcd3310_GotoXY>
		Lcd3310_UInt16AsText(result[SECOND][RED], BLACK_TEXT_ON_WHITE);
    1a30:	80 91 65 03 	lds	r24, 0x0365
    1a34:	90 91 66 03 	lds	r25, 0x0366
    1a38:	60 e0       	ldi	r22, 0x00	; 0
    1a3a:	0e 94 25 0c 	call	0x184a	; 0x184a <Lcd3310_UInt16AsText>
		Lcd3310_UInt16AsText(result[SECOND][GREEN], BLACK_TEXT_ON_WHITE);
    1a3e:	80 91 67 03 	lds	r24, 0x0367
    1a42:	90 91 68 03 	lds	r25, 0x0368
    1a46:	60 e0       	ldi	r22, 0x00	; 0
    1a48:	0e 94 25 0c 	call	0x184a	; 0x184a <Lcd3310_UInt16AsText>
		Lcd3310_UInt16AsText(result[SECOND][BLUE], BLACK_TEXT_ON_WHITE);
    1a4c:	80 91 69 03 	lds	r24, 0x0369
    1a50:	90 91 6a 03 	lds	r25, 0x036A
    1a54:	60 e0       	ldi	r22, 0x00	; 0
    1a56:	0e 94 25 0c 	call	0x184a	; 0x184a <Lcd3310_UInt16AsText>

		// |% **% **% **% |
		Lcd3310_GotoXY(0, 5);
    1a5a:	80 e0       	ldi	r24, 0x00	; 0
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	65 e0       	ldi	r22, 0x05	; 5
    1a60:	70 e0       	ldi	r23, 0x00	; 0
    1a62:	0e 94 04 0b 	call	0x1608	; 0x1608 <Lcd3310_GotoXY>
		Lcd3310_Char('%', BLACK_TEXT_ON_WHITE);
    1a66:	85 e2       	ldi	r24, 0x25	; 37
    1a68:	60 e0       	ldi	r22, 0x00	; 0
    1a6a:	0e 94 b2 09 	call	0x1364	; 0x1364 <Lcd3310_Char>
		Lcd3310_GotoXY(2, 5);
    1a6e:	82 e0       	ldi	r24, 0x02	; 2
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	65 e0       	ldi	r22, 0x05	; 5
    1a74:	70 e0       	ldi	r23, 0x00	; 0
    1a76:	0e 94 04 0b 	call	0x1608	; 0x1608 <Lcd3310_GotoXY>
		Lcd3310_UInt16AsText(result[PERCENT][RED], BLACK_TEXT_ON_WHITE);
    1a7a:	80 91 6b 03 	lds	r24, 0x036B
    1a7e:	90 91 6c 03 	lds	r25, 0x036C
    1a82:	60 e0       	ldi	r22, 0x00	; 0
    1a84:	0e 94 25 0c 	call	0x184a	; 0x184a <Lcd3310_UInt16AsText>
		Lcd3310_UInt16AsText(result[PERCENT][GREEN], BLACK_TEXT_ON_WHITE);
    1a88:	80 91 6d 03 	lds	r24, 0x036D
    1a8c:	90 91 6e 03 	lds	r25, 0x036E
    1a90:	60 e0       	ldi	r22, 0x00	; 0
    1a92:	0e 94 25 0c 	call	0x184a	; 0x184a <Lcd3310_UInt16AsText>
		Lcd3310_UInt16AsText(result[PERCENT][BLUE], BLACK_TEXT_ON_WHITE);
    1a96:	80 91 6f 03 	lds	r24, 0x036F
    1a9a:	90 91 70 03 	lds	r25, 0x0370
    1a9e:	60 e0       	ldi	r22, 0x00	; 0
    1aa0:	0e 94 25 0c 	call	0x184a	; 0x184a <Lcd3310_UInt16AsText>
	}
}
    1aa4:	df 91       	pop	r29
    1aa6:	cf 91       	pop	r28
    1aa8:	1f 91       	pop	r17
    1aaa:	0f 91       	pop	r16
    1aac:	ff 90       	pop	r15
    1aae:	ef 90       	pop	r14
    1ab0:	08 95       	ret

00001ab2 <Lcd3310_AnimationSwitchMenuItems>:
}
//==============================================//

#ifdef ANIMATION_SWITCH_MENU_ITEMS
void Lcd3310_AnimationSwitchMenuItems(char is_turn_left)
{
    1ab2:	9f 92       	push	r9
    1ab4:	af 92       	push	r10
    1ab6:	bf 92       	push	r11
    1ab8:	cf 92       	push	r12
    1aba:	df 92       	push	r13
    1abc:	ef 92       	push	r14
    1abe:	ff 92       	push	r15
    1ac0:	0f 93       	push	r16
    1ac2:	1f 93       	push	r17
    1ac4:	cf 93       	push	r28
    1ac6:	df 93       	push	r29
    1ac8:	98 2e       	mov	r9, r24
	uint8_t number_of_elements_in_menu_now = 1;
	struct menu_item *menu_temp;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { 
    1aca:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1acc:	f8 94       	cli
		menu_now_atomic = menu_now; 
    1ace:	20 91 89 03 	lds	r18, 0x0389
    1ad2:	30 91 8a 03 	lds	r19, 0x038A
    1ad6:	30 93 88 03 	sts	0x0388, r19
    1ada:	20 93 87 03 	sts	0x0387, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1ade:	8f bf       	out	0x3f, r24	; 63
	}
	
	menu_temp = menu_now_atomic->next;
    1ae0:	e0 91 87 03 	lds	r30, 0x0387
    1ae4:	f0 91 88 03 	lds	r31, 0x0388
    1ae8:	a5 81       	ldd	r26, Z+5	; 0x05
    1aea:	b6 81       	ldd	r27, Z+6	; 0x06
	while( menu_temp->str != menu_now_atomic->str ){
    1aec:	21 85       	ldd	r18, Z+9	; 0x09
    1aee:	32 85       	ldd	r19, Z+10	; 0x0a
    1af0:	11 e0       	ldi	r17, 0x01	; 1
    1af2:	05 c0       	rjmp	.+10     	; 0x1afe <Lcd3310_AnimationSwitchMenuItems+0x4c>
		number_of_elements_in_menu_now++;
    1af4:	1f 5f       	subi	r17, 0xFF	; 255
		menu_temp = menu_temp->next;
    1af6:	15 96       	adiw	r26, 0x05	; 5
    1af8:	0d 90       	ld	r0, X+
    1afa:	bc 91       	ld	r27, X
    1afc:	a0 2d       	mov	r26, r0
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { 
		menu_now_atomic = menu_now; 
	}
	
	menu_temp = menu_now_atomic->next;
	while( menu_temp->str != menu_now_atomic->str ){
    1afe:	19 96       	adiw	r26, 0x09	; 9
    1b00:	8d 91       	ld	r24, X+
    1b02:	9c 91       	ld	r25, X
    1b04:	1a 97       	sbiw	r26, 0x0a	; 10
    1b06:	82 17       	cp	r24, r18
    1b08:	93 07       	cpc	r25, r19
    1b0a:	a1 f7       	brne	.-24     	; 0x1af4 <Lcd3310_AnimationSwitchMenuItems+0x42>
		number_of_elements_in_menu_now++;
		menu_temp = menu_temp->next;
	}
	if(number_of_elements_in_menu_now > 4){
    1b0c:	15 30       	cpi	r17, 0x05	; 5
    1b0e:	08 f0       	brcs	.+2      	; 0x1b12 <Lcd3310_AnimationSwitchMenuItems+0x60>
    1b10:	14 e0       	ldi	r17, 0x04	; 4
		number_of_elements_in_menu_now = 4;
	}

	Lcd3310_ClearCenter();
    1b12:	0e 94 1b 0b 	call	0x1636	; 0x1636 <Lcd3310_ClearCenter>
    1b16:	e0 91 87 03 	lds	r30, 0x0387
    1b1a:	f0 91 88 03 	lds	r31, 0x0388
	if(number_of_elements_in_menu_now < 3){
    1b1e:	13 30       	cpi	r17, 0x03	; 3
    1b20:	38 f4       	brcc	.+14     	; 0x1b30 <Lcd3310_AnimationSwitchMenuItems+0x7e>
		menu_temp = menu_now_atomic;
    1b22:	ef 01       	movw	r28, r30
    1b24:	cc 24       	eor	r12, r12
    1b26:	20 e9       	ldi	r18, 0x90	; 144
    1b28:	a2 2e       	mov	r10, r18
    1b2a:	21 e0       	ldi	r18, 0x01	; 1
    1b2c:	b2 2e       	mov	r11, r18
    1b2e:	3f c0       	rjmp	.+126    	; 0x1bae <Lcd3310_AnimationSwitchMenuItems+0xfc>
	}else{
		menu_temp = menu_now_atomic->prev;
    1b30:	c7 81       	ldd	r28, Z+7	; 0x07
    1b32:	d0 85       	ldd	r29, Z+8	; 0x08
    1b34:	f7 cf       	rjmp	.-18     	; 0x1b24 <Lcd3310_AnimationSwitchMenuItems+0x72>
	}

	for(uint8_t j=0; j<8; j++){
		for(uint8_t i=0; i < number_of_elements_in_menu_now; i++){
#			ifdef LCD_IMAGES
				Lcd3310_GotoXY(0, i + 1);// show menu from (i+1) line because first line filled with '_COLORS_'
    1b36:	80 e0       	ldi	r24, 0x00	; 0
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	b7 01       	movw	r22, r14
    1b3c:	0e 94 04 0b 	call	0x1608	; 0x1608 <Lcd3310_GotoXY>
#			else
				Lcd3310_GotoXY(0, i); // no images at top
#			endif
			Lcd3310_String_P_anime(
    1b40:	99 20       	and	r9, r9
    1b42:	19 f0       	breq	.+6      	; 0x1b4a <Lcd3310_AnimationSwitchMenuItems+0x98>
    1b44:	ef 81       	ldd	r30, Y+7	; 0x07
    1b46:	f8 85       	ldd	r31, Y+8	; 0x08
    1b48:	02 c0       	rjmp	.+4      	; 0x1b4e <Lcd3310_AnimationSwitchMenuItems+0x9c>
    1b4a:	ed 81       	ldd	r30, Y+5	; 0x05
    1b4c:	fe 81       	ldd	r31, Y+6	; 0x06
    1b4e:	21 85       	ldd	r18, Z+9	; 0x09
    1b50:	32 85       	ldd	r19, Z+10	; 0x0a
    1b52:	69 85       	ldd	r22, Y+9	; 0x09
    1b54:	7a 85       	ldd	r23, Y+10	; 0x0a
    1b56:	40 e0       	ldi	r20, 0x00	; 0
    1b58:	80 91 87 03 	lds	r24, 0x0387
    1b5c:	90 91 88 03 	lds	r25, 0x0388
    1b60:	8c 17       	cp	r24, r28
    1b62:	9d 07       	cpc	r25, r29
    1b64:	09 f4       	brne	.+2      	; 0x1b68 <Lcd3310_AnimationSwitchMenuItems+0xb6>
    1b66:	41 e0       	ldi	r20, 0x01	; 1
    1b68:	c9 01       	movw	r24, r18
    1b6a:	2c 2d       	mov	r18, r12
    1b6c:	09 2d       	mov	r16, r9
    1b6e:	0e 94 35 0a 	call	0x146a	; 0x146a <Lcd3310_String_P_anime>
							menu_temp->str,
							(menu_now_atomic == menu_temp), // WhiteOrBlackText
							j, // num_of_cadr
							is_turn_left // is_next
							);
			menu_temp = menu_temp->next;
    1b72:	0d 80       	ldd	r0, Y+5	; 0x05
    1b74:	de 81       	ldd	r29, Y+6	; 0x06
    1b76:	c0 2d       	mov	r28, r0
	}else{
		menu_temp = menu_now_atomic->prev;
	}

	for(uint8_t j=0; j<8; j++){
		for(uint8_t i=0; i < number_of_elements_in_menu_now; i++){
    1b78:	d3 94       	inc	r13
    1b7a:	08 94       	sec
    1b7c:	e1 1c       	adc	r14, r1
    1b7e:	f1 1c       	adc	r15, r1
    1b80:	d1 16       	cp	r13, r17
    1b82:	c8 f2       	brcs	.-78     	; 0x1b36 <Lcd3310_AnimationSwitchMenuItems+0x84>
    1b84:	e0 91 87 03 	lds	r30, 0x0387
    1b88:	f0 91 88 03 	lds	r31, 0x0388
							j, // num_of_cadr
							is_turn_left // is_next
							);
			menu_temp = menu_temp->next;
		}
		if(number_of_elements_in_menu_now < 3){
    1b8c:	13 30       	cpi	r17, 0x03	; 3
    1b8e:	10 f4       	brcc	.+4      	; 0x1b94 <Lcd3310_AnimationSwitchMenuItems+0xe2>
			menu_temp = menu_now_atomic;
    1b90:	ef 01       	movw	r28, r30
    1b92:	02 c0       	rjmp	.+4      	; 0x1b98 <Lcd3310_AnimationSwitchMenuItems+0xe6>
		}else{
			menu_temp = menu_now_atomic->prev;
    1b94:	c7 81       	ldd	r28, Z+7	; 0x07
    1b96:	d0 85       	ldd	r29, Z+8	; 0x08
    1b98:	84 ef       	ldi	r24, 0xF4	; 244
    1b9a:	91 e0       	ldi	r25, 0x01	; 1
    1b9c:	f5 01       	movw	r30, r10
    1b9e:	31 97       	sbiw	r30, 0x01	; 1
    1ba0:	f1 f7       	brne	.-4      	; 0x1b9e <Lcd3310_AnimationSwitchMenuItems+0xec>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ba2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ba4:	d9 f7       	brne	.-10     	; 0x1b9c <Lcd3310_AnimationSwitchMenuItems+0xea>
		menu_temp = menu_now_atomic;
	}else{
		menu_temp = menu_now_atomic->prev;
	}

	for(uint8_t j=0; j<8; j++){
    1ba6:	c3 94       	inc	r12
    1ba8:	88 e0       	ldi	r24, 0x08	; 8
    1baa:	c8 16       	cp	r12, r24
    1bac:	29 f0       	breq	.+10     	; 0x1bb8 <Lcd3310_AnimationSwitchMenuItems+0x106>
    1bae:	dd 24       	eor	r13, r13
    1bb0:	91 e0       	ldi	r25, 0x01	; 1
    1bb2:	e9 2e       	mov	r14, r25
    1bb4:	f1 2c       	mov	r15, r1
    1bb6:	e4 cf       	rjmp	.-56     	; 0x1b80 <Lcd3310_AnimationSwitchMenuItems+0xce>
		}else{
			menu_temp = menu_now_atomic->prev;
		}
		_delay_ms(50);
	}
}
    1bb8:	df 91       	pop	r29
    1bba:	cf 91       	pop	r28
    1bbc:	1f 91       	pop	r17
    1bbe:	0f 91       	pop	r16
    1bc0:	ff 90       	pop	r15
    1bc2:	ef 90       	pop	r14
    1bc4:	df 90       	pop	r13
    1bc6:	cf 90       	pop	r12
    1bc8:	bf 90       	pop	r11
    1bca:	af 90       	pop	r10
    1bcc:	9f 90       	pop	r9
    1bce:	08 95       	ret

00001bd0 <Lcd3310_InitializeDisplay>:



void init_menu_now(void)
{
	menu_now = &go;
    1bd0:	20 e3       	ldi	r18, 0x30	; 48
    1bd2:	31 e0       	ldi	r19, 0x01	; 1
    1bd4:	30 93 8a 03 	sts	0x038A, r19
    1bd8:	20 93 89 03 	sts	0x0389, r18
//==============================================//
void Lcd3310_InitializeDisplay(uint16_t show_image_delay_ms)
{
	init_menu_now();

    Lcd3310_Init(show_image_delay_ms);
    1bdc:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <Lcd3310_Init>
	//Lcd3310_LcdImageUpperBottom_Fill();
    Lcd3310_UpdateDisplayInfo();
    1be0:	0e 94 55 0c 	call	0x18aa	; 0x18aa <Lcd3310_UpdateDisplayInfo>
}
    1be4:	08 95       	ret

00001be6 <Menu_EnterClick>:
struct menu_item readme = {ENTER_MENU_CMD, NULL, &text, &go, &setup, 								"// Readme   //"};
	struct menu_item text = {BACK_CMD, &readme, NULL, &text, &text, "[ Programmer:][   brunql   ][    (at)    ][  gmail.com ]"};

void Menu_EnterClick(void)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { menu_now_atomic = menu_now; }
    1be6:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1be8:	f8 94       	cli
    1bea:	20 91 89 03 	lds	r18, 0x0389
    1bee:	30 91 8a 03 	lds	r19, 0x038A
    1bf2:	30 93 88 03 	sts	0x0388, r19
    1bf6:	20 93 87 03 	sts	0x0387, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1bfa:	8f bf       	out	0x3f, r24	; 63
	switch(menu_now_atomic->cmd){
    1bfc:	e0 91 87 03 	lds	r30, 0x0387
    1c00:	f0 91 88 03 	lds	r31, 0x0388
    1c04:	e0 81       	ld	r30, Z
    1c06:	e3 30       	cpi	r30, 0x03	; 3
    1c08:	49 f1       	breq	.+82     	; 0x1c5c <Menu_EnterClick+0x76>
    1c0a:	e4 30       	cpi	r30, 0x04	; 4
    1c0c:	28 f4       	brcc	.+10     	; 0x1c18 <Menu_EnterClick+0x32>
    1c0e:	e1 30       	cpi	r30, 0x01	; 1
    1c10:	71 f0       	breq	.+28     	; 0x1c2e <Menu_EnterClick+0x48>
    1c12:	e2 30       	cpi	r30, 0x02	; 2
    1c14:	40 f5       	brcc	.+80     	; 0x1c66 <Menu_EnterClick+0x80>
    1c16:	14 c0       	rjmp	.+40     	; 0x1c40 <Menu_EnterClick+0x5a>
    1c18:	e5 30       	cpi	r30, 0x05	; 5
    1c1a:	a9 f1       	breq	.+106    	; 0x1c86 <Menu_EnterClick+0xa0>
    1c1c:	e5 30       	cpi	r30, 0x05	; 5
    1c1e:	58 f1       	brcs	.+86     	; 0x1c76 <Menu_EnterClick+0x90>
    1c20:	e6 30       	cpi	r30, 0x06	; 6
    1c22:	09 f4       	brne	.+2      	; 0x1c26 <Menu_EnterClick+0x40>
    1c24:	3d c0       	rjmp	.+122    	; 0x1ca0 <Menu_EnterClick+0xba>
    1c26:	e7 30       	cpi	r30, 0x07	; 7
    1c28:	09 f0       	breq	.+2      	; 0x1c2c <Menu_EnterClick+0x46>
    1c2a:	54 c0       	rjmp	.+168    	; 0x1cd4 <Menu_EnterClick+0xee>
    1c2c:	46 c0       	rjmp	.+140    	; 0x1cba <Menu_EnterClick+0xd4>
		default:
			break;
		case ENTER_MENU_CMD:
		enter_menu_label:
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { menu_now = menu_now->sub_menu; }
    1c2e:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1c30:	f8 94       	cli
    1c32:	e0 91 89 03 	lds	r30, 0x0389
    1c36:	f0 91 8a 03 	lds	r31, 0x038A
    1c3a:	23 81       	ldd	r18, Z+3	; 0x03
    1c3c:	34 81       	ldd	r19, Z+4	; 0x04
    1c3e:	08 c0       	rjmp	.+16     	; 0x1c50 <Menu_EnterClick+0x6a>
			break;

		case BACK_CMD:
		back_menu_label:
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { menu_now = menu_now->main_menu; }
    1c40:	8f b7       	in	r24, 0x3f	; 63
    1c42:	f8 94       	cli
    1c44:	e0 91 89 03 	lds	r30, 0x0389
    1c48:	f0 91 8a 03 	lds	r31, 0x038A
    1c4c:	21 81       	ldd	r18, Z+1	; 0x01
    1c4e:	32 81       	ldd	r19, Z+2	; 0x02
    1c50:	30 93 8a 03 	sts	0x038A, r19
    1c54:	20 93 89 03 	sts	0x0389, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1c58:	8f bf       	out	0x3f, r24	; 63
    1c5a:	21 c0       	rjmp	.+66     	; 0x1c9e <Menu_EnterClick+0xb8>
			break;
		
		case results_cmd:
			LedDriver_SwitchLeds( 0x0000 );
    1c5c:	80 e0       	ldi	r24, 0x00	; 0
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	0e 94 a7 06 	call	0xd4e	; 0xd4e <LedDriver_SwitchLeds>
    1c64:	ed cf       	rjmp	.-38     	; 0x1c40 <Menu_EnterClick+0x5a>
			goto back_menu_label;
	
		case go_cmd:
			FLAGS_SWITCH_ON( ADC_RESULT_FLAG );
    1c66:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1c68:	f8 94       	cli
    1c6a:	80 91 75 03 	lds	r24, 0x0375
    1c6e:	90 91 76 03 	lds	r25, 0x0376
    1c72:	80 61       	ori	r24, 0x10	; 16
    1c74:	1c c0       	rjmp	.+56     	; 0x1cae <Menu_EnterClick+0xc8>
			goto enter_menu_label;
		
		case calibration_cmd:
			FLAGS_SWITCH_ON( ADC_CALIBRATE_FLAG );
    1c76:	2f b7       	in	r18, 0x3f	; 63
    1c78:	f8 94       	cli
    1c7a:	80 91 75 03 	lds	r24, 0x0375
    1c7e:	90 91 76 03 	lds	r25, 0x0376
    1c82:	80 62       	ori	r24, 0x20	; 32
    1c84:	07 c0       	rjmp	.+14     	; 0x1c94 <Menu_EnterClick+0xae>
			break;
		case set_zero_cmd:
			FLAGS_SWITCH_ON( ADC_SET_ZERO );
    1c86:	2f b7       	in	r18, 0x3f	; 63
    1c88:	f8 94       	cli
    1c8a:	80 91 75 03 	lds	r24, 0x0375
    1c8e:	90 91 76 03 	lds	r25, 0x0376
    1c92:	80 64       	ori	r24, 0x40	; 64
    1c94:	90 93 76 03 	sts	0x0376, r25
    1c98:	80 93 75 03 	sts	0x0375, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1c9c:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    1c9e:	08 95       	ret
			break;

		case snake_start_cmd:
			FLAGS_SWITCH_ON( SNAKE_START_GAME_FLAG );
    1ca0:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1ca2:	f8 94       	cli
    1ca4:	80 91 75 03 	lds	r24, 0x0375
    1ca8:	90 91 76 03 	lds	r25, 0x0376
    1cac:	91 60       	ori	r25, 0x01	; 1
    1cae:	90 93 76 03 	sts	0x0376, r25
    1cb2:	80 93 75 03 	sts	0x0375, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1cb6:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    1cb8:	ba cf       	rjmp	.-140    	; 0x1c2e <Menu_EnterClick+0x48>
			goto enter_menu_label;

		case snake_results_cmd:
			FLAGS_SWITCH_ON( SNAKE_STOP_GAME_FLAG );
    1cba:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1cbc:	f8 94       	cli
    1cbe:	80 91 75 03 	lds	r24, 0x0375
    1cc2:	90 91 76 03 	lds	r25, 0x0376
    1cc6:	92 60       	ori	r25, 0x02	; 2
    1cc8:	90 93 76 03 	sts	0x0376, r25
    1ccc:	80 93 75 03 	sts	0x0375, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1cd0:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    1cd2:	b6 cf       	rjmp	.-148    	; 0x1c40 <Menu_EnterClick+0x5a>
    1cd4:	08 95       	ret

00001cd6 <__fixunssfsi>:
    1cd6:	ef 92       	push	r14
    1cd8:	ff 92       	push	r15
    1cda:	0f 93       	push	r16
    1cdc:	1f 93       	push	r17
    1cde:	7b 01       	movw	r14, r22
    1ce0:	8c 01       	movw	r16, r24
    1ce2:	20 e0       	ldi	r18, 0x00	; 0
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	40 e0       	ldi	r20, 0x00	; 0
    1ce8:	5f e4       	ldi	r21, 0x4F	; 79
    1cea:	0e 94 17 12 	call	0x242e	; 0x242e <__gesf2>
    1cee:	88 23       	and	r24, r24
    1cf0:	8c f0       	brlt	.+34     	; 0x1d14 <__fixunssfsi+0x3e>
    1cf2:	c8 01       	movw	r24, r16
    1cf4:	b7 01       	movw	r22, r14
    1cf6:	20 e0       	ldi	r18, 0x00	; 0
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	40 e0       	ldi	r20, 0x00	; 0
    1cfc:	5f e4       	ldi	r21, 0x4F	; 79
    1cfe:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <__subsf3>
    1d02:	0e 94 d5 12 	call	0x25aa	; 0x25aa <__fixsfsi>
    1d06:	9b 01       	movw	r18, r22
    1d08:	ac 01       	movw	r20, r24
    1d0a:	20 50       	subi	r18, 0x00	; 0
    1d0c:	30 40       	sbci	r19, 0x00	; 0
    1d0e:	40 40       	sbci	r20, 0x00	; 0
    1d10:	50 48       	sbci	r21, 0x80	; 128
    1d12:	06 c0       	rjmp	.+12     	; 0x1d20 <__fixunssfsi+0x4a>
    1d14:	c8 01       	movw	r24, r16
    1d16:	b7 01       	movw	r22, r14
    1d18:	0e 94 d5 12 	call	0x25aa	; 0x25aa <__fixsfsi>
    1d1c:	9b 01       	movw	r18, r22
    1d1e:	ac 01       	movw	r20, r24
    1d20:	b9 01       	movw	r22, r18
    1d22:	ca 01       	movw	r24, r20
    1d24:	1f 91       	pop	r17
    1d26:	0f 91       	pop	r16
    1d28:	ff 90       	pop	r15
    1d2a:	ef 90       	pop	r14
    1d2c:	08 95       	ret

00001d2e <_fpadd_parts>:
    1d2e:	a0 e0       	ldi	r26, 0x00	; 0
    1d30:	b0 e0       	ldi	r27, 0x00	; 0
    1d32:	ed e9       	ldi	r30, 0x9D	; 157
    1d34:	fe e0       	ldi	r31, 0x0E	; 14
    1d36:	0c 94 1f 16 	jmp	0x2c3e	; 0x2c3e <__prologue_saves__>
    1d3a:	dc 01       	movw	r26, r24
    1d3c:	2b 01       	movw	r4, r22
    1d3e:	fa 01       	movw	r30, r20
    1d40:	9c 91       	ld	r25, X
    1d42:	92 30       	cpi	r25, 0x02	; 2
    1d44:	08 f4       	brcc	.+2      	; 0x1d48 <_fpadd_parts+0x1a>
    1d46:	39 c1       	rjmp	.+626    	; 0x1fba <_fpadd_parts+0x28c>
    1d48:	eb 01       	movw	r28, r22
    1d4a:	88 81       	ld	r24, Y
    1d4c:	82 30       	cpi	r24, 0x02	; 2
    1d4e:	08 f4       	brcc	.+2      	; 0x1d52 <_fpadd_parts+0x24>
    1d50:	33 c1       	rjmp	.+614    	; 0x1fb8 <_fpadd_parts+0x28a>
    1d52:	94 30       	cpi	r25, 0x04	; 4
    1d54:	69 f4       	brne	.+26     	; 0x1d70 <_fpadd_parts+0x42>
    1d56:	84 30       	cpi	r24, 0x04	; 4
    1d58:	09 f0       	breq	.+2      	; 0x1d5c <_fpadd_parts+0x2e>
    1d5a:	2f c1       	rjmp	.+606    	; 0x1fba <_fpadd_parts+0x28c>
    1d5c:	11 96       	adiw	r26, 0x01	; 1
    1d5e:	9c 91       	ld	r25, X
    1d60:	11 97       	sbiw	r26, 0x01	; 1
    1d62:	89 81       	ldd	r24, Y+1	; 0x01
    1d64:	98 17       	cp	r25, r24
    1d66:	09 f4       	brne	.+2      	; 0x1d6a <_fpadd_parts+0x3c>
    1d68:	28 c1       	rjmp	.+592    	; 0x1fba <_fpadd_parts+0x28c>
    1d6a:	af e4       	ldi	r26, 0x4F	; 79
    1d6c:	b2 e0       	ldi	r27, 0x02	; 2
    1d6e:	25 c1       	rjmp	.+586    	; 0x1fba <_fpadd_parts+0x28c>
    1d70:	84 30       	cpi	r24, 0x04	; 4
    1d72:	09 f4       	brne	.+2      	; 0x1d76 <_fpadd_parts+0x48>
    1d74:	21 c1       	rjmp	.+578    	; 0x1fb8 <_fpadd_parts+0x28a>
    1d76:	82 30       	cpi	r24, 0x02	; 2
    1d78:	a9 f4       	brne	.+42     	; 0x1da4 <_fpadd_parts+0x76>
    1d7a:	92 30       	cpi	r25, 0x02	; 2
    1d7c:	09 f0       	breq	.+2      	; 0x1d80 <_fpadd_parts+0x52>
    1d7e:	1d c1       	rjmp	.+570    	; 0x1fba <_fpadd_parts+0x28c>
    1d80:	9a 01       	movw	r18, r20
    1d82:	ad 01       	movw	r20, r26
    1d84:	88 e0       	ldi	r24, 0x08	; 8
    1d86:	ea 01       	movw	r28, r20
    1d88:	09 90       	ld	r0, Y+
    1d8a:	ae 01       	movw	r20, r28
    1d8c:	e9 01       	movw	r28, r18
    1d8e:	09 92       	st	Y+, r0
    1d90:	9e 01       	movw	r18, r28
    1d92:	81 50       	subi	r24, 0x01	; 1
    1d94:	c1 f7       	brne	.-16     	; 0x1d86 <_fpadd_parts+0x58>
    1d96:	e2 01       	movw	r28, r4
    1d98:	89 81       	ldd	r24, Y+1	; 0x01
    1d9a:	11 96       	adiw	r26, 0x01	; 1
    1d9c:	9c 91       	ld	r25, X
    1d9e:	89 23       	and	r24, r25
    1da0:	81 83       	std	Z+1, r24	; 0x01
    1da2:	08 c1       	rjmp	.+528    	; 0x1fb4 <_fpadd_parts+0x286>
    1da4:	92 30       	cpi	r25, 0x02	; 2
    1da6:	09 f4       	brne	.+2      	; 0x1daa <_fpadd_parts+0x7c>
    1da8:	07 c1       	rjmp	.+526    	; 0x1fb8 <_fpadd_parts+0x28a>
    1daa:	12 96       	adiw	r26, 0x02	; 2
    1dac:	2d 90       	ld	r2, X+
    1dae:	3c 90       	ld	r3, X
    1db0:	13 97       	sbiw	r26, 0x03	; 3
    1db2:	eb 01       	movw	r28, r22
    1db4:	8a 81       	ldd	r24, Y+2	; 0x02
    1db6:	9b 81       	ldd	r25, Y+3	; 0x03
    1db8:	14 96       	adiw	r26, 0x04	; 4
    1dba:	ad 90       	ld	r10, X+
    1dbc:	bd 90       	ld	r11, X+
    1dbe:	cd 90       	ld	r12, X+
    1dc0:	dc 90       	ld	r13, X
    1dc2:	17 97       	sbiw	r26, 0x07	; 7
    1dc4:	ec 80       	ldd	r14, Y+4	; 0x04
    1dc6:	fd 80       	ldd	r15, Y+5	; 0x05
    1dc8:	0e 81       	ldd	r16, Y+6	; 0x06
    1dca:	1f 81       	ldd	r17, Y+7	; 0x07
    1dcc:	91 01       	movw	r18, r2
    1dce:	28 1b       	sub	r18, r24
    1dd0:	39 0b       	sbc	r19, r25
    1dd2:	b9 01       	movw	r22, r18
    1dd4:	37 ff       	sbrs	r19, 7
    1dd6:	04 c0       	rjmp	.+8      	; 0x1de0 <_fpadd_parts+0xb2>
    1dd8:	66 27       	eor	r22, r22
    1dda:	77 27       	eor	r23, r23
    1ddc:	62 1b       	sub	r22, r18
    1dde:	73 0b       	sbc	r23, r19
    1de0:	60 32       	cpi	r22, 0x20	; 32
    1de2:	71 05       	cpc	r23, r1
    1de4:	0c f0       	brlt	.+2      	; 0x1de8 <_fpadd_parts+0xba>
    1de6:	61 c0       	rjmp	.+194    	; 0x1eaa <_fpadd_parts+0x17c>
    1de8:	12 16       	cp	r1, r18
    1dea:	13 06       	cpc	r1, r19
    1dec:	6c f5       	brge	.+90     	; 0x1e48 <_fpadd_parts+0x11a>
    1dee:	37 01       	movw	r6, r14
    1df0:	48 01       	movw	r8, r16
    1df2:	06 2e       	mov	r0, r22
    1df4:	04 c0       	rjmp	.+8      	; 0x1dfe <_fpadd_parts+0xd0>
    1df6:	96 94       	lsr	r9
    1df8:	87 94       	ror	r8
    1dfa:	77 94       	ror	r7
    1dfc:	67 94       	ror	r6
    1dfe:	0a 94       	dec	r0
    1e00:	d2 f7       	brpl	.-12     	; 0x1df6 <_fpadd_parts+0xc8>
    1e02:	21 e0       	ldi	r18, 0x01	; 1
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	40 e0       	ldi	r20, 0x00	; 0
    1e08:	50 e0       	ldi	r21, 0x00	; 0
    1e0a:	04 c0       	rjmp	.+8      	; 0x1e14 <_fpadd_parts+0xe6>
    1e0c:	22 0f       	add	r18, r18
    1e0e:	33 1f       	adc	r19, r19
    1e10:	44 1f       	adc	r20, r20
    1e12:	55 1f       	adc	r21, r21
    1e14:	6a 95       	dec	r22
    1e16:	d2 f7       	brpl	.-12     	; 0x1e0c <_fpadd_parts+0xde>
    1e18:	21 50       	subi	r18, 0x01	; 1
    1e1a:	30 40       	sbci	r19, 0x00	; 0
    1e1c:	40 40       	sbci	r20, 0x00	; 0
    1e1e:	50 40       	sbci	r21, 0x00	; 0
    1e20:	2e 21       	and	r18, r14
    1e22:	3f 21       	and	r19, r15
    1e24:	40 23       	and	r20, r16
    1e26:	51 23       	and	r21, r17
    1e28:	21 15       	cp	r18, r1
    1e2a:	31 05       	cpc	r19, r1
    1e2c:	41 05       	cpc	r20, r1
    1e2e:	51 05       	cpc	r21, r1
    1e30:	21 f0       	breq	.+8      	; 0x1e3a <_fpadd_parts+0x10c>
    1e32:	21 e0       	ldi	r18, 0x01	; 1
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	40 e0       	ldi	r20, 0x00	; 0
    1e38:	50 e0       	ldi	r21, 0x00	; 0
    1e3a:	79 01       	movw	r14, r18
    1e3c:	8a 01       	movw	r16, r20
    1e3e:	e6 28       	or	r14, r6
    1e40:	f7 28       	or	r15, r7
    1e42:	08 29       	or	r16, r8
    1e44:	19 29       	or	r17, r9
    1e46:	3c c0       	rjmp	.+120    	; 0x1ec0 <_fpadd_parts+0x192>
    1e48:	23 2b       	or	r18, r19
    1e4a:	d1 f1       	breq	.+116    	; 0x1ec0 <_fpadd_parts+0x192>
    1e4c:	26 0e       	add	r2, r22
    1e4e:	37 1e       	adc	r3, r23
    1e50:	35 01       	movw	r6, r10
    1e52:	46 01       	movw	r8, r12
    1e54:	06 2e       	mov	r0, r22
    1e56:	04 c0       	rjmp	.+8      	; 0x1e60 <_fpadd_parts+0x132>
    1e58:	96 94       	lsr	r9
    1e5a:	87 94       	ror	r8
    1e5c:	77 94       	ror	r7
    1e5e:	67 94       	ror	r6
    1e60:	0a 94       	dec	r0
    1e62:	d2 f7       	brpl	.-12     	; 0x1e58 <_fpadd_parts+0x12a>
    1e64:	21 e0       	ldi	r18, 0x01	; 1
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	40 e0       	ldi	r20, 0x00	; 0
    1e6a:	50 e0       	ldi	r21, 0x00	; 0
    1e6c:	04 c0       	rjmp	.+8      	; 0x1e76 <_fpadd_parts+0x148>
    1e6e:	22 0f       	add	r18, r18
    1e70:	33 1f       	adc	r19, r19
    1e72:	44 1f       	adc	r20, r20
    1e74:	55 1f       	adc	r21, r21
    1e76:	6a 95       	dec	r22
    1e78:	d2 f7       	brpl	.-12     	; 0x1e6e <_fpadd_parts+0x140>
    1e7a:	21 50       	subi	r18, 0x01	; 1
    1e7c:	30 40       	sbci	r19, 0x00	; 0
    1e7e:	40 40       	sbci	r20, 0x00	; 0
    1e80:	50 40       	sbci	r21, 0x00	; 0
    1e82:	2a 21       	and	r18, r10
    1e84:	3b 21       	and	r19, r11
    1e86:	4c 21       	and	r20, r12
    1e88:	5d 21       	and	r21, r13
    1e8a:	21 15       	cp	r18, r1
    1e8c:	31 05       	cpc	r19, r1
    1e8e:	41 05       	cpc	r20, r1
    1e90:	51 05       	cpc	r21, r1
    1e92:	21 f0       	breq	.+8      	; 0x1e9c <_fpadd_parts+0x16e>
    1e94:	21 e0       	ldi	r18, 0x01	; 1
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	40 e0       	ldi	r20, 0x00	; 0
    1e9a:	50 e0       	ldi	r21, 0x00	; 0
    1e9c:	59 01       	movw	r10, r18
    1e9e:	6a 01       	movw	r12, r20
    1ea0:	a6 28       	or	r10, r6
    1ea2:	b7 28       	or	r11, r7
    1ea4:	c8 28       	or	r12, r8
    1ea6:	d9 28       	or	r13, r9
    1ea8:	0b c0       	rjmp	.+22     	; 0x1ec0 <_fpadd_parts+0x192>
    1eaa:	82 15       	cp	r24, r2
    1eac:	93 05       	cpc	r25, r3
    1eae:	2c f0       	brlt	.+10     	; 0x1eba <_fpadd_parts+0x18c>
    1eb0:	1c 01       	movw	r2, r24
    1eb2:	aa 24       	eor	r10, r10
    1eb4:	bb 24       	eor	r11, r11
    1eb6:	65 01       	movw	r12, r10
    1eb8:	03 c0       	rjmp	.+6      	; 0x1ec0 <_fpadd_parts+0x192>
    1eba:	ee 24       	eor	r14, r14
    1ebc:	ff 24       	eor	r15, r15
    1ebe:	87 01       	movw	r16, r14
    1ec0:	11 96       	adiw	r26, 0x01	; 1
    1ec2:	9c 91       	ld	r25, X
    1ec4:	d2 01       	movw	r26, r4
    1ec6:	11 96       	adiw	r26, 0x01	; 1
    1ec8:	8c 91       	ld	r24, X
    1eca:	98 17       	cp	r25, r24
    1ecc:	09 f4       	brne	.+2      	; 0x1ed0 <_fpadd_parts+0x1a2>
    1ece:	45 c0       	rjmp	.+138    	; 0x1f5a <_fpadd_parts+0x22c>
    1ed0:	99 23       	and	r25, r25
    1ed2:	39 f0       	breq	.+14     	; 0x1ee2 <_fpadd_parts+0x1b4>
    1ed4:	a8 01       	movw	r20, r16
    1ed6:	97 01       	movw	r18, r14
    1ed8:	2a 19       	sub	r18, r10
    1eda:	3b 09       	sbc	r19, r11
    1edc:	4c 09       	sbc	r20, r12
    1ede:	5d 09       	sbc	r21, r13
    1ee0:	06 c0       	rjmp	.+12     	; 0x1eee <_fpadd_parts+0x1c0>
    1ee2:	a6 01       	movw	r20, r12
    1ee4:	95 01       	movw	r18, r10
    1ee6:	2e 19       	sub	r18, r14
    1ee8:	3f 09       	sbc	r19, r15
    1eea:	40 0b       	sbc	r20, r16
    1eec:	51 0b       	sbc	r21, r17
    1eee:	57 fd       	sbrc	r21, 7
    1ef0:	08 c0       	rjmp	.+16     	; 0x1f02 <_fpadd_parts+0x1d4>
    1ef2:	11 82       	std	Z+1, r1	; 0x01
    1ef4:	33 82       	std	Z+3, r3	; 0x03
    1ef6:	22 82       	std	Z+2, r2	; 0x02
    1ef8:	24 83       	std	Z+4, r18	; 0x04
    1efa:	35 83       	std	Z+5, r19	; 0x05
    1efc:	46 83       	std	Z+6, r20	; 0x06
    1efe:	57 83       	std	Z+7, r21	; 0x07
    1f00:	1d c0       	rjmp	.+58     	; 0x1f3c <_fpadd_parts+0x20e>
    1f02:	81 e0       	ldi	r24, 0x01	; 1
    1f04:	81 83       	std	Z+1, r24	; 0x01
    1f06:	33 82       	std	Z+3, r3	; 0x03
    1f08:	22 82       	std	Z+2, r2	; 0x02
    1f0a:	88 27       	eor	r24, r24
    1f0c:	99 27       	eor	r25, r25
    1f0e:	dc 01       	movw	r26, r24
    1f10:	82 1b       	sub	r24, r18
    1f12:	93 0b       	sbc	r25, r19
    1f14:	a4 0b       	sbc	r26, r20
    1f16:	b5 0b       	sbc	r27, r21
    1f18:	84 83       	std	Z+4, r24	; 0x04
    1f1a:	95 83       	std	Z+5, r25	; 0x05
    1f1c:	a6 83       	std	Z+6, r26	; 0x06
    1f1e:	b7 83       	std	Z+7, r27	; 0x07
    1f20:	0d c0       	rjmp	.+26     	; 0x1f3c <_fpadd_parts+0x20e>
    1f22:	22 0f       	add	r18, r18
    1f24:	33 1f       	adc	r19, r19
    1f26:	44 1f       	adc	r20, r20
    1f28:	55 1f       	adc	r21, r21
    1f2a:	24 83       	std	Z+4, r18	; 0x04
    1f2c:	35 83       	std	Z+5, r19	; 0x05
    1f2e:	46 83       	std	Z+6, r20	; 0x06
    1f30:	57 83       	std	Z+7, r21	; 0x07
    1f32:	82 81       	ldd	r24, Z+2	; 0x02
    1f34:	93 81       	ldd	r25, Z+3	; 0x03
    1f36:	01 97       	sbiw	r24, 0x01	; 1
    1f38:	93 83       	std	Z+3, r25	; 0x03
    1f3a:	82 83       	std	Z+2, r24	; 0x02
    1f3c:	24 81       	ldd	r18, Z+4	; 0x04
    1f3e:	35 81       	ldd	r19, Z+5	; 0x05
    1f40:	46 81       	ldd	r20, Z+6	; 0x06
    1f42:	57 81       	ldd	r21, Z+7	; 0x07
    1f44:	da 01       	movw	r26, r20
    1f46:	c9 01       	movw	r24, r18
    1f48:	01 97       	sbiw	r24, 0x01	; 1
    1f4a:	a1 09       	sbc	r26, r1
    1f4c:	b1 09       	sbc	r27, r1
    1f4e:	8f 5f       	subi	r24, 0xFF	; 255
    1f50:	9f 4f       	sbci	r25, 0xFF	; 255
    1f52:	af 4f       	sbci	r26, 0xFF	; 255
    1f54:	bf 43       	sbci	r27, 0x3F	; 63
    1f56:	28 f3       	brcs	.-54     	; 0x1f22 <_fpadd_parts+0x1f4>
    1f58:	0b c0       	rjmp	.+22     	; 0x1f70 <_fpadd_parts+0x242>
    1f5a:	91 83       	std	Z+1, r25	; 0x01
    1f5c:	33 82       	std	Z+3, r3	; 0x03
    1f5e:	22 82       	std	Z+2, r2	; 0x02
    1f60:	ea 0c       	add	r14, r10
    1f62:	fb 1c       	adc	r15, r11
    1f64:	0c 1d       	adc	r16, r12
    1f66:	1d 1d       	adc	r17, r13
    1f68:	e4 82       	std	Z+4, r14	; 0x04
    1f6a:	f5 82       	std	Z+5, r15	; 0x05
    1f6c:	06 83       	std	Z+6, r16	; 0x06
    1f6e:	17 83       	std	Z+7, r17	; 0x07
    1f70:	83 e0       	ldi	r24, 0x03	; 3
    1f72:	80 83       	st	Z, r24
    1f74:	24 81       	ldd	r18, Z+4	; 0x04
    1f76:	35 81       	ldd	r19, Z+5	; 0x05
    1f78:	46 81       	ldd	r20, Z+6	; 0x06
    1f7a:	57 81       	ldd	r21, Z+7	; 0x07
    1f7c:	57 ff       	sbrs	r21, 7
    1f7e:	1a c0       	rjmp	.+52     	; 0x1fb4 <_fpadd_parts+0x286>
    1f80:	c9 01       	movw	r24, r18
    1f82:	aa 27       	eor	r26, r26
    1f84:	97 fd       	sbrc	r25, 7
    1f86:	a0 95       	com	r26
    1f88:	ba 2f       	mov	r27, r26
    1f8a:	81 70       	andi	r24, 0x01	; 1
    1f8c:	90 70       	andi	r25, 0x00	; 0
    1f8e:	a0 70       	andi	r26, 0x00	; 0
    1f90:	b0 70       	andi	r27, 0x00	; 0
    1f92:	56 95       	lsr	r21
    1f94:	47 95       	ror	r20
    1f96:	37 95       	ror	r19
    1f98:	27 95       	ror	r18
    1f9a:	82 2b       	or	r24, r18
    1f9c:	93 2b       	or	r25, r19
    1f9e:	a4 2b       	or	r26, r20
    1fa0:	b5 2b       	or	r27, r21
    1fa2:	84 83       	std	Z+4, r24	; 0x04
    1fa4:	95 83       	std	Z+5, r25	; 0x05
    1fa6:	a6 83       	std	Z+6, r26	; 0x06
    1fa8:	b7 83       	std	Z+7, r27	; 0x07
    1faa:	82 81       	ldd	r24, Z+2	; 0x02
    1fac:	93 81       	ldd	r25, Z+3	; 0x03
    1fae:	01 96       	adiw	r24, 0x01	; 1
    1fb0:	93 83       	std	Z+3, r25	; 0x03
    1fb2:	82 83       	std	Z+2, r24	; 0x02
    1fb4:	df 01       	movw	r26, r30
    1fb6:	01 c0       	rjmp	.+2      	; 0x1fba <_fpadd_parts+0x28c>
    1fb8:	d2 01       	movw	r26, r4
    1fba:	cd 01       	movw	r24, r26
    1fbc:	cd b7       	in	r28, 0x3d	; 61
    1fbe:	de b7       	in	r29, 0x3e	; 62
    1fc0:	e2 e1       	ldi	r30, 0x12	; 18
    1fc2:	0c 94 3b 16 	jmp	0x2c76	; 0x2c76 <__epilogue_restores__>

00001fc6 <__subsf3>:
    1fc6:	a0 e2       	ldi	r26, 0x20	; 32
    1fc8:	b0 e0       	ldi	r27, 0x00	; 0
    1fca:	e9 ee       	ldi	r30, 0xE9	; 233
    1fcc:	ff e0       	ldi	r31, 0x0F	; 15
    1fce:	0c 94 2b 16 	jmp	0x2c56	; 0x2c56 <__prologue_saves__+0x18>
    1fd2:	69 83       	std	Y+1, r22	; 0x01
    1fd4:	7a 83       	std	Y+2, r23	; 0x02
    1fd6:	8b 83       	std	Y+3, r24	; 0x03
    1fd8:	9c 83       	std	Y+4, r25	; 0x04
    1fda:	2d 83       	std	Y+5, r18	; 0x05
    1fdc:	3e 83       	std	Y+6, r19	; 0x06
    1fde:	4f 83       	std	Y+7, r20	; 0x07
    1fe0:	58 87       	std	Y+8, r21	; 0x08
    1fe2:	e9 e0       	ldi	r30, 0x09	; 9
    1fe4:	ee 2e       	mov	r14, r30
    1fe6:	f1 2c       	mov	r15, r1
    1fe8:	ec 0e       	add	r14, r28
    1fea:	fd 1e       	adc	r15, r29
    1fec:	ce 01       	movw	r24, r28
    1fee:	01 96       	adiw	r24, 0x01	; 1
    1ff0:	b7 01       	movw	r22, r14
    1ff2:	0e 94 c6 14 	call	0x298c	; 0x298c <__unpack_f>
    1ff6:	8e 01       	movw	r16, r28
    1ff8:	0f 5e       	subi	r16, 0xEF	; 239
    1ffa:	1f 4f       	sbci	r17, 0xFF	; 255
    1ffc:	ce 01       	movw	r24, r28
    1ffe:	05 96       	adiw	r24, 0x05	; 5
    2000:	b8 01       	movw	r22, r16
    2002:	0e 94 c6 14 	call	0x298c	; 0x298c <__unpack_f>
    2006:	8a 89       	ldd	r24, Y+18	; 0x12
    2008:	91 e0       	ldi	r25, 0x01	; 1
    200a:	89 27       	eor	r24, r25
    200c:	8a 8b       	std	Y+18, r24	; 0x12
    200e:	c7 01       	movw	r24, r14
    2010:	b8 01       	movw	r22, r16
    2012:	ae 01       	movw	r20, r28
    2014:	47 5e       	subi	r20, 0xE7	; 231
    2016:	5f 4f       	sbci	r21, 0xFF	; 255
    2018:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <_fpadd_parts>
    201c:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <__pack_f>
    2020:	a0 96       	adiw	r28, 0x20	; 32
    2022:	e6 e0       	ldi	r30, 0x06	; 6
    2024:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__epilogue_restores__+0x18>

00002028 <__addsf3>:
    2028:	a0 e2       	ldi	r26, 0x20	; 32
    202a:	b0 e0       	ldi	r27, 0x00	; 0
    202c:	ea e1       	ldi	r30, 0x1A	; 26
    202e:	f0 e1       	ldi	r31, 0x10	; 16
    2030:	0c 94 2b 16 	jmp	0x2c56	; 0x2c56 <__prologue_saves__+0x18>
    2034:	69 83       	std	Y+1, r22	; 0x01
    2036:	7a 83       	std	Y+2, r23	; 0x02
    2038:	8b 83       	std	Y+3, r24	; 0x03
    203a:	9c 83       	std	Y+4, r25	; 0x04
    203c:	2d 83       	std	Y+5, r18	; 0x05
    203e:	3e 83       	std	Y+6, r19	; 0x06
    2040:	4f 83       	std	Y+7, r20	; 0x07
    2042:	58 87       	std	Y+8, r21	; 0x08
    2044:	f9 e0       	ldi	r31, 0x09	; 9
    2046:	ef 2e       	mov	r14, r31
    2048:	f1 2c       	mov	r15, r1
    204a:	ec 0e       	add	r14, r28
    204c:	fd 1e       	adc	r15, r29
    204e:	ce 01       	movw	r24, r28
    2050:	01 96       	adiw	r24, 0x01	; 1
    2052:	b7 01       	movw	r22, r14
    2054:	0e 94 c6 14 	call	0x298c	; 0x298c <__unpack_f>
    2058:	8e 01       	movw	r16, r28
    205a:	0f 5e       	subi	r16, 0xEF	; 239
    205c:	1f 4f       	sbci	r17, 0xFF	; 255
    205e:	ce 01       	movw	r24, r28
    2060:	05 96       	adiw	r24, 0x05	; 5
    2062:	b8 01       	movw	r22, r16
    2064:	0e 94 c6 14 	call	0x298c	; 0x298c <__unpack_f>
    2068:	c7 01       	movw	r24, r14
    206a:	b8 01       	movw	r22, r16
    206c:	ae 01       	movw	r20, r28
    206e:	47 5e       	subi	r20, 0xE7	; 231
    2070:	5f 4f       	sbci	r21, 0xFF	; 255
    2072:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <_fpadd_parts>
    2076:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <__pack_f>
    207a:	a0 96       	adiw	r28, 0x20	; 32
    207c:	e6 e0       	ldi	r30, 0x06	; 6
    207e:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__epilogue_restores__+0x18>

00002082 <__mulsf3>:
    2082:	a0 e2       	ldi	r26, 0x20	; 32
    2084:	b0 e0       	ldi	r27, 0x00	; 0
    2086:	e7 e4       	ldi	r30, 0x47	; 71
    2088:	f0 e1       	ldi	r31, 0x10	; 16
    208a:	0c 94 1f 16 	jmp	0x2c3e	; 0x2c3e <__prologue_saves__>
    208e:	69 83       	std	Y+1, r22	; 0x01
    2090:	7a 83       	std	Y+2, r23	; 0x02
    2092:	8b 83       	std	Y+3, r24	; 0x03
    2094:	9c 83       	std	Y+4, r25	; 0x04
    2096:	2d 83       	std	Y+5, r18	; 0x05
    2098:	3e 83       	std	Y+6, r19	; 0x06
    209a:	4f 83       	std	Y+7, r20	; 0x07
    209c:	58 87       	std	Y+8, r21	; 0x08
    209e:	ce 01       	movw	r24, r28
    20a0:	01 96       	adiw	r24, 0x01	; 1
    20a2:	be 01       	movw	r22, r28
    20a4:	67 5f       	subi	r22, 0xF7	; 247
    20a6:	7f 4f       	sbci	r23, 0xFF	; 255
    20a8:	0e 94 c6 14 	call	0x298c	; 0x298c <__unpack_f>
    20ac:	ce 01       	movw	r24, r28
    20ae:	05 96       	adiw	r24, 0x05	; 5
    20b0:	be 01       	movw	r22, r28
    20b2:	6f 5e       	subi	r22, 0xEF	; 239
    20b4:	7f 4f       	sbci	r23, 0xFF	; 255
    20b6:	0e 94 c6 14 	call	0x298c	; 0x298c <__unpack_f>
    20ba:	99 85       	ldd	r25, Y+9	; 0x09
    20bc:	92 30       	cpi	r25, 0x02	; 2
    20be:	88 f0       	brcs	.+34     	; 0x20e2 <__mulsf3+0x60>
    20c0:	89 89       	ldd	r24, Y+17	; 0x11
    20c2:	82 30       	cpi	r24, 0x02	; 2
    20c4:	c8 f0       	brcs	.+50     	; 0x20f8 <__mulsf3+0x76>
    20c6:	94 30       	cpi	r25, 0x04	; 4
    20c8:	19 f4       	brne	.+6      	; 0x20d0 <__mulsf3+0x4e>
    20ca:	82 30       	cpi	r24, 0x02	; 2
    20cc:	51 f4       	brne	.+20     	; 0x20e2 <__mulsf3+0x60>
    20ce:	04 c0       	rjmp	.+8      	; 0x20d8 <__mulsf3+0x56>
    20d0:	84 30       	cpi	r24, 0x04	; 4
    20d2:	29 f4       	brne	.+10     	; 0x20de <__mulsf3+0x5c>
    20d4:	92 30       	cpi	r25, 0x02	; 2
    20d6:	81 f4       	brne	.+32     	; 0x20f8 <__mulsf3+0x76>
    20d8:	8f e4       	ldi	r24, 0x4F	; 79
    20da:	92 e0       	ldi	r25, 0x02	; 2
    20dc:	c6 c0       	rjmp	.+396    	; 0x226a <__mulsf3+0x1e8>
    20de:	92 30       	cpi	r25, 0x02	; 2
    20e0:	49 f4       	brne	.+18     	; 0x20f4 <__mulsf3+0x72>
    20e2:	20 e0       	ldi	r18, 0x00	; 0
    20e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20e6:	8a 89       	ldd	r24, Y+18	; 0x12
    20e8:	98 13       	cpse	r25, r24
    20ea:	21 e0       	ldi	r18, 0x01	; 1
    20ec:	2a 87       	std	Y+10, r18	; 0x0a
    20ee:	ce 01       	movw	r24, r28
    20f0:	09 96       	adiw	r24, 0x09	; 9
    20f2:	bb c0       	rjmp	.+374    	; 0x226a <__mulsf3+0x1e8>
    20f4:	82 30       	cpi	r24, 0x02	; 2
    20f6:	49 f4       	brne	.+18     	; 0x210a <__mulsf3+0x88>
    20f8:	20 e0       	ldi	r18, 0x00	; 0
    20fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    20fc:	8a 89       	ldd	r24, Y+18	; 0x12
    20fe:	98 13       	cpse	r25, r24
    2100:	21 e0       	ldi	r18, 0x01	; 1
    2102:	2a 8b       	std	Y+18, r18	; 0x12
    2104:	ce 01       	movw	r24, r28
    2106:	41 96       	adiw	r24, 0x11	; 17
    2108:	b0 c0       	rjmp	.+352    	; 0x226a <__mulsf3+0x1e8>
    210a:	2d 84       	ldd	r2, Y+13	; 0x0d
    210c:	3e 84       	ldd	r3, Y+14	; 0x0e
    210e:	4f 84       	ldd	r4, Y+15	; 0x0f
    2110:	58 88       	ldd	r5, Y+16	; 0x10
    2112:	6d 88       	ldd	r6, Y+21	; 0x15
    2114:	7e 88       	ldd	r7, Y+22	; 0x16
    2116:	8f 88       	ldd	r8, Y+23	; 0x17
    2118:	98 8c       	ldd	r9, Y+24	; 0x18
    211a:	ee 24       	eor	r14, r14
    211c:	ff 24       	eor	r15, r15
    211e:	87 01       	movw	r16, r14
    2120:	aa 24       	eor	r10, r10
    2122:	bb 24       	eor	r11, r11
    2124:	65 01       	movw	r12, r10
    2126:	40 e0       	ldi	r20, 0x00	; 0
    2128:	50 e0       	ldi	r21, 0x00	; 0
    212a:	60 e0       	ldi	r22, 0x00	; 0
    212c:	70 e0       	ldi	r23, 0x00	; 0
    212e:	e0 e0       	ldi	r30, 0x00	; 0
    2130:	f0 e0       	ldi	r31, 0x00	; 0
    2132:	c1 01       	movw	r24, r2
    2134:	81 70       	andi	r24, 0x01	; 1
    2136:	90 70       	andi	r25, 0x00	; 0
    2138:	89 2b       	or	r24, r25
    213a:	e9 f0       	breq	.+58     	; 0x2176 <__mulsf3+0xf4>
    213c:	e6 0c       	add	r14, r6
    213e:	f7 1c       	adc	r15, r7
    2140:	08 1d       	adc	r16, r8
    2142:	19 1d       	adc	r17, r9
    2144:	9a 01       	movw	r18, r20
    2146:	ab 01       	movw	r20, r22
    2148:	2a 0d       	add	r18, r10
    214a:	3b 1d       	adc	r19, r11
    214c:	4c 1d       	adc	r20, r12
    214e:	5d 1d       	adc	r21, r13
    2150:	80 e0       	ldi	r24, 0x00	; 0
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	a0 e0       	ldi	r26, 0x00	; 0
    2156:	b0 e0       	ldi	r27, 0x00	; 0
    2158:	e6 14       	cp	r14, r6
    215a:	f7 04       	cpc	r15, r7
    215c:	08 05       	cpc	r16, r8
    215e:	19 05       	cpc	r17, r9
    2160:	20 f4       	brcc	.+8      	; 0x216a <__mulsf3+0xe8>
    2162:	81 e0       	ldi	r24, 0x01	; 1
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	a0 e0       	ldi	r26, 0x00	; 0
    2168:	b0 e0       	ldi	r27, 0x00	; 0
    216a:	ba 01       	movw	r22, r20
    216c:	a9 01       	movw	r20, r18
    216e:	48 0f       	add	r20, r24
    2170:	59 1f       	adc	r21, r25
    2172:	6a 1f       	adc	r22, r26
    2174:	7b 1f       	adc	r23, r27
    2176:	aa 0c       	add	r10, r10
    2178:	bb 1c       	adc	r11, r11
    217a:	cc 1c       	adc	r12, r12
    217c:	dd 1c       	adc	r13, r13
    217e:	97 fe       	sbrs	r9, 7
    2180:	08 c0       	rjmp	.+16     	; 0x2192 <__mulsf3+0x110>
    2182:	81 e0       	ldi	r24, 0x01	; 1
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	a0 e0       	ldi	r26, 0x00	; 0
    2188:	b0 e0       	ldi	r27, 0x00	; 0
    218a:	a8 2a       	or	r10, r24
    218c:	b9 2a       	or	r11, r25
    218e:	ca 2a       	or	r12, r26
    2190:	db 2a       	or	r13, r27
    2192:	31 96       	adiw	r30, 0x01	; 1
    2194:	e0 32       	cpi	r30, 0x20	; 32
    2196:	f1 05       	cpc	r31, r1
    2198:	49 f0       	breq	.+18     	; 0x21ac <__mulsf3+0x12a>
    219a:	66 0c       	add	r6, r6
    219c:	77 1c       	adc	r7, r7
    219e:	88 1c       	adc	r8, r8
    21a0:	99 1c       	adc	r9, r9
    21a2:	56 94       	lsr	r5
    21a4:	47 94       	ror	r4
    21a6:	37 94       	ror	r3
    21a8:	27 94       	ror	r2
    21aa:	c3 cf       	rjmp	.-122    	; 0x2132 <__mulsf3+0xb0>
    21ac:	fa 85       	ldd	r31, Y+10	; 0x0a
    21ae:	ea 89       	ldd	r30, Y+18	; 0x12
    21b0:	2b 89       	ldd	r18, Y+19	; 0x13
    21b2:	3c 89       	ldd	r19, Y+20	; 0x14
    21b4:	8b 85       	ldd	r24, Y+11	; 0x0b
    21b6:	9c 85       	ldd	r25, Y+12	; 0x0c
    21b8:	28 0f       	add	r18, r24
    21ba:	39 1f       	adc	r19, r25
    21bc:	2e 5f       	subi	r18, 0xFE	; 254
    21be:	3f 4f       	sbci	r19, 0xFF	; 255
    21c0:	17 c0       	rjmp	.+46     	; 0x21f0 <__mulsf3+0x16e>
    21c2:	ca 01       	movw	r24, r20
    21c4:	81 70       	andi	r24, 0x01	; 1
    21c6:	90 70       	andi	r25, 0x00	; 0
    21c8:	89 2b       	or	r24, r25
    21ca:	61 f0       	breq	.+24     	; 0x21e4 <__mulsf3+0x162>
    21cc:	16 95       	lsr	r17
    21ce:	07 95       	ror	r16
    21d0:	f7 94       	ror	r15
    21d2:	e7 94       	ror	r14
    21d4:	80 e0       	ldi	r24, 0x00	; 0
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	a0 e0       	ldi	r26, 0x00	; 0
    21da:	b0 e8       	ldi	r27, 0x80	; 128
    21dc:	e8 2a       	or	r14, r24
    21de:	f9 2a       	or	r15, r25
    21e0:	0a 2b       	or	r16, r26
    21e2:	1b 2b       	or	r17, r27
    21e4:	76 95       	lsr	r23
    21e6:	67 95       	ror	r22
    21e8:	57 95       	ror	r21
    21ea:	47 95       	ror	r20
    21ec:	2f 5f       	subi	r18, 0xFF	; 255
    21ee:	3f 4f       	sbci	r19, 0xFF	; 255
    21f0:	77 fd       	sbrc	r23, 7
    21f2:	e7 cf       	rjmp	.-50     	; 0x21c2 <__mulsf3+0x140>
    21f4:	0c c0       	rjmp	.+24     	; 0x220e <__mulsf3+0x18c>
    21f6:	44 0f       	add	r20, r20
    21f8:	55 1f       	adc	r21, r21
    21fa:	66 1f       	adc	r22, r22
    21fc:	77 1f       	adc	r23, r23
    21fe:	17 fd       	sbrc	r17, 7
    2200:	41 60       	ori	r20, 0x01	; 1
    2202:	ee 0c       	add	r14, r14
    2204:	ff 1c       	adc	r15, r15
    2206:	00 1f       	adc	r16, r16
    2208:	11 1f       	adc	r17, r17
    220a:	21 50       	subi	r18, 0x01	; 1
    220c:	30 40       	sbci	r19, 0x00	; 0
    220e:	40 30       	cpi	r20, 0x00	; 0
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	59 07       	cpc	r21, r25
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	69 07       	cpc	r22, r25
    2218:	90 e4       	ldi	r25, 0x40	; 64
    221a:	79 07       	cpc	r23, r25
    221c:	60 f3       	brcs	.-40     	; 0x21f6 <__mulsf3+0x174>
    221e:	2b 8f       	std	Y+27, r18	; 0x1b
    2220:	3c 8f       	std	Y+28, r19	; 0x1c
    2222:	db 01       	movw	r26, r22
    2224:	ca 01       	movw	r24, r20
    2226:	8f 77       	andi	r24, 0x7F	; 127
    2228:	90 70       	andi	r25, 0x00	; 0
    222a:	a0 70       	andi	r26, 0x00	; 0
    222c:	b0 70       	andi	r27, 0x00	; 0
    222e:	80 34       	cpi	r24, 0x40	; 64
    2230:	91 05       	cpc	r25, r1
    2232:	a1 05       	cpc	r26, r1
    2234:	b1 05       	cpc	r27, r1
    2236:	61 f4       	brne	.+24     	; 0x2250 <__mulsf3+0x1ce>
    2238:	47 fd       	sbrc	r20, 7
    223a:	0a c0       	rjmp	.+20     	; 0x2250 <__mulsf3+0x1ce>
    223c:	e1 14       	cp	r14, r1
    223e:	f1 04       	cpc	r15, r1
    2240:	01 05       	cpc	r16, r1
    2242:	11 05       	cpc	r17, r1
    2244:	29 f0       	breq	.+10     	; 0x2250 <__mulsf3+0x1ce>
    2246:	40 5c       	subi	r20, 0xC0	; 192
    2248:	5f 4f       	sbci	r21, 0xFF	; 255
    224a:	6f 4f       	sbci	r22, 0xFF	; 255
    224c:	7f 4f       	sbci	r23, 0xFF	; 255
    224e:	40 78       	andi	r20, 0x80	; 128
    2250:	1a 8e       	std	Y+26, r1	; 0x1a
    2252:	fe 17       	cp	r31, r30
    2254:	11 f0       	breq	.+4      	; 0x225a <__mulsf3+0x1d8>
    2256:	81 e0       	ldi	r24, 0x01	; 1
    2258:	8a 8f       	std	Y+26, r24	; 0x1a
    225a:	4d 8f       	std	Y+29, r20	; 0x1d
    225c:	5e 8f       	std	Y+30, r21	; 0x1e
    225e:	6f 8f       	std	Y+31, r22	; 0x1f
    2260:	78 a3       	std	Y+32, r23	; 0x20
    2262:	83 e0       	ldi	r24, 0x03	; 3
    2264:	89 8f       	std	Y+25, r24	; 0x19
    2266:	ce 01       	movw	r24, r28
    2268:	49 96       	adiw	r24, 0x19	; 25
    226a:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <__pack_f>
    226e:	a0 96       	adiw	r28, 0x20	; 32
    2270:	e2 e1       	ldi	r30, 0x12	; 18
    2272:	0c 94 3b 16 	jmp	0x2c76	; 0x2c76 <__epilogue_restores__>

00002276 <__divsf3>:
    2276:	a8 e1       	ldi	r26, 0x18	; 24
    2278:	b0 e0       	ldi	r27, 0x00	; 0
    227a:	e1 e4       	ldi	r30, 0x41	; 65
    227c:	f1 e1       	ldi	r31, 0x11	; 17
    227e:	0c 94 27 16 	jmp	0x2c4e	; 0x2c4e <__prologue_saves__+0x10>
    2282:	69 83       	std	Y+1, r22	; 0x01
    2284:	7a 83       	std	Y+2, r23	; 0x02
    2286:	8b 83       	std	Y+3, r24	; 0x03
    2288:	9c 83       	std	Y+4, r25	; 0x04
    228a:	2d 83       	std	Y+5, r18	; 0x05
    228c:	3e 83       	std	Y+6, r19	; 0x06
    228e:	4f 83       	std	Y+7, r20	; 0x07
    2290:	58 87       	std	Y+8, r21	; 0x08
    2292:	b9 e0       	ldi	r27, 0x09	; 9
    2294:	eb 2e       	mov	r14, r27
    2296:	f1 2c       	mov	r15, r1
    2298:	ec 0e       	add	r14, r28
    229a:	fd 1e       	adc	r15, r29
    229c:	ce 01       	movw	r24, r28
    229e:	01 96       	adiw	r24, 0x01	; 1
    22a0:	b7 01       	movw	r22, r14
    22a2:	0e 94 c6 14 	call	0x298c	; 0x298c <__unpack_f>
    22a6:	8e 01       	movw	r16, r28
    22a8:	0f 5e       	subi	r16, 0xEF	; 239
    22aa:	1f 4f       	sbci	r17, 0xFF	; 255
    22ac:	ce 01       	movw	r24, r28
    22ae:	05 96       	adiw	r24, 0x05	; 5
    22b0:	b8 01       	movw	r22, r16
    22b2:	0e 94 c6 14 	call	0x298c	; 0x298c <__unpack_f>
    22b6:	29 85       	ldd	r18, Y+9	; 0x09
    22b8:	22 30       	cpi	r18, 0x02	; 2
    22ba:	08 f4       	brcc	.+2      	; 0x22be <__divsf3+0x48>
    22bc:	7e c0       	rjmp	.+252    	; 0x23ba <__divsf3+0x144>
    22be:	39 89       	ldd	r19, Y+17	; 0x11
    22c0:	32 30       	cpi	r19, 0x02	; 2
    22c2:	10 f4       	brcc	.+4      	; 0x22c8 <__divsf3+0x52>
    22c4:	b8 01       	movw	r22, r16
    22c6:	7c c0       	rjmp	.+248    	; 0x23c0 <__divsf3+0x14a>
    22c8:	8a 85       	ldd	r24, Y+10	; 0x0a
    22ca:	9a 89       	ldd	r25, Y+18	; 0x12
    22cc:	89 27       	eor	r24, r25
    22ce:	8a 87       	std	Y+10, r24	; 0x0a
    22d0:	24 30       	cpi	r18, 0x04	; 4
    22d2:	11 f0       	breq	.+4      	; 0x22d8 <__divsf3+0x62>
    22d4:	22 30       	cpi	r18, 0x02	; 2
    22d6:	31 f4       	brne	.+12     	; 0x22e4 <__divsf3+0x6e>
    22d8:	23 17       	cp	r18, r19
    22da:	09 f0       	breq	.+2      	; 0x22de <__divsf3+0x68>
    22dc:	6e c0       	rjmp	.+220    	; 0x23ba <__divsf3+0x144>
    22de:	6f e4       	ldi	r22, 0x4F	; 79
    22e0:	72 e0       	ldi	r23, 0x02	; 2
    22e2:	6e c0       	rjmp	.+220    	; 0x23c0 <__divsf3+0x14a>
    22e4:	34 30       	cpi	r19, 0x04	; 4
    22e6:	39 f4       	brne	.+14     	; 0x22f6 <__divsf3+0x80>
    22e8:	1d 86       	std	Y+13, r1	; 0x0d
    22ea:	1e 86       	std	Y+14, r1	; 0x0e
    22ec:	1f 86       	std	Y+15, r1	; 0x0f
    22ee:	18 8a       	std	Y+16, r1	; 0x10
    22f0:	1c 86       	std	Y+12, r1	; 0x0c
    22f2:	1b 86       	std	Y+11, r1	; 0x0b
    22f4:	04 c0       	rjmp	.+8      	; 0x22fe <__divsf3+0x88>
    22f6:	32 30       	cpi	r19, 0x02	; 2
    22f8:	21 f4       	brne	.+8      	; 0x2302 <__divsf3+0x8c>
    22fa:	84 e0       	ldi	r24, 0x04	; 4
    22fc:	89 87       	std	Y+9, r24	; 0x09
    22fe:	b7 01       	movw	r22, r14
    2300:	5f c0       	rjmp	.+190    	; 0x23c0 <__divsf3+0x14a>
    2302:	2b 85       	ldd	r18, Y+11	; 0x0b
    2304:	3c 85       	ldd	r19, Y+12	; 0x0c
    2306:	8b 89       	ldd	r24, Y+19	; 0x13
    2308:	9c 89       	ldd	r25, Y+20	; 0x14
    230a:	28 1b       	sub	r18, r24
    230c:	39 0b       	sbc	r19, r25
    230e:	3c 87       	std	Y+12, r19	; 0x0c
    2310:	2b 87       	std	Y+11, r18	; 0x0b
    2312:	ed 84       	ldd	r14, Y+13	; 0x0d
    2314:	fe 84       	ldd	r15, Y+14	; 0x0e
    2316:	0f 85       	ldd	r16, Y+15	; 0x0f
    2318:	18 89       	ldd	r17, Y+16	; 0x10
    231a:	ad 88       	ldd	r10, Y+21	; 0x15
    231c:	be 88       	ldd	r11, Y+22	; 0x16
    231e:	cf 88       	ldd	r12, Y+23	; 0x17
    2320:	d8 8c       	ldd	r13, Y+24	; 0x18
    2322:	ea 14       	cp	r14, r10
    2324:	fb 04       	cpc	r15, r11
    2326:	0c 05       	cpc	r16, r12
    2328:	1d 05       	cpc	r17, r13
    232a:	40 f4       	brcc	.+16     	; 0x233c <__divsf3+0xc6>
    232c:	ee 0c       	add	r14, r14
    232e:	ff 1c       	adc	r15, r15
    2330:	00 1f       	adc	r16, r16
    2332:	11 1f       	adc	r17, r17
    2334:	21 50       	subi	r18, 0x01	; 1
    2336:	30 40       	sbci	r19, 0x00	; 0
    2338:	3c 87       	std	Y+12, r19	; 0x0c
    233a:	2b 87       	std	Y+11, r18	; 0x0b
    233c:	20 e0       	ldi	r18, 0x00	; 0
    233e:	30 e0       	ldi	r19, 0x00	; 0
    2340:	40 e0       	ldi	r20, 0x00	; 0
    2342:	50 e0       	ldi	r21, 0x00	; 0
    2344:	80 e0       	ldi	r24, 0x00	; 0
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	a0 e0       	ldi	r26, 0x00	; 0
    234a:	b0 e4       	ldi	r27, 0x40	; 64
    234c:	60 e0       	ldi	r22, 0x00	; 0
    234e:	70 e0       	ldi	r23, 0x00	; 0
    2350:	ea 14       	cp	r14, r10
    2352:	fb 04       	cpc	r15, r11
    2354:	0c 05       	cpc	r16, r12
    2356:	1d 05       	cpc	r17, r13
    2358:	40 f0       	brcs	.+16     	; 0x236a <__divsf3+0xf4>
    235a:	28 2b       	or	r18, r24
    235c:	39 2b       	or	r19, r25
    235e:	4a 2b       	or	r20, r26
    2360:	5b 2b       	or	r21, r27
    2362:	ea 18       	sub	r14, r10
    2364:	fb 08       	sbc	r15, r11
    2366:	0c 09       	sbc	r16, r12
    2368:	1d 09       	sbc	r17, r13
    236a:	b6 95       	lsr	r27
    236c:	a7 95       	ror	r26
    236e:	97 95       	ror	r25
    2370:	87 95       	ror	r24
    2372:	ee 0c       	add	r14, r14
    2374:	ff 1c       	adc	r15, r15
    2376:	00 1f       	adc	r16, r16
    2378:	11 1f       	adc	r17, r17
    237a:	6f 5f       	subi	r22, 0xFF	; 255
    237c:	7f 4f       	sbci	r23, 0xFF	; 255
    237e:	6f 31       	cpi	r22, 0x1F	; 31
    2380:	71 05       	cpc	r23, r1
    2382:	31 f7       	brne	.-52     	; 0x2350 <__divsf3+0xda>
    2384:	da 01       	movw	r26, r20
    2386:	c9 01       	movw	r24, r18
    2388:	8f 77       	andi	r24, 0x7F	; 127
    238a:	90 70       	andi	r25, 0x00	; 0
    238c:	a0 70       	andi	r26, 0x00	; 0
    238e:	b0 70       	andi	r27, 0x00	; 0
    2390:	80 34       	cpi	r24, 0x40	; 64
    2392:	91 05       	cpc	r25, r1
    2394:	a1 05       	cpc	r26, r1
    2396:	b1 05       	cpc	r27, r1
    2398:	61 f4       	brne	.+24     	; 0x23b2 <__divsf3+0x13c>
    239a:	27 fd       	sbrc	r18, 7
    239c:	0a c0       	rjmp	.+20     	; 0x23b2 <__divsf3+0x13c>
    239e:	e1 14       	cp	r14, r1
    23a0:	f1 04       	cpc	r15, r1
    23a2:	01 05       	cpc	r16, r1
    23a4:	11 05       	cpc	r17, r1
    23a6:	29 f0       	breq	.+10     	; 0x23b2 <__divsf3+0x13c>
    23a8:	20 5c       	subi	r18, 0xC0	; 192
    23aa:	3f 4f       	sbci	r19, 0xFF	; 255
    23ac:	4f 4f       	sbci	r20, 0xFF	; 255
    23ae:	5f 4f       	sbci	r21, 0xFF	; 255
    23b0:	20 78       	andi	r18, 0x80	; 128
    23b2:	2d 87       	std	Y+13, r18	; 0x0d
    23b4:	3e 87       	std	Y+14, r19	; 0x0e
    23b6:	4f 87       	std	Y+15, r20	; 0x0f
    23b8:	58 8b       	std	Y+16, r21	; 0x10
    23ba:	be 01       	movw	r22, r28
    23bc:	67 5f       	subi	r22, 0xF7	; 247
    23be:	7f 4f       	sbci	r23, 0xFF	; 255
    23c0:	cb 01       	movw	r24, r22
    23c2:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <__pack_f>
    23c6:	68 96       	adiw	r28, 0x18	; 24
    23c8:	ea e0       	ldi	r30, 0x0A	; 10
    23ca:	0c 94 43 16 	jmp	0x2c86	; 0x2c86 <__epilogue_restores__+0x10>

000023ce <__gtsf2>:
    23ce:	a8 e1       	ldi	r26, 0x18	; 24
    23d0:	b0 e0       	ldi	r27, 0x00	; 0
    23d2:	ed ee       	ldi	r30, 0xED	; 237
    23d4:	f1 e1       	ldi	r31, 0x11	; 17
    23d6:	0c 94 2b 16 	jmp	0x2c56	; 0x2c56 <__prologue_saves__+0x18>
    23da:	69 83       	std	Y+1, r22	; 0x01
    23dc:	7a 83       	std	Y+2, r23	; 0x02
    23de:	8b 83       	std	Y+3, r24	; 0x03
    23e0:	9c 83       	std	Y+4, r25	; 0x04
    23e2:	2d 83       	std	Y+5, r18	; 0x05
    23e4:	3e 83       	std	Y+6, r19	; 0x06
    23e6:	4f 83       	std	Y+7, r20	; 0x07
    23e8:	58 87       	std	Y+8, r21	; 0x08
    23ea:	89 e0       	ldi	r24, 0x09	; 9
    23ec:	e8 2e       	mov	r14, r24
    23ee:	f1 2c       	mov	r15, r1
    23f0:	ec 0e       	add	r14, r28
    23f2:	fd 1e       	adc	r15, r29
    23f4:	ce 01       	movw	r24, r28
    23f6:	01 96       	adiw	r24, 0x01	; 1
    23f8:	b7 01       	movw	r22, r14
    23fa:	0e 94 c6 14 	call	0x298c	; 0x298c <__unpack_f>
    23fe:	8e 01       	movw	r16, r28
    2400:	0f 5e       	subi	r16, 0xEF	; 239
    2402:	1f 4f       	sbci	r17, 0xFF	; 255
    2404:	ce 01       	movw	r24, r28
    2406:	05 96       	adiw	r24, 0x05	; 5
    2408:	b8 01       	movw	r22, r16
    240a:	0e 94 c6 14 	call	0x298c	; 0x298c <__unpack_f>
    240e:	89 85       	ldd	r24, Y+9	; 0x09
    2410:	82 30       	cpi	r24, 0x02	; 2
    2412:	40 f0       	brcs	.+16     	; 0x2424 <__gtsf2+0x56>
    2414:	89 89       	ldd	r24, Y+17	; 0x11
    2416:	82 30       	cpi	r24, 0x02	; 2
    2418:	28 f0       	brcs	.+10     	; 0x2424 <__gtsf2+0x56>
    241a:	c7 01       	movw	r24, r14
    241c:	b8 01       	movw	r22, r16
    241e:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <__fpcmp_parts_f>
    2422:	01 c0       	rjmp	.+2      	; 0x2426 <__gtsf2+0x58>
    2424:	8f ef       	ldi	r24, 0xFF	; 255
    2426:	68 96       	adiw	r28, 0x18	; 24
    2428:	e6 e0       	ldi	r30, 0x06	; 6
    242a:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__epilogue_restores__+0x18>

0000242e <__gesf2>:
    242e:	a8 e1       	ldi	r26, 0x18	; 24
    2430:	b0 e0       	ldi	r27, 0x00	; 0
    2432:	ed e1       	ldi	r30, 0x1D	; 29
    2434:	f2 e1       	ldi	r31, 0x12	; 18
    2436:	0c 94 2b 16 	jmp	0x2c56	; 0x2c56 <__prologue_saves__+0x18>
    243a:	69 83       	std	Y+1, r22	; 0x01
    243c:	7a 83       	std	Y+2, r23	; 0x02
    243e:	8b 83       	std	Y+3, r24	; 0x03
    2440:	9c 83       	std	Y+4, r25	; 0x04
    2442:	2d 83       	std	Y+5, r18	; 0x05
    2444:	3e 83       	std	Y+6, r19	; 0x06
    2446:	4f 83       	std	Y+7, r20	; 0x07
    2448:	58 87       	std	Y+8, r21	; 0x08
    244a:	89 e0       	ldi	r24, 0x09	; 9
    244c:	e8 2e       	mov	r14, r24
    244e:	f1 2c       	mov	r15, r1
    2450:	ec 0e       	add	r14, r28
    2452:	fd 1e       	adc	r15, r29
    2454:	ce 01       	movw	r24, r28
    2456:	01 96       	adiw	r24, 0x01	; 1
    2458:	b7 01       	movw	r22, r14
    245a:	0e 94 c6 14 	call	0x298c	; 0x298c <__unpack_f>
    245e:	8e 01       	movw	r16, r28
    2460:	0f 5e       	subi	r16, 0xEF	; 239
    2462:	1f 4f       	sbci	r17, 0xFF	; 255
    2464:	ce 01       	movw	r24, r28
    2466:	05 96       	adiw	r24, 0x05	; 5
    2468:	b8 01       	movw	r22, r16
    246a:	0e 94 c6 14 	call	0x298c	; 0x298c <__unpack_f>
    246e:	89 85       	ldd	r24, Y+9	; 0x09
    2470:	82 30       	cpi	r24, 0x02	; 2
    2472:	40 f0       	brcs	.+16     	; 0x2484 <__gesf2+0x56>
    2474:	89 89       	ldd	r24, Y+17	; 0x11
    2476:	82 30       	cpi	r24, 0x02	; 2
    2478:	28 f0       	brcs	.+10     	; 0x2484 <__gesf2+0x56>
    247a:	c7 01       	movw	r24, r14
    247c:	b8 01       	movw	r22, r16
    247e:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <__fpcmp_parts_f>
    2482:	01 c0       	rjmp	.+2      	; 0x2486 <__gesf2+0x58>
    2484:	8f ef       	ldi	r24, 0xFF	; 255
    2486:	68 96       	adiw	r28, 0x18	; 24
    2488:	e6 e0       	ldi	r30, 0x06	; 6
    248a:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__epilogue_restores__+0x18>

0000248e <__ltsf2>:
    248e:	a8 e1       	ldi	r26, 0x18	; 24
    2490:	b0 e0       	ldi	r27, 0x00	; 0
    2492:	ed e4       	ldi	r30, 0x4D	; 77
    2494:	f2 e1       	ldi	r31, 0x12	; 18
    2496:	0c 94 2b 16 	jmp	0x2c56	; 0x2c56 <__prologue_saves__+0x18>
    249a:	69 83       	std	Y+1, r22	; 0x01
    249c:	7a 83       	std	Y+2, r23	; 0x02
    249e:	8b 83       	std	Y+3, r24	; 0x03
    24a0:	9c 83       	std	Y+4, r25	; 0x04
    24a2:	2d 83       	std	Y+5, r18	; 0x05
    24a4:	3e 83       	std	Y+6, r19	; 0x06
    24a6:	4f 83       	std	Y+7, r20	; 0x07
    24a8:	58 87       	std	Y+8, r21	; 0x08
    24aa:	89 e0       	ldi	r24, 0x09	; 9
    24ac:	e8 2e       	mov	r14, r24
    24ae:	f1 2c       	mov	r15, r1
    24b0:	ec 0e       	add	r14, r28
    24b2:	fd 1e       	adc	r15, r29
    24b4:	ce 01       	movw	r24, r28
    24b6:	01 96       	adiw	r24, 0x01	; 1
    24b8:	b7 01       	movw	r22, r14
    24ba:	0e 94 c6 14 	call	0x298c	; 0x298c <__unpack_f>
    24be:	8e 01       	movw	r16, r28
    24c0:	0f 5e       	subi	r16, 0xEF	; 239
    24c2:	1f 4f       	sbci	r17, 0xFF	; 255
    24c4:	ce 01       	movw	r24, r28
    24c6:	05 96       	adiw	r24, 0x05	; 5
    24c8:	b8 01       	movw	r22, r16
    24ca:	0e 94 c6 14 	call	0x298c	; 0x298c <__unpack_f>
    24ce:	89 85       	ldd	r24, Y+9	; 0x09
    24d0:	82 30       	cpi	r24, 0x02	; 2
    24d2:	40 f0       	brcs	.+16     	; 0x24e4 <__ltsf2+0x56>
    24d4:	89 89       	ldd	r24, Y+17	; 0x11
    24d6:	82 30       	cpi	r24, 0x02	; 2
    24d8:	28 f0       	brcs	.+10     	; 0x24e4 <__ltsf2+0x56>
    24da:	c7 01       	movw	r24, r14
    24dc:	b8 01       	movw	r22, r16
    24de:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <__fpcmp_parts_f>
    24e2:	01 c0       	rjmp	.+2      	; 0x24e6 <__ltsf2+0x58>
    24e4:	81 e0       	ldi	r24, 0x01	; 1
    24e6:	68 96       	adiw	r28, 0x18	; 24
    24e8:	e6 e0       	ldi	r30, 0x06	; 6
    24ea:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__epilogue_restores__+0x18>

000024ee <__floatsisf>:
    24ee:	a8 e0       	ldi	r26, 0x08	; 8
    24f0:	b0 e0       	ldi	r27, 0x00	; 0
    24f2:	ed e7       	ldi	r30, 0x7D	; 125
    24f4:	f2 e1       	ldi	r31, 0x12	; 18
    24f6:	0c 94 28 16 	jmp	0x2c50	; 0x2c50 <__prologue_saves__+0x12>
    24fa:	9b 01       	movw	r18, r22
    24fc:	ac 01       	movw	r20, r24
    24fe:	83 e0       	ldi	r24, 0x03	; 3
    2500:	89 83       	std	Y+1, r24	; 0x01
    2502:	da 01       	movw	r26, r20
    2504:	c9 01       	movw	r24, r18
    2506:	88 27       	eor	r24, r24
    2508:	b7 fd       	sbrc	r27, 7
    250a:	83 95       	inc	r24
    250c:	99 27       	eor	r25, r25
    250e:	aa 27       	eor	r26, r26
    2510:	bb 27       	eor	r27, r27
    2512:	b8 2e       	mov	r11, r24
    2514:	21 15       	cp	r18, r1
    2516:	31 05       	cpc	r19, r1
    2518:	41 05       	cpc	r20, r1
    251a:	51 05       	cpc	r21, r1
    251c:	19 f4       	brne	.+6      	; 0x2524 <__floatsisf+0x36>
    251e:	82 e0       	ldi	r24, 0x02	; 2
    2520:	89 83       	std	Y+1, r24	; 0x01
    2522:	3a c0       	rjmp	.+116    	; 0x2598 <__floatsisf+0xaa>
    2524:	88 23       	and	r24, r24
    2526:	a9 f0       	breq	.+42     	; 0x2552 <__floatsisf+0x64>
    2528:	20 30       	cpi	r18, 0x00	; 0
    252a:	80 e0       	ldi	r24, 0x00	; 0
    252c:	38 07       	cpc	r19, r24
    252e:	80 e0       	ldi	r24, 0x00	; 0
    2530:	48 07       	cpc	r20, r24
    2532:	80 e8       	ldi	r24, 0x80	; 128
    2534:	58 07       	cpc	r21, r24
    2536:	29 f4       	brne	.+10     	; 0x2542 <__floatsisf+0x54>
    2538:	60 e0       	ldi	r22, 0x00	; 0
    253a:	70 e0       	ldi	r23, 0x00	; 0
    253c:	80 e0       	ldi	r24, 0x00	; 0
    253e:	9f ec       	ldi	r25, 0xCF	; 207
    2540:	30 c0       	rjmp	.+96     	; 0x25a2 <__floatsisf+0xb4>
    2542:	ee 24       	eor	r14, r14
    2544:	ff 24       	eor	r15, r15
    2546:	87 01       	movw	r16, r14
    2548:	e2 1a       	sub	r14, r18
    254a:	f3 0a       	sbc	r15, r19
    254c:	04 0b       	sbc	r16, r20
    254e:	15 0b       	sbc	r17, r21
    2550:	02 c0       	rjmp	.+4      	; 0x2556 <__floatsisf+0x68>
    2552:	79 01       	movw	r14, r18
    2554:	8a 01       	movw	r16, r20
    2556:	8e e1       	ldi	r24, 0x1E	; 30
    2558:	c8 2e       	mov	r12, r24
    255a:	d1 2c       	mov	r13, r1
    255c:	dc 82       	std	Y+4, r13	; 0x04
    255e:	cb 82       	std	Y+3, r12	; 0x03
    2560:	ed 82       	std	Y+5, r14	; 0x05
    2562:	fe 82       	std	Y+6, r15	; 0x06
    2564:	0f 83       	std	Y+7, r16	; 0x07
    2566:	18 87       	std	Y+8, r17	; 0x08
    2568:	c8 01       	movw	r24, r16
    256a:	b7 01       	movw	r22, r14
    256c:	0e 94 a2 13 	call	0x2744	; 0x2744 <__clzsi2>
    2570:	01 97       	sbiw	r24, 0x01	; 1
    2572:	18 16       	cp	r1, r24
    2574:	19 06       	cpc	r1, r25
    2576:	84 f4       	brge	.+32     	; 0x2598 <__floatsisf+0xaa>
    2578:	08 2e       	mov	r0, r24
    257a:	04 c0       	rjmp	.+8      	; 0x2584 <__floatsisf+0x96>
    257c:	ee 0c       	add	r14, r14
    257e:	ff 1c       	adc	r15, r15
    2580:	00 1f       	adc	r16, r16
    2582:	11 1f       	adc	r17, r17
    2584:	0a 94       	dec	r0
    2586:	d2 f7       	brpl	.-12     	; 0x257c <__floatsisf+0x8e>
    2588:	ed 82       	std	Y+5, r14	; 0x05
    258a:	fe 82       	std	Y+6, r15	; 0x06
    258c:	0f 83       	std	Y+7, r16	; 0x07
    258e:	18 87       	std	Y+8, r17	; 0x08
    2590:	c8 1a       	sub	r12, r24
    2592:	d9 0a       	sbc	r13, r25
    2594:	dc 82       	std	Y+4, r13	; 0x04
    2596:	cb 82       	std	Y+3, r12	; 0x03
    2598:	ba 82       	std	Y+2, r11	; 0x02
    259a:	ce 01       	movw	r24, r28
    259c:	01 96       	adiw	r24, 0x01	; 1
    259e:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <__pack_f>
    25a2:	28 96       	adiw	r28, 0x08	; 8
    25a4:	e9 e0       	ldi	r30, 0x09	; 9
    25a6:	0c 94 44 16 	jmp	0x2c88	; 0x2c88 <__epilogue_restores__+0x12>

000025aa <__fixsfsi>:
    25aa:	ac e0       	ldi	r26, 0x0C	; 12
    25ac:	b0 e0       	ldi	r27, 0x00	; 0
    25ae:	eb ed       	ldi	r30, 0xDB	; 219
    25b0:	f2 e1       	ldi	r31, 0x12	; 18
    25b2:	0c 94 2f 16 	jmp	0x2c5e	; 0x2c5e <__prologue_saves__+0x20>
    25b6:	69 83       	std	Y+1, r22	; 0x01
    25b8:	7a 83       	std	Y+2, r23	; 0x02
    25ba:	8b 83       	std	Y+3, r24	; 0x03
    25bc:	9c 83       	std	Y+4, r25	; 0x04
    25be:	ce 01       	movw	r24, r28
    25c0:	01 96       	adiw	r24, 0x01	; 1
    25c2:	be 01       	movw	r22, r28
    25c4:	6b 5f       	subi	r22, 0xFB	; 251
    25c6:	7f 4f       	sbci	r23, 0xFF	; 255
    25c8:	0e 94 c6 14 	call	0x298c	; 0x298c <__unpack_f>
    25cc:	8d 81       	ldd	r24, Y+5	; 0x05
    25ce:	82 30       	cpi	r24, 0x02	; 2
    25d0:	61 f1       	breq	.+88     	; 0x262a <__fixsfsi+0x80>
    25d2:	82 30       	cpi	r24, 0x02	; 2
    25d4:	50 f1       	brcs	.+84     	; 0x262a <__fixsfsi+0x80>
    25d6:	84 30       	cpi	r24, 0x04	; 4
    25d8:	21 f4       	brne	.+8      	; 0x25e2 <__fixsfsi+0x38>
    25da:	8e 81       	ldd	r24, Y+6	; 0x06
    25dc:	88 23       	and	r24, r24
    25de:	51 f1       	breq	.+84     	; 0x2634 <__fixsfsi+0x8a>
    25e0:	2e c0       	rjmp	.+92     	; 0x263e <__fixsfsi+0x94>
    25e2:	2f 81       	ldd	r18, Y+7	; 0x07
    25e4:	38 85       	ldd	r19, Y+8	; 0x08
    25e6:	37 fd       	sbrc	r19, 7
    25e8:	20 c0       	rjmp	.+64     	; 0x262a <__fixsfsi+0x80>
    25ea:	6e 81       	ldd	r22, Y+6	; 0x06
    25ec:	2f 31       	cpi	r18, 0x1F	; 31
    25ee:	31 05       	cpc	r19, r1
    25f0:	1c f0       	brlt	.+6      	; 0x25f8 <__fixsfsi+0x4e>
    25f2:	66 23       	and	r22, r22
    25f4:	f9 f0       	breq	.+62     	; 0x2634 <__fixsfsi+0x8a>
    25f6:	23 c0       	rjmp	.+70     	; 0x263e <__fixsfsi+0x94>
    25f8:	8e e1       	ldi	r24, 0x1E	; 30
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	82 1b       	sub	r24, r18
    25fe:	93 0b       	sbc	r25, r19
    2600:	29 85       	ldd	r18, Y+9	; 0x09
    2602:	3a 85       	ldd	r19, Y+10	; 0x0a
    2604:	4b 85       	ldd	r20, Y+11	; 0x0b
    2606:	5c 85       	ldd	r21, Y+12	; 0x0c
    2608:	04 c0       	rjmp	.+8      	; 0x2612 <__fixsfsi+0x68>
    260a:	56 95       	lsr	r21
    260c:	47 95       	ror	r20
    260e:	37 95       	ror	r19
    2610:	27 95       	ror	r18
    2612:	8a 95       	dec	r24
    2614:	d2 f7       	brpl	.-12     	; 0x260a <__fixsfsi+0x60>
    2616:	66 23       	and	r22, r22
    2618:	b1 f0       	breq	.+44     	; 0x2646 <__fixsfsi+0x9c>
    261a:	50 95       	com	r21
    261c:	40 95       	com	r20
    261e:	30 95       	com	r19
    2620:	21 95       	neg	r18
    2622:	3f 4f       	sbci	r19, 0xFF	; 255
    2624:	4f 4f       	sbci	r20, 0xFF	; 255
    2626:	5f 4f       	sbci	r21, 0xFF	; 255
    2628:	0e c0       	rjmp	.+28     	; 0x2646 <__fixsfsi+0x9c>
    262a:	20 e0       	ldi	r18, 0x00	; 0
    262c:	30 e0       	ldi	r19, 0x00	; 0
    262e:	40 e0       	ldi	r20, 0x00	; 0
    2630:	50 e0       	ldi	r21, 0x00	; 0
    2632:	09 c0       	rjmp	.+18     	; 0x2646 <__fixsfsi+0x9c>
    2634:	2f ef       	ldi	r18, 0xFF	; 255
    2636:	3f ef       	ldi	r19, 0xFF	; 255
    2638:	4f ef       	ldi	r20, 0xFF	; 255
    263a:	5f e7       	ldi	r21, 0x7F	; 127
    263c:	04 c0       	rjmp	.+8      	; 0x2646 <__fixsfsi+0x9c>
    263e:	20 e0       	ldi	r18, 0x00	; 0
    2640:	30 e0       	ldi	r19, 0x00	; 0
    2642:	40 e0       	ldi	r20, 0x00	; 0
    2644:	50 e8       	ldi	r21, 0x80	; 128
    2646:	b9 01       	movw	r22, r18
    2648:	ca 01       	movw	r24, r20
    264a:	2c 96       	adiw	r28, 0x0c	; 12
    264c:	e2 e0       	ldi	r30, 0x02	; 2
    264e:	0c 94 4b 16 	jmp	0x2c96	; 0x2c96 <__epilogue_restores__+0x20>

00002652 <__floatunsisf>:
    2652:	a8 e0       	ldi	r26, 0x08	; 8
    2654:	b0 e0       	ldi	r27, 0x00	; 0
    2656:	ef e2       	ldi	r30, 0x2F	; 47
    2658:	f3 e1       	ldi	r31, 0x13	; 19
    265a:	0c 94 27 16 	jmp	0x2c4e	; 0x2c4e <__prologue_saves__+0x10>
    265e:	7b 01       	movw	r14, r22
    2660:	8c 01       	movw	r16, r24
    2662:	61 15       	cp	r22, r1
    2664:	71 05       	cpc	r23, r1
    2666:	81 05       	cpc	r24, r1
    2668:	91 05       	cpc	r25, r1
    266a:	19 f4       	brne	.+6      	; 0x2672 <__floatunsisf+0x20>
    266c:	82 e0       	ldi	r24, 0x02	; 2
    266e:	89 83       	std	Y+1, r24	; 0x01
    2670:	60 c0       	rjmp	.+192    	; 0x2732 <__floatunsisf+0xe0>
    2672:	83 e0       	ldi	r24, 0x03	; 3
    2674:	89 83       	std	Y+1, r24	; 0x01
    2676:	8e e1       	ldi	r24, 0x1E	; 30
    2678:	c8 2e       	mov	r12, r24
    267a:	d1 2c       	mov	r13, r1
    267c:	dc 82       	std	Y+4, r13	; 0x04
    267e:	cb 82       	std	Y+3, r12	; 0x03
    2680:	ed 82       	std	Y+5, r14	; 0x05
    2682:	fe 82       	std	Y+6, r15	; 0x06
    2684:	0f 83       	std	Y+7, r16	; 0x07
    2686:	18 87       	std	Y+8, r17	; 0x08
    2688:	c8 01       	movw	r24, r16
    268a:	b7 01       	movw	r22, r14
    268c:	0e 94 a2 13 	call	0x2744	; 0x2744 <__clzsi2>
    2690:	fc 01       	movw	r30, r24
    2692:	31 97       	sbiw	r30, 0x01	; 1
    2694:	f7 ff       	sbrs	r31, 7
    2696:	3b c0       	rjmp	.+118    	; 0x270e <__floatunsisf+0xbc>
    2698:	22 27       	eor	r18, r18
    269a:	33 27       	eor	r19, r19
    269c:	2e 1b       	sub	r18, r30
    269e:	3f 0b       	sbc	r19, r31
    26a0:	57 01       	movw	r10, r14
    26a2:	68 01       	movw	r12, r16
    26a4:	02 2e       	mov	r0, r18
    26a6:	04 c0       	rjmp	.+8      	; 0x26b0 <__floatunsisf+0x5e>
    26a8:	d6 94       	lsr	r13
    26aa:	c7 94       	ror	r12
    26ac:	b7 94       	ror	r11
    26ae:	a7 94       	ror	r10
    26b0:	0a 94       	dec	r0
    26b2:	d2 f7       	brpl	.-12     	; 0x26a8 <__floatunsisf+0x56>
    26b4:	40 e0       	ldi	r20, 0x00	; 0
    26b6:	50 e0       	ldi	r21, 0x00	; 0
    26b8:	60 e0       	ldi	r22, 0x00	; 0
    26ba:	70 e0       	ldi	r23, 0x00	; 0
    26bc:	81 e0       	ldi	r24, 0x01	; 1
    26be:	90 e0       	ldi	r25, 0x00	; 0
    26c0:	a0 e0       	ldi	r26, 0x00	; 0
    26c2:	b0 e0       	ldi	r27, 0x00	; 0
    26c4:	04 c0       	rjmp	.+8      	; 0x26ce <__floatunsisf+0x7c>
    26c6:	88 0f       	add	r24, r24
    26c8:	99 1f       	adc	r25, r25
    26ca:	aa 1f       	adc	r26, r26
    26cc:	bb 1f       	adc	r27, r27
    26ce:	2a 95       	dec	r18
    26d0:	d2 f7       	brpl	.-12     	; 0x26c6 <__floatunsisf+0x74>
    26d2:	01 97       	sbiw	r24, 0x01	; 1
    26d4:	a1 09       	sbc	r26, r1
    26d6:	b1 09       	sbc	r27, r1
    26d8:	8e 21       	and	r24, r14
    26da:	9f 21       	and	r25, r15
    26dc:	a0 23       	and	r26, r16
    26de:	b1 23       	and	r27, r17
    26e0:	00 97       	sbiw	r24, 0x00	; 0
    26e2:	a1 05       	cpc	r26, r1
    26e4:	b1 05       	cpc	r27, r1
    26e6:	21 f0       	breq	.+8      	; 0x26f0 <__floatunsisf+0x9e>
    26e8:	41 e0       	ldi	r20, 0x01	; 1
    26ea:	50 e0       	ldi	r21, 0x00	; 0
    26ec:	60 e0       	ldi	r22, 0x00	; 0
    26ee:	70 e0       	ldi	r23, 0x00	; 0
    26f0:	4a 29       	or	r20, r10
    26f2:	5b 29       	or	r21, r11
    26f4:	6c 29       	or	r22, r12
    26f6:	7d 29       	or	r23, r13
    26f8:	4d 83       	std	Y+5, r20	; 0x05
    26fa:	5e 83       	std	Y+6, r21	; 0x06
    26fc:	6f 83       	std	Y+7, r22	; 0x07
    26fe:	78 87       	std	Y+8, r23	; 0x08
    2700:	8e e1       	ldi	r24, 0x1E	; 30
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	8e 1b       	sub	r24, r30
    2706:	9f 0b       	sbc	r25, r31
    2708:	9c 83       	std	Y+4, r25	; 0x04
    270a:	8b 83       	std	Y+3, r24	; 0x03
    270c:	12 c0       	rjmp	.+36     	; 0x2732 <__floatunsisf+0xe0>
    270e:	30 97       	sbiw	r30, 0x00	; 0
    2710:	81 f0       	breq	.+32     	; 0x2732 <__floatunsisf+0xe0>
    2712:	0e 2e       	mov	r0, r30
    2714:	04 c0       	rjmp	.+8      	; 0x271e <__floatunsisf+0xcc>
    2716:	ee 0c       	add	r14, r14
    2718:	ff 1c       	adc	r15, r15
    271a:	00 1f       	adc	r16, r16
    271c:	11 1f       	adc	r17, r17
    271e:	0a 94       	dec	r0
    2720:	d2 f7       	brpl	.-12     	; 0x2716 <__floatunsisf+0xc4>
    2722:	ed 82       	std	Y+5, r14	; 0x05
    2724:	fe 82       	std	Y+6, r15	; 0x06
    2726:	0f 83       	std	Y+7, r16	; 0x07
    2728:	18 87       	std	Y+8, r17	; 0x08
    272a:	ce 1a       	sub	r12, r30
    272c:	df 0a       	sbc	r13, r31
    272e:	dc 82       	std	Y+4, r13	; 0x04
    2730:	cb 82       	std	Y+3, r12	; 0x03
    2732:	1a 82       	std	Y+2, r1	; 0x02
    2734:	ce 01       	movw	r24, r28
    2736:	01 96       	adiw	r24, 0x01	; 1
    2738:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <__pack_f>
    273c:	28 96       	adiw	r28, 0x08	; 8
    273e:	ea e0       	ldi	r30, 0x0A	; 10
    2740:	0c 94 43 16 	jmp	0x2c86	; 0x2c86 <__epilogue_restores__+0x10>

00002744 <__clzsi2>:
    2744:	ef 92       	push	r14
    2746:	ff 92       	push	r15
    2748:	0f 93       	push	r16
    274a:	1f 93       	push	r17
    274c:	7b 01       	movw	r14, r22
    274e:	8c 01       	movw	r16, r24
    2750:	80 e0       	ldi	r24, 0x00	; 0
    2752:	e8 16       	cp	r14, r24
    2754:	80 e0       	ldi	r24, 0x00	; 0
    2756:	f8 06       	cpc	r15, r24
    2758:	81 e0       	ldi	r24, 0x01	; 1
    275a:	08 07       	cpc	r16, r24
    275c:	80 e0       	ldi	r24, 0x00	; 0
    275e:	18 07       	cpc	r17, r24
    2760:	88 f4       	brcc	.+34     	; 0x2784 <__clzsi2+0x40>
    2762:	8f ef       	ldi	r24, 0xFF	; 255
    2764:	e8 16       	cp	r14, r24
    2766:	f1 04       	cpc	r15, r1
    2768:	01 05       	cpc	r16, r1
    276a:	11 05       	cpc	r17, r1
    276c:	31 f0       	breq	.+12     	; 0x277a <__clzsi2+0x36>
    276e:	28 f0       	brcs	.+10     	; 0x277a <__clzsi2+0x36>
    2770:	88 e0       	ldi	r24, 0x08	; 8
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	a0 e0       	ldi	r26, 0x00	; 0
    2776:	b0 e0       	ldi	r27, 0x00	; 0
    2778:	17 c0       	rjmp	.+46     	; 0x27a8 <__clzsi2+0x64>
    277a:	80 e0       	ldi	r24, 0x00	; 0
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	a0 e0       	ldi	r26, 0x00	; 0
    2780:	b0 e0       	ldi	r27, 0x00	; 0
    2782:	12 c0       	rjmp	.+36     	; 0x27a8 <__clzsi2+0x64>
    2784:	80 e0       	ldi	r24, 0x00	; 0
    2786:	e8 16       	cp	r14, r24
    2788:	80 e0       	ldi	r24, 0x00	; 0
    278a:	f8 06       	cpc	r15, r24
    278c:	80 e0       	ldi	r24, 0x00	; 0
    278e:	08 07       	cpc	r16, r24
    2790:	81 e0       	ldi	r24, 0x01	; 1
    2792:	18 07       	cpc	r17, r24
    2794:	28 f0       	brcs	.+10     	; 0x27a0 <__clzsi2+0x5c>
    2796:	88 e1       	ldi	r24, 0x18	; 24
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	a0 e0       	ldi	r26, 0x00	; 0
    279c:	b0 e0       	ldi	r27, 0x00	; 0
    279e:	04 c0       	rjmp	.+8      	; 0x27a8 <__clzsi2+0x64>
    27a0:	80 e1       	ldi	r24, 0x10	; 16
    27a2:	90 e0       	ldi	r25, 0x00	; 0
    27a4:	a0 e0       	ldi	r26, 0x00	; 0
    27a6:	b0 e0       	ldi	r27, 0x00	; 0
    27a8:	20 e2       	ldi	r18, 0x20	; 32
    27aa:	30 e0       	ldi	r19, 0x00	; 0
    27ac:	40 e0       	ldi	r20, 0x00	; 0
    27ae:	50 e0       	ldi	r21, 0x00	; 0
    27b0:	28 1b       	sub	r18, r24
    27b2:	39 0b       	sbc	r19, r25
    27b4:	4a 0b       	sbc	r20, r26
    27b6:	5b 0b       	sbc	r21, r27
    27b8:	04 c0       	rjmp	.+8      	; 0x27c2 <__clzsi2+0x7e>
    27ba:	16 95       	lsr	r17
    27bc:	07 95       	ror	r16
    27be:	f7 94       	ror	r15
    27c0:	e7 94       	ror	r14
    27c2:	8a 95       	dec	r24
    27c4:	d2 f7       	brpl	.-12     	; 0x27ba <__clzsi2+0x76>
    27c6:	f7 01       	movw	r30, r14
    27c8:	e9 5a       	subi	r30, 0xA9	; 169
    27ca:	fd 4f       	sbci	r31, 0xFD	; 253
    27cc:	80 81       	ld	r24, Z
    27ce:	28 1b       	sub	r18, r24
    27d0:	31 09       	sbc	r19, r1
    27d2:	41 09       	sbc	r20, r1
    27d4:	51 09       	sbc	r21, r1
    27d6:	c9 01       	movw	r24, r18
    27d8:	1f 91       	pop	r17
    27da:	0f 91       	pop	r16
    27dc:	ff 90       	pop	r15
    27de:	ef 90       	pop	r14
    27e0:	08 95       	ret

000027e2 <__pack_f>:
    27e2:	df 92       	push	r13
    27e4:	ef 92       	push	r14
    27e6:	ff 92       	push	r15
    27e8:	0f 93       	push	r16
    27ea:	1f 93       	push	r17
    27ec:	fc 01       	movw	r30, r24
    27ee:	e4 80       	ldd	r14, Z+4	; 0x04
    27f0:	f5 80       	ldd	r15, Z+5	; 0x05
    27f2:	06 81       	ldd	r16, Z+6	; 0x06
    27f4:	17 81       	ldd	r17, Z+7	; 0x07
    27f6:	d1 80       	ldd	r13, Z+1	; 0x01
    27f8:	80 81       	ld	r24, Z
    27fa:	82 30       	cpi	r24, 0x02	; 2
    27fc:	48 f4       	brcc	.+18     	; 0x2810 <__pack_f+0x2e>
    27fe:	80 e0       	ldi	r24, 0x00	; 0
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	a0 e1       	ldi	r26, 0x10	; 16
    2804:	b0 e0       	ldi	r27, 0x00	; 0
    2806:	e8 2a       	or	r14, r24
    2808:	f9 2a       	or	r15, r25
    280a:	0a 2b       	or	r16, r26
    280c:	1b 2b       	or	r17, r27
    280e:	a5 c0       	rjmp	.+330    	; 0x295a <__pack_f+0x178>
    2810:	84 30       	cpi	r24, 0x04	; 4
    2812:	09 f4       	brne	.+2      	; 0x2816 <__pack_f+0x34>
    2814:	9f c0       	rjmp	.+318    	; 0x2954 <__pack_f+0x172>
    2816:	82 30       	cpi	r24, 0x02	; 2
    2818:	21 f4       	brne	.+8      	; 0x2822 <__pack_f+0x40>
    281a:	ee 24       	eor	r14, r14
    281c:	ff 24       	eor	r15, r15
    281e:	87 01       	movw	r16, r14
    2820:	05 c0       	rjmp	.+10     	; 0x282c <__pack_f+0x4a>
    2822:	e1 14       	cp	r14, r1
    2824:	f1 04       	cpc	r15, r1
    2826:	01 05       	cpc	r16, r1
    2828:	11 05       	cpc	r17, r1
    282a:	19 f4       	brne	.+6      	; 0x2832 <__pack_f+0x50>
    282c:	e0 e0       	ldi	r30, 0x00	; 0
    282e:	f0 e0       	ldi	r31, 0x00	; 0
    2830:	96 c0       	rjmp	.+300    	; 0x295e <__pack_f+0x17c>
    2832:	62 81       	ldd	r22, Z+2	; 0x02
    2834:	73 81       	ldd	r23, Z+3	; 0x03
    2836:	9f ef       	ldi	r25, 0xFF	; 255
    2838:	62 38       	cpi	r22, 0x82	; 130
    283a:	79 07       	cpc	r23, r25
    283c:	0c f0       	brlt	.+2      	; 0x2840 <__pack_f+0x5e>
    283e:	5b c0       	rjmp	.+182    	; 0x28f6 <__pack_f+0x114>
    2840:	22 e8       	ldi	r18, 0x82	; 130
    2842:	3f ef       	ldi	r19, 0xFF	; 255
    2844:	26 1b       	sub	r18, r22
    2846:	37 0b       	sbc	r19, r23
    2848:	2a 31       	cpi	r18, 0x1A	; 26
    284a:	31 05       	cpc	r19, r1
    284c:	2c f0       	brlt	.+10     	; 0x2858 <__pack_f+0x76>
    284e:	20 e0       	ldi	r18, 0x00	; 0
    2850:	30 e0       	ldi	r19, 0x00	; 0
    2852:	40 e0       	ldi	r20, 0x00	; 0
    2854:	50 e0       	ldi	r21, 0x00	; 0
    2856:	2a c0       	rjmp	.+84     	; 0x28ac <__pack_f+0xca>
    2858:	b8 01       	movw	r22, r16
    285a:	a7 01       	movw	r20, r14
    285c:	02 2e       	mov	r0, r18
    285e:	04 c0       	rjmp	.+8      	; 0x2868 <__pack_f+0x86>
    2860:	76 95       	lsr	r23
    2862:	67 95       	ror	r22
    2864:	57 95       	ror	r21
    2866:	47 95       	ror	r20
    2868:	0a 94       	dec	r0
    286a:	d2 f7       	brpl	.-12     	; 0x2860 <__pack_f+0x7e>
    286c:	81 e0       	ldi	r24, 0x01	; 1
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	a0 e0       	ldi	r26, 0x00	; 0
    2872:	b0 e0       	ldi	r27, 0x00	; 0
    2874:	04 c0       	rjmp	.+8      	; 0x287e <__pack_f+0x9c>
    2876:	88 0f       	add	r24, r24
    2878:	99 1f       	adc	r25, r25
    287a:	aa 1f       	adc	r26, r26
    287c:	bb 1f       	adc	r27, r27
    287e:	2a 95       	dec	r18
    2880:	d2 f7       	brpl	.-12     	; 0x2876 <__pack_f+0x94>
    2882:	01 97       	sbiw	r24, 0x01	; 1
    2884:	a1 09       	sbc	r26, r1
    2886:	b1 09       	sbc	r27, r1
    2888:	8e 21       	and	r24, r14
    288a:	9f 21       	and	r25, r15
    288c:	a0 23       	and	r26, r16
    288e:	b1 23       	and	r27, r17
    2890:	00 97       	sbiw	r24, 0x00	; 0
    2892:	a1 05       	cpc	r26, r1
    2894:	b1 05       	cpc	r27, r1
    2896:	21 f0       	breq	.+8      	; 0x28a0 <__pack_f+0xbe>
    2898:	81 e0       	ldi	r24, 0x01	; 1
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	a0 e0       	ldi	r26, 0x00	; 0
    289e:	b0 e0       	ldi	r27, 0x00	; 0
    28a0:	9a 01       	movw	r18, r20
    28a2:	ab 01       	movw	r20, r22
    28a4:	28 2b       	or	r18, r24
    28a6:	39 2b       	or	r19, r25
    28a8:	4a 2b       	or	r20, r26
    28aa:	5b 2b       	or	r21, r27
    28ac:	da 01       	movw	r26, r20
    28ae:	c9 01       	movw	r24, r18
    28b0:	8f 77       	andi	r24, 0x7F	; 127
    28b2:	90 70       	andi	r25, 0x00	; 0
    28b4:	a0 70       	andi	r26, 0x00	; 0
    28b6:	b0 70       	andi	r27, 0x00	; 0
    28b8:	80 34       	cpi	r24, 0x40	; 64
    28ba:	91 05       	cpc	r25, r1
    28bc:	a1 05       	cpc	r26, r1
    28be:	b1 05       	cpc	r27, r1
    28c0:	39 f4       	brne	.+14     	; 0x28d0 <__pack_f+0xee>
    28c2:	27 ff       	sbrs	r18, 7
    28c4:	09 c0       	rjmp	.+18     	; 0x28d8 <__pack_f+0xf6>
    28c6:	20 5c       	subi	r18, 0xC0	; 192
    28c8:	3f 4f       	sbci	r19, 0xFF	; 255
    28ca:	4f 4f       	sbci	r20, 0xFF	; 255
    28cc:	5f 4f       	sbci	r21, 0xFF	; 255
    28ce:	04 c0       	rjmp	.+8      	; 0x28d8 <__pack_f+0xf6>
    28d0:	21 5c       	subi	r18, 0xC1	; 193
    28d2:	3f 4f       	sbci	r19, 0xFF	; 255
    28d4:	4f 4f       	sbci	r20, 0xFF	; 255
    28d6:	5f 4f       	sbci	r21, 0xFF	; 255
    28d8:	e0 e0       	ldi	r30, 0x00	; 0
    28da:	f0 e0       	ldi	r31, 0x00	; 0
    28dc:	20 30       	cpi	r18, 0x00	; 0
    28de:	a0 e0       	ldi	r26, 0x00	; 0
    28e0:	3a 07       	cpc	r19, r26
    28e2:	a0 e0       	ldi	r26, 0x00	; 0
    28e4:	4a 07       	cpc	r20, r26
    28e6:	a0 e4       	ldi	r26, 0x40	; 64
    28e8:	5a 07       	cpc	r21, r26
    28ea:	10 f0       	brcs	.+4      	; 0x28f0 <__pack_f+0x10e>
    28ec:	e1 e0       	ldi	r30, 0x01	; 1
    28ee:	f0 e0       	ldi	r31, 0x00	; 0
    28f0:	79 01       	movw	r14, r18
    28f2:	8a 01       	movw	r16, r20
    28f4:	27 c0       	rjmp	.+78     	; 0x2944 <__pack_f+0x162>
    28f6:	60 38       	cpi	r22, 0x80	; 128
    28f8:	71 05       	cpc	r23, r1
    28fa:	64 f5       	brge	.+88     	; 0x2954 <__pack_f+0x172>
    28fc:	fb 01       	movw	r30, r22
    28fe:	e1 58       	subi	r30, 0x81	; 129
    2900:	ff 4f       	sbci	r31, 0xFF	; 255
    2902:	d8 01       	movw	r26, r16
    2904:	c7 01       	movw	r24, r14
    2906:	8f 77       	andi	r24, 0x7F	; 127
    2908:	90 70       	andi	r25, 0x00	; 0
    290a:	a0 70       	andi	r26, 0x00	; 0
    290c:	b0 70       	andi	r27, 0x00	; 0
    290e:	80 34       	cpi	r24, 0x40	; 64
    2910:	91 05       	cpc	r25, r1
    2912:	a1 05       	cpc	r26, r1
    2914:	b1 05       	cpc	r27, r1
    2916:	39 f4       	brne	.+14     	; 0x2926 <__pack_f+0x144>
    2918:	e7 fe       	sbrs	r14, 7
    291a:	0d c0       	rjmp	.+26     	; 0x2936 <__pack_f+0x154>
    291c:	80 e4       	ldi	r24, 0x40	; 64
    291e:	90 e0       	ldi	r25, 0x00	; 0
    2920:	a0 e0       	ldi	r26, 0x00	; 0
    2922:	b0 e0       	ldi	r27, 0x00	; 0
    2924:	04 c0       	rjmp	.+8      	; 0x292e <__pack_f+0x14c>
    2926:	8f e3       	ldi	r24, 0x3F	; 63
    2928:	90 e0       	ldi	r25, 0x00	; 0
    292a:	a0 e0       	ldi	r26, 0x00	; 0
    292c:	b0 e0       	ldi	r27, 0x00	; 0
    292e:	e8 0e       	add	r14, r24
    2930:	f9 1e       	adc	r15, r25
    2932:	0a 1f       	adc	r16, r26
    2934:	1b 1f       	adc	r17, r27
    2936:	17 ff       	sbrs	r17, 7
    2938:	05 c0       	rjmp	.+10     	; 0x2944 <__pack_f+0x162>
    293a:	16 95       	lsr	r17
    293c:	07 95       	ror	r16
    293e:	f7 94       	ror	r15
    2940:	e7 94       	ror	r14
    2942:	31 96       	adiw	r30, 0x01	; 1
    2944:	87 e0       	ldi	r24, 0x07	; 7
    2946:	16 95       	lsr	r17
    2948:	07 95       	ror	r16
    294a:	f7 94       	ror	r15
    294c:	e7 94       	ror	r14
    294e:	8a 95       	dec	r24
    2950:	d1 f7       	brne	.-12     	; 0x2946 <__pack_f+0x164>
    2952:	05 c0       	rjmp	.+10     	; 0x295e <__pack_f+0x17c>
    2954:	ee 24       	eor	r14, r14
    2956:	ff 24       	eor	r15, r15
    2958:	87 01       	movw	r16, r14
    295a:	ef ef       	ldi	r30, 0xFF	; 255
    295c:	f0 e0       	ldi	r31, 0x00	; 0
    295e:	6e 2f       	mov	r22, r30
    2960:	67 95       	ror	r22
    2962:	66 27       	eor	r22, r22
    2964:	67 95       	ror	r22
    2966:	90 2f       	mov	r25, r16
    2968:	9f 77       	andi	r25, 0x7F	; 127
    296a:	d7 94       	ror	r13
    296c:	dd 24       	eor	r13, r13
    296e:	d7 94       	ror	r13
    2970:	8e 2f       	mov	r24, r30
    2972:	86 95       	lsr	r24
    2974:	49 2f       	mov	r20, r25
    2976:	46 2b       	or	r20, r22
    2978:	58 2f       	mov	r21, r24
    297a:	5d 29       	or	r21, r13
    297c:	b7 01       	movw	r22, r14
    297e:	ca 01       	movw	r24, r20
    2980:	1f 91       	pop	r17
    2982:	0f 91       	pop	r16
    2984:	ff 90       	pop	r15
    2986:	ef 90       	pop	r14
    2988:	df 90       	pop	r13
    298a:	08 95       	ret

0000298c <__unpack_f>:
    298c:	fc 01       	movw	r30, r24
    298e:	db 01       	movw	r26, r22
    2990:	40 81       	ld	r20, Z
    2992:	51 81       	ldd	r21, Z+1	; 0x01
    2994:	22 81       	ldd	r18, Z+2	; 0x02
    2996:	62 2f       	mov	r22, r18
    2998:	6f 77       	andi	r22, 0x7F	; 127
    299a:	70 e0       	ldi	r23, 0x00	; 0
    299c:	22 1f       	adc	r18, r18
    299e:	22 27       	eor	r18, r18
    29a0:	22 1f       	adc	r18, r18
    29a2:	93 81       	ldd	r25, Z+3	; 0x03
    29a4:	89 2f       	mov	r24, r25
    29a6:	88 0f       	add	r24, r24
    29a8:	82 2b       	or	r24, r18
    29aa:	28 2f       	mov	r18, r24
    29ac:	30 e0       	ldi	r19, 0x00	; 0
    29ae:	99 1f       	adc	r25, r25
    29b0:	99 27       	eor	r25, r25
    29b2:	99 1f       	adc	r25, r25
    29b4:	11 96       	adiw	r26, 0x01	; 1
    29b6:	9c 93       	st	X, r25
    29b8:	11 97       	sbiw	r26, 0x01	; 1
    29ba:	21 15       	cp	r18, r1
    29bc:	31 05       	cpc	r19, r1
    29be:	a9 f5       	brne	.+106    	; 0x2a2a <__unpack_f+0x9e>
    29c0:	41 15       	cp	r20, r1
    29c2:	51 05       	cpc	r21, r1
    29c4:	61 05       	cpc	r22, r1
    29c6:	71 05       	cpc	r23, r1
    29c8:	11 f4       	brne	.+4      	; 0x29ce <__unpack_f+0x42>
    29ca:	82 e0       	ldi	r24, 0x02	; 2
    29cc:	37 c0       	rjmp	.+110    	; 0x2a3c <__unpack_f+0xb0>
    29ce:	82 e8       	ldi	r24, 0x82	; 130
    29d0:	9f ef       	ldi	r25, 0xFF	; 255
    29d2:	13 96       	adiw	r26, 0x03	; 3
    29d4:	9c 93       	st	X, r25
    29d6:	8e 93       	st	-X, r24
    29d8:	12 97       	sbiw	r26, 0x02	; 2
    29da:	9a 01       	movw	r18, r20
    29dc:	ab 01       	movw	r20, r22
    29de:	67 e0       	ldi	r22, 0x07	; 7
    29e0:	22 0f       	add	r18, r18
    29e2:	33 1f       	adc	r19, r19
    29e4:	44 1f       	adc	r20, r20
    29e6:	55 1f       	adc	r21, r21
    29e8:	6a 95       	dec	r22
    29ea:	d1 f7       	brne	.-12     	; 0x29e0 <__unpack_f+0x54>
    29ec:	83 e0       	ldi	r24, 0x03	; 3
    29ee:	8c 93       	st	X, r24
    29f0:	0d c0       	rjmp	.+26     	; 0x2a0c <__unpack_f+0x80>
    29f2:	22 0f       	add	r18, r18
    29f4:	33 1f       	adc	r19, r19
    29f6:	44 1f       	adc	r20, r20
    29f8:	55 1f       	adc	r21, r21
    29fa:	12 96       	adiw	r26, 0x02	; 2
    29fc:	8d 91       	ld	r24, X+
    29fe:	9c 91       	ld	r25, X
    2a00:	13 97       	sbiw	r26, 0x03	; 3
    2a02:	01 97       	sbiw	r24, 0x01	; 1
    2a04:	13 96       	adiw	r26, 0x03	; 3
    2a06:	9c 93       	st	X, r25
    2a08:	8e 93       	st	-X, r24
    2a0a:	12 97       	sbiw	r26, 0x02	; 2
    2a0c:	20 30       	cpi	r18, 0x00	; 0
    2a0e:	80 e0       	ldi	r24, 0x00	; 0
    2a10:	38 07       	cpc	r19, r24
    2a12:	80 e0       	ldi	r24, 0x00	; 0
    2a14:	48 07       	cpc	r20, r24
    2a16:	80 e4       	ldi	r24, 0x40	; 64
    2a18:	58 07       	cpc	r21, r24
    2a1a:	58 f3       	brcs	.-42     	; 0x29f2 <__unpack_f+0x66>
    2a1c:	14 96       	adiw	r26, 0x04	; 4
    2a1e:	2d 93       	st	X+, r18
    2a20:	3d 93       	st	X+, r19
    2a22:	4d 93       	st	X+, r20
    2a24:	5c 93       	st	X, r21
    2a26:	17 97       	sbiw	r26, 0x07	; 7
    2a28:	08 95       	ret
    2a2a:	2f 3f       	cpi	r18, 0xFF	; 255
    2a2c:	31 05       	cpc	r19, r1
    2a2e:	79 f4       	brne	.+30     	; 0x2a4e <__unpack_f+0xc2>
    2a30:	41 15       	cp	r20, r1
    2a32:	51 05       	cpc	r21, r1
    2a34:	61 05       	cpc	r22, r1
    2a36:	71 05       	cpc	r23, r1
    2a38:	19 f4       	brne	.+6      	; 0x2a40 <__unpack_f+0xb4>
    2a3a:	84 e0       	ldi	r24, 0x04	; 4
    2a3c:	8c 93       	st	X, r24
    2a3e:	08 95       	ret
    2a40:	64 ff       	sbrs	r22, 4
    2a42:	03 c0       	rjmp	.+6      	; 0x2a4a <__unpack_f+0xbe>
    2a44:	81 e0       	ldi	r24, 0x01	; 1
    2a46:	8c 93       	st	X, r24
    2a48:	12 c0       	rjmp	.+36     	; 0x2a6e <__unpack_f+0xe2>
    2a4a:	1c 92       	st	X, r1
    2a4c:	10 c0       	rjmp	.+32     	; 0x2a6e <__unpack_f+0xe2>
    2a4e:	2f 57       	subi	r18, 0x7F	; 127
    2a50:	30 40       	sbci	r19, 0x00	; 0
    2a52:	13 96       	adiw	r26, 0x03	; 3
    2a54:	3c 93       	st	X, r19
    2a56:	2e 93       	st	-X, r18
    2a58:	12 97       	sbiw	r26, 0x02	; 2
    2a5a:	83 e0       	ldi	r24, 0x03	; 3
    2a5c:	8c 93       	st	X, r24
    2a5e:	87 e0       	ldi	r24, 0x07	; 7
    2a60:	44 0f       	add	r20, r20
    2a62:	55 1f       	adc	r21, r21
    2a64:	66 1f       	adc	r22, r22
    2a66:	77 1f       	adc	r23, r23
    2a68:	8a 95       	dec	r24
    2a6a:	d1 f7       	brne	.-12     	; 0x2a60 <__unpack_f+0xd4>
    2a6c:	70 64       	ori	r23, 0x40	; 64
    2a6e:	14 96       	adiw	r26, 0x04	; 4
    2a70:	4d 93       	st	X+, r20
    2a72:	5d 93       	st	X+, r21
    2a74:	6d 93       	st	X+, r22
    2a76:	7c 93       	st	X, r23
    2a78:	17 97       	sbiw	r26, 0x07	; 7
    2a7a:	08 95       	ret

00002a7c <__fpcmp_parts_f>:
    2a7c:	1f 93       	push	r17
    2a7e:	dc 01       	movw	r26, r24
    2a80:	fb 01       	movw	r30, r22
    2a82:	9c 91       	ld	r25, X
    2a84:	92 30       	cpi	r25, 0x02	; 2
    2a86:	08 f4       	brcc	.+2      	; 0x2a8a <__fpcmp_parts_f+0xe>
    2a88:	47 c0       	rjmp	.+142    	; 0x2b18 <__fpcmp_parts_f+0x9c>
    2a8a:	80 81       	ld	r24, Z
    2a8c:	82 30       	cpi	r24, 0x02	; 2
    2a8e:	08 f4       	brcc	.+2      	; 0x2a92 <__fpcmp_parts_f+0x16>
    2a90:	43 c0       	rjmp	.+134    	; 0x2b18 <__fpcmp_parts_f+0x9c>
    2a92:	94 30       	cpi	r25, 0x04	; 4
    2a94:	51 f4       	brne	.+20     	; 0x2aaa <__fpcmp_parts_f+0x2e>
    2a96:	11 96       	adiw	r26, 0x01	; 1
    2a98:	1c 91       	ld	r17, X
    2a9a:	84 30       	cpi	r24, 0x04	; 4
    2a9c:	99 f5       	brne	.+102    	; 0x2b04 <__fpcmp_parts_f+0x88>
    2a9e:	81 81       	ldd	r24, Z+1	; 0x01
    2aa0:	68 2f       	mov	r22, r24
    2aa2:	70 e0       	ldi	r23, 0x00	; 0
    2aa4:	61 1b       	sub	r22, r17
    2aa6:	71 09       	sbc	r23, r1
    2aa8:	3f c0       	rjmp	.+126    	; 0x2b28 <__fpcmp_parts_f+0xac>
    2aaa:	84 30       	cpi	r24, 0x04	; 4
    2aac:	21 f0       	breq	.+8      	; 0x2ab6 <__fpcmp_parts_f+0x3a>
    2aae:	92 30       	cpi	r25, 0x02	; 2
    2ab0:	31 f4       	brne	.+12     	; 0x2abe <__fpcmp_parts_f+0x42>
    2ab2:	82 30       	cpi	r24, 0x02	; 2
    2ab4:	b9 f1       	breq	.+110    	; 0x2b24 <__fpcmp_parts_f+0xa8>
    2ab6:	81 81       	ldd	r24, Z+1	; 0x01
    2ab8:	88 23       	and	r24, r24
    2aba:	89 f1       	breq	.+98     	; 0x2b1e <__fpcmp_parts_f+0xa2>
    2abc:	2d c0       	rjmp	.+90     	; 0x2b18 <__fpcmp_parts_f+0x9c>
    2abe:	11 96       	adiw	r26, 0x01	; 1
    2ac0:	1c 91       	ld	r17, X
    2ac2:	11 97       	sbiw	r26, 0x01	; 1
    2ac4:	82 30       	cpi	r24, 0x02	; 2
    2ac6:	f1 f0       	breq	.+60     	; 0x2b04 <__fpcmp_parts_f+0x88>
    2ac8:	81 81       	ldd	r24, Z+1	; 0x01
    2aca:	18 17       	cp	r17, r24
    2acc:	d9 f4       	brne	.+54     	; 0x2b04 <__fpcmp_parts_f+0x88>
    2ace:	12 96       	adiw	r26, 0x02	; 2
    2ad0:	2d 91       	ld	r18, X+
    2ad2:	3c 91       	ld	r19, X
    2ad4:	13 97       	sbiw	r26, 0x03	; 3
    2ad6:	82 81       	ldd	r24, Z+2	; 0x02
    2ad8:	93 81       	ldd	r25, Z+3	; 0x03
    2ada:	82 17       	cp	r24, r18
    2adc:	93 07       	cpc	r25, r19
    2ade:	94 f0       	brlt	.+36     	; 0x2b04 <__fpcmp_parts_f+0x88>
    2ae0:	28 17       	cp	r18, r24
    2ae2:	39 07       	cpc	r19, r25
    2ae4:	bc f0       	brlt	.+46     	; 0x2b14 <__fpcmp_parts_f+0x98>
    2ae6:	14 96       	adiw	r26, 0x04	; 4
    2ae8:	8d 91       	ld	r24, X+
    2aea:	9d 91       	ld	r25, X+
    2aec:	0d 90       	ld	r0, X+
    2aee:	bc 91       	ld	r27, X
    2af0:	a0 2d       	mov	r26, r0
    2af2:	24 81       	ldd	r18, Z+4	; 0x04
    2af4:	35 81       	ldd	r19, Z+5	; 0x05
    2af6:	46 81       	ldd	r20, Z+6	; 0x06
    2af8:	57 81       	ldd	r21, Z+7	; 0x07
    2afa:	28 17       	cp	r18, r24
    2afc:	39 07       	cpc	r19, r25
    2afe:	4a 07       	cpc	r20, r26
    2b00:	5b 07       	cpc	r21, r27
    2b02:	18 f4       	brcc	.+6      	; 0x2b0a <__fpcmp_parts_f+0x8e>
    2b04:	11 23       	and	r17, r17
    2b06:	41 f0       	breq	.+16     	; 0x2b18 <__fpcmp_parts_f+0x9c>
    2b08:	0a c0       	rjmp	.+20     	; 0x2b1e <__fpcmp_parts_f+0xa2>
    2b0a:	82 17       	cp	r24, r18
    2b0c:	93 07       	cpc	r25, r19
    2b0e:	a4 07       	cpc	r26, r20
    2b10:	b5 07       	cpc	r27, r21
    2b12:	40 f4       	brcc	.+16     	; 0x2b24 <__fpcmp_parts_f+0xa8>
    2b14:	11 23       	and	r17, r17
    2b16:	19 f0       	breq	.+6      	; 0x2b1e <__fpcmp_parts_f+0xa2>
    2b18:	61 e0       	ldi	r22, 0x01	; 1
    2b1a:	70 e0       	ldi	r23, 0x00	; 0
    2b1c:	05 c0       	rjmp	.+10     	; 0x2b28 <__fpcmp_parts_f+0xac>
    2b1e:	6f ef       	ldi	r22, 0xFF	; 255
    2b20:	7f ef       	ldi	r23, 0xFF	; 255
    2b22:	02 c0       	rjmp	.+4      	; 0x2b28 <__fpcmp_parts_f+0xac>
    2b24:	60 e0       	ldi	r22, 0x00	; 0
    2b26:	70 e0       	ldi	r23, 0x00	; 0
    2b28:	cb 01       	movw	r24, r22
    2b2a:	1f 91       	pop	r17
    2b2c:	08 95       	ret

00002b2e <do_rand>:
    2b2e:	a0 e0       	ldi	r26, 0x00	; 0
    2b30:	b0 e0       	ldi	r27, 0x00	; 0
    2b32:	ed e9       	ldi	r30, 0x9D	; 157
    2b34:	f5 e1       	ldi	r31, 0x15	; 21
    2b36:	0c 94 27 16 	jmp	0x2c4e	; 0x2c4e <__prologue_saves__+0x10>
    2b3a:	ec 01       	movw	r28, r24
    2b3c:	a8 80       	ld	r10, Y
    2b3e:	b9 80       	ldd	r11, Y+1	; 0x01
    2b40:	ca 80       	ldd	r12, Y+2	; 0x02
    2b42:	db 80       	ldd	r13, Y+3	; 0x03
    2b44:	a1 14       	cp	r10, r1
    2b46:	b1 04       	cpc	r11, r1
    2b48:	c1 04       	cpc	r12, r1
    2b4a:	d1 04       	cpc	r13, r1
    2b4c:	41 f4       	brne	.+16     	; 0x2b5e <do_rand+0x30>
    2b4e:	84 e2       	ldi	r24, 0x24	; 36
    2b50:	a8 2e       	mov	r10, r24
    2b52:	89 ed       	ldi	r24, 0xD9	; 217
    2b54:	b8 2e       	mov	r11, r24
    2b56:	8b e5       	ldi	r24, 0x5B	; 91
    2b58:	c8 2e       	mov	r12, r24
    2b5a:	87 e0       	ldi	r24, 0x07	; 7
    2b5c:	d8 2e       	mov	r13, r24
    2b5e:	c6 01       	movw	r24, r12
    2b60:	b5 01       	movw	r22, r10
    2b62:	2d e1       	ldi	r18, 0x1D	; 29
    2b64:	33 ef       	ldi	r19, 0xF3	; 243
    2b66:	41 e0       	ldi	r20, 0x01	; 1
    2b68:	50 e0       	ldi	r21, 0x00	; 0
    2b6a:	0e 94 75 16 	call	0x2cea	; 0x2cea <__divmodsi4>
    2b6e:	27 ea       	ldi	r18, 0xA7	; 167
    2b70:	31 e4       	ldi	r19, 0x41	; 65
    2b72:	40 e0       	ldi	r20, 0x00	; 0
    2b74:	50 e0       	ldi	r21, 0x00	; 0
    2b76:	0e 94 56 16 	call	0x2cac	; 0x2cac <__mulsi3>
    2b7a:	7b 01       	movw	r14, r22
    2b7c:	8c 01       	movw	r16, r24
    2b7e:	c6 01       	movw	r24, r12
    2b80:	b5 01       	movw	r22, r10
    2b82:	2d e1       	ldi	r18, 0x1D	; 29
    2b84:	33 ef       	ldi	r19, 0xF3	; 243
    2b86:	41 e0       	ldi	r20, 0x01	; 1
    2b88:	50 e0       	ldi	r21, 0x00	; 0
    2b8a:	0e 94 75 16 	call	0x2cea	; 0x2cea <__divmodsi4>
    2b8e:	ca 01       	movw	r24, r20
    2b90:	b9 01       	movw	r22, r18
    2b92:	2c ee       	ldi	r18, 0xEC	; 236
    2b94:	34 ef       	ldi	r19, 0xF4	; 244
    2b96:	4f ef       	ldi	r20, 0xFF	; 255
    2b98:	5f ef       	ldi	r21, 0xFF	; 255
    2b9a:	0e 94 56 16 	call	0x2cac	; 0x2cac <__mulsi3>
    2b9e:	6e 0d       	add	r22, r14
    2ba0:	7f 1d       	adc	r23, r15
    2ba2:	80 1f       	adc	r24, r16
    2ba4:	91 1f       	adc	r25, r17
    2ba6:	97 ff       	sbrs	r25, 7
    2ba8:	04 c0       	rjmp	.+8      	; 0x2bb2 <do_rand+0x84>
    2baa:	61 50       	subi	r22, 0x01	; 1
    2bac:	70 40       	sbci	r23, 0x00	; 0
    2bae:	80 40       	sbci	r24, 0x00	; 0
    2bb0:	90 48       	sbci	r25, 0x80	; 128
    2bb2:	68 83       	st	Y, r22
    2bb4:	79 83       	std	Y+1, r23	; 0x01
    2bb6:	8a 83       	std	Y+2, r24	; 0x02
    2bb8:	9b 83       	std	Y+3, r25	; 0x03
    2bba:	9b 01       	movw	r18, r22
    2bbc:	3f 77       	andi	r19, 0x7F	; 127
    2bbe:	c9 01       	movw	r24, r18
    2bc0:	cd b7       	in	r28, 0x3d	; 61
    2bc2:	de b7       	in	r29, 0x3e	; 62
    2bc4:	ea e0       	ldi	r30, 0x0A	; 10
    2bc6:	0c 94 43 16 	jmp	0x2c86	; 0x2c86 <__epilogue_restores__+0x10>

00002bca <rand_r>:
    2bca:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <do_rand>
    2bce:	08 95       	ret

00002bd0 <rand>:
    2bd0:	87 e5       	ldi	r24, 0x57	; 87
    2bd2:	93 e0       	ldi	r25, 0x03	; 3
    2bd4:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <do_rand>
    2bd8:	08 95       	ret

00002bda <srand>:
    2bda:	a0 e0       	ldi	r26, 0x00	; 0
    2bdc:	b0 e0       	ldi	r27, 0x00	; 0
    2bde:	80 93 57 03 	sts	0x0357, r24
    2be2:	90 93 58 03 	sts	0x0358, r25
    2be6:	a0 93 59 03 	sts	0x0359, r26
    2bea:	b0 93 5a 03 	sts	0x035A, r27
    2bee:	08 95       	ret

00002bf0 <__udivmodhi4>:
    2bf0:	aa 1b       	sub	r26, r26
    2bf2:	bb 1b       	sub	r27, r27
    2bf4:	51 e1       	ldi	r21, 0x11	; 17
    2bf6:	07 c0       	rjmp	.+14     	; 0x2c06 <__udivmodhi4_ep>

00002bf8 <__udivmodhi4_loop>:
    2bf8:	aa 1f       	adc	r26, r26
    2bfa:	bb 1f       	adc	r27, r27
    2bfc:	a6 17       	cp	r26, r22
    2bfe:	b7 07       	cpc	r27, r23
    2c00:	10 f0       	brcs	.+4      	; 0x2c06 <__udivmodhi4_ep>
    2c02:	a6 1b       	sub	r26, r22
    2c04:	b7 0b       	sbc	r27, r23

00002c06 <__udivmodhi4_ep>:
    2c06:	88 1f       	adc	r24, r24
    2c08:	99 1f       	adc	r25, r25
    2c0a:	5a 95       	dec	r21
    2c0c:	a9 f7       	brne	.-22     	; 0x2bf8 <__udivmodhi4_loop>
    2c0e:	80 95       	com	r24
    2c10:	90 95       	com	r25
    2c12:	bc 01       	movw	r22, r24
    2c14:	cd 01       	movw	r24, r26
    2c16:	08 95       	ret

00002c18 <__divmodhi4>:
    2c18:	97 fb       	bst	r25, 7
    2c1a:	09 2e       	mov	r0, r25
    2c1c:	07 26       	eor	r0, r23
    2c1e:	0a d0       	rcall	.+20     	; 0x2c34 <__divmodhi4_neg1>
    2c20:	77 fd       	sbrc	r23, 7
    2c22:	04 d0       	rcall	.+8      	; 0x2c2c <__divmodhi4_neg2>
    2c24:	e5 df       	rcall	.-54     	; 0x2bf0 <__udivmodhi4>
    2c26:	06 d0       	rcall	.+12     	; 0x2c34 <__divmodhi4_neg1>
    2c28:	00 20       	and	r0, r0
    2c2a:	1a f4       	brpl	.+6      	; 0x2c32 <__divmodhi4_exit>

00002c2c <__divmodhi4_neg2>:
    2c2c:	70 95       	com	r23
    2c2e:	61 95       	neg	r22
    2c30:	7f 4f       	sbci	r23, 0xFF	; 255

00002c32 <__divmodhi4_exit>:
    2c32:	08 95       	ret

00002c34 <__divmodhi4_neg1>:
    2c34:	f6 f7       	brtc	.-4      	; 0x2c32 <__divmodhi4_exit>
    2c36:	90 95       	com	r25
    2c38:	81 95       	neg	r24
    2c3a:	9f 4f       	sbci	r25, 0xFF	; 255
    2c3c:	08 95       	ret

00002c3e <__prologue_saves__>:
    2c3e:	2f 92       	push	r2
    2c40:	3f 92       	push	r3
    2c42:	4f 92       	push	r4
    2c44:	5f 92       	push	r5
    2c46:	6f 92       	push	r6
    2c48:	7f 92       	push	r7
    2c4a:	8f 92       	push	r8
    2c4c:	9f 92       	push	r9
    2c4e:	af 92       	push	r10
    2c50:	bf 92       	push	r11
    2c52:	cf 92       	push	r12
    2c54:	df 92       	push	r13
    2c56:	ef 92       	push	r14
    2c58:	ff 92       	push	r15
    2c5a:	0f 93       	push	r16
    2c5c:	1f 93       	push	r17
    2c5e:	cf 93       	push	r28
    2c60:	df 93       	push	r29
    2c62:	cd b7       	in	r28, 0x3d	; 61
    2c64:	de b7       	in	r29, 0x3e	; 62
    2c66:	ca 1b       	sub	r28, r26
    2c68:	db 0b       	sbc	r29, r27
    2c6a:	0f b6       	in	r0, 0x3f	; 63
    2c6c:	f8 94       	cli
    2c6e:	de bf       	out	0x3e, r29	; 62
    2c70:	0f be       	out	0x3f, r0	; 63
    2c72:	cd bf       	out	0x3d, r28	; 61
    2c74:	09 94       	ijmp

00002c76 <__epilogue_restores__>:
    2c76:	2a 88       	ldd	r2, Y+18	; 0x12
    2c78:	39 88       	ldd	r3, Y+17	; 0x11
    2c7a:	48 88       	ldd	r4, Y+16	; 0x10
    2c7c:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c7e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c80:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c82:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c84:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c86:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c88:	b9 84       	ldd	r11, Y+9	; 0x09
    2c8a:	c8 84       	ldd	r12, Y+8	; 0x08
    2c8c:	df 80       	ldd	r13, Y+7	; 0x07
    2c8e:	ee 80       	ldd	r14, Y+6	; 0x06
    2c90:	fd 80       	ldd	r15, Y+5	; 0x05
    2c92:	0c 81       	ldd	r16, Y+4	; 0x04
    2c94:	1b 81       	ldd	r17, Y+3	; 0x03
    2c96:	aa 81       	ldd	r26, Y+2	; 0x02
    2c98:	b9 81       	ldd	r27, Y+1	; 0x01
    2c9a:	ce 0f       	add	r28, r30
    2c9c:	d1 1d       	adc	r29, r1
    2c9e:	0f b6       	in	r0, 0x3f	; 63
    2ca0:	f8 94       	cli
    2ca2:	de bf       	out	0x3e, r29	; 62
    2ca4:	0f be       	out	0x3f, r0	; 63
    2ca6:	cd bf       	out	0x3d, r28	; 61
    2ca8:	ed 01       	movw	r28, r26
    2caa:	08 95       	ret

00002cac <__mulsi3>:
    2cac:	62 9f       	mul	r22, r18
    2cae:	d0 01       	movw	r26, r0
    2cb0:	73 9f       	mul	r23, r19
    2cb2:	f0 01       	movw	r30, r0
    2cb4:	82 9f       	mul	r24, r18
    2cb6:	e0 0d       	add	r30, r0
    2cb8:	f1 1d       	adc	r31, r1
    2cba:	64 9f       	mul	r22, r20
    2cbc:	e0 0d       	add	r30, r0
    2cbe:	f1 1d       	adc	r31, r1
    2cc0:	92 9f       	mul	r25, r18
    2cc2:	f0 0d       	add	r31, r0
    2cc4:	83 9f       	mul	r24, r19
    2cc6:	f0 0d       	add	r31, r0
    2cc8:	74 9f       	mul	r23, r20
    2cca:	f0 0d       	add	r31, r0
    2ccc:	65 9f       	mul	r22, r21
    2cce:	f0 0d       	add	r31, r0
    2cd0:	99 27       	eor	r25, r25
    2cd2:	72 9f       	mul	r23, r18
    2cd4:	b0 0d       	add	r27, r0
    2cd6:	e1 1d       	adc	r30, r1
    2cd8:	f9 1f       	adc	r31, r25
    2cda:	63 9f       	mul	r22, r19
    2cdc:	b0 0d       	add	r27, r0
    2cde:	e1 1d       	adc	r30, r1
    2ce0:	f9 1f       	adc	r31, r25
    2ce2:	bd 01       	movw	r22, r26
    2ce4:	cf 01       	movw	r24, r30
    2ce6:	11 24       	eor	r1, r1
    2ce8:	08 95       	ret

00002cea <__divmodsi4>:
    2cea:	97 fb       	bst	r25, 7
    2cec:	09 2e       	mov	r0, r25
    2cee:	05 26       	eor	r0, r21
    2cf0:	0e d0       	rcall	.+28     	; 0x2d0e <__divmodsi4_neg1>
    2cf2:	57 fd       	sbrc	r21, 7
    2cf4:	04 d0       	rcall	.+8      	; 0x2cfe <__divmodsi4_neg2>
    2cf6:	14 d0       	rcall	.+40     	; 0x2d20 <__udivmodsi4>
    2cf8:	0a d0       	rcall	.+20     	; 0x2d0e <__divmodsi4_neg1>
    2cfa:	00 1c       	adc	r0, r0
    2cfc:	38 f4       	brcc	.+14     	; 0x2d0c <__divmodsi4_exit>

00002cfe <__divmodsi4_neg2>:
    2cfe:	50 95       	com	r21
    2d00:	40 95       	com	r20
    2d02:	30 95       	com	r19
    2d04:	21 95       	neg	r18
    2d06:	3f 4f       	sbci	r19, 0xFF	; 255
    2d08:	4f 4f       	sbci	r20, 0xFF	; 255
    2d0a:	5f 4f       	sbci	r21, 0xFF	; 255

00002d0c <__divmodsi4_exit>:
    2d0c:	08 95       	ret

00002d0e <__divmodsi4_neg1>:
    2d0e:	f6 f7       	brtc	.-4      	; 0x2d0c <__divmodsi4_exit>
    2d10:	90 95       	com	r25
    2d12:	80 95       	com	r24
    2d14:	70 95       	com	r23
    2d16:	61 95       	neg	r22
    2d18:	7f 4f       	sbci	r23, 0xFF	; 255
    2d1a:	8f 4f       	sbci	r24, 0xFF	; 255
    2d1c:	9f 4f       	sbci	r25, 0xFF	; 255
    2d1e:	08 95       	ret

00002d20 <__udivmodsi4>:
    2d20:	a1 e2       	ldi	r26, 0x21	; 33
    2d22:	1a 2e       	mov	r1, r26
    2d24:	aa 1b       	sub	r26, r26
    2d26:	bb 1b       	sub	r27, r27
    2d28:	fd 01       	movw	r30, r26
    2d2a:	0d c0       	rjmp	.+26     	; 0x2d46 <__udivmodsi4_ep>

00002d2c <__udivmodsi4_loop>:
    2d2c:	aa 1f       	adc	r26, r26
    2d2e:	bb 1f       	adc	r27, r27
    2d30:	ee 1f       	adc	r30, r30
    2d32:	ff 1f       	adc	r31, r31
    2d34:	a2 17       	cp	r26, r18
    2d36:	b3 07       	cpc	r27, r19
    2d38:	e4 07       	cpc	r30, r20
    2d3a:	f5 07       	cpc	r31, r21
    2d3c:	20 f0       	brcs	.+8      	; 0x2d46 <__udivmodsi4_ep>
    2d3e:	a2 1b       	sub	r26, r18
    2d40:	b3 0b       	sbc	r27, r19
    2d42:	e4 0b       	sbc	r30, r20
    2d44:	f5 0b       	sbc	r31, r21

00002d46 <__udivmodsi4_ep>:
    2d46:	66 1f       	adc	r22, r22
    2d48:	77 1f       	adc	r23, r23
    2d4a:	88 1f       	adc	r24, r24
    2d4c:	99 1f       	adc	r25, r25
    2d4e:	1a 94       	dec	r1
    2d50:	69 f7       	brne	.-38     	; 0x2d2c <__udivmodsi4_loop>
    2d52:	60 95       	com	r22
    2d54:	70 95       	com	r23
    2d56:	80 95       	com	r24
    2d58:	90 95       	com	r25
    2d5a:	9b 01       	movw	r18, r22
    2d5c:	ac 01       	movw	r20, r24
    2d5e:	bd 01       	movw	r22, r26
    2d60:	cf 01       	movw	r24, r30
    2d62:	08 95       	ret

00002d64 <_exit>:
    2d64:	f8 94       	cli

00002d66 <__stop_program>:
    2d66:	ff cf       	rjmp	.-2      	; 0x2d66 <__stop_program>
