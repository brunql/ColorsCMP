
ColorsCMP_EclipseEdition.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ab8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002b0  00800060  00002ab8  00002b2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002c  00800310  00002d68  00002ddc  2**0
                  ALLOC
  3 .stab         00004fbc  00000000  00000000  00002ddc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001a4d  00000000  00000000  00007d98  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 0a 02 	jmp	0x414	; 0x414 <__ctors_end>
       4:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
       8:	0c 94 27 08 	jmp	0x104e	; 0x104e <__vector_2>
       c:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      10:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      14:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <__vector_5>
      18:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      1c:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      20:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      24:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      28:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      2c:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      30:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      34:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      38:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      3c:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      40:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      44:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      48:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      4c:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      50:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>

00000054 <FontLookup>:
      54:	00 00 00 00 00 00 00 2f 00 00 00 07 00 07 00 14     ......./........
      64:	7f 14 7f 14 24 2a 7f 2a 12 c4 c8 10 26 46 36 49     ....$*.*....&F6I
      74:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
      84:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 00 50 30     ....>....>....P0
      94:	00 10 10 10 10 10 00 60 60 00 00 20 10 08 04 02     .......``.. ....
      a4:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
      b4:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
      c4:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
      d4:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
      e4:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
      f4:	3e 59 65 65 5e 7e 11 11 11 7e 7f 49 49 49 36 3e     >Yee^~...~.III6>
     104:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     114:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     124:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     134:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     144:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     154:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     164:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     174:	08 07 61 51 49 45 43 00 7f 41 41 00 55 2a 55 2a     ..aQIEC..AA.U*U*
     184:	55 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40     U.AA.......@@@@@
     194:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     1a4:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     1b4:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
     1c4:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     1d4:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     1e4:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     1f4:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     204:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     214:	50 3c 44 64 54 4c 44                                P<DdTLD

0000021b <LcdImage_Upper>:
     21b:	ff ff 7f 7f 45 5d 5d 5d 5d 5d 5d 5d 5d 5d 5d 7f     ....E]]]]]]]]]].
     22b:	7f 41 5f 5d 5d 5d 5d 5d 5d 5d 5d 5d 41 7f 7f 41     .A_]]]]]]]]]A..A
     23b:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 7f 7f 41 5f 5d 5d     __________..A_]]
     24b:	5d 5d 5d 5d 5d 5d 5d 41 7f 7f 43 7d 7d 7d 7d 7d     ]]]]]]]A..C}}}}}
     25b:	7d 7d 7d 7d 7f 7f 51 55 55 55 55 55 55 55 55 45     }}}}..QUUUUUUUUE
     26b:	7f 7f ff ff                                         ....

0000026f <LcdImage_Center>:
     26f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     27f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     28f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     29f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     2af:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     2bf:	ff ff ff ff ff ff ff 0c 0c fc fc fc fc fc fc fc     ................
     2cf:	fc fc fc fc fc fc fc fc fc fc fc fc fc fc ff ff     ................
     2df:	ff 0c 0c fc fc fc fc f0 f0 f3 f3 f3 c3 cf cf cf     ................
     2ef:	cf c3 f3 f3 f3 f0 f0 fc fc fc fc 00 00 ff ff ff     ................
     2ff:	00 00 9f 9f 9c 9c 9c 9c 9c 9c 9c 9c 9c 9c 9c 9c     ................
     30f:	9c 9c 9c 9c 80 80 ff ff ff ff ff e0 e0 e7 e7 e7     ................
     31f:	e7 e7 e7 e7 e7 e7 e7 e7 e7 e7 e7 e7 e7 e7 e7 e7     ................
     32f:	e7 e7 ff ff ff e0 e0 ff ff ff ff ff ff ff ff ff     ................
     33f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff e0     ................
     34f:	e0 ff ff ff e0 e0 ff ff ff ff ff ff ff ff ff ff     ................
     35f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     36f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     37f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     38f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     39f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     3af:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................

000003bf <LcdImage_brunql_gmail_com>:
     3bf:	ff ff ff c8 db db c3 ff cb fb fb fb ff cb df df     ................
     3cf:	c3 ff cb fb fb c3 ff cb db db df 03 7f ff c0 ff     ................
     3df:	ff 01 7e 66 5a 5a 42 5a 5e 62 7f ff c7 bb ab ab     ..~fZZBZ^b......
     3ef:	cf ff cb fb c3 fb c3 ff cb db db c3 db ff c2 ff     ................
     3ff:	c0 ff df ff cb db db ff cb db db c3 ff cb fb c3     ................
     40f:	fb c3 ff ff 00                                      .....

00000414 <__ctors_end>:
     414:	11 24       	eor	r1, r1
     416:	1f be       	out	0x3f, r1	; 63
     418:	cf e5       	ldi	r28, 0x5F	; 95
     41a:	d8 e0       	ldi	r29, 0x08	; 8
     41c:	de bf       	out	0x3e, r29	; 62
     41e:	cd bf       	out	0x3d, r28	; 61

00000420 <__do_copy_data>:
     420:	13 e0       	ldi	r17, 0x03	; 3
     422:	a0 e6       	ldi	r26, 0x60	; 96
     424:	b0 e0       	ldi	r27, 0x00	; 0
     426:	e8 eb       	ldi	r30, 0xB8	; 184
     428:	fa e2       	ldi	r31, 0x2A	; 42
     42a:	02 c0       	rjmp	.+4      	; 0x430 <.do_copy_data_start>

0000042c <.do_copy_data_loop>:
     42c:	05 90       	lpm	r0, Z+
     42e:	0d 92       	st	X+, r0

00000430 <.do_copy_data_start>:
     430:	a0 31       	cpi	r26, 0x10	; 16
     432:	b1 07       	cpc	r27, r17
     434:	d9 f7       	brne	.-10     	; 0x42c <.do_copy_data_loop>

00000436 <__do_clear_bss>:
     436:	13 e0       	ldi	r17, 0x03	; 3
     438:	a0 e1       	ldi	r26, 0x10	; 16
     43a:	b3 e0       	ldi	r27, 0x03	; 3
     43c:	01 c0       	rjmp	.+2      	; 0x440 <.do_clear_bss_start>

0000043e <.do_clear_bss_loop>:
     43e:	1d 92       	st	X+, r1

00000440 <.do_clear_bss_start>:
     440:	ac 33       	cpi	r26, 0x3C	; 60
     442:	b1 07       	cpc	r27, r17
     444:	e1 f7       	brne	.-8      	; 0x43e <.do_clear_bss_loop>
     446:	0e 94 48 06 	call	0xc90	; 0xc90 <main>
     44a:	0c 94 5a 15 	jmp	0x2ab4	; 0x2ab4 <_exit>

0000044e <__bad_interrupt>:
     44e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000452 <SnakeGame_Stop>:
}

void SnakeGame_Stop(void)
{
	// show results and go to main menu
}
     452:	08 95       	ret

00000454 <snakegame_ClearResults>:

void snakegame_ClearResults(void){
	snake_add_index = 4;
     454:	84 e0       	ldi	r24, 0x04	; 4
     456:	80 93 63 00 	sts	0x0063, r24
}
     45a:	08 95       	ret

0000045c <SnakeGame_TurnLeft>:


void SnakeGame_TurnLeft(void)
{
	// directions mb: UP = 1, RIGHT = 2, DOWN = 3, LEFT = 4
	if( --snake[0].direction == 0){
     45c:	80 91 66 00 	lds	r24, 0x0066
     460:	81 50       	subi	r24, 0x01	; 1
     462:	80 93 66 00 	sts	0x0066, r24
     466:	88 23       	and	r24, r24
     468:	19 f4       	brne	.+6      	; 0x470 <SnakeGame_TurnLeft+0x14>
		snake[0].direction = LEFT;
     46a:	84 e0       	ldi	r24, 0x04	; 4
     46c:	80 93 66 00 	sts	0x0066, r24
     470:	08 95       	ret

00000472 <SnakeGame_TurnRight>:
	}
}

void SnakeGame_TurnRight(void)
{
	if( ++snake[0].direction == 5){
     472:	80 91 66 00 	lds	r24, 0x0066
     476:	8f 5f       	subi	r24, 0xFF	; 255
     478:	80 93 66 00 	sts	0x0066, r24
     47c:	85 30       	cpi	r24, 0x05	; 5
     47e:	19 f4       	brne	.+6      	; 0x486 <SnakeGame_TurnRight+0x14>
		snake[0].direction = UP;
     480:	81 e0       	ldi	r24, 0x01	; 1
     482:	80 93 66 00 	sts	0x0066, r24
     486:	08 95       	ret

00000488 <SnakeGame_AddmeUpdateXY>:
}


void SnakeGame_AddmeUpdateXY(void)
{
	addme_x = 70;//rand() & 0b00011111;
     488:	86 e4       	ldi	r24, 0x46	; 70
     48a:	80 93 61 00 	sts	0x0061, r24
	addme_y = 20;//(rand() & 0b00001111) + 8;
     48e:	84 e1       	ldi	r24, 0x14	; 20
     490:	80 93 62 00 	sts	0x0062, r24
}
     494:	08 95       	ret

00000496 <snakegame_DirectionStep>:

	snake_add_index++; // don't forget to update index
}

void snakegame_DirectionStep(point *p_snake)
{
     496:	fc 01       	movw	r30, r24
	switch(p_snake->direction)
     498:	82 81       	ldd	r24, Z+2	; 0x02
     49a:	82 30       	cpi	r24, 0x02	; 2
     49c:	01 f1       	breq	.+64     	; 0x4de <snakegame_DirectionStep+0x48>
     49e:	83 30       	cpi	r24, 0x03	; 3
     4a0:	18 f4       	brcc	.+6      	; 0x4a8 <snakegame_DirectionStep+0x12>
     4a2:	81 30       	cpi	r24, 0x01	; 1
     4a4:	21 f5       	brne	.+72     	; 0x4ee <snakegame_DirectionStep+0x58>
     4a6:	05 c0       	rjmp	.+10     	; 0x4b2 <snakegame_DirectionStep+0x1c>
     4a8:	83 30       	cpi	r24, 0x03	; 3
     4aa:	51 f0       	breq	.+20     	; 0x4c0 <snakegame_DirectionStep+0x2a>
     4ac:	84 30       	cpi	r24, 0x04	; 4
     4ae:	f9 f4       	brne	.+62     	; 0x4ee <snakegame_DirectionStep+0x58>
     4b0:	0f c0       	rjmp	.+30     	; 0x4d0 <snakegame_DirectionStep+0x3a>
	{
		case UP:
			if(--p_snake->y < 8) 	p_snake->y = 47;
     4b2:	81 81       	ldd	r24, Z+1	; 0x01
     4b4:	81 50       	subi	r24, 0x01	; 1
     4b6:	81 83       	std	Z+1, r24	; 0x01
     4b8:	88 30       	cpi	r24, 0x08	; 8
     4ba:	f0 f4       	brcc	.+60     	; 0x4f8 <snakegame_DirectionStep+0x62>
     4bc:	8f e2       	ldi	r24, 0x2F	; 47
     4be:	06 c0       	rjmp	.+12     	; 0x4cc <snakegame_DirectionStep+0x36>
			break;
		case DOWN:
			if(++p_snake->y > 47) 	p_snake->y = 9;
     4c0:	81 81       	ldd	r24, Z+1	; 0x01
     4c2:	8f 5f       	subi	r24, 0xFF	; 255
     4c4:	81 83       	std	Z+1, r24	; 0x01
     4c6:	80 33       	cpi	r24, 0x30	; 48
     4c8:	b8 f0       	brcs	.+46     	; 0x4f8 <snakegame_DirectionStep+0x62>
     4ca:	89 e0       	ldi	r24, 0x09	; 9
     4cc:	81 83       	std	Z+1, r24	; 0x01
     4ce:	08 95       	ret
			break;
		case LEFT:
			if(--p_snake->x < 1) 	p_snake->x = 83;
     4d0:	80 81       	ld	r24, Z
     4d2:	81 50       	subi	r24, 0x01	; 1
     4d4:	80 83       	st	Z, r24
     4d6:	88 23       	and	r24, r24
     4d8:	79 f4       	brne	.+30     	; 0x4f8 <snakegame_DirectionStep+0x62>
     4da:	83 e5       	ldi	r24, 0x53	; 83
     4dc:	06 c0       	rjmp	.+12     	; 0x4ea <snakegame_DirectionStep+0x54>
			break;
		case RIGHT:
			if(++p_snake->x > 83) 	p_snake->x = 1;
     4de:	80 81       	ld	r24, Z
     4e0:	8f 5f       	subi	r24, 0xFF	; 255
     4e2:	80 83       	st	Z, r24
     4e4:	84 35       	cpi	r24, 0x54	; 84
     4e6:	40 f0       	brcs	.+16     	; 0x4f8 <snakegame_DirectionStep+0x62>
     4e8:	81 e0       	ldi	r24, 0x01	; 1
     4ea:	80 83       	st	Z, r24
     4ec:	08 95       	ret
			break;
		default: // error
			p_snake->x = 0;
     4ee:	10 82       	st	Z, r1
			p_snake->y = 17;
     4f0:	81 e1       	ldi	r24, 0x11	; 17
     4f2:	81 83       	std	Z+1, r24	; 0x01
			p_snake->direction = RIGHT;
     4f4:	82 e0       	ldi	r24, 0x02	; 2
     4f6:	82 83       	std	Z+2, r24	; 0x02
     4f8:	08 95       	ret

000004fa <snakegame_AddSnakePoint>:

PGM_P uwin = "You win!";

void snakegame_AddSnakePoint(void)
{
	if(snake_add_index >= 5){
     4fa:	80 91 63 00 	lds	r24, 0x0063
     4fe:	85 30       	cpi	r24, 0x05	; 5
     500:	20 f1       	brcs	.+72     	; 0x54a <snakegame_AddSnakePoint+0x50>
		Lcd3310_ClearCenter();
     502:	0e 94 93 0a 	call	0x1526	; 0x1526 <Lcd3310_ClearCenter>
		Lcd3310_GotoXY(4, 3);
     506:	84 e0       	ldi	r24, 0x04	; 4
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	63 e0       	ldi	r22, 0x03	; 3
     50c:	70 e0       	ldi	r23, 0x00	; 0
     50e:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <Lcd3310_GotoXY>
		Lcd3310_String_P(uwin, WHITE_TEXT_ON_BLACK);
     512:	80 91 8b 00 	lds	r24, 0x008B
     516:	90 91 8c 00 	lds	r25, 0x008C
     51a:	61 e0       	ldi	r22, 0x01	; 1
     51c:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <Lcd3310_String_P>
     520:	80 e1       	ldi	r24, 0x10	; 16
     522:	97 e2       	ldi	r25, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     524:	20 e9       	ldi	r18, 0x90	; 144
     526:	31 e0       	ldi	r19, 0x01	; 1
     528:	f9 01       	movw	r30, r18
     52a:	31 97       	sbiw	r30, 0x01	; 1
     52c:	f1 f7       	brne	.-4      	; 0x52a <snakegame_AddSnakePoint+0x30>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     52e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     530:	d9 f7       	brne	.-10     	; 0x528 <snakegame_AddSnakePoint+0x2e>
		_delay_ms(1000);
		FLAGS_SWITCH_ON( SNAKE_STOP_GAME_FLAG );
     532:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     534:	f8 94       	cli
     536:	80 91 26 03 	lds	r24, 0x0326
     53a:	90 91 27 03 	lds	r25, 0x0327
     53e:	92 60       	ori	r25, 0x02	; 2
     540:	90 93 27 03 	sts	0x0327, r25
     544:	80 93 26 03 	sts	0x0326, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     548:	2f bf       	out	0x3f, r18	; 63
	}

	// TODO: Need test!
	// Set for new point values of previous
	snake[snake_add_index].x = snake[snake_add_index -1].x;
     54a:	40 91 63 00 	lds	r20, 0x0063
     54e:	84 2f       	mov	r24, r20
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	9c 01       	movw	r18, r24
     554:	21 50       	subi	r18, 0x01	; 1
     556:	30 40       	sbci	r19, 0x00	; 0
     558:	dc 01       	movw	r26, r24
     55a:	aa 0f       	add	r26, r26
     55c:	bb 1f       	adc	r27, r27
     55e:	a8 0f       	add	r26, r24
     560:	b9 1f       	adc	r27, r25
     562:	ac 59       	subi	r26, 0x9C	; 156
     564:	bf 4f       	sbci	r27, 0xFF	; 255
     566:	f9 01       	movw	r30, r18
     568:	ee 0f       	add	r30, r30
     56a:	ff 1f       	adc	r31, r31
     56c:	e2 0f       	add	r30, r18
     56e:	f3 1f       	adc	r31, r19
     570:	ec 59       	subi	r30, 0x9C	; 156
     572:	ff 4f       	sbci	r31, 0xFF	; 255
     574:	80 81       	ld	r24, Z
     576:	8c 93       	st	X, r24
	snake[snake_add_index].y = snake[snake_add_index -1].y;
     578:	81 81       	ldd	r24, Z+1	; 0x01
     57a:	11 96       	adiw	r26, 0x01	; 1
     57c:	8c 93       	st	X, r24
     57e:	11 97       	sbiw	r26, 0x01	; 1
	snake[snake_add_index].direction = snake[snake_add_index -1].direction;
     580:	92 81       	ldd	r25, Z+2	; 0x02
     582:	12 96       	adiw	r26, 0x02	; 2
     584:	9c 93       	st	X, r25
     586:	12 97       	sbiw	r26, 0x02	; 2

	// After that do one step backward!
	// turn back
	if(snake[snake_add_index].direction == UP || snake[snake_add_index].direction == RIGHT){
     588:	89 2f       	mov	r24, r25
     58a:	81 50       	subi	r24, 0x01	; 1
     58c:	82 30       	cpi	r24, 0x02	; 2
     58e:	10 f4       	brcc	.+4      	; 0x594 <snakegame_AddSnakePoint+0x9a>
		snake[snake_add_index].direction += 2;
     590:	9e 5f       	subi	r25, 0xFE	; 254
     592:	01 c0       	rjmp	.+2      	; 0x596 <snakegame_AddSnakePoint+0x9c>
	}else{
		snake[snake_add_index].direction -= 2;
     594:	92 50       	subi	r25, 0x02	; 2
     596:	12 96       	adiw	r26, 0x02	; 2
     598:	9c 93       	st	X, r25
	}

	// we are now can go back
	snakegame_DirectionStep(&snake[snake_add_index]);
     59a:	83 e0       	ldi	r24, 0x03	; 3
     59c:	48 9f       	mul	r20, r24
     59e:	c0 01       	movw	r24, r0
     5a0:	11 24       	eor	r1, r1
     5a2:	8c 59       	subi	r24, 0x9C	; 156
     5a4:	9f 4f       	sbci	r25, 0xFF	; 255
     5a6:	0e 94 4b 02 	call	0x496	; 0x496 <snakegame_DirectionStep>

	// restore direction
	snake[snake_add_index].direction = snake[snake_add_index -1].direction;
     5aa:	20 91 63 00 	lds	r18, 0x0063
     5ae:	82 2f       	mov	r24, r18
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	dc 01       	movw	r26, r24
     5b4:	aa 0f       	add	r26, r26
     5b6:	bb 1f       	adc	r27, r27
     5b8:	a8 0f       	add	r26, r24
     5ba:	b9 1f       	adc	r27, r25
     5bc:	ac 59       	subi	r26, 0x9C	; 156
     5be:	bf 4f       	sbci	r27, 0xFF	; 255
     5c0:	01 97       	sbiw	r24, 0x01	; 1
     5c2:	fc 01       	movw	r30, r24
     5c4:	ee 0f       	add	r30, r30
     5c6:	ff 1f       	adc	r31, r31
     5c8:	e8 0f       	add	r30, r24
     5ca:	f9 1f       	adc	r31, r25
     5cc:	ec 59       	subi	r30, 0x9C	; 156
     5ce:	ff 4f       	sbci	r31, 0xFF	; 255
     5d0:	82 81       	ldd	r24, Z+2	; 0x02
     5d2:	12 96       	adiw	r26, 0x02	; 2
     5d4:	8c 93       	st	X, r24

	snake_add_index++; // don't forget to update index
     5d6:	2f 5f       	subi	r18, 0xFF	; 255
     5d8:	20 93 63 00 	sts	0x0063, r18
}
     5dc:	08 95       	ret

000005de <snakegame_UpdateDisplay>:




void snakegame_UpdateDisplay(void)
{
     5de:	2f 92       	push	r2
     5e0:	3f 92       	push	r3
     5e2:	4f 92       	push	r4
     5e4:	5f 92       	push	r5
     5e6:	6f 92       	push	r6
     5e8:	7f 92       	push	r7
     5ea:	8f 92       	push	r8
     5ec:	9f 92       	push	r9
     5ee:	af 92       	push	r10
     5f0:	bf 92       	push	r11
     5f2:	cf 92       	push	r12
     5f4:	df 92       	push	r13
     5f6:	ef 92       	push	r14
     5f8:	ff 92       	push	r15
     5fa:	0f 93       	push	r16
     5fc:	1f 93       	push	r17
     5fe:	cf 93       	push	r28
     600:	df 93       	push	r29
	Lcd3310_ClearCenter();
     602:	0e 94 93 0a 	call	0x1526	; 0x1526 <Lcd3310_ClearCenter>

	Lcd3310_GotoXY(0,5);
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	65 e0       	ldi	r22, 0x05	; 5
     60c:	70 e0       	ldi	r23, 0x00	; 0
     60e:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <Lcd3310_GotoXY>
	Lcd3310_UInt8AsText(snake[0].x, WHITE_TEXT_ON_BLACK);
     612:	80 91 64 00 	lds	r24, 0x0064
     616:	61 e0       	ldi	r22, 0x01	; 1
     618:	0e 94 b6 0b 	call	0x176c	; 0x176c <Lcd3310_UInt8AsText>
	Lcd3310_Char(' ', WHITE_TEXT_ON_BLACK);
     61c:	80 e2       	ldi	r24, 0x20	; 32
     61e:	61 e0       	ldi	r22, 0x01	; 1
     620:	0e 94 2a 09 	call	0x1254	; 0x1254 <Lcd3310_Char>
	Lcd3310_UInt8AsText(snake[0].y, WHITE_TEXT_ON_BLACK);
     624:	80 91 65 00 	lds	r24, 0x0065
     628:	61 e0       	ldi	r22, 0x01	; 1
     62a:	0e 94 b6 0b 	call	0x176c	; 0x176c <Lcd3310_UInt8AsText>

	uint16_t lcd_index = 0x00;

	// eval values for addme pixel show
	uint8_t addme_line = (uint8_t)addme_y / 8;
     62e:	20 91 62 00 	lds	r18, 0x0062
     632:	82 2e       	mov	r8, r18
     634:	86 94       	lsr	r8
     636:	86 94       	lsr	r8
     638:	86 94       	lsr	r8
	uint8_t addme_display_byte = 1 << ((uint8_t)addme_y % 8);
     63a:	27 70       	andi	r18, 0x07	; 7
     63c:	81 e0       	ldi	r24, 0x01	; 1
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	98 2e       	mov	r9, r24
     642:	01 c0       	rjmp	.+2      	; 0x646 <snakegame_UpdateDisplay+0x68>
     644:	99 0c       	add	r9, r9
     646:	2a 95       	dec	r18
     648:	ea f7       	brpl	.-6      	; 0x644 <snakegame_UpdateDisplay+0x66>
     64a:	aa 24       	eor	r10, r10
	for(uint8_t i=0; i<snake_add_index; i++)
	{
		// GotoXY
		// Eval number of line (mb: 1..5) in display for display_byte
		uint8_t line = (uint8_t) (snake[i].y) / 8;
		lcd_index = (uint16_t) (snake[i].x) + (uint16_t)line * 84;
     64c:	a4 e5       	ldi	r26, 0x54	; 84
     64e:	4a 2e       	mov	r4, r26
		Lcd3310_Send( 0x80 | ((uint16_t)lcd_index % LCD_X_RES), LCD_CMD );
		Lcd3310_Send( 0x40 | ((uint16_t)lcd_index / LCD_X_RES), LCD_CMD );

		// Make sendme byte with all point in this display byte
		// Init with snake[i] point
		uint8_t display_byte = 1 << ((uint8_t)snake[i].y % 8);
     650:	f1 e0       	ldi	r31, 0x01	; 1
     652:	6f 2e       	mov	r6, r31
     654:	71 2c       	mov	r7, r1
		// Find all point near here (in this display byte)
		for(uint8_t j=0; j<snake_add_index; j++)
     656:	e3 e0       	ldi	r30, 0x03	; 3
     658:	5e 2e       	mov	r5, r30
     65a:	67 c0       	rjmp	.+206    	; 0x72a <snakegame_UpdateDisplay+0x14c>
	// Lets draw each point in snake to our lcd.
	for(uint8_t i=0; i<snake_add_index; i++)
	{
		// GotoXY
		// Eval number of line (mb: 1..5) in display for display_byte
		uint8_t line = (uint8_t) (snake[i].y) / 8;
     65c:	2a 2c       	mov	r2, r10
     65e:	33 24       	eor	r3, r3
     660:	61 01       	movw	r12, r2
     662:	cc 0c       	add	r12, r12
     664:	dd 1c       	adc	r13, r13
     666:	76 01       	movw	r14, r12
     668:	e2 0c       	add	r14, r2
     66a:	f3 1c       	adc	r15, r3
     66c:	84 e6       	ldi	r24, 0x64	; 100
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	e8 0e       	add	r14, r24
     672:	f9 1e       	adc	r15, r25
     674:	e7 01       	movw	r28, r14
     676:	b9 80       	ldd	r11, Y+1	; 0x01
     678:	b6 94       	lsr	r11
     67a:	b6 94       	lsr	r11
     67c:	b6 94       	lsr	r11
		lcd_index = (uint16_t) (snake[i].x) + (uint16_t)line * 84;
     67e:	b4 9c       	mul	r11, r4
     680:	80 01       	movw	r16, r0
     682:	11 24       	eor	r1, r1
     684:	88 81       	ld	r24, Y
     686:	08 0f       	add	r16, r24
     688:	11 1d       	adc	r17, r1
		Lcd3310_Send( 0x80 | ((uint16_t)lcd_index % LCD_X_RES), LCD_CMD );
     68a:	c8 01       	movw	r24, r16
     68c:	64 e5       	ldi	r22, 0x54	; 84
     68e:	70 e0       	ldi	r23, 0x00	; 0
     690:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__udivmodhi4>
     694:	80 68       	ori	r24, 0x80	; 128
     696:	60 e0       	ldi	r22, 0x00	; 0
     698:	0e 94 92 0b 	call	0x1724	; 0x1724 <Lcd3310_Send>
		Lcd3310_Send( 0x40 | ((uint16_t)lcd_index / LCD_X_RES), LCD_CMD );
     69c:	c8 01       	movw	r24, r16
     69e:	64 e5       	ldi	r22, 0x54	; 84
     6a0:	70 e0       	ldi	r23, 0x00	; 0
     6a2:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__udivmodhi4>
     6a6:	86 2f       	mov	r24, r22
     6a8:	80 64       	ori	r24, 0x40	; 64
     6aa:	60 e0       	ldi	r22, 0x00	; 0
     6ac:	0e 94 92 0b 	call	0x1724	; 0x1724 <Lcd3310_Send>

		// Make sendme byte with all point in this display byte
		// Init with snake[i] point
		uint8_t display_byte = 1 << ((uint8_t)snake[i].y % 8);
     6b0:	89 81       	ldd	r24, Y+1	; 0x01
     6b2:	87 70       	andi	r24, 0x07	; 7
     6b4:	36 2d       	mov	r19, r6
     6b6:	01 c0       	rjmp	.+2      	; 0x6ba <snakegame_UpdateDisplay+0xdc>
     6b8:	33 0f       	add	r19, r19
     6ba:	8a 95       	dec	r24
     6bc:	ea f7       	brpl	.-6      	; 0x6b8 <snakegame_UpdateDisplay+0xda>
		// Find all point near here (in this display byte)
		for(uint8_t j=0; j<snake_add_index; j++)
     6be:	80 91 63 00 	lds	r24, 0x0063
     6c2:	e4 e6       	ldi	r30, 0x64	; 100
     6c4:	f0 e0       	ldi	r31, 0x00	; 0
     6c6:	85 9d       	mul	r24, r5
     6c8:	a0 01       	movw	r20, r0
     6ca:	11 24       	eor	r1, r1
     6cc:	4e 0f       	add	r20, r30
     6ce:	5f 1f       	adc	r21, r31
     6d0:	d6 01       	movw	r26, r12
		{
			uint8_t line_find = (uint8_t)snake[j].y / 8;
			if(snake[i].x == snake[j].x && line == line_find){
     6d2:	b7 01       	movw	r22, r14
     6d4:	15 c0       	rjmp	.+42     	; 0x700 <snakegame_UpdateDisplay+0x122>
		// Init with snake[i] point
		uint8_t display_byte = 1 << ((uint8_t)snake[i].y % 8);
		// Find all point near here (in this display byte)
		for(uint8_t j=0; j<snake_add_index; j++)
		{
			uint8_t line_find = (uint8_t)snake[j].y / 8;
     6d6:	21 81       	ldd	r18, Z+1	; 0x01
			if(snake[i].x == snake[j].x && line == line_find){
     6d8:	eb 01       	movw	r28, r22
     6da:	98 81       	ld	r25, Y
     6dc:	80 81       	ld	r24, Z
     6de:	98 17       	cp	r25, r24
     6e0:	71 f4       	brne	.+28     	; 0x6fe <snakegame_UpdateDisplay+0x120>
     6e2:	82 2f       	mov	r24, r18
     6e4:	86 95       	lsr	r24
     6e6:	86 95       	lsr	r24
     6e8:	86 95       	lsr	r24
     6ea:	b8 16       	cp	r11, r24
     6ec:	41 f4       	brne	.+16     	; 0x6fe <snakegame_UpdateDisplay+0x120>
				display_byte |= 1 << ((uint8_t)snake[j].y % 8);
     6ee:	27 70       	andi	r18, 0x07	; 7
     6f0:	c3 01       	movw	r24, r6
     6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <snakegame_UpdateDisplay+0x11a>
     6f4:	88 0f       	add	r24, r24
     6f6:	99 1f       	adc	r25, r25
     6f8:	2a 95       	dec	r18
     6fa:	e2 f7       	brpl	.-8      	; 0x6f4 <snakegame_UpdateDisplay+0x116>
     6fc:	38 2b       	or	r19, r24
     6fe:	33 96       	adiw	r30, 0x03	; 3

		// Make sendme byte with all point in this display byte
		// Init with snake[i] point
		uint8_t display_byte = 1 << ((uint8_t)snake[i].y % 8);
		// Find all point near here (in this display byte)
		for(uint8_t j=0; j<snake_add_index; j++)
     700:	e4 17       	cp	r30, r20
     702:	f5 07       	cpc	r31, r21
     704:	41 f7       	brne	.-48     	; 0x6d6 <snakegame_UpdateDisplay+0xf8>
				display_byte |= 1 << ((uint8_t)snake[j].y % 8);
			}
		}

		// check that snake[i] and addme points are in same display_byte
		if(addme_x == snake[i].x && addme_line == line){
     706:	a2 0d       	add	r26, r2
     708:	b3 1d       	adc	r27, r3
     70a:	ac 59       	subi	r26, 0x9C	; 156
     70c:	bf 4f       	sbci	r27, 0xFF	; 255
     70e:	90 91 61 00 	lds	r25, 0x0061
     712:	8c 91       	ld	r24, X
     714:	98 17       	cp	r25, r24
     716:	21 f4       	brne	.+8      	; 0x720 <snakegame_UpdateDisplay+0x142>
     718:	8b 14       	cp	r8, r11
     71a:	11 f4       	brne	.+4      	; 0x720 <snakegame_UpdateDisplay+0x142>
			display_byte |= addme_display_byte;
     71c:	39 29       	or	r19, r9
     71e:	99 24       	eor	r9, r9
			addme_display_byte = 0x00; // say that we already draw this point
		}

		Lcd3310_Send( display_byte, LCD_DATA );
     720:	83 2f       	mov	r24, r19
     722:	61 e0       	ldi	r22, 0x01	; 1
     724:	0e 94 92 0b 	call	0x1724	; 0x1724 <Lcd3310_Send>

	// TODO: Rewrite this O(n**2) time solution to something faster and easier
	// TODO: Need test!

	// Lets draw each point in snake to our lcd.
	for(uint8_t i=0; i<snake_add_index; i++)
     728:	a3 94       	inc	r10
     72a:	80 91 63 00 	lds	r24, 0x0063
     72e:	a8 16       	cp	r10, r24
     730:	08 f4       	brcc	.+2      	; 0x734 <snakegame_UpdateDisplay+0x156>
     732:	94 cf       	rjmp	.-216    	; 0x65c <snakegame_UpdateDisplay+0x7e>
		Lcd3310_Send( display_byte, LCD_DATA );
	}


	// if we didn't draw it before lets do it now
	if(addme_display_byte){
     734:	99 20       	and	r9, r9
     736:	f9 f0       	breq	.+62     	; 0x776 <snakegame_UpdateDisplay+0x198>
		lcd_index = (uint16_t)addme_x + (uint16_t)addme_line * 84;
     738:	04 e5       	ldi	r16, 0x54	; 84
     73a:	80 9e       	mul	r8, r16
     73c:	80 01       	movw	r16, r0
     73e:	11 24       	eor	r1, r1
     740:	80 91 61 00 	lds	r24, 0x0061
     744:	08 0f       	add	r16, r24
     746:	11 1d       	adc	r17, r1
		Lcd3310_Send( 0x80 | (lcd_index % LCD_X_RES), LCD_CMD );
     748:	c8 01       	movw	r24, r16
     74a:	64 e5       	ldi	r22, 0x54	; 84
     74c:	70 e0       	ldi	r23, 0x00	; 0
     74e:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__udivmodhi4>
     752:	80 68       	ori	r24, 0x80	; 128
     754:	60 e0       	ldi	r22, 0x00	; 0
     756:	0e 94 92 0b 	call	0x1724	; 0x1724 <Lcd3310_Send>
		Lcd3310_Send( 0x40 | (lcd_index / LCD_X_RES), LCD_CMD );
     75a:	c8 01       	movw	r24, r16
     75c:	64 e5       	ldi	r22, 0x54	; 84
     75e:	70 e0       	ldi	r23, 0x00	; 0
     760:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__udivmodhi4>
     764:	86 2f       	mov	r24, r22
     766:	80 64       	ori	r24, 0x40	; 64
     768:	60 e0       	ldi	r22, 0x00	; 0
     76a:	0e 94 92 0b 	call	0x1724	; 0x1724 <Lcd3310_Send>
		Lcd3310_Send( addme_display_byte, LCD_DATA );
     76e:	89 2d       	mov	r24, r9
     770:	61 e0       	ldi	r22, 0x01	; 1
     772:	0e 94 92 0b 	call	0x1724	; 0x1724 <Lcd3310_Send>
	}
}
     776:	df 91       	pop	r29
     778:	cf 91       	pop	r28
     77a:	1f 91       	pop	r17
     77c:	0f 91       	pop	r16
     77e:	ff 90       	pop	r15
     780:	ef 90       	pop	r14
     782:	df 90       	pop	r13
     784:	cf 90       	pop	r12
     786:	bf 90       	pop	r11
     788:	af 90       	pop	r10
     78a:	9f 90       	pop	r9
     78c:	8f 90       	pop	r8
     78e:	7f 90       	pop	r7
     790:	6f 90       	pop	r6
     792:	5f 90       	pop	r5
     794:	4f 90       	pop	r4
     796:	3f 90       	pop	r3
     798:	2f 90       	pop	r2
     79a:	08 95       	ret

0000079c <SnakeGame_TakeNextStep>:
void snakegame_ClearResults(void){
	snake_add_index = 4;
}

void SnakeGame_TakeNextStep(void)
{
     79c:	0f 93       	push	r16
     79e:	1f 93       	push	r17
     7a0:	10 e0       	ldi	r17, 0x00	; 0
	// TODO: Need test!
//
//	// Lets go somethere:
	for(uint8_t i=0; i<snake_add_index; i++)
	{
		snakegame_DirectionStep(&snake[i]);
     7a2:	03 e0       	ldi	r16, 0x03	; 3
     7a4:	08 c0       	rjmp	.+16     	; 0x7b6 <SnakeGame_TakeNextStep+0x1a>
     7a6:	10 9f       	mul	r17, r16
     7a8:	c0 01       	movw	r24, r0
     7aa:	11 24       	eor	r1, r1
     7ac:	8c 59       	subi	r24, 0x9C	; 156
     7ae:	9f 4f       	sbci	r25, 0xFF	; 255
     7b0:	0e 94 4b 02 	call	0x496	; 0x496 <snakegame_DirectionStep>
void SnakeGame_TakeNextStep(void)
{
	// TODO: Need test!
//
//	// Lets go somethere:
	for(uint8_t i=0; i<snake_add_index; i++)
     7b4:	1f 5f       	subi	r17, 0xFF	; 255
     7b6:	30 91 63 00 	lds	r19, 0x0063
     7ba:	13 17       	cp	r17, r19
     7bc:	a0 f3       	brcs	.-24     	; 0x7a6 <SnakeGame_TakeNextStep+0xa>
	{
		snakegame_DirectionStep(&snake[i]);
	}
//
//	// Update direction of each point from last to first
	for(uint8_t i = snake_add_index-1; i != 0 && i < snake_add_index; i--)
     7be:	23 2f       	mov	r18, r19
     7c0:	14 c0       	rjmp	.+40     	; 0x7ea <SnakeGame_TakeNextStep+0x4e>
	{
		snake[i].direction = snake[i-1].direction;
     7c2:	82 2f       	mov	r24, r18
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	dc 01       	movw	r26, r24
     7c8:	aa 0f       	add	r26, r26
     7ca:	bb 1f       	adc	r27, r27
     7cc:	a8 0f       	add	r26, r24
     7ce:	b9 1f       	adc	r27, r25
     7d0:	ac 59       	subi	r26, 0x9C	; 156
     7d2:	bf 4f       	sbci	r27, 0xFF	; 255
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	fc 01       	movw	r30, r24
     7d8:	ee 0f       	add	r30, r30
     7da:	ff 1f       	adc	r31, r31
     7dc:	e8 0f       	add	r30, r24
     7de:	f9 1f       	adc	r31, r25
     7e0:	ec 59       	subi	r30, 0x9C	; 156
     7e2:	ff 4f       	sbci	r31, 0xFF	; 255
     7e4:	82 81       	ldd	r24, Z+2	; 0x02
     7e6:	12 96       	adiw	r26, 0x02	; 2
     7e8:	8c 93       	st	X, r24
	{
		snakegame_DirectionStep(&snake[i]);
	}
//
//	// Update direction of each point from last to first
	for(uint8_t i = snake_add_index-1; i != 0 && i < snake_add_index; i--)
     7ea:	21 50       	subi	r18, 0x01	; 1
     7ec:	11 f0       	breq	.+4      	; 0x7f2 <SnakeGame_TakeNextStep+0x56>
     7ee:	23 17       	cp	r18, r19
     7f0:	40 f3       	brcs	.-48     	; 0x7c2 <SnakeGame_TakeNextStep+0x26>
	{
		snake[i].direction = snake[i-1].direction;
	}

	// Check if we come to addme point
	if(snake[0].x == addme_x && snake[0].y == addme_y){
     7f2:	90 91 64 00 	lds	r25, 0x0064
     7f6:	80 91 61 00 	lds	r24, 0x0061
     7fa:	98 17       	cp	r25, r24
     7fc:	71 f4       	brne	.+28     	; 0x81a <SnakeGame_TakeNextStep+0x7e>
     7fe:	90 91 65 00 	lds	r25, 0x0065
     802:	80 91 62 00 	lds	r24, 0x0062
     806:	98 17       	cp	r25, r24
     808:	41 f4       	brne	.+16     	; 0x81a <SnakeGame_TakeNextStep+0x7e>
		snakegame_AddSnakePoint();
     80a:	0e 94 7d 02 	call	0x4fa	; 0x4fa <snakegame_AddSnakePoint>
		addme_x = 2;
     80e:	82 e0       	ldi	r24, 0x02	; 2
     810:	80 93 61 00 	sts	0x0061, r24
		addme_y = 10;
     814:	8a e0       	ldi	r24, 0x0A	; 10
     816:	80 93 62 00 	sts	0x0062, r24
	}

	snakegame_UpdateDisplay();
     81a:	0e 94 ef 02 	call	0x5de	; 0x5de <snakegame_UpdateDisplay>
}
     81e:	1f 91       	pop	r17
     820:	0f 91       	pop	r16
     822:	08 95       	ret

00000824 <SnakeGame_Start>:


void SnakeGame_Start(void)
{
	//SnakeGame_GetPresent();
	snakegame_UpdateDisplay();
     824:	0e 94 ef 02 	call	0x5de	; 0x5de <snakegame_UpdateDisplay>
}
     828:	08 95       	ret

0000082a <hex2dec_result>:
PGM_P pstr_complete = "Done!";
PGM_P pstr_please_wait = "Please wait...";


void hex2dec_result(uint16_t hex, uint8_t result_index, uint8_t result_color)
{
     82a:	cf 92       	push	r12
     82c:	df 92       	push	r13
     82e:	ef 92       	push	r14
     830:	ff 92       	push	r15
     832:	0f 93       	push	r16
     834:	1f 93       	push	r17
     836:	7c 01       	movw	r14, r24
     838:	26 2f       	mov	r18, r22
	uint8_t res2, res1, res0;
	res0 =  hex % 10;
	hex /= 10;
     83a:	6a e0       	ldi	r22, 0x0A	; 10
     83c:	70 e0       	ldi	r23, 0x00	; 0
     83e:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__udivmodhi4>
     842:	d6 2e       	mov	r13, r22
     844:	c7 2e       	mov	r12, r23
	hex /= 10;
	res2 = hex % 10;

	uint16_t dec_result = (res2 << 8) | (res1 << 4)| res0;

	result[result_index][result_color] = dec_result;
     846:	30 e0       	ldi	r19, 0x00	; 0
     848:	89 01       	movw	r16, r18
     84a:	00 0f       	add	r16, r16
     84c:	11 1f       	adc	r17, r17
     84e:	02 0f       	add	r16, r18
     850:	13 1f       	adc	r17, r19
     852:	04 0f       	add	r16, r20
     854:	11 1d       	adc	r17, r1
     856:	00 0f       	add	r16, r16
     858:	11 1f       	adc	r17, r17
     85a:	00 5f       	subi	r16, 0xF0	; 240
     85c:	1c 4f       	sbci	r17, 0xFC	; 252
     85e:	86 2f       	mov	r24, r22
     860:	97 2f       	mov	r25, r23
     862:	6a e0       	ldi	r22, 0x0A	; 10
     864:	70 e0       	ldi	r23, 0x00	; 0
     866:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__udivmodhi4>
     86a:	e8 2f       	mov	r30, r24
     86c:	f0 e0       	ldi	r31, 0x00	; 0
     86e:	84 e0       	ldi	r24, 0x04	; 4
     870:	ee 0f       	add	r30, r30
     872:	ff 1f       	adc	r31, r31
     874:	8a 95       	dec	r24
     876:	e1 f7       	brne	.-8      	; 0x870 <__stack+0x11>
     878:	c7 01       	movw	r24, r14
     87a:	6a e0       	ldi	r22, 0x0A	; 10
     87c:	70 e0       	ldi	r23, 0x00	; 0
     87e:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__udivmodhi4>
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	e8 2b       	or	r30, r24
     886:	f9 2b       	or	r31, r25
     888:	8d 2d       	mov	r24, r13
     88a:	9c 2d       	mov	r25, r12
     88c:	6a e0       	ldi	r22, 0x0A	; 10
     88e:	70 e0       	ldi	r23, 0x00	; 0
     890:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__udivmodhi4>
     894:	cb 01       	movw	r24, r22
     896:	6a e0       	ldi	r22, 0x0A	; 10
     898:	70 e0       	ldi	r23, 0x00	; 0
     89a:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__udivmodhi4>
     89e:	38 2f       	mov	r19, r24
     8a0:	20 e0       	ldi	r18, 0x00	; 0
     8a2:	e2 2b       	or	r30, r18
     8a4:	f3 2b       	or	r31, r19
     8a6:	d8 01       	movw	r26, r16
     8a8:	ed 93       	st	X+, r30
     8aa:	fc 93       	st	X, r31
}
     8ac:	1f 91       	pop	r17
     8ae:	0f 91       	pop	r16
     8b0:	ff 90       	pop	r15
     8b2:	ef 90       	pop	r14
     8b4:	df 90       	pop	r13
     8b6:	cf 90       	pop	r12
     8b8:	08 95       	ret

000008ba <StartADC>:


void StartADC(FirstOrSecond first)
{
	if (first){
     8ba:	88 23       	and	r24, r24
     8bc:	11 f0       	breq	.+4      	; 0x8c2 <StartADC+0x8>
		ADMUX &= (unsigned char) ~ _BV(MUX0);
     8be:	38 98       	cbi	0x07, 0	; 7
     8c0:	01 c0       	rjmp	.+2      	; 0x8c4 <StartADC+0xa>
	}else{ // second
		ADMUX |= _BV(MUX0);
     8c2:	38 9a       	sbi	0x07, 0	; 7
     8c4:	88 ec       	ldi	r24, 0xC8	; 200
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	01 97       	sbiw	r24, 0x01	; 1
     8ca:	f1 f7       	brne	.-4      	; 0x8c8 <StartADC+0xe>

	// delay for stabilisation on ADC pin (charge intro reference capacitor)
	// TODO: NEED TEST!
	_delay_us(50);

	ADCSRA |= _BV( ADSC ); // start conversation
     8cc:	36 9a       	sbi	0x06, 6	; 6
	while( ADC_CONVERT_IN_PROGRESS() ) {  };
     8ce:	36 99       	sbic	0x06, 6	; 6
     8d0:	fe cf       	rjmp	.-4      	; 0x8ce <StartADC+0x14>
	adc_data = ADC;
     8d2:	84 b1       	in	r24, 0x04	; 4
     8d4:	95 b1       	in	r25, 0x05	; 5
     8d6:	90 93 2c 03 	sts	0x032C, r25
     8da:	80 93 2b 03 	sts	0x032B, r24
	//result in adc_data
}
     8de:	08 95       	ret

000008e0 <GetValuesFromADC>:

void GetValuesFromADC(void) // with simple averaging
{
	uint16_t temp_val = adc_res_first;
     8e0:	20 91 22 03 	lds	r18, 0x0322
     8e4:	30 91 23 03 	lds	r19, 0x0323
void StartADC(FirstOrSecond first)
{
	if (first){
		ADMUX &= (unsigned char) ~ _BV(MUX0);
	}else{ // second
		ADMUX |= _BV(MUX0);
     8e8:	38 9a       	sbi	0x07, 0	; 7
     8ea:	88 ec       	ldi	r24, 0xC8	; 200
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	01 97       	sbiw	r24, 0x01	; 1
     8f0:	f1 f7       	brne	.-4      	; 0x8ee <GetValuesFromADC+0xe>

	// delay for stabilisation on ADC pin (charge intro reference capacitor)
	// TODO: NEED TEST!
	_delay_us(50);

	ADCSRA |= _BV( ADSC ); // start conversation
     8f2:	36 9a       	sbi	0x06, 6	; 6
	while( ADC_CONVERT_IN_PROGRESS() ) {  };
     8f4:	36 99       	sbic	0x06, 6	; 6
     8f6:	fe cf       	rjmp	.-4      	; 0x8f4 <GetValuesFromADC+0x14>
	adc_data = ADC;
     8f8:	84 b1       	in	r24, 0x04	; 4
     8fa:	95 b1       	in	r25, 0x05	; 5
     8fc:	90 93 2c 03 	sts	0x032C, r25
     900:	80 93 2b 03 	sts	0x032B, r24

void GetValuesFromADC(void) // with simple averaging
{
	uint16_t temp_val = adc_res_first;
	StartADC( FIRST );
	if(temp_val){
     904:	21 15       	cp	r18, r1
     906:	31 05       	cpc	r19, r1
     908:	49 f0       	breq	.+18     	; 0x91c <GetValuesFromADC+0x3c>
		adc_res_first = (adc_data + temp_val) / 2;
     90a:	80 91 2b 03 	lds	r24, 0x032B
     90e:	90 91 2c 03 	lds	r25, 0x032C
     912:	82 0f       	add	r24, r18
     914:	93 1f       	adc	r25, r19
     916:	96 95       	lsr	r25
     918:	87 95       	ror	r24
     91a:	04 c0       	rjmp	.+8      	; 0x924 <GetValuesFromADC+0x44>
	}else{
		adc_res_first = adc_data;
     91c:	80 91 2b 03 	lds	r24, 0x032B
     920:	90 91 2c 03 	lds	r25, 0x032C
     924:	90 93 23 03 	sts	0x0323, r25
     928:	80 93 22 03 	sts	0x0322, r24
	}

	temp_val = adc_res_second;
     92c:	20 91 24 03 	lds	r18, 0x0324
     930:	30 91 25 03 	lds	r19, 0x0325


void StartADC(FirstOrSecond first)
{
	if (first){
		ADMUX &= (unsigned char) ~ _BV(MUX0);
     934:	38 98       	cbi	0x07, 0	; 7
     936:	88 ec       	ldi	r24, 0xC8	; 200
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	01 97       	sbiw	r24, 0x01	; 1
     93c:	f1 f7       	brne	.-4      	; 0x93a <GetValuesFromADC+0x5a>

	// delay for stabilisation on ADC pin (charge intro reference capacitor)
	// TODO: NEED TEST!
	_delay_us(50);

	ADCSRA |= _BV( ADSC ); // start conversation
     93e:	36 9a       	sbi	0x06, 6	; 6
	while( ADC_CONVERT_IN_PROGRESS() ) {  };
     940:	36 99       	sbic	0x06, 6	; 6
     942:	fe cf       	rjmp	.-4      	; 0x940 <GetValuesFromADC+0x60>
	adc_data = ADC;
     944:	84 b1       	in	r24, 0x04	; 4
     946:	95 b1       	in	r25, 0x05	; 5
     948:	90 93 2c 03 	sts	0x032C, r25
     94c:	80 93 2b 03 	sts	0x032B, r24
		adc_res_first = adc_data;
	}

	temp_val = adc_res_second;
	StartADC( SECOND );
	if(temp_val){
     950:	21 15       	cp	r18, r1
     952:	31 05       	cpc	r19, r1
     954:	49 f0       	breq	.+18     	; 0x968 <GetValuesFromADC+0x88>
		adc_res_second = (adc_data + temp_val) / 2;
     956:	80 91 2b 03 	lds	r24, 0x032B
     95a:	90 91 2c 03 	lds	r25, 0x032C
     95e:	82 0f       	add	r24, r18
     960:	93 1f       	adc	r25, r19
     962:	96 95       	lsr	r25
     964:	87 95       	ror	r24
     966:	04 c0       	rjmp	.+8      	; 0x970 <GetValuesFromADC+0x90>
	}else{
		adc_res_second = adc_data;
     968:	80 91 2b 03 	lds	r24, 0x032B
     96c:	90 91 2c 03 	lds	r25, 0x032C
     970:	90 93 25 03 	sts	0x0325, r25
     974:	80 93 24 03 	sts	0x0324, r24
     978:	08 95       	ret

0000097a <ADC_255_Times>:
	}
}


void ADC_255_Times(void)
{
     97a:	1f 93       	push	r17
	//===================================//
	adc_res_first = 0x00;
     97c:	10 92 23 03 	sts	0x0323, r1
     980:	10 92 22 03 	sts	0x0322, r1
	adc_res_second = 0x00;
     984:	10 92 25 03 	sts	0x0325, r1
     988:	10 92 24 03 	sts	0x0324, r1
     98c:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0; i < 0xff;  i++){
		GetValuesFromADC();
     98e:	0e 94 70 04 	call	0x8e0	; 0x8e0 <GetValuesFromADC>
void ADC_255_Times(void)
{
	//===================================//
	adc_res_first = 0x00;
	adc_res_second = 0x00;
	for(uint8_t i=0; i < 0xff;  i++){
     992:	1f 5f       	subi	r17, 0xFF	; 255
     994:	1f 3f       	cpi	r17, 0xFF	; 255
     996:	d9 f7       	brne	.-10     	; 0x98e <ADC_255_Times+0x14>
		GetValuesFromADC();
	}
	//===================================//
}
     998:	1f 91       	pop	r17
     99a:	08 95       	ret

0000099c <CalibrationAlgorithm>:


void CalibrationAlgorithm(uint8_t color)
{
     99c:	cf 92       	push	r12
     99e:	df 92       	push	r13
     9a0:	ef 92       	push	r14
     9a2:	ff 92       	push	r15
     9a4:	0f 93       	push	r16
     9a6:	1f 93       	push	r17
//	uint8_t adc_res_first_8 = (uint8_t)((uint16_t)adc_res_first >> 2);
//	uint8_t adc_res_second_8 = (uint8_t)((uint16_t)adc_res_second >> 2);
//	coefs[FIRST][color] = (double) EVP_ALG_PERCENT * ADC_MAX_VALUE / adc_res_first_8;
//	coefs[SECOND][color] = (double) EVP_ALG_PERCENT * ADC_MAX_VALUE / adc_res_second_8;
//
	coefs[FIRST][color] = (double) EVP_ALG_PERCENT * ADC_MAX_VALUE / adc_res_first;
     9a8:	08 2f       	mov	r16, r24
     9aa:	10 e0       	ldi	r17, 0x00	; 0
     9ac:	60 91 22 03 	lds	r22, 0x0322
     9b0:	70 91 23 03 	lds	r23, 0x0323
     9b4:	ad e8       	ldi	r26, 0x8D	; 141
     9b6:	ca 2e       	mov	r12, r26
     9b8:	a0 e0       	ldi	r26, 0x00	; 0
     9ba:	da 2e       	mov	r13, r26
     9bc:	78 01       	movw	r14, r16
     9be:	ee 0c       	add	r14, r14
     9c0:	ff 1c       	adc	r15, r15
     9c2:	ee 0c       	add	r14, r14
     9c4:	ff 1c       	adc	r15, r15
     9c6:	ec 0c       	add	r14, r12
     9c8:	fd 1c       	adc	r15, r13
     9ca:	88 27       	eor	r24, r24
     9cc:	77 fd       	sbrc	r23, 7
     9ce:	80 95       	com	r24
     9d0:	98 2f       	mov	r25, r24
     9d2:	0e 94 ef 11 	call	0x23de	; 0x23de <__floatsisf>
     9d6:	9b 01       	movw	r18, r22
     9d8:	ac 01       	movw	r20, r24
     9da:	60 e0       	ldi	r22, 0x00	; 0
     9dc:	70 ec       	ldi	r23, 0xC0	; 192
     9de:	8f ef       	ldi	r24, 0xFF	; 255
     9e0:	93 e4       	ldi	r25, 0x43	; 67
     9e2:	0e 94 b3 10 	call	0x2166	; 0x2166 <__divsf3>
     9e6:	f7 01       	movw	r30, r14
     9e8:	60 83       	st	Z, r22
     9ea:	71 83       	std	Z+1, r23	; 0x01
     9ec:	82 83       	std	Z+2, r24	; 0x02
     9ee:	93 83       	std	Z+3, r25	; 0x03
	coefs[SECOND][color] = (double) EVP_ALG_PERCENT * ADC_MAX_VALUE / adc_res_second;
     9f0:	60 91 24 03 	lds	r22, 0x0324
     9f4:	70 91 25 03 	lds	r23, 0x0325
     9f8:	0d 5f       	subi	r16, 0xFD	; 253
     9fa:	1f 4f       	sbci	r17, 0xFF	; 255
     9fc:	00 0f       	add	r16, r16
     9fe:	11 1f       	adc	r17, r17
     a00:	00 0f       	add	r16, r16
     a02:	11 1f       	adc	r17, r17
     a04:	c0 0e       	add	r12, r16
     a06:	d1 1e       	adc	r13, r17
     a08:	88 27       	eor	r24, r24
     a0a:	77 fd       	sbrc	r23, 7
     a0c:	80 95       	com	r24
     a0e:	98 2f       	mov	r25, r24
     a10:	0e 94 ef 11 	call	0x23de	; 0x23de <__floatsisf>
     a14:	9b 01       	movw	r18, r22
     a16:	ac 01       	movw	r20, r24
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	70 ec       	ldi	r23, 0xC0	; 192
     a1c:	8f ef       	ldi	r24, 0xFF	; 255
     a1e:	93 e4       	ldi	r25, 0x43	; 67
     a20:	0e 94 b3 10 	call	0x2166	; 0x2166 <__divsf3>
     a24:	f6 01       	movw	r30, r12
     a26:	60 83       	st	Z, r22
     a28:	71 83       	std	Z+1, r23	; 0x01
     a2a:	82 83       	std	Z+2, r24	; 0x02
     a2c:	93 83       	std	Z+3, r25	; 0x03

#else
	coefs[FIRST][color] = 1;
	coefs[SECOND][color] = (double)adc_res_first / adc_res_second;
#endif
}
     a2e:	1f 91       	pop	r17
     a30:	0f 91       	pop	r16
     a32:	ff 90       	pop	r15
     a34:	ef 90       	pop	r14
     a36:	df 90       	pop	r13
     a38:	cf 90       	pop	r12
     a3a:	08 95       	ret

00000a3c <SetZeroAlgorithm>:
void SetZeroAlgorithm(uint8_t color)
{
//	zero[FIRST] = adc_res_first;
//	zero[SECOND] = adc_res_second;

	max_diff = ADC_MAX_VALUE;// -  ((adc_res_first < adc_res_second) ? adc_res_first : adc_res_second);
     a3c:	8f ef       	ldi	r24, 0xFF	; 255
     a3e:	93 e0       	ldi	r25, 0x03	; 3
     a40:	90 93 a6 00 	sts	0x00A6, r25
     a44:	80 93 a5 00 	sts	0x00A5, r24
}
     a48:	08 95       	ret

00000a4a <SaveResultsAlgorithm>:

void SaveResultsAlgorithm(uint8_t color)
{
     a4a:	df 92       	push	r13
     a4c:	ef 92       	push	r14
     a4e:	ff 92       	push	r15
     a50:	0f 93       	push	r16
     a52:	1f 93       	push	r17
     a54:	cf 93       	push	r28
     a56:	df 93       	push	r29
     a58:	d8 2e       	mov	r13, r24
//	uint8_t adc_res_second_8 = (uint8_t)((uint16_t)adc_res_second >> 2);
//
//	int16_t result1 = (int16_t)((double)(((double)adc_res_first_8) * coefs[FIRST][color]));
//	int16_t result2 = (int16_t)((double)(((double)adc_res_second_8) * coefs[SECOND][color]));

	int16_t result1 = (int16_t)((double)(((double)adc_res_first) * coefs[FIRST][color]));
     a5a:	60 91 22 03 	lds	r22, 0x0322
     a5e:	70 91 23 03 	lds	r23, 0x0323
     a62:	08 2f       	mov	r16, r24
     a64:	10 e0       	ldi	r17, 0x00	; 0
     a66:	88 27       	eor	r24, r24
     a68:	77 fd       	sbrc	r23, 7
     a6a:	80 95       	com	r24
     a6c:	98 2f       	mov	r25, r24
     a6e:	0e 94 ef 11 	call	0x23de	; 0x23de <__floatsisf>
     a72:	00 0f       	add	r16, r16
     a74:	11 1f       	adc	r17, r17
     a76:	00 0f       	add	r16, r16
     a78:	11 1f       	adc	r17, r17
     a7a:	f8 01       	movw	r30, r16
     a7c:	e3 57       	subi	r30, 0x73	; 115
     a7e:	ff 4f       	sbci	r31, 0xFF	; 255
     a80:	20 81       	ld	r18, Z
     a82:	31 81       	ldd	r19, Z+1	; 0x01
     a84:	42 81       	ldd	r20, Z+2	; 0x02
     a86:	53 81       	ldd	r21, Z+3	; 0x03
     a88:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <__mulsf3>
     a8c:	0e 94 4d 12 	call	0x249a	; 0x249a <__fixsfsi>
     a90:	7b 01       	movw	r14, r22
	int16_t result2 = (int16_t)((double)(((double)adc_res_second) * coefs[SECOND][color]));
     a92:	60 91 24 03 	lds	r22, 0x0324
     a96:	70 91 25 03 	lds	r23, 0x0325
     a9a:	88 27       	eor	r24, r24
     a9c:	77 fd       	sbrc	r23, 7
     a9e:	80 95       	com	r24
     aa0:	98 2f       	mov	r25, r24
     aa2:	0e 94 ef 11 	call	0x23de	; 0x23de <__floatsisf>
     aa6:	07 56       	subi	r16, 0x67	; 103
     aa8:	1f 4f       	sbci	r17, 0xFF	; 255
     aaa:	f8 01       	movw	r30, r16
     aac:	20 81       	ld	r18, Z
     aae:	31 81       	ldd	r19, Z+1	; 0x01
     ab0:	42 81       	ldd	r20, Z+2	; 0x02
     ab2:	53 81       	ldd	r21, Z+3	; 0x03
     ab4:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <__mulsf3>
     ab8:	0e 94 4d 12 	call	0x249a	; 0x249a <__fixsfsi>
     abc:	eb 01       	movw	r28, r22
	uint16_t diff_percent = DIFF(result1, result2) * 100 / max_diff;
     abe:	97 01       	movw	r18, r14
     ac0:	26 1b       	sub	r18, r22
     ac2:	37 0b       	sbc	r19, r23
     ac4:	37 ff       	sbrs	r19, 7
     ac6:	03 c0       	rjmp	.+6      	; 0xace <SaveResultsAlgorithm+0x84>
     ac8:	30 95       	com	r19
     aca:	21 95       	neg	r18
     acc:	3f 4f       	sbci	r19, 0xFF	; 255
     ace:	60 91 a5 00 	lds	r22, 0x00A5
     ad2:	70 91 a6 00 	lds	r23, 0x00A6
     ad6:	84 e6       	ldi	r24, 0x64	; 100
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	ac 01       	movw	r20, r24
     adc:	24 9f       	mul	r18, r20
     ade:	c0 01       	movw	r24, r0
     ae0:	25 9f       	mul	r18, r21
     ae2:	90 0d       	add	r25, r0
     ae4:	34 9f       	mul	r19, r20
     ae6:	90 0d       	add	r25, r0
     ae8:	11 24       	eor	r1, r1
     aea:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__udivmodhi4>
     aee:	16 2f       	mov	r17, r22
     af0:	07 2f       	mov	r16, r23

	hex2dec_result(result1, FIRST, color); // result[FIRST][color] = result1;
     af2:	c7 01       	movw	r24, r14
     af4:	60 e0       	ldi	r22, 0x00	; 0
     af6:	4d 2d       	mov	r20, r13
     af8:	0e 94 15 04 	call	0x82a	; 0x82a <hex2dec_result>
	hex2dec_result(result2, SECOND, color); //result[SECOND][color] = result2;
     afc:	ce 01       	movw	r24, r28
     afe:	61 e0       	ldi	r22, 0x01	; 1
     b00:	4d 2d       	mov	r20, r13
     b02:	0e 94 15 04 	call	0x82a	; 0x82a <hex2dec_result>
	hex2dec_result(diff_percent, PERCENT, color); //result[PERCENT][color] = DIFF(result1, result2);// * 100 / max_diff;
     b06:	81 2f       	mov	r24, r17
     b08:	90 2f       	mov	r25, r16
     b0a:	62 e0       	ldi	r22, 0x02	; 2
     b0c:	4d 2d       	mov	r20, r13
     b0e:	0e 94 15 04 	call	0x82a	; 0x82a <hex2dec_result>
}
     b12:	df 91       	pop	r29
     b14:	cf 91       	pop	r28
     b16:	1f 91       	pop	r17
     b18:	0f 91       	pop	r16
     b1a:	ff 90       	pop	r15
     b1c:	ef 90       	pop	r14
     b1e:	df 90       	pop	r13
     b20:	08 95       	ret

00000b22 <ADC_LoadingAndEvalIt>:

void ADC_LoadingAndEvalIt(ptrEvalMe evalMe)
{
     b22:	cf 92       	push	r12
     b24:	df 92       	push	r13
     b26:	ff 92       	push	r15
     b28:	0f 93       	push	r16
     b2a:	1f 93       	push	r17
     b2c:	cf 93       	push	r28
     b2e:	df 93       	push	r29
     b30:	8c 01       	movw	r16, r24
	 *
	 * [############]
	 *
	 * 	 Complete!
	 */
	JOYSTICK_INT_DISABLE();
     b32:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     b34:	f8 94       	cli
     b36:	8b b7       	in	r24, 0x3b	; 59
     b38:	8f 77       	andi	r24, 0x7F	; 127
     b3a:	8b bf       	out	0x3b, r24	; 59
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     b3c:	9f bf       	out	0x3f, r25	; 63

	Lcd3310_ClearCenter();
     b3e:	0e 94 93 0a 	call	0x1526	; 0x1526 <Lcd3310_ClearCenter>
	Lcd3310_GotoXY(0, 1);
     b42:	80 e0       	ldi	r24, 0x00	; 0
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	61 e0       	ldi	r22, 0x01	; 1
     b48:	70 e0       	ldi	r23, 0x00	; 0
     b4a:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <Lcd3310_GotoXY>
	Lcd3310_String_P( pstr_please_wait, BLACK_TEXT_ON_WHITE );
     b4e:	80 91 c4 00 	lds	r24, 0x00C4
     b52:	90 91 c5 00 	lds	r25, 0x00C5
     b56:	60 e0       	ldi	r22, 0x00	; 0
     b58:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <Lcd3310_String_P>
	if(evalMe == SetZeroAlgorithm){
     b5c:	85 e0       	ldi	r24, 0x05	; 5
     b5e:	0e 31       	cpi	r16, 0x1E	; 30
     b60:	18 07       	cpc	r17, r24
     b62:	19 f4       	brne	.+6      	; 0xb6a <ADC_LoadingAndEvalIt+0x48>
		Lcd3310_GotoXY(5, 3);
     b64:	85 e0       	ldi	r24, 0x05	; 5
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	02 c0       	rjmp	.+4      	; 0xb6e <ADC_LoadingAndEvalIt+0x4c>
	}else{
		Lcd3310_GotoXY(1, 3);
     b6a:	81 e0       	ldi	r24, 0x01	; 1
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	63 e0       	ldi	r22, 0x03	; 3
     b70:	70 e0       	ldi	r23, 0x00	; 0
     b72:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <Lcd3310_GotoXY>
	}
	Lcd3310_Char('[', BLACK_TEXT_ON_WHITE);
     b76:	8b e5       	ldi	r24, 0x5B	; 91
     b78:	60 e0       	ldi	r22, 0x00	; 0
     b7a:	0e 94 2a 09 	call	0x1254	; 0x1254 <Lcd3310_Char>
     b7e:	c7 ea       	ldi	r28, 0xA7	; 167
     b80:	d0 e0       	ldi	r29, 0x00	; 0
     b82:	ff 24       	eor	r15, r15
     b84:	30 e9       	ldi	r19, 0x90	; 144
     b86:	c3 2e       	mov	r12, r19
     b88:	31 e0       	ldi	r19, 0x01	; 1
     b8a:	d3 2e       	mov	r13, r19
	for(uint8_t color=0; color < 3; color++){
		Lcd3310_Char('#', BLACK_TEXT_ON_WHITE);
     b8c:	83 e2       	ldi	r24, 0x23	; 35
     b8e:	60 e0       	ldi	r22, 0x00	; 0
     b90:	0e 94 2a 09 	call	0x1254	; 0x1254 <Lcd3310_Char>
		if(evalMe == SetZeroAlgorithm){
     b94:	85 e0       	ldi	r24, 0x05	; 5
     b96:	0e 31       	cpi	r16, 0x1E	; 30
     b98:	18 07       	cpc	r17, r24
     b9a:	19 f4       	brne	.+6      	; 0xba2 <ADC_LoadingAndEvalIt+0x80>
			LedDriver_SwitchLeds( 0x00 );
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	02 c0       	rjmp	.+4      	; 0xba6 <ADC_LoadingAndEvalIt+0x84>
		}else{
			LedDriver_SwitchLeds( led_show_codes[color] );
     ba2:	88 81       	ld	r24, Y
     ba4:	99 81       	ldd	r25, Y+1	; 0x01
     ba6:	0e 94 20 06 	call	0xc40	; 0xc40 <LedDriver_SwitchLeds>
     baa:	80 e2       	ldi	r24, 0x20	; 32
     bac:	9e e4       	ldi	r25, 0x4E	; 78
     bae:	f6 01       	movw	r30, r12
     bb0:	31 97       	sbiw	r30, 0x01	; 1
     bb2:	f1 f7       	brne	.-4      	; 0xbb0 <ADC_LoadingAndEvalIt+0x8e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bb4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bb6:	d9 f7       	brne	.-10     	; 0xbae <ADC_LoadingAndEvalIt+0x8c>
		}
		_delay_ms( DELAY_BEFORE_START_ADC );
		Lcd3310_Char('#', BLACK_TEXT_ON_WHITE);
     bb8:	83 e2       	ldi	r24, 0x23	; 35
     bba:	60 e0       	ldi	r22, 0x00	; 0
     bbc:	0e 94 2a 09 	call	0x1254	; 0x1254 <Lcd3310_Char>
		ADC_255_Times();
     bc0:	0e 94 bd 04 	call	0x97a	; 0x97a <ADC_255_Times>
		Lcd3310_Char('#', BLACK_TEXT_ON_WHITE);
     bc4:	83 e2       	ldi	r24, 0x23	; 35
     bc6:	60 e0       	ldi	r22, 0x00	; 0
     bc8:	0e 94 2a 09 	call	0x1254	; 0x1254 <Lcd3310_Char>

		// Start Algorithm
		(evalMe)(color);
     bcc:	8f 2d       	mov	r24, r15
     bce:	f8 01       	movw	r30, r16
     bd0:	09 95       	icall

		if(evalMe == SetZeroAlgorithm){
     bd2:	85 e0       	ldi	r24, 0x05	; 5
     bd4:	0e 31       	cpi	r16, 0x1E	; 30
     bd6:	18 07       	cpc	r17, r24
     bd8:	29 f0       	breq	.+10     	; 0xbe4 <ADC_LoadingAndEvalIt+0xc2>
		Lcd3310_GotoXY(5, 3);
	}else{
		Lcd3310_GotoXY(1, 3);
	}
	Lcd3310_Char('[', BLACK_TEXT_ON_WHITE);
	for(uint8_t color=0; color < 3; color++){
     bda:	f3 94       	inc	r15
     bdc:	22 96       	adiw	r28, 0x02	; 2
     bde:	83 e0       	ldi	r24, 0x03	; 3
     be0:	f8 16       	cp	r15, r24
     be2:	a1 f6       	brne	.-88     	; 0xb8c <ADC_LoadingAndEvalIt+0x6a>

		if(evalMe == SetZeroAlgorithm){
			break; // not need to switch off leds 3 times :)
		}
	}
	LedDriver_SwitchLeds( 0x00 );
     be4:	80 e0       	ldi	r24, 0x00	; 0
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	0e 94 20 06 	call	0xc40	; 0xc40 <LedDriver_SwitchLeds>
	Lcd3310_Char(']', BLACK_TEXT_ON_WHITE);
     bec:	8d e5       	ldi	r24, 0x5D	; 93
     bee:	60 e0       	ldi	r22, 0x00	; 0
     bf0:	0e 94 2a 09 	call	0x1254	; 0x1254 <Lcd3310_Char>
	Lcd3310_GotoXY(2, 5);
     bf4:	82 e0       	ldi	r24, 0x02	; 2
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	65 e0       	ldi	r22, 0x05	; 5
     bfa:	70 e0       	ldi	r23, 0x00	; 0
     bfc:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <Lcd3310_GotoXY>
	Lcd3310_String_P( pstr_complete, BLACK_TEXT_ON_WHITE );
     c00:	80 91 b3 00 	lds	r24, 0x00B3
     c04:	90 91 b4 00 	lds	r25, 0x00B4
     c08:	60 e0       	ldi	r22, 0x00	; 0
     c0a:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <Lcd3310_String_P>
     c0e:	88 e8       	ldi	r24, 0x88	; 136
     c10:	93 e1       	ldi	r25, 0x13	; 19
     c12:	20 e9       	ldi	r18, 0x90	; 144
     c14:	31 e0       	ldi	r19, 0x01	; 1
     c16:	f9 01       	movw	r30, r18
     c18:	31 97       	sbiw	r30, 0x01	; 1
     c1a:	f1 f7       	brne	.-4      	; 0xc18 <ADC_LoadingAndEvalIt+0xf6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c1c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c1e:	d9 f7       	brne	.-10     	; 0xc16 <ADC_LoadingAndEvalIt+0xf4>
	_delay_ms(500); // show complete and wait 0.5 sec
	JOYSTICK_INT_ENABLE();
     c20:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     c22:	f8 94       	cli
     c24:	80 e4       	ldi	r24, 0x40	; 64
     c26:	8a bf       	out	0x3a, r24	; 58
     c28:	8b b7       	in	r24, 0x3b	; 59
     c2a:	80 68       	ori	r24, 0x80	; 128
     c2c:	8b bf       	out	0x3b, r24	; 59
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     c2e:	9f bf       	out	0x3f, r25	; 63
//	LedDriver_SwitchLeds(GREEN_LEDS);
//	(evalMe)(0);
}
     c30:	df 91       	pop	r29
     c32:	cf 91       	pop	r28
     c34:	1f 91       	pop	r17
     c36:	0f 91       	pop	r16
     c38:	ff 90       	pop	r15
     c3a:	df 90       	pop	r13
     c3c:	cf 90       	pop	r12
     c3e:	08 95       	ret

00000c40 <LedDriver_SwitchLeds>:

#include "led_driver.h"


void LedDriver_SwitchLeds(uint16_t data)
{
     c40:	ac 01       	movw	r20, r24
     c42:	20 e0       	ldi	r18, 0x00	; 0
     c44:	30 e0       	ldi	r19, 0x00	; 0
	char i;
	for(i=0; i<16; i++){
		CLK_DOWN;
		if(data & _BV(i)){
     c46:	61 e0       	ldi	r22, 0x01	; 1
     c48:	70 e0       	ldi	r23, 0x00	; 0

void LedDriver_SwitchLeds(uint16_t data)
{
	char i;
	for(i=0; i<16; i++){
		CLK_DOWN;
     c4a:	db 98       	cbi	0x1b, 3	; 27
		if(data & _BV(i)){
     c4c:	cb 01       	movw	r24, r22
     c4e:	02 2e       	mov	r0, r18
     c50:	02 c0       	rjmp	.+4      	; 0xc56 <LedDriver_SwitchLeds+0x16>
     c52:	88 0f       	add	r24, r24
     c54:	99 1f       	adc	r25, r25
     c56:	0a 94       	dec	r0
     c58:	e2 f7       	brpl	.-8      	; 0xc52 <LedDriver_SwitchLeds+0x12>
     c5a:	84 23       	and	r24, r20
     c5c:	95 23       	and	r25, r21
     c5e:	89 2b       	or	r24, r25
     c60:	11 f0       	breq	.+4      	; 0xc66 <LedDriver_SwitchLeds+0x26>
			LED_DR_PORT |= DATA_PIN;
     c62:	da 9a       	sbi	0x1b, 2	; 27
     c64:	01 c0       	rjmp	.+2      	; 0xc68 <LedDriver_SwitchLeds+0x28>
		}else{
			LED_DR_PORT &= (unsigned char)~DATA_PIN;
     c66:	da 98       	cbi	0x1b, 2	; 27
		}
		CLK_UP;
     c68:	db 9a       	sbi	0x1b, 3	; 27
     c6a:	2f 5f       	subi	r18, 0xFF	; 255
     c6c:	3f 4f       	sbci	r19, 0xFF	; 255


void LedDriver_SwitchLeds(uint16_t data)
{
	char i;
	for(i=0; i<16; i++){
     c6e:	20 31       	cpi	r18, 0x10	; 16
     c70:	31 05       	cpc	r19, r1
     c72:	59 f7       	brne	.-42     	; 0xc4a <LedDriver_SwitchLeds+0xa>
		}else{
			LED_DR_PORT &= (unsigned char)~DATA_PIN;
		}
		CLK_UP;
	}
	LATCH_PULSE;
     c74:	dc 9a       	sbi	0x1b, 4	; 27
     c76:	00 00       	nop
     c78:	dc 98       	cbi	0x1b, 4	; 27
}
     c7a:	08 95       	ret

00000c7c <LedDriver_Init>:
//	LedDriver_SwitchLeds(0x00);
//}

void LedDriver_Init(void)
{
	LATCH_DOWN;
     c7c:	dc 98       	cbi	0x1b, 4	; 27
	CLK_DOWN;
     c7e:	db 98       	cbi	0x1b, 3	; 27
	LED_DR_DDR |= DATA_PIN | CLK_PIN | LATCH_PIN;
     c80:	8a b3       	in	r24, 0x1a	; 26
     c82:	8c 61       	ori	r24, 0x1C	; 28
     c84:	8a bb       	out	0x1a, r24	; 26
	LedDriver_SwitchLeds(0x00);
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	0e 94 20 06 	call	0xc40	; 0xc40 <LedDriver_SwitchLeds>
}
     c8e:	08 95       	ret

00000c90 <main>:

//	DEBUG_INIT(); // Initialize uart if DEBUG != 0
	DEBUG_PRINT_CHAR( 0x01 );

	// Input/Output Ports initialization
    PORTB=0x00;
     c90:	18 ba       	out	0x18, r1	; 24
    DDRB=0x00;
     c92:	17 ba       	out	0x17, r1	; 23

    PORTC=0x00;
     c94:	15 ba       	out	0x15, r1	; 21
    DDRC=0x00;
     c96:	14 ba       	out	0x14, r1	; 20

    PORTD= _BV(PD3); // pull up joystick center button
     c98:	88 e0       	ldi	r24, 0x08	; 8
     c9a:	82 bb       	out	0x12, r24	; 18
    DDRD=0x00;
     c9c:	11 ba       	out	0x11, r1	; 17


    JPORT = (uint8_t)(J_RU | J_LU | J_RD | J_LD);
     c9e:	80 ef       	ldi	r24, 0xF0	; 240
     ca0:	85 bb       	out	0x15, r24	; 21
    JDDR &= (uint8_t)~(J_RU | J_LU | J_RD | J_LD);
     ca2:	84 b3       	in	r24, 0x14	; 20
     ca4:	8f 70       	andi	r24, 0x0F	; 15
     ca6:	84 bb       	out	0x14, r24	; 20

    //TEST_PIN_DDR_INIT();

    ACSR = _BV(ACD); // turn off analog comparer, this is turns ON after RESET... delurium, but the fact ;)
     ca8:	80 e8       	ldi	r24, 0x80	; 128
     caa:	88 b9       	out	0x08, r24	; 8

    // External Interrupt(s) initialization
    MCUCR= _BV(ISC11) | _BV(ISC01); // fall
     cac:	8a e0       	ldi	r24, 0x0A	; 10
     cae:	85 bf       	out	0x35, r24	; 53
    GICR = _BV(INT0) | _BV(INT1); // int1 int0 enable interrupts
     cb0:	80 ec       	ldi	r24, 0xC0	; 192
     cb2:	8b bf       	out	0x3b, r24	; 59
//    TCCR1A = 0x00;
//    TCCR1B = 0x00;
//    TCCR2 = 0x00;
//    TIMSK = 0x00;

	TIM2_INIT(); // see defines.h for details
     cb4:	86 e0       	ldi	r24, 0x06	; 6
     cb6:	85 bd       	out	0x25, r24	; 37

    // Init ADC
	ADMUX = 0x00; //_BV(ADLAR); // ADC0, result in ADC
     cb8:	17 b8       	out	0x07, r1	; 7
	ADCSRA = _BV(ADEN) /*| _BV(ADIE)*/ | _BV(ADPS2)  | _BV(ADPS1) | _BV(ADPS0); // XTAL / 16;
     cba:	87 e8       	ldi	r24, 0x87	; 135
     cbc:	86 b9       	out	0x06, r24	; 6


	LedDriver_Init();
     cbe:	0e 94 3e 06 	call	0xc7c	; 0xc7c <LedDriver_Init>
	Lcd3310_InitializeDisplay(DELAY_SHOW_SPLASH);
     cc2:	88 ee       	ldi	r24, 0xE8	; 232
     cc4:	93 e0       	ldi	r25, 0x03	; 3
     cc6:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <Lcd3310_InitializeDisplay>


	DEBUG_PRINT_CHAR( 0x02 );


	sei();
     cca:	78 94       	sei

	DEBUG_PRINT_CHAR( 0x00 );

   	for(;;){

		IF_FLAG_ON( UPDATE_DISPLAY_FLAG ){
     ccc:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     cce:	f8 94       	cli
     cd0:	20 91 26 03 	lds	r18, 0x0326
     cd4:	30 91 27 03 	lds	r19, 0x0327
     cd8:	30 93 29 03 	sts	0x0329, r19
     cdc:	20 93 28 03 	sts	0x0328, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     ce0:	8f bf       	out	0x3f, r24	; 63
     ce2:	80 91 28 03 	lds	r24, 0x0328
     ce6:	80 ff       	sbrs	r24, 0
     ce8:	1d c0       	rjmp	.+58     	; 0xd24 <main+0x94>
			FLAGS_SWITCH_OFF( UPDATE_DISPLAY_FLAG );
     cea:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     cec:	f8 94       	cli
     cee:	80 91 26 03 	lds	r24, 0x0326
     cf2:	90 91 27 03 	lds	r25, 0x0327
     cf6:	8e 7f       	andi	r24, 0xFE	; 254
     cf8:	90 93 27 03 	sts	0x0327, r25
     cfc:	80 93 26 03 	sts	0x0326, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     d00:	2f bf       	out	0x3f, r18	; 63
			IF_FLAG_OFF( SNAKE_PLAYING_NOW_FLAG ){
     d02:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     d04:	f8 94       	cli
     d06:	80 91 26 03 	lds	r24, 0x0326
     d0a:	90 91 27 03 	lds	r25, 0x0327
     d0e:	90 93 29 03 	sts	0x0329, r25
     d12:	80 93 28 03 	sts	0x0328, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     d16:	2f bf       	out	0x3f, r18	; 63
     d18:	80 91 28 03 	lds	r24, 0x0328
     d1c:	87 fd       	sbrc	r24, 7
     d1e:	02 c0       	rjmp	.+4      	; 0xd24 <main+0x94>
				Lcd3310_UpdateDisplayInfo();
     d20:	0e 94 cd 0b 	call	0x179a	; 0x179a <Lcd3310_UpdateDisplayInfo>
			}
		}

		IF_FLAG_ON( JOYSTICK_CENTER_CLICK_FLAG ){
     d24:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     d26:	f8 94       	cli
     d28:	20 91 26 03 	lds	r18, 0x0326
     d2c:	30 91 27 03 	lds	r19, 0x0327
     d30:	30 93 29 03 	sts	0x0329, r19
     d34:	20 93 28 03 	sts	0x0328, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     d38:	8f bf       	out	0x3f, r24	; 63
     d3a:	80 91 28 03 	lds	r24, 0x0328
     d3e:	81 ff       	sbrs	r24, 1
     d40:	1a c0       	rjmp	.+52     	; 0xd76 <main+0xe6>
			FLAGS_SWITCH_OFF( JOYSTICK_CENTER_CLICK_FLAG );
     d42:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     d44:	f8 94       	cli
     d46:	80 91 26 03 	lds	r24, 0x0326
     d4a:	90 91 27 03 	lds	r25, 0x0327
     d4e:	8d 7f       	andi	r24, 0xFD	; 253
     d50:	90 93 27 03 	sts	0x0327, r25
     d54:	80 93 26 03 	sts	0x0326, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     d58:	2f bf       	out	0x3f, r18	; 63

			Menu_EnterClick();
     d5a:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <Menu_EnterClick>

			FLAGS_SWITCH_ON( UPDATE_DISPLAY_FLAG );
     d5e:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     d60:	f8 94       	cli
     d62:	80 91 26 03 	lds	r24, 0x0326
     d66:	90 91 27 03 	lds	r25, 0x0327
     d6a:	81 60       	ori	r24, 0x01	; 1
     d6c:	90 93 27 03 	sts	0x0327, r25
     d70:	80 93 26 03 	sts	0x0326, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     d74:	2f bf       	out	0x3f, r18	; 63
		}



		IF_FLAG_ON( ADC_RESULT_FLAG ){ // in menu adc result
     d76:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     d78:	f8 94       	cli
     d7a:	20 91 26 03 	lds	r18, 0x0326
     d7e:	30 91 27 03 	lds	r19, 0x0327
     d82:	30 93 29 03 	sts	0x0329, r19
     d86:	20 93 28 03 	sts	0x0328, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     d8a:	8f bf       	out	0x3f, r24	; 63
     d8c:	80 91 28 03 	lds	r24, 0x0328
     d90:	84 ff       	sbrs	r24, 4
     d92:	1c c0       	rjmp	.+56     	; 0xdcc <main+0x13c>

			ADC_LoadingAndEvalIt(SaveResultsAlgorithm);
     d94:	85 e2       	ldi	r24, 0x25	; 37
     d96:	95 e0       	ldi	r25, 0x05	; 5
     d98:	0e 94 91 05 	call	0xb22	; 0xb22 <ADC_LoadingAndEvalIt>

			FLAGS_SWITCH_OFF( ADC_RESULT_FLAG );
     d9c:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     d9e:	f8 94       	cli
     da0:	80 91 26 03 	lds	r24, 0x0326
     da4:	90 91 27 03 	lds	r25, 0x0327
     da8:	8f 7e       	andi	r24, 0xEF	; 239
     daa:	90 93 27 03 	sts	0x0327, r25
     dae:	80 93 26 03 	sts	0x0326, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     db2:	2f bf       	out	0x3f, r18	; 63
			FLAGS_SWITCH_ON( UPDATE_DISPLAY_FLAG );
     db4:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     db6:	f8 94       	cli
     db8:	80 91 26 03 	lds	r24, 0x0326
     dbc:	90 91 27 03 	lds	r25, 0x0327
     dc0:	81 60       	ori	r24, 0x01	; 1
     dc2:	90 93 27 03 	sts	0x0327, r25
     dc6:	80 93 26 03 	sts	0x0326, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     dca:	2f bf       	out	0x3f, r18	; 63
		}

		IF_FLAG_ON( ADC_CALIBRATE_FLAG ){
     dcc:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     dce:	f8 94       	cli
     dd0:	20 91 26 03 	lds	r18, 0x0326
     dd4:	30 91 27 03 	lds	r19, 0x0327
     dd8:	30 93 29 03 	sts	0x0329, r19
     ddc:	20 93 28 03 	sts	0x0328, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     de0:	8f bf       	out	0x3f, r24	; 63
     de2:	80 91 28 03 	lds	r24, 0x0328
     de6:	85 ff       	sbrs	r24, 5
     de8:	10 c0       	rjmp	.+32     	; 0xe0a <main+0x17a>

			ADC_LoadingAndEvalIt(CalibrationAlgorithm);
     dea:	8e ec       	ldi	r24, 0xCE	; 206
     dec:	94 e0       	ldi	r25, 0x04	; 4
     dee:	0e 94 91 05 	call	0xb22	; 0xb22 <ADC_LoadingAndEvalIt>

			FLAGS_SWITCH_OFF( ADC_CALIBRATE_FLAG );
     df2:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     df4:	f8 94       	cli
     df6:	80 91 26 03 	lds	r24, 0x0326
     dfa:	90 91 27 03 	lds	r25, 0x0327
     dfe:	8f 7d       	andi	r24, 0xDF	; 223
     e00:	90 93 27 03 	sts	0x0327, r25
     e04:	80 93 26 03 	sts	0x0326, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     e08:	2f bf       	out	0x3f, r18	; 63
		}

		IF_FLAG_ON( ADC_SET_ZERO ){
     e0a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     e0c:	f8 94       	cli
     e0e:	20 91 26 03 	lds	r18, 0x0326
     e12:	30 91 27 03 	lds	r19, 0x0327
     e16:	30 93 29 03 	sts	0x0329, r19
     e1a:	20 93 28 03 	sts	0x0328, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     e1e:	8f bf       	out	0x3f, r24	; 63
     e20:	80 91 28 03 	lds	r24, 0x0328
     e24:	86 ff       	sbrs	r24, 6
     e26:	10 c0       	rjmp	.+32     	; 0xe48 <main+0x1b8>

			ADC_LoadingAndEvalIt(SetZeroAlgorithm);
     e28:	8e e1       	ldi	r24, 0x1E	; 30
     e2a:	95 e0       	ldi	r25, 0x05	; 5
     e2c:	0e 94 91 05 	call	0xb22	; 0xb22 <ADC_LoadingAndEvalIt>

			FLAGS_SWITCH_OFF( ADC_SET_ZERO );
     e30:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     e32:	f8 94       	cli
     e34:	80 91 26 03 	lds	r24, 0x0326
     e38:	90 91 27 03 	lds	r25, 0x0327
     e3c:	8f 7b       	andi	r24, 0xBF	; 191
     e3e:	90 93 27 03 	sts	0x0327, r25
     e42:	80 93 26 03 	sts	0x0326, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     e46:	2f bf       	out	0x3f, r18	; 63
		}

	#ifdef ANIMATION_SWITCH_MENU_ITEMS
		IF_FLAG_ON( ANIMATION_NEXT_FLAG ){
     e48:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     e4a:	f8 94       	cli
     e4c:	20 91 26 03 	lds	r18, 0x0326
     e50:	30 91 27 03 	lds	r19, 0x0327
     e54:	30 93 29 03 	sts	0x0329, r19
     e58:	20 93 28 03 	sts	0x0328, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     e5c:	8f bf       	out	0x3f, r24	; 63
     e5e:	80 91 28 03 	lds	r24, 0x0328
     e62:	82 ff       	sbrs	r24, 2
     e64:	26 c0       	rjmp	.+76     	; 0xeb2 <main+0x222>
			FLAGS_SWITCH_OFF( ANIMATION_NEXT_FLAG );
     e66:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     e68:	f8 94       	cli
     e6a:	80 91 26 03 	lds	r24, 0x0326
     e6e:	90 91 27 03 	lds	r25, 0x0327
     e72:	8b 7f       	andi	r24, 0xFB	; 251
     e74:	90 93 27 03 	sts	0x0327, r25
     e78:	80 93 26 03 	sts	0x0326, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     e7c:	2f bf       	out	0x3f, r18	; 63
			if(menu_now != &results && menu_now != &snake_results){
     e7e:	80 91 3a 03 	lds	r24, 0x033A
     e82:	90 91 3b 03 	lds	r25, 0x033B
     e86:	21 e0       	ldi	r18, 0x01	; 1
     e88:	82 30       	cpi	r24, 0x02	; 2
     e8a:	92 07       	cpc	r25, r18
     e8c:	31 f0       	breq	.+12     	; 0xe9a <main+0x20a>
     e8e:	86 53       	subi	r24, 0x36	; 54
     e90:	91 40       	sbci	r25, 0x01	; 1
     e92:	19 f0       	breq	.+6      	; 0xe9a <main+0x20a>
				Lcd3310_AnimationSwitchMenuItems(1);
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <Lcd3310_AnimationSwitchMenuItems>
			}
			FLAGS_SWITCH_ON( UPDATE_DISPLAY_FLAG );
     e9a:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     e9c:	f8 94       	cli
     e9e:	80 91 26 03 	lds	r24, 0x0326
     ea2:	90 91 27 03 	lds	r25, 0x0327
     ea6:	81 60       	ori	r24, 0x01	; 1
     ea8:	90 93 27 03 	sts	0x0327, r25
     eac:	80 93 26 03 	sts	0x0326, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     eb0:	2f bf       	out	0x3f, r18	; 63
		}
		IF_FLAG_ON( ANIMATION_PREV_FLAG ){
     eb2:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     eb4:	f8 94       	cli
     eb6:	20 91 26 03 	lds	r18, 0x0326
     eba:	30 91 27 03 	lds	r19, 0x0327
     ebe:	30 93 29 03 	sts	0x0329, r19
     ec2:	20 93 28 03 	sts	0x0328, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     ec6:	8f bf       	out	0x3f, r24	; 63
     ec8:	80 91 28 03 	lds	r24, 0x0328
     ecc:	83 ff       	sbrs	r24, 3
     ece:	26 c0       	rjmp	.+76     	; 0xf1c <main+0x28c>
			FLAGS_SWITCH_OFF( ANIMATION_PREV_FLAG );
     ed0:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     ed2:	f8 94       	cli
     ed4:	80 91 26 03 	lds	r24, 0x0326
     ed8:	90 91 27 03 	lds	r25, 0x0327
     edc:	87 7f       	andi	r24, 0xF7	; 247
     ede:	90 93 27 03 	sts	0x0327, r25
     ee2:	80 93 26 03 	sts	0x0326, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     ee6:	2f bf       	out	0x3f, r18	; 63
			if(menu_now != &results && menu_now != &snake_results){
     ee8:	80 91 3a 03 	lds	r24, 0x033A
     eec:	90 91 3b 03 	lds	r25, 0x033B
     ef0:	21 e0       	ldi	r18, 0x01	; 1
     ef2:	82 30       	cpi	r24, 0x02	; 2
     ef4:	92 07       	cpc	r25, r18
     ef6:	31 f0       	breq	.+12     	; 0xf04 <main+0x274>
     ef8:	86 53       	subi	r24, 0x36	; 54
     efa:	91 40       	sbci	r25, 0x01	; 1
     efc:	19 f0       	breq	.+6      	; 0xf04 <main+0x274>
				Lcd3310_AnimationSwitchMenuItems(0);
     efe:	80 e0       	ldi	r24, 0x00	; 0
     f00:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <Lcd3310_AnimationSwitchMenuItems>
			}
			FLAGS_SWITCH_ON( UPDATE_DISPLAY_FLAG );
     f04:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     f06:	f8 94       	cli
     f08:	80 91 26 03 	lds	r24, 0x0326
     f0c:	90 91 27 03 	lds	r25, 0x0327
     f10:	81 60       	ori	r24, 0x01	; 1
     f12:	90 93 27 03 	sts	0x0327, r25
     f16:	80 93 26 03 	sts	0x0326, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     f1a:	2f bf       	out	0x3f, r18	; 63
		}
	#endif

		IF_FLAG_ON( SNAKE_START_GAME_FLAG ){
     f1c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     f1e:	f8 94       	cli
     f20:	20 91 26 03 	lds	r18, 0x0326
     f24:	30 91 27 03 	lds	r19, 0x0327
     f28:	30 93 29 03 	sts	0x0329, r19
     f2c:	20 93 28 03 	sts	0x0328, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     f30:	8f bf       	out	0x3f, r24	; 63
     f32:	80 91 28 03 	lds	r24, 0x0328
     f36:	90 91 29 03 	lds	r25, 0x0329
     f3a:	90 ff       	sbrs	r25, 0
     f3c:	1e c0       	rjmp	.+60     	; 0xf7a <main+0x2ea>
			FLAGS_SWITCH_OFF( SNAKE_START_GAME_FLAG );
     f3e:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     f40:	f8 94       	cli
     f42:	80 91 26 03 	lds	r24, 0x0326
     f46:	90 91 27 03 	lds	r25, 0x0327
     f4a:	9e 7f       	andi	r25, 0xFE	; 254
     f4c:	90 93 27 03 	sts	0x0327, r25
     f50:	80 93 26 03 	sts	0x0326, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     f54:	2f bf       	out	0x3f, r18	; 63
			SnakeGame_Start();
     f56:	0e 94 12 04 	call	0x824	; 0x824 <SnakeGame_Start>
			TIM2_CLR_COUNTER_AND_OVF_ON();
     f5a:	14 bc       	out	0x24, r1	; 36
     f5c:	89 b7       	in	r24, 0x39	; 57
     f5e:	80 64       	ori	r24, 0x40	; 64
     f60:	89 bf       	out	0x39, r24	; 57
			FLAGS_SWITCH_ON( SNAKE_PLAYING_NOW_FLAG );
     f62:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     f64:	f8 94       	cli
     f66:	80 91 26 03 	lds	r24, 0x0326
     f6a:	90 91 27 03 	lds	r25, 0x0327
     f6e:	80 68       	ori	r24, 0x80	; 128
     f70:	90 93 27 03 	sts	0x0327, r25
     f74:	80 93 26 03 	sts	0x0326, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     f78:	2f bf       	out	0x3f, r18	; 63
		}
		IF_FLAG_ON( SNAKE_STOP_GAME_FLAG ){
     f7a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     f7c:	f8 94       	cli
     f7e:	20 91 26 03 	lds	r18, 0x0326
     f82:	30 91 27 03 	lds	r19, 0x0327
     f86:	30 93 29 03 	sts	0x0329, r19
     f8a:	20 93 28 03 	sts	0x0328, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     f8e:	8f bf       	out	0x3f, r24	; 63
     f90:	80 91 28 03 	lds	r24, 0x0328
     f94:	90 91 29 03 	lds	r25, 0x0329
     f98:	91 ff       	sbrs	r25, 1
     f9a:	98 ce       	rjmp	.-720    	; 0xccc <main+0x3c>
			FLAGS_SWITCH_OFF( SNAKE_STOP_GAME_FLAG );
     f9c:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     f9e:	f8 94       	cli
     fa0:	80 91 26 03 	lds	r24, 0x0326
     fa4:	90 91 27 03 	lds	r25, 0x0327
     fa8:	9d 7f       	andi	r25, 0xFD	; 253
     faa:	90 93 27 03 	sts	0x0327, r25
     fae:	80 93 26 03 	sts	0x0326, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     fb2:	2f bf       	out	0x3f, r18	; 63
			TIM2_OVF_OFF();
     fb4:	89 b7       	in	r24, 0x39	; 57
     fb6:	8f 7b       	andi	r24, 0xBF	; 191
     fb8:	89 bf       	out	0x39, r24	; 57
			SnakeGame_Stop();
     fba:	0e 94 29 02 	call	0x452	; 0x452 <SnakeGame_Stop>
			FLAGS_SWITCH_OFF( SNAKE_PLAYING_NOW_FLAG );
     fbe:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     fc0:	f8 94       	cli
     fc2:	80 91 26 03 	lds	r24, 0x0326
     fc6:	90 91 27 03 	lds	r25, 0x0327
     fca:	8f 77       	andi	r24, 0x7F	; 127
     fcc:	90 93 27 03 	sts	0x0327, r25
     fd0:	80 93 26 03 	sts	0x0326, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     fd4:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
     fd6:	7a ce       	rjmp	.-780    	; 0xccc <main+0x3c>

00000fd8 <__vector_5>:
}

//================================================//
//== 			Game timer ticks				==//
ISR(TIMER2_OVF_vect)
{
     fd8:	1f 92       	push	r1
     fda:	0f 92       	push	r0
     fdc:	0f b6       	in	r0, 0x3f	; 63
     fde:	0f 92       	push	r0
     fe0:	11 24       	eor	r1, r1
     fe2:	2f 93       	push	r18
     fe4:	3f 93       	push	r19
     fe6:	4f 93       	push	r20
     fe8:	5f 93       	push	r21
     fea:	6f 93       	push	r22
     fec:	7f 93       	push	r23
     fee:	8f 93       	push	r24
     ff0:	9f 93       	push	r25
     ff2:	af 93       	push	r26
     ff4:	bf 93       	push	r27
     ff6:	ef 93       	push	r30
     ff8:	ff 93       	push	r31
	if(!timer_delay--){
     ffa:	80 91 2d 03 	lds	r24, 0x032D
     ffe:	81 50       	subi	r24, 0x01	; 1
    1000:	80 93 2d 03 	sts	0x032D, r24
    1004:	8f 5f       	subi	r24, 0xFF	; 255
    1006:	91 f4       	brne	.+36     	; 0x102c <__vector_5+0x54>
		if(!timer_ticks_to_get_present--){
    1008:	80 91 c6 00 	lds	r24, 0x00C6
    100c:	81 50       	subi	r24, 0x01	; 1
    100e:	80 93 c6 00 	sts	0x00C6, r24
    1012:	8f 5f       	subi	r24, 0xFF	; 255
    1014:	29 f4       	brne	.+10     	; 0x1020 <__vector_5+0x48>
			timer_ticks_to_get_present = SPEED_TICKS_TO_GET_PRESENT;
    1016:	8c e3       	ldi	r24, 0x3C	; 60
    1018:	80 93 c6 00 	sts	0x00C6, r24
			SnakeGame_AddmeUpdateXY();
    101c:	0e 94 44 02 	call	0x488	; 0x488 <SnakeGame_AddmeUpdateXY>
		}
		SnakeGame_TakeNextStep();
    1020:	0e 94 ce 03 	call	0x79c	; 0x79c <SnakeGame_TakeNextStep>
		timer_delay = step_speed;
    1024:	80 91 60 00 	lds	r24, 0x0060
    1028:	80 93 2d 03 	sts	0x032D, r24
	}
}
    102c:	ff 91       	pop	r31
    102e:	ef 91       	pop	r30
    1030:	bf 91       	pop	r27
    1032:	af 91       	pop	r26
    1034:	9f 91       	pop	r25
    1036:	8f 91       	pop	r24
    1038:	7f 91       	pop	r23
    103a:	6f 91       	pop	r22
    103c:	5f 91       	pop	r21
    103e:	4f 91       	pop	r20
    1040:	3f 91       	pop	r19
    1042:	2f 91       	pop	r18
    1044:	0f 90       	pop	r0
    1046:	0f be       	out	0x3f, r0	; 63
    1048:	0f 90       	pop	r0
    104a:	1f 90       	pop	r1
    104c:	18 95       	reti

0000104e <__vector_2>:


//================================================//
//== 				Joystick click				==//
ISR(INT1_vect)
{
    104e:	1f 92       	push	r1
    1050:	0f 92       	push	r0
    1052:	0f b6       	in	r0, 0x3f	; 63
    1054:	0f 92       	push	r0
    1056:	11 24       	eor	r1, r1
    1058:	2f 93       	push	r18
    105a:	3f 93       	push	r19
    105c:	4f 93       	push	r20
    105e:	5f 93       	push	r21
    1060:	6f 93       	push	r22
    1062:	7f 93       	push	r23
    1064:	8f 93       	push	r24
    1066:	9f 93       	push	r25
    1068:	af 93       	push	r26
    106a:	bf 93       	push	r27
    106c:	ef 93       	push	r30
    106e:	ff 93       	push	r31
    1070:	80 e4       	ldi	r24, 0x40	; 64
    1072:	9f e1       	ldi	r25, 0x1F	; 31
    1074:	01 97       	sbiw	r24, 0x01	; 1
    1076:	f1 f7       	brne	.-4      	; 0x1074 <__vector_2+0x26>
#ifndef ANIMATION_SWITCH_MENU_ITEMS
	menu_before_now = 0x80;
#endif
	_delay_ms(2);	// anti brrrrzzzzrr

	GIFR = _BV(INTF1); // kill int1 flag
    1078:	80 e8       	ldi	r24, 0x80	; 128
    107a:	8a bf       	out	0x3a, r24	; 58

//	Lcd3310_ClearCenter();
//	Lcd3310_GotoXY(0, 0);

	while(1){
		uint8_t jpin_h = (JPIN & 0xf0);
    107c:	83 b3       	in	r24, 0x13	; 19
    107e:	80 7f       	andi	r24, 0xF0	; 240

		if( jpin_h == (uint8_t)(J_LU | J_RU) ){
    1080:	80 39       	cpi	r24, 0x90	; 144
    1082:	11 f4       	brne	.+4      	; 0x1088 <__vector_2+0x3a>
    1084:	82 e0       	ldi	r24, 0x02	; 2
    1086:	0f c0       	rjmp	.+30     	; 0x10a6 <__vector_2+0x58>
					break;
				}
			}
		}

		if( jpin_h == (uint8_t)(J_LD | J_RD) ){
    1088:	80 36       	cpi	r24, 0x60	; 96
    108a:	11 f4       	brne	.+4      	; 0x1090 <__vector_2+0x42>
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	0b c0       	rjmp	.+22     	; 0x10a6 <__vector_2+0x58>
					break;
				}
			}
		}

		if( jpin_h == (uint8_t)(J_LU | J_LD) ){
    1090:	80 3c       	cpi	r24, 0xC0	; 192
    1092:	11 f4       	brne	.+4      	; 0x1098 <__vector_2+0x4a>
    1094:	84 e0       	ldi	r24, 0x04	; 4
    1096:	07 c0       	rjmp	.+14     	; 0x10a6 <__vector_2+0x58>
					break;
				}
			}

		}
		if( jpin_h == (uint8_t)(J_RU | J_RD) ){
    1098:	80 33       	cpi	r24, 0x30	; 48
    109a:	11 f4       	brne	.+4      	; 0x10a0 <__vector_2+0x52>
    109c:	83 e0       	ldi	r24, 0x03	; 3
    109e:	03 c0       	rjmp	.+6      	; 0x10a6 <__vector_2+0x58>
					break;
				}
			}

		}
		if( jpin_h == (uint8_t)(J_RU | J_LU | J_RD | J_LD) ){
    10a0:	80 3f       	cpi	r24, 0xF0	; 240
    10a2:	61 f7       	brne	.-40     	; 0x107c <__vector_2+0x2e>
    10a4:	80 e0       	ldi	r24, 0x00	; 0
				}
			}
		}
	}

	if (JOYSTICK_INT_CHECK()) { return; } // interrupt on brrzzzz then pulling up joystick, so not need to do smth
    10a6:	83 99       	sbic	0x10, 3	; 16
    10a8:	58 c0       	rjmp	.+176    	; 0x115a <__vector_2+0x10c>

	if (result == J_CENTER){
    10aa:	88 23       	and	r24, r24
    10ac:	41 f4       	brne	.+16     	; 0x10be <__vector_2+0x70>
		FLAGS_SWITCH_ON(JOYSTICK_CENTER_CLICK_FLAG);
    10ae:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    10b0:	f8 94       	cli
    10b2:	80 91 26 03 	lds	r24, 0x0326
    10b6:	90 91 27 03 	lds	r25, 0x0327
    10ba:	82 60       	ori	r24, 0x02	; 2
    10bc:	13 c0       	rjmp	.+38     	; 0x10e4 <__vector_2+0x96>
	}else if(result == J_UP){
    10be:	81 30       	cpi	r24, 0x01	; 1
    10c0:	b9 f4       	brne	.+46     	; 0x10f0 <__vector_2+0xa2>
		menu_now = menu_now->prev;
    10c2:	e0 91 3a 03 	lds	r30, 0x033A
    10c6:	f0 91 3b 03 	lds	r31, 0x033B
    10ca:	87 81       	ldd	r24, Z+7	; 0x07
    10cc:	90 85       	ldd	r25, Z+8	; 0x08
    10ce:	90 93 3b 03 	sts	0x033B, r25
    10d2:	80 93 3a 03 	sts	0x033A, r24

#ifdef ANIMATION_SWITCH_MENU_ITEMS
		FLAGS_SWITCH_ON( ANIMATION_PREV_FLAG );
    10d6:	2f b7       	in	r18, 0x3f	; 63
    10d8:	f8 94       	cli
    10da:	80 91 26 03 	lds	r24, 0x0326
    10de:	90 91 27 03 	lds	r25, 0x0327
    10e2:	88 60       	ori	r24, 0x08	; 8
    10e4:	90 93 27 03 	sts	0x0327, r25
    10e8:	80 93 26 03 	sts	0x0326, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    10ec:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    10ee:	35 c0       	rjmp	.+106    	; 0x115a <__vector_2+0x10c>
#else
		menu_before_now--;
		FLAGS_SWITCH_ON( UPDATE_DISPLAY_FLAG );
#endif
	}else if(result == J_DOWN){
    10f0:	82 30       	cpi	r24, 0x02	; 2
    10f2:	91 f4       	brne	.+36     	; 0x1118 <__vector_2+0xca>
		menu_now = menu_now->next;
    10f4:	e0 91 3a 03 	lds	r30, 0x033A
    10f8:	f0 91 3b 03 	lds	r31, 0x033B
    10fc:	85 81       	ldd	r24, Z+5	; 0x05
    10fe:	96 81       	ldd	r25, Z+6	; 0x06
    1100:	90 93 3b 03 	sts	0x033B, r25
    1104:	80 93 3a 03 	sts	0x033A, r24

#ifdef ANIMATION_SWITCH_MENU_ITEMS
		FLAGS_SWITCH_ON( ANIMATION_NEXT_FLAG );
    1108:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    110a:	f8 94       	cli
    110c:	80 91 26 03 	lds	r24, 0x0326
    1110:	90 91 27 03 	lds	r25, 0x0327
    1114:	84 60       	ori	r24, 0x04	; 4
    1116:	e6 cf       	rjmp	.-52     	; 0x10e4 <__vector_2+0x96>
    1118:	20 91 26 03 	lds	r18, 0x0326
    111c:	30 91 27 03 	lds	r19, 0x0327
#else
		menu_before_now++;
		FLAGS_SWITCH_ON( UPDATE_DISPLAY_FLAG );
#endif
	}else if(result == J_LEFT){
    1120:	83 30       	cpi	r24, 0x03	; 3
    1122:	71 f4       	brne	.+28     	; 0x1140 <__vector_2+0xf2>
		IF_FLAG_ON( SNAKE_PLAYING_NOW_FLAG ){
    1124:	8f b7       	in	r24, 0x3f	; 63
    1126:	f8 94       	cli
    1128:	30 93 29 03 	sts	0x0329, r19
    112c:	20 93 28 03 	sts	0x0328, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1130:	8f bf       	out	0x3f, r24	; 63
    1132:	80 91 28 03 	lds	r24, 0x0328
    1136:	87 ff       	sbrs	r24, 7
    1138:	10 c0       	rjmp	.+32     	; 0x115a <__vector_2+0x10c>
			SnakeGame_TurnLeft();
    113a:	0e 94 2e 02 	call	0x45c	; 0x45c <SnakeGame_TurnLeft>
    113e:	0d c0       	rjmp	.+26     	; 0x115a <__vector_2+0x10c>
		}
	}else if(result == J_RIGHT){
		IF_FLAG_ON( SNAKE_PLAYING_NOW_FLAG ){
    1140:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1142:	f8 94       	cli
    1144:	30 93 29 03 	sts	0x0329, r19
    1148:	20 93 28 03 	sts	0x0328, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    114c:	8f bf       	out	0x3f, r24	; 63
    114e:	80 91 28 03 	lds	r24, 0x0328
    1152:	87 ff       	sbrs	r24, 7
    1154:	02 c0       	rjmp	.+4      	; 0x115a <__vector_2+0x10c>
			SnakeGame_TurnRight();
    1156:	0e 94 39 02 	call	0x472	; 0x472 <SnakeGame_TurnRight>
		}
	}

}
    115a:	ff 91       	pop	r31
    115c:	ef 91       	pop	r30
    115e:	bf 91       	pop	r27
    1160:	af 91       	pop	r26
    1162:	9f 91       	pop	r25
    1164:	8f 91       	pop	r24
    1166:	7f 91       	pop	r23
    1168:	6f 91       	pop	r22
    116a:	5f 91       	pop	r21
    116c:	4f 91       	pop	r20
    116e:	3f 91       	pop	r19
    1170:	2f 91       	pop	r18
    1172:	0f 90       	pop	r0
    1174:	0f be       	out	0x3f, r0	; 63
    1176:	0f 90       	pop	r0
    1178:	1f 90       	pop	r1
    117a:	18 95       	reti

0000117c <HalfByteAsASCII>:
#include "uint8_16_to_string.h"

char to_string_result[] = {0, 0, 0, 0};

char HalfByteAsASCII(char c)
{
    117c:	98 2f       	mov	r25, r24
    if (c >= 0 && c <= 9){
    117e:	8a 30       	cpi	r24, 0x0A	; 10
    1180:	10 f4       	brcc	.+4      	; 0x1186 <HalfByteAsASCII+0xa>
        c += 0x30;
    1182:	80 5d       	subi	r24, 0xD0	; 208
    1184:	08 95       	ret
    }else if (c >= 0xA && c <= 0x0F){
    1186:	8a 50       	subi	r24, 0x0A	; 10
    1188:	86 30       	cpi	r24, 0x06	; 6
    118a:	10 f0       	brcs	.+4      	; 0x1190 <HalfByteAsASCII+0x14>
    118c:	8f e3       	ldi	r24, 0x3F	; 63
    118e:	08 95       	ret
        c += 0x37;
    1190:	89 2f       	mov	r24, r25
    1192:	89 5c       	subi	r24, 0xC9	; 201
    }else{
        c = '?';
    }
    return c;
}
    1194:	08 95       	ret

00001196 <UInt8ToString>:

void UInt8ToString(uint8_t ch)
{
    1196:	28 2f       	mov	r18, r24
	to_string_result[0] = HalfByteAsASCII( (ch & 0xf0) >>4 );
    1198:	98 2f       	mov	r25, r24
    119a:	92 95       	swap	r25
    119c:	9f 70       	andi	r25, 0x0F	; 15

char to_string_result[] = {0, 0, 0, 0};

char HalfByteAsASCII(char c)
{
    if (c >= 0 && c <= 9){
    119e:	9a 30       	cpi	r25, 0x0A	; 10
    11a0:	18 f4       	brcc	.+6      	; 0x11a8 <UInt8ToString+0x12>
        c += 0x30;
    11a2:	89 2f       	mov	r24, r25
    11a4:	80 5d       	subi	r24, 0xD0	; 208
    11a6:	08 c0       	rjmp	.+16     	; 0x11b8 <UInt8ToString+0x22>
    }else if (c >= 0xA && c <= 0x0F){
    11a8:	89 2f       	mov	r24, r25
    11aa:	8a 50       	subi	r24, 0x0A	; 10
    11ac:	86 30       	cpi	r24, 0x06	; 6
    11ae:	10 f0       	brcs	.+4      	; 0x11b4 <UInt8ToString+0x1e>
    11b0:	8f e3       	ldi	r24, 0x3F	; 63
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <UInt8ToString+0x22>
        c += 0x37;
    11b4:	89 2f       	mov	r24, r25
    11b6:	89 5c       	subi	r24, 0xC9	; 201
    return c;
}

void UInt8ToString(uint8_t ch)
{
	to_string_result[0] = HalfByteAsASCII( (ch & 0xf0) >>4 );
    11b8:	80 93 2e 03 	sts	0x032E, r24
	to_string_result[1] = HalfByteAsASCII( ch & 0x0f );
    11bc:	92 2f       	mov	r25, r18
    11be:	9f 70       	andi	r25, 0x0F	; 15

char to_string_result[] = {0, 0, 0, 0};

char HalfByteAsASCII(char c)
{
    if (c >= 0 && c <= 9){
    11c0:	9a 30       	cpi	r25, 0x0A	; 10
    11c2:	18 f4       	brcc	.+6      	; 0x11ca <UInt8ToString+0x34>
        c += 0x30;
    11c4:	89 2f       	mov	r24, r25
    11c6:	80 5d       	subi	r24, 0xD0	; 208
    11c8:	08 c0       	rjmp	.+16     	; 0x11da <UInt8ToString+0x44>
    }else if (c >= 0xA && c <= 0x0F){
    11ca:	89 2f       	mov	r24, r25
    11cc:	8a 50       	subi	r24, 0x0A	; 10
    11ce:	86 30       	cpi	r24, 0x06	; 6
    11d0:	10 f0       	brcs	.+4      	; 0x11d6 <UInt8ToString+0x40>
    11d2:	8f e3       	ldi	r24, 0x3F	; 63
    11d4:	02 c0       	rjmp	.+4      	; 0x11da <UInt8ToString+0x44>
        c += 0x37;
    11d6:	89 2f       	mov	r24, r25
    11d8:	89 5c       	subi	r24, 0xC9	; 201
}

void UInt8ToString(uint8_t ch)
{
	to_string_result[0] = HalfByteAsASCII( (ch & 0xf0) >>4 );
	to_string_result[1] = HalfByteAsASCII( ch & 0x0f );
    11da:	80 93 2f 03 	sts	0x032F, r24
	//to_string_result[2] = 0x00; // end of result string here
	// result in result_str
}
    11de:	08 95       	ret

000011e0 <UInt16ToString>:

void UInt16ToString(uint16_t i)
{
    11e0:	9c 01       	movw	r18, r24
	//to_string_result[0] = HalfByteAsASCII( (i & 0xf000) >> 12 );
	to_string_result[1] = HalfByteAsASCII( (i & 0x0f00) >> 8  );
    11e2:	80 70       	andi	r24, 0x00	; 0
    11e4:	9f 70       	andi	r25, 0x0F	; 15

char to_string_result[] = {0, 0, 0, 0};

char HalfByteAsASCII(char c)
{
    if (c >= 0 && c <= 9){
    11e6:	9a 30       	cpi	r25, 0x0A	; 10
    11e8:	18 f4       	brcc	.+6      	; 0x11f0 <UInt16ToString+0x10>
        c += 0x30;
    11ea:	89 2f       	mov	r24, r25
    11ec:	80 5d       	subi	r24, 0xD0	; 208
    11ee:	08 c0       	rjmp	.+16     	; 0x1200 <UInt16ToString+0x20>
    }else if (c >= 0xA && c <= 0x0F){
    11f0:	89 2f       	mov	r24, r25
    11f2:	8a 50       	subi	r24, 0x0A	; 10
    11f4:	86 30       	cpi	r24, 0x06	; 6
    11f6:	10 f0       	brcs	.+4      	; 0x11fc <UInt16ToString+0x1c>
    11f8:	8f e3       	ldi	r24, 0x3F	; 63
    11fa:	02 c0       	rjmp	.+4      	; 0x1200 <UInt16ToString+0x20>
        c += 0x37;
    11fc:	89 2f       	mov	r24, r25
    11fe:	89 5c       	subi	r24, 0xC9	; 201
}

void UInt16ToString(uint16_t i)
{
	//to_string_result[0] = HalfByteAsASCII( (i & 0xf000) >> 12 );
	to_string_result[1] = HalfByteAsASCII( (i & 0x0f00) >> 8  );
    1200:	80 93 2f 03 	sts	0x032F, r24
	to_string_result[2] = HalfByteAsASCII( (i & 0x00f0) >> 4  );
    1204:	c9 01       	movw	r24, r18
    1206:	80 7f       	andi	r24, 0xF0	; 240
    1208:	90 70       	andi	r25, 0x00	; 0
    120a:	34 e0       	ldi	r19, 0x04	; 4
    120c:	96 95       	lsr	r25
    120e:	87 95       	ror	r24
    1210:	3a 95       	dec	r19
    1212:	e1 f7       	brne	.-8      	; 0x120c <UInt16ToString+0x2c>
    1214:	98 2f       	mov	r25, r24

char to_string_result[] = {0, 0, 0, 0};

char HalfByteAsASCII(char c)
{
    if (c >= 0 && c <= 9){
    1216:	8a 30       	cpi	r24, 0x0A	; 10
    1218:	10 f4       	brcc	.+4      	; 0x121e <UInt16ToString+0x3e>
        c += 0x30;
    121a:	80 5d       	subi	r24, 0xD0	; 208
    121c:	07 c0       	rjmp	.+14     	; 0x122c <UInt16ToString+0x4c>
    }else if (c >= 0xA && c <= 0x0F){
    121e:	8a 50       	subi	r24, 0x0A	; 10
    1220:	86 30       	cpi	r24, 0x06	; 6
    1222:	10 f0       	brcs	.+4      	; 0x1228 <UInt16ToString+0x48>
    1224:	8f e3       	ldi	r24, 0x3F	; 63
    1226:	02 c0       	rjmp	.+4      	; 0x122c <UInt16ToString+0x4c>
        c += 0x37;
    1228:	89 2f       	mov	r24, r25
    122a:	89 5c       	subi	r24, 0xC9	; 201

void UInt16ToString(uint16_t i)
{
	//to_string_result[0] = HalfByteAsASCII( (i & 0xf000) >> 12 );
	to_string_result[1] = HalfByteAsASCII( (i & 0x0f00) >> 8  );
	to_string_result[2] = HalfByteAsASCII( (i & 0x00f0) >> 4  );
    122c:	80 93 30 03 	sts	0x0330, r24
	to_string_result[3] = HalfByteAsASCII(  i & 0x000f		);
    1230:	92 2f       	mov	r25, r18
    1232:	9f 70       	andi	r25, 0x0F	; 15

char to_string_result[] = {0, 0, 0, 0};

char HalfByteAsASCII(char c)
{
    if (c >= 0 && c <= 9){
    1234:	9a 30       	cpi	r25, 0x0A	; 10
    1236:	18 f4       	brcc	.+6      	; 0x123e <UInt16ToString+0x5e>
        c += 0x30;
    1238:	89 2f       	mov	r24, r25
    123a:	80 5d       	subi	r24, 0xD0	; 208
    123c:	08 c0       	rjmp	.+16     	; 0x124e <UInt16ToString+0x6e>
    }else if (c >= 0xA && c <= 0x0F){
    123e:	89 2f       	mov	r24, r25
    1240:	8a 50       	subi	r24, 0x0A	; 10
    1242:	86 30       	cpi	r24, 0x06	; 6
    1244:	10 f0       	brcs	.+4      	; 0x124a <UInt16ToString+0x6a>
    1246:	8f e3       	ldi	r24, 0x3F	; 63
    1248:	02 c0       	rjmp	.+4      	; 0x124e <UInt16ToString+0x6e>
        c += 0x37;
    124a:	89 2f       	mov	r24, r25
    124c:	89 5c       	subi	r24, 0xC9	; 201
void UInt16ToString(uint16_t i)
{
	//to_string_result[0] = HalfByteAsASCII( (i & 0xf000) >> 12 );
	to_string_result[1] = HalfByteAsASCII( (i & 0x0f00) >> 8  );
	to_string_result[2] = HalfByteAsASCII( (i & 0x00f0) >> 4  );
	to_string_result[3] = HalfByteAsASCII(  i & 0x000f		);
    124e:	80 93 31 03 	sts	0x0331, r24
	// result in result_str
}
    1252:	08 95       	ret

00001254 <Lcd3310_Char>:

	_delay_ms(show_init_data_delay_ms); // show image from LcdCache initial value
}

void Lcd3310_Char(unsigned char ch, WhiteOrBlackText is_invert_colors)
{
    1254:	cf 93       	push	r28
    1256:	df 93       	push	r29
    1258:	28 2f       	mov	r18, r24
    125a:	36 2f       	mov	r19, r22
	//  Convert to a printable character.
    if ( (ch < 0x20) ){
    125c:	80 32       	cpi	r24, 0x20	; 32
    125e:	08 f4       	brcc	.+2      	; 0x1262 <Lcd3310_Char+0xe>
    1260:	2c e5       	ldi	r18, 0x5C	; 92
        ch = 92;
    }
	
	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    1262:	c0 91 32 03 	lds	r28, 0x0332
    1266:	d0 91 33 03 	lds	r29, 0x0333
    126a:	ce 01       	movw	r24, r28
    126c:	64 e5       	ldi	r22, 0x54	; 84
    126e:	70 e0       	ldi	r23, 0x00	; 0
    1270:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__udivmodhi4>
    1274:	80 68       	ori	r24, 0x80	; 128


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1276:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    1278:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    127a:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    127c:	77 9b       	sbis	0x0e, 7	; 14
    127e:	fe cf       	rjmp	.-4      	; 0x127c <Lcd3310_Char+0x28>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1280:	c3 9a       	sbi	0x18, 3	; 24
    if ( (ch < 0x20) ){
        ch = 92;
    }
	
	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    Lcd3310_Send( 0x40 | (Lcd3310_Index / LCD_X_RES), LCD_CMD );
    1282:	ce 01       	movw	r24, r28
    1284:	64 e5       	ldi	r22, 0x54	; 84
    1286:	70 e0       	ldi	r23, 0x00	; 0
    1288:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__udivmodhi4>
    128c:	60 64       	ori	r22, 0x40	; 64


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    128e:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    1290:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    1292:	6f b9       	out	0x0f, r22	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1294:	77 9b       	sbis	0x0e, 7	; 14
    1296:	fe cf       	rjmp	.-4      	; 0x1294 <Lcd3310_Char+0x40>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1298:	c3 9a       	sbi	0x18, 3	; 24
	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    Lcd3310_Send( 0x40 | (Lcd3310_Index / LCD_X_RES), LCD_CMD );
	
	for (char i = 0; i < 5; i++ ){		
		char temp;
		PGM_GET_BYTE_FROM_FONTLOOKUP(temp, ch, i );
    129a:	85 e0       	ldi	r24, 0x05	; 5
    129c:	28 9f       	mul	r18, r24
    129e:	c0 01       	movw	r24, r0
    12a0:	11 24       	eor	r1, r1
    12a2:	fc 01       	movw	r30, r24
    12a4:	ec 54       	subi	r30, 0x4C	; 76
    12a6:	f0 40       	sbci	r31, 0x00	; 0
    }
	
	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    Lcd3310_Send( 0x40 | (Lcd3310_Index / LCD_X_RES), LCD_CMD );
	
	for (char i = 0; i < 5; i++ ){		
    12a8:	87 54       	subi	r24, 0x47	; 71
    12aa:	90 40       	sbci	r25, 0x00	; 0
		char temp;
		PGM_GET_BYTE_FROM_FONTLOOKUP(temp, ch, i );
    12ac:	24 91       	lpm	r18, Z+
    12ae:	22 0f       	add	r18, r18
		if(is_invert_colors) temp = (unsigned char) ~temp;
    12b0:	31 11       	cpse	r19, r1
    12b2:	20 95       	com	r18


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    12b4:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    12b6:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    12b8:	2f b9       	out	0x0f, r18	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    12ba:	77 9b       	sbis	0x0e, 7	; 14
    12bc:	fe cf       	rjmp	.-4      	; 0x12ba <Lcd3310_Char+0x66>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    12be:	c3 9a       	sbi	0x18, 3	; 24
    12c0:	31 96       	adiw	r30, 0x01	; 1
    }
	
	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    Lcd3310_Send( 0x40 | (Lcd3310_Index / LCD_X_RES), LCD_CMD );
	
	for (char i = 0; i < 5; i++ ){		
    12c2:	e8 17       	cp	r30, r24
    12c4:	f9 07       	cpc	r31, r25
    12c6:	91 f7       	brne	.-28     	; 0x12ac <Lcd3310_Char+0x58>
		char temp;
		PGM_GET_BYTE_FROM_FONTLOOKUP(temp, ch, i );
		if(is_invert_colors) temp = (unsigned char) ~temp;
	    Lcd3310_Send( temp, LCD_DATA );
    }
	if(is_invert_colors) Lcd3310_Send( 0xff, LCD_DATA );
    12c8:	33 23       	and	r19, r19
    12ca:	39 f0       	breq	.+14     	; 0x12da <Lcd3310_Char+0x86>


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    12cc:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    12ce:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    12d0:	8f ef       	ldi	r24, 0xFF	; 255
    12d2:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    12d4:	77 9b       	sbis	0x0e, 7	; 14
    12d6:	fe cf       	rjmp	.-4      	; 0x12d4 <Lcd3310_Char+0x80>
    12d8:	05 c0       	rjmp	.+10     	; 0x12e4 <Lcd3310_Char+0x90>


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    12da:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    12dc:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    12de:	1f b8       	out	0x0f, r1	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    12e0:	77 9b       	sbis	0x0e, 7	; 14
    12e2:	fe cf       	rjmp	.-4      	; 0x12e0 <Lcd3310_Char+0x8c>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    12e4:	c3 9a       	sbi	0x18, 3	; 24
		if(is_invert_colors) temp = (unsigned char) ~temp;
	    Lcd3310_Send( temp, LCD_DATA );
    }
	if(is_invert_colors) Lcd3310_Send( 0xff, LCD_DATA );
	else Lcd3310_Send( 0x00, LCD_DATA );
	Lcd3310_Index += 6;
    12e6:	26 96       	adiw	r28, 0x06	; 6
    12e8:	d0 93 33 03 	sts	0x0333, r29
    12ec:	c0 93 32 03 	sts	0x0332, r28
}
    12f0:	df 91       	pop	r29
    12f2:	cf 91       	pop	r28
    12f4:	08 95       	ret

000012f6 <Lcd3310_String_P>:

void Lcd3310_String_P(PGM_P str_ptr, WhiteOrBlackText is_invert_colors)
{
    12f6:	0f 93       	push	r16
    12f8:	1f 93       	push	r17
    12fa:	cf 93       	push	r28
    12fc:	df 93       	push	r29
    12fe:	08 2f       	mov	r16, r24
    1300:	16 2f       	mov	r17, r22
    1302:	28 2f       	mov	r18, r24
    1304:	39 2f       	mov	r19, r25
    1306:	e9 01       	movw	r28, r18
    1308:	04 c0       	rjmp	.+8      	; 0x1312 <Lcd3310_String_P+0x1c>
	char count = 0;
    while ( *str_ptr ){
		count++;
        Lcd3310_Char( *(str_ptr++), is_invert_colors );
    130a:	21 96       	adiw	r28, 0x01	; 1
    130c:	61 2f       	mov	r22, r17
    130e:	0e 94 2a 09 	call	0x1254	; 0x1254 <Lcd3310_Char>
    1312:	9e 01       	movw	r18, r28
    1314:	20 1b       	sub	r18, r16
    1316:	92 2f       	mov	r25, r18
}

void Lcd3310_String_P(PGM_P str_ptr, WhiteOrBlackText is_invert_colors)
{
	char count = 0;
    while ( *str_ptr ){
    1318:	88 81       	ld	r24, Y
    131a:	88 23       	and	r24, r24
    131c:	b1 f7       	brne	.-20     	; 0x130a <Lcd3310_String_P+0x14>
		count++;
        Lcd3310_Char( *(str_ptr++), is_invert_colors );
    }
	if(is_invert_colors && count > 0 && count < 14){
    131e:	11 23       	and	r17, r17
    1320:	b9 f0       	breq	.+46     	; 0x1350 <Lcd3310_String_P+0x5a>
    1322:	22 23       	and	r18, r18
    1324:	a9 f0       	breq	.+42     	; 0x1350 <Lcd3310_String_P+0x5a>
    1326:	2e 30       	cpi	r18, 0x0E	; 14
    1328:	98 f4       	brcc	.+38     	; 0x1350 <Lcd3310_String_P+0x5a>
		for(count = (14 - count) * 6; count > 0; count--){
    132a:	2e e0       	ldi	r18, 0x0E	; 14
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	29 1b       	sub	r18, r25
    1330:	31 09       	sbc	r19, r1
    1332:	c9 01       	movw	r24, r18
    1334:	88 0f       	add	r24, r24
    1336:	99 1f       	adc	r25, r25
    1338:	82 0f       	add	r24, r18
    133a:	93 1f       	adc	r25, r19
    133c:	88 0f       	add	r24, r24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    133e:	9f ef       	ldi	r25, 0xFF	; 255


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1340:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    1342:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    1344:	9f b9       	out	0x0f, r25	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1346:	77 9b       	sbis	0x0e, 7	; 14
    1348:	fe cf       	rjmp	.-4      	; 0x1346 <Lcd3310_String_P+0x50>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    134a:	c3 9a       	sbi	0x18, 3	; 24
    while ( *str_ptr ){
		count++;
        Lcd3310_Char( *(str_ptr++), is_invert_colors );
    }
	if(is_invert_colors && count > 0 && count < 14){
		for(count = (14 - count) * 6; count > 0; count--){
    134c:	81 50       	subi	r24, 0x01	; 1
    134e:	c1 f7       	brne	.-16     	; 0x1340 <Lcd3310_String_P+0x4a>
			Lcd3310_Send( 0xff, LCD_DATA );
		}
	}
}
    1350:	df 91       	pop	r29
    1352:	cf 91       	pop	r28
    1354:	1f 91       	pop	r17
    1356:	0f 91       	pop	r16
    1358:	08 95       	ret

0000135a <Lcd3310_String_P_anime>:

#ifdef ANIMATION_SWITCH_MENU_ITEMS
void Lcd3310_String_P_anime(PGM_P str_ptr, PGM_P str_ptr_next, WhiteOrBlackText is_invert_colors, char num_of_cadr, char is_next)
{
    135a:	5f 92       	push	r5
    135c:	6f 92       	push	r6
    135e:	7f 92       	push	r7
    1360:	8f 92       	push	r8
    1362:	9f 92       	push	r9
    1364:	af 92       	push	r10
    1366:	bf 92       	push	r11
    1368:	cf 92       	push	r12
    136a:	df 92       	push	r13
    136c:	ef 92       	push	r14
    136e:	ff 92       	push	r15
    1370:	0f 93       	push	r16
    1372:	1f 93       	push	r17
    1374:	cf 93       	push	r28
    1376:	df 93       	push	r29
    1378:	5c 01       	movw	r10, r24
    137a:	6b 01       	movw	r12, r22
    137c:	84 2e       	mov	r8, r20
    137e:	70 2e       	mov	r7, r16
	unsigned char ch1 = 1, ch2 = 1, display, temp1, temp2, count = 0;

	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    1380:	e0 91 32 03 	lds	r30, 0x0332
    1384:	f0 91 33 03 	lds	r31, 0x0333
    1388:	cf 01       	movw	r24, r30
    138a:	64 e5       	ldi	r22, 0x54	; 84
    138c:	70 e0       	ldi	r23, 0x00	; 0
    138e:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__udivmodhi4>
    1392:	80 68       	ori	r24, 0x80	; 128


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1394:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    1396:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    1398:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    139a:	77 9b       	sbis	0x0e, 7	; 14
    139c:	fe cf       	rjmp	.-4      	; 0x139a <Lcd3310_String_P_anime+0x40>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    139e:	c3 9a       	sbi	0x18, 3	; 24
void Lcd3310_String_P_anime(PGM_P str_ptr, PGM_P str_ptr_next, WhiteOrBlackText is_invert_colors, char num_of_cadr, char is_next)
{
	unsigned char ch1 = 1, ch2 = 1, display, temp1, temp2, count = 0;

	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    Lcd3310_Send( 0x40 | (Lcd3310_Index / LCD_X_RES), LCD_CMD );
    13a0:	cf 01       	movw	r24, r30
    13a2:	64 e5       	ldi	r22, 0x54	; 84
    13a4:	70 e0       	ldi	r23, 0x00	; 0
    13a6:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__udivmodhi4>
    13aa:	60 64       	ori	r22, 0x40	; 64


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    13ac:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    13ae:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    13b0:	6f b9       	out	0x0f, r22	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    13b2:	77 9b       	sbis	0x0e, 7	; 14
    13b4:	fe cf       	rjmp	.-4      	; 0x13b2 <Lcd3310_String_P_anime+0x58>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    13b6:	c3 9a       	sbi	0x18, 3	; 24
    13b8:	99 24       	eor	r9, r9

		for (char i = 0; i < 5; i++ ){		
			if(ch1) PGM_GET_BYTE_FROM_FONTLOOKUP(temp1, ch1, i )
			else temp1 = 0x00;

			if(ch2) PGM_GET_BYTE_FROM_FONTLOOKUP(temp2, ch2, i )
    13ba:	65 e0       	ldi	r22, 0x05	; 5
    13bc:	66 2e       	mov	r6, r22
    13be:	e2 2e       	mov	r14, r18
    13c0:	ff 24       	eor	r15, r15
			else temp2 = 0x00;

			if(is_next) display = (temp1 >> num_of_cadr) | ( (temp2 << (8 - num_of_cadr)) );
			else 		display = (temp1 << num_of_cadr) | ( (temp2 >> (8 - num_of_cadr)) );
    13c2:	08 e0       	ldi	r16, 0x08	; 8
    13c4:	10 e0       	ldi	r17, 0x00	; 0
    13c6:	0e 19       	sub	r16, r14
    13c8:	1f 09       	sbc	r17, r15
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    13ca:	55 24       	eor	r5, r5
    13cc:	5a 94       	dec	r5

	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    Lcd3310_Send( 0x40 | (Lcd3310_Index / LCD_X_RES), LCD_CMD );
	
	while ( ch1 || ch2 ){
		count++;
    13ce:	93 94       	inc	r9
		if(*str_ptr) ch1 = *(str_ptr++);
    13d0:	f5 01       	movw	r30, r10
    13d2:	40 81       	ld	r20, Z
    13d4:	44 23       	and	r20, r20
    13d6:	19 f0       	breq	.+6      	; 0x13de <Lcd3310_String_P_anime+0x84>
    13d8:	08 94       	sec
    13da:	a1 1c       	adc	r10, r1
    13dc:	b1 1c       	adc	r11, r1
		else ch1 = 0x00;
		
		if(*str_ptr_next) ch2 = *(str_ptr_next++);
    13de:	f6 01       	movw	r30, r12
    13e0:	20 81       	ld	r18, Z
    13e2:	22 23       	and	r18, r18
    13e4:	19 f0       	breq	.+6      	; 0x13ec <Lcd3310_String_P_anime+0x92>
    13e6:	08 94       	sec
    13e8:	c1 1c       	adc	r12, r1
    13ea:	d1 1c       	adc	r13, r1

		for (char i = 0; i < 5; i++ ){		
			if(ch1) PGM_GET_BYTE_FROM_FONTLOOKUP(temp1, ch1, i )
			else temp1 = 0x00;

			if(ch2) PGM_GET_BYTE_FROM_FONTLOOKUP(temp2, ch2, i )
    13ec:	26 9d       	mul	r18, r6
    13ee:	c0 01       	movw	r24, r0
    13f0:	11 24       	eor	r1, r1
    13f2:	ec 01       	movw	r28, r24
    13f4:	cc 54       	subi	r28, 0x4C	; 76
    13f6:	d0 40       	sbci	r29, 0x00	; 0
    13f8:	46 9d       	mul	r20, r6
    13fa:	d0 01       	movw	r26, r0
    13fc:	11 24       	eor	r1, r1
    13fe:	ac 54       	subi	r26, 0x4C	; 76
    1400:	b0 40       	sbci	r27, 0x00	; 0
		else ch1 = 0x00;
		
		if(*str_ptr_next) ch2 = *(str_ptr_next++);
		else ch2 = 0x00;

		for (char i = 0; i < 5; i++ ){		
    1402:	87 54       	subi	r24, 0x47	; 71
    1404:	90 40       	sbci	r25, 0x00	; 0
			if(ch1) PGM_GET_BYTE_FROM_FONTLOOKUP(temp1, ch1, i )
    1406:	44 23       	and	r20, r20
    1408:	11 f4       	brne	.+4      	; 0x140e <Lcd3310_String_P_anime+0xb4>
    140a:	50 e0       	ldi	r21, 0x00	; 0
    140c:	03 c0       	rjmp	.+6      	; 0x1414 <Lcd3310_String_P_anime+0xba>
    140e:	fd 01       	movw	r30, r26
    1410:	54 91       	lpm	r21, Z+
    1412:	55 0f       	add	r21, r21
			else temp1 = 0x00;

			if(ch2) PGM_GET_BYTE_FROM_FONTLOOKUP(temp2, ch2, i )
    1414:	22 23       	and	r18, r18
    1416:	11 f4       	brne	.+4      	; 0x141c <Lcd3310_String_P_anime+0xc2>
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	03 c0       	rjmp	.+6      	; 0x1422 <Lcd3310_String_P_anime+0xc8>
    141c:	fe 01       	movw	r30, r28
    141e:	34 91       	lpm	r19, Z+
    1420:	33 0f       	add	r19, r19
    1422:	e3 2f       	mov	r30, r19
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	65 2f       	mov	r22, r21
    1428:	70 e0       	ldi	r23, 0x00	; 0
			else temp2 = 0x00;

			if(is_next) display = (temp1 >> num_of_cadr) | ( (temp2 << (8 - num_of_cadr)) );
    142a:	77 20       	and	r7, r7
    142c:	69 f0       	breq	.+26     	; 0x1448 <Lcd3310_String_P_anime+0xee>
    142e:	00 2e       	mov	r0, r16
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <Lcd3310_String_P_anime+0xdc>
    1432:	ee 0f       	add	r30, r30
    1434:	ff 1f       	adc	r31, r31
    1436:	0a 94       	dec	r0
    1438:	e2 f7       	brpl	.-8      	; 0x1432 <Lcd3310_String_P_anime+0xd8>
    143a:	0e 2c       	mov	r0, r14
    143c:	02 c0       	rjmp	.+4      	; 0x1442 <Lcd3310_String_P_anime+0xe8>
    143e:	75 95       	asr	r23
    1440:	67 95       	ror	r22
    1442:	0a 94       	dec	r0
    1444:	e2 f7       	brpl	.-8      	; 0x143e <Lcd3310_String_P_anime+0xe4>
    1446:	0c c0       	rjmp	.+24     	; 0x1460 <Lcd3310_String_P_anime+0x106>
			else 		display = (temp1 << num_of_cadr) | ( (temp2 >> (8 - num_of_cadr)) );
    1448:	00 2e       	mov	r0, r16
    144a:	02 c0       	rjmp	.+4      	; 0x1450 <Lcd3310_String_P_anime+0xf6>
    144c:	f5 95       	asr	r31
    144e:	e7 95       	ror	r30
    1450:	0a 94       	dec	r0
    1452:	e2 f7       	brpl	.-8      	; 0x144c <Lcd3310_String_P_anime+0xf2>
    1454:	0e 2c       	mov	r0, r14
    1456:	02 c0       	rjmp	.+4      	; 0x145c <Lcd3310_String_P_anime+0x102>
    1458:	66 0f       	add	r22, r22
    145a:	77 1f       	adc	r23, r23
    145c:	0a 94       	dec	r0
    145e:	e2 f7       	brpl	.-8      	; 0x1458 <Lcd3310_String_P_anime+0xfe>
    1460:	3e 2f       	mov	r19, r30
    1462:	36 2b       	or	r19, r22
			if(is_invert_colors) display = (unsigned char) ~display;
    1464:	81 10       	cpse	r8, r1
    1466:	30 95       	com	r19


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1468:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    146a:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    146c:	3f b9       	out	0x0f, r19	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    146e:	77 9b       	sbis	0x0e, 7	; 14
    1470:	fe cf       	rjmp	.-4      	; 0x146e <Lcd3310_String_P_anime+0x114>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1472:	c3 9a       	sbi	0x18, 3	; 24
    1474:	21 96       	adiw	r28, 0x01	; 1
    1476:	11 96       	adiw	r26, 0x01	; 1
		else ch1 = 0x00;
		
		if(*str_ptr_next) ch2 = *(str_ptr_next++);
		else ch2 = 0x00;

		for (char i = 0; i < 5; i++ ){		
    1478:	c8 17       	cp	r28, r24
    147a:	d9 07       	cpc	r29, r25
    147c:	09 f0       	breq	.+2      	; 0x1480 <Lcd3310_String_P_anime+0x126>
    147e:	c3 cf       	rjmp	.-122    	; 0x1406 <Lcd3310_String_P_anime+0xac>
			if(is_next) display = (temp1 >> num_of_cadr) | ( (temp2 << (8 - num_of_cadr)) );
			else 		display = (temp1 << num_of_cadr) | ( (temp2 >> (8 - num_of_cadr)) );
			if(is_invert_colors) display = (unsigned char) ~display;
		    Lcd3310_Send( display, LCD_DATA );
	    }
		if(is_invert_colors) Lcd3310_Send( 0xff, LCD_DATA );
    1480:	88 20       	and	r8, r8
    1482:	31 f0       	breq	.+12     	; 0x1490 <Lcd3310_String_P_anime+0x136>


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1484:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    1486:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    1488:	5f b8       	out	0x0f, r5	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    148a:	77 9b       	sbis	0x0e, 7	; 14
    148c:	fe cf       	rjmp	.-4      	; 0x148a <Lcd3310_String_P_anime+0x130>
    148e:	05 c0       	rjmp	.+10     	; 0x149a <Lcd3310_String_P_anime+0x140>


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1490:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    1492:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    1494:	1f b8       	out	0x0f, r1	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1496:	77 9b       	sbis	0x0e, 7	; 14
    1498:	fe cf       	rjmp	.-4      	; 0x1496 <Lcd3310_String_P_anime+0x13c>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    149a:	c3 9a       	sbi	0x18, 3	; 24
	unsigned char ch1 = 1, ch2 = 1, display, temp1, temp2, count = 0;

	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    Lcd3310_Send( 0x40 | (Lcd3310_Index / LCD_X_RES), LCD_CMD );
	
	while ( ch1 || ch2 ){
    149c:	44 23       	and	r20, r20
    149e:	09 f0       	breq	.+2      	; 0x14a2 <Lcd3310_String_P_anime+0x148>
    14a0:	96 cf       	rjmp	.-212    	; 0x13ce <Lcd3310_String_P_anime+0x74>
    14a2:	22 23       	and	r18, r18
    14a4:	09 f0       	breq	.+2      	; 0x14a8 <Lcd3310_String_P_anime+0x14e>
    14a6:	93 cf       	rjmp	.-218    	; 0x13ce <Lcd3310_String_P_anime+0x74>
		    Lcd3310_Send( display, LCD_DATA );
	    }
		if(is_invert_colors) Lcd3310_Send( 0xff, LCD_DATA );
		else Lcd3310_Send( 0x00, LCD_DATA );
	}
	if(is_invert_colors && (count < 14)){
    14a8:	88 20       	and	r8, r8
    14aa:	b1 f0       	breq	.+44     	; 0x14d8 <Lcd3310_String_P_anime+0x17e>
    14ac:	fd e0       	ldi	r31, 0x0D	; 13
    14ae:	f9 15       	cp	r31, r9
    14b0:	98 f0       	brcs	.+38     	; 0x14d8 <Lcd3310_String_P_anime+0x17e>
		for(count = (14 - count) * 6; count > 0; count--){
    14b2:	2e e0       	ldi	r18, 0x0E	; 14
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	29 19       	sub	r18, r9
    14b8:	31 09       	sbc	r19, r1
    14ba:	c9 01       	movw	r24, r18
    14bc:	88 0f       	add	r24, r24
    14be:	99 1f       	adc	r25, r25
    14c0:	82 0f       	add	r24, r18
    14c2:	93 1f       	adc	r25, r19
    14c4:	88 0f       	add	r24, r24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    14c6:	9f ef       	ldi	r25, 0xFF	; 255


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    14c8:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    14ca:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    14cc:	9f b9       	out	0x0f, r25	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    14ce:	77 9b       	sbis	0x0e, 7	; 14
    14d0:	fe cf       	rjmp	.-4      	; 0x14ce <Lcd3310_String_P_anime+0x174>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    14d2:	c3 9a       	sbi	0x18, 3	; 24
	    }
		if(is_invert_colors) Lcd3310_Send( 0xff, LCD_DATA );
		else Lcd3310_Send( 0x00, LCD_DATA );
	}
	if(is_invert_colors && (count < 14)){
		for(count = (14 - count) * 6; count > 0; count--){
    14d4:	81 50       	subi	r24, 0x01	; 1
    14d6:	c1 f7       	brne	.-16     	; 0x14c8 <Lcd3310_String_P_anime+0x16e>
			Lcd3310_Send( 0xff, LCD_DATA );
		}
	}
}
    14d8:	df 91       	pop	r29
    14da:	cf 91       	pop	r28
    14dc:	1f 91       	pop	r17
    14de:	0f 91       	pop	r16
    14e0:	ff 90       	pop	r15
    14e2:	ef 90       	pop	r14
    14e4:	df 90       	pop	r13
    14e6:	cf 90       	pop	r12
    14e8:	bf 90       	pop	r11
    14ea:	af 90       	pop	r10
    14ec:	9f 90       	pop	r9
    14ee:	8f 90       	pop	r8
    14f0:	7f 90       	pop	r7
    14f2:	6f 90       	pop	r6
    14f4:	5f 90       	pop	r5
    14f6:	08 95       	ret

000014f8 <Lcd3310_GotoXY>:
#endif

void Lcd3310_GotoXY(uint16_t x, uint16_t y)
{
    Lcd3310_Index = (uint16_t)x * 6 + (uint16_t)y * 84;
    14f8:	24 e5       	ldi	r18, 0x54	; 84
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	62 9f       	mul	r22, r18
    14fe:	a0 01       	movw	r20, r0
    1500:	63 9f       	mul	r22, r19
    1502:	50 0d       	add	r21, r0
    1504:	72 9f       	mul	r23, r18
    1506:	50 0d       	add	r21, r0
    1508:	11 24       	eor	r1, r1
    150a:	9c 01       	movw	r18, r24
    150c:	22 0f       	add	r18, r18
    150e:	33 1f       	adc	r19, r19
    1510:	28 0f       	add	r18, r24
    1512:	39 1f       	adc	r19, r25
    1514:	22 0f       	add	r18, r18
    1516:	33 1f       	adc	r19, r19
    1518:	42 0f       	add	r20, r18
    151a:	53 1f       	adc	r21, r19
    151c:	50 93 33 03 	sts	0x0333, r21
    1520:	40 93 32 03 	sts	0x0332, r20
}
    1524:	08 95       	ret

00001526 <Lcd3310_ClearCenter>:


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1526:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    1528:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    152a:	80 e8       	ldi	r24, 0x80	; 128
    152c:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    152e:	77 9b       	sbis	0x0e, 7	; 14
    1530:	fe cf       	rjmp	.-4      	; 0x152e <Lcd3310_ClearCenter+0x8>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1532:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1534:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    1536:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    1538:	81 e4       	ldi	r24, 0x41	; 65
    153a:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    153c:	77 9b       	sbis	0x0e, 7	; 14
    153e:	fe cf       	rjmp	.-4      	; 0x153c <Lcd3310_ClearCenter+0x16>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1540:	c3 9a       	sbi	0x18, 3	; 24
    1542:	80 e0       	ldi	r24, 0x00	; 0
    1544:	90 e0       	ldi	r25, 0x00	; 0


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1546:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    1548:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    154a:	1f b8       	out	0x0f, r1	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    154c:	77 9b       	sbis	0x0e, 7	; 14
    154e:	fe cf       	rjmp	.-4      	; 0x154c <Lcd3310_ClearCenter+0x26>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1550:	c3 9a       	sbi	0x18, 3	; 24
void Lcd3310_ClearCenter(void)
{
#ifdef LCD_IMAGES //  clear only center lines
	Lcd3310_Send( 0x80 | (84 % LCD_X_RES), LCD_CMD );
    Lcd3310_Send( 0x40 | (84 / LCD_X_RES), LCD_CMD );
	for(uint16_t i=0; i < LCD_CENTER_RES; i++){
    1552:	01 96       	adiw	r24, 0x01	; 1
    1554:	21 e0       	ldi	r18, 0x01	; 1
    1556:	84 3a       	cpi	r24, 0xA4	; 164
    1558:	92 07       	cpc	r25, r18
    155a:	a9 f7       	brne	.-22     	; 0x1546 <Lcd3310_ClearCenter+0x20>
	Lcd3310_Send( 0x40, LCD_CMD );
	for(uint16_t i=0; i < LCD_XY_RES; i++){
		Lcd3310_Send( 0x00, LCD_DATA );
	}
#endif
}
    155c:	08 95       	ret

0000155e <Lcd3310_InitFill>:


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    155e:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    1560:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    1562:	80 e8       	ldi	r24, 0x80	; 128
    1564:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1566:	77 9b       	sbis	0x0e, 7	; 14
    1568:	fe cf       	rjmp	.-4      	; 0x1566 <Lcd3310_InitFill+0x8>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    156a:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    156c:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    156e:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    1570:	80 e4       	ldi	r24, 0x40	; 64
    1572:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1574:	77 9b       	sbis	0x0e, 7	; 14
    1576:	fe cf       	rjmp	.-4      	; 0x1574 <Lcd3310_InitFill+0x16>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1578:	c3 9a       	sbi	0x18, 3	; 24
    157a:	eb e1       	ldi	r30, 0x1B	; 27
    157c:	f2 e0       	ldi	r31, 0x02	; 2
	// Goto (0, 0) of display
	Lcd3310_Send( 0x80, LCD_CMD );
    Lcd3310_Send( 0x40, LCD_CMD );

	for (int i = 0; i < 84; i++ ){
        Lcd3310_Send( pgm_read_byte( LcdImage_Upper + i ), LCD_DATA );
    157e:	84 91       	lpm	r24, Z+


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1580:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    1582:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    1584:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1586:	77 9b       	sbis	0x0e, 7	; 14
    1588:	fe cf       	rjmp	.-4      	; 0x1586 <Lcd3310_InitFill+0x28>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    158a:	c3 9a       	sbi	0x18, 3	; 24
    158c:	31 96       	adiw	r30, 0x01	; 1
#ifdef LCD_IMAGES
	// Goto (0, 0) of display
	Lcd3310_Send( 0x80, LCD_CMD );
    Lcd3310_Send( 0x40, LCD_CMD );

	for (int i = 0; i < 84; i++ ){
    158e:	82 e0       	ldi	r24, 0x02	; 2
    1590:	ef 36       	cpi	r30, 0x6F	; 111
    1592:	f8 07       	cpc	r31, r24
    1594:	a1 f7       	brne	.-24     	; 0x157e <Lcd3310_InitFill+0x20>
    1596:	ef e6       	ldi	r30, 0x6F	; 111
    1598:	f2 e0       	ldi	r31, 0x02	; 2
        Lcd3310_Send( pgm_read_byte( LcdImage_Upper + i ), LCD_DATA );
    }	
	for (uint16_t i=0; i < LCD_CENTER_RES; i++ ){
        Lcd3310_Send( pgm_read_byte( LcdImage_Center + i), LCD_DATA );
    159a:	84 91       	lpm	r24, Z+


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    159c:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    159e:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    15a0:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    15a2:	77 9b       	sbis	0x0e, 7	; 14
    15a4:	fe cf       	rjmp	.-4      	; 0x15a2 <Lcd3310_InitFill+0x44>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    15a6:	c3 9a       	sbi	0x18, 3	; 24
    15a8:	31 96       	adiw	r30, 0x01	; 1
    Lcd3310_Send( 0x40, LCD_CMD );

	for (int i = 0; i < 84; i++ ){
        Lcd3310_Send( pgm_read_byte( LcdImage_Upper + i ), LCD_DATA );
    }	
	for (uint16_t i=0; i < LCD_CENTER_RES; i++ ){
    15aa:	84 e0       	ldi	r24, 0x04	; 4
    15ac:	e3 31       	cpi	r30, 0x13	; 19
    15ae:	f8 07       	cpc	r31, r24
    15b0:	a1 f7       	brne	.-24     	; 0x159a <Lcd3310_InitFill+0x3c>
    15b2:	ef eb       	ldi	r30, 0xBF	; 191
    15b4:	f3 e0       	ldi	r31, 0x03	; 3
        Lcd3310_Send( pgm_read_byte( LcdImage_Center + i), LCD_DATA );
	}
    for (int i = 0; i < 84; i++ ){
        Lcd3310_Send( pgm_read_byte( LcdImage_brunql_gmail_com + i), LCD_DATA );
    15b6:	84 91       	lpm	r24, Z+


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    15b8:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    15ba:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    15bc:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    15be:	77 9b       	sbis	0x0e, 7	; 14
    15c0:	fe cf       	rjmp	.-4      	; 0x15be <Lcd3310_InitFill+0x60>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    15c2:	c3 9a       	sbi	0x18, 3	; 24
    15c4:	31 96       	adiw	r30, 0x01	; 1
        Lcd3310_Send( pgm_read_byte( LcdImage_Upper + i ), LCD_DATA );
    }	
	for (uint16_t i=0; i < LCD_CENTER_RES; i++ ){
        Lcd3310_Send( pgm_read_byte( LcdImage_Center + i), LCD_DATA );
	}
    for (int i = 0; i < 84; i++ ){
    15c6:	84 e0       	ldi	r24, 0x04	; 4
    15c8:	e3 31       	cpi	r30, 0x13	; 19
    15ca:	f8 07       	cpc	r31, r24
    15cc:	a1 f7       	brne	.-24     	; 0x15b6 <Lcd3310_InitFill+0x58>
        Lcd3310_Send( pgm_read_byte( LcdImage_brunql_gmail_com + i), LCD_DATA );
    }
#else
    Lcd3310_ClearCenter();
#endif
}
    15ce:	08 95       	ret

000015d0 <Lcd3310_Init>:
void Lcd3310_InitFill (void);



void Lcd3310_Init(uint16_t show_init_data_delay_ms)
{
    15d0:	af 92       	push	r10
    15d2:	bf 92       	push	r11
    15d4:	cf 92       	push	r12
    15d6:	df 92       	push	r13
    15d8:	ef 92       	push	r14
    15da:	ff 92       	push	r15
    15dc:	0f 93       	push	r16
    15de:	1f 93       	push	r17
    15e0:	8c 01       	movw	r16, r24
	//  Pull-up on reset pin.
    PORTB |= LCD_RST_PIN;
    15e2:	c2 9a       	sbi	0x18, 2	; 24

    //  Set output bits on port B.
    DDRB |= LCD_RST_PIN | LCD_DC_PIN | LCD_CE_PIN | SPI_MOSI_PIN | SPI_CLK_PIN;
    15e4:	87 b3       	in	r24, 0x17	; 23
    15e6:	8c 6b       	ori	r24, 0xBC	; 188
    15e8:	87 bb       	out	0x17, r24	; 23
    15ea:	84 ef       	ldi	r24, 0xF4	; 244
    15ec:	91 e0       	ldi	r25, 0x01	; 1
    15ee:	20 e9       	ldi	r18, 0x90	; 144
    15f0:	31 e0       	ldi	r19, 0x01	; 1
    15f2:	f9 01       	movw	r30, r18
    15f4:	31 97       	sbiw	r30, 0x01	; 1
    15f6:	f1 f7       	brne	.-4      	; 0x15f4 <Lcd3310_Init+0x24>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15f8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15fa:	d9 f7       	brne	.-10     	; 0x15f2 <Lcd3310_Init+0x22>

    _delay_ms(50);

    //  Toggle display reset pin.
    PORTB &= (unsigned char)~LCD_RST_PIN;
    15fc:	c2 98       	cbi	0x18, 2	; 24
    15fe:	80 ea       	ldi	r24, 0xA0	; 160
    1600:	9f e0       	ldi	r25, 0x0F	; 15
    1602:	01 97       	sbiw	r24, 0x01	; 1
    1604:	f1 f7       	brne	.-4      	; 0x1602 <Lcd3310_Init+0x32>
    _delay_ms(1);
    PORTB |= LCD_RST_PIN;
    1606:	c2 9a       	sbi	0x18, 2	; 24

    //  Enable SPI port: No interrupt, MSBit first, Master mode, CPOL->0, CPHA->0, Clk/4
    SPCR = 0x50;
    1608:	80 e5       	ldi	r24, 0x50	; 80
    160a:	8d b9       	out	0x0d, r24	; 13

    //  Disable LCD controller
    PORTB |= LCD_CE_PIN;
    160c:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    160e:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    1610:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    1612:	81 e2       	ldi	r24, 0x21	; 33
    1614:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1616:	77 9b       	sbis	0x0e, 7	; 14
    1618:	fe cf       	rjmp	.-4      	; 0x1616 <Lcd3310_Init+0x46>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    161a:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    161c:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    161e:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    1620:	88 ec       	ldi	r24, 0xC8	; 200
    1622:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1624:	77 9b       	sbis	0x0e, 7	; 14
    1626:	fe cf       	rjmp	.-4      	; 0x1624 <Lcd3310_Init+0x54>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1628:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    162a:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    162c:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    162e:	86 e0       	ldi	r24, 0x06	; 6
    1630:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1632:	77 9b       	sbis	0x0e, 7	; 14
    1634:	fe cf       	rjmp	.-4      	; 0x1632 <Lcd3310_Init+0x62>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1636:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1638:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    163a:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    163c:	83 e1       	ldi	r24, 0x13	; 19
    163e:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1640:	77 9b       	sbis	0x0e, 7	; 14
    1642:	fe cf       	rjmp	.-4      	; 0x1640 <Lcd3310_Init+0x70>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1644:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1646:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    1648:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    164a:	80 e2       	ldi	r24, 0x20	; 32
    164c:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    164e:	77 9b       	sbis	0x0e, 7	; 14
    1650:	fe cf       	rjmp	.-4      	; 0x164e <Lcd3310_Init+0x7e>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1652:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1654:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    1656:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    1658:	8c e0       	ldi	r24, 0x0C	; 12
    165a:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    165c:	77 9b       	sbis	0x0e, 7	; 14
    165e:	fe cf       	rjmp	.-4      	; 0x165c <Lcd3310_Init+0x8c>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1660:	c3 9a       	sbi	0x18, 3	; 24
    Lcd3310_Send( 0x06, LCD_CMD );  // Set Temp coefficent.
    Lcd3310_Send( 0x13, LCD_CMD );  // LCD bias mode 1:48.
    Lcd3310_Send( 0x20, LCD_CMD );  // LCD Standard Commands, Horizontal addressing mode.
    Lcd3310_Send( 0x0C, LCD_CMD );  // LCD in normal mode.

	Lcd3310_InitFill();
    1662:	0e 94 af 0a 	call	0x155e	; 0x155e <Lcd3310_InitFill>


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1666:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    1668:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    166a:	81 e2       	ldi	r24, 0x21	; 33
    166c:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    166e:	77 9b       	sbis	0x0e, 7	; 14
    1670:	fe cf       	rjmp	.-4      	; 0x166e <Lcd3310_Init+0x9e>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1672:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1674:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    1676:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    1678:	8e e9       	ldi	r24, 0x9E	; 158
    167a:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    167c:	77 9b       	sbis	0x0e, 7	; 14
    167e:	fe cf       	rjmp	.-4      	; 0x167c <Lcd3310_Init+0xac>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1680:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1682:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    1684:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    1686:	80 e2       	ldi	r24, 0x20	; 32
    1688:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    168a:	77 9b       	sbis	0x0e, 7	; 14
    168c:	fe cf       	rjmp	.-4      	; 0x168a <Lcd3310_Init+0xba>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    168e:	c3 9a       	sbi	0x18, 3	; 24
    Lcd3310_Send( 0x80 | LCD_CONTRAST, LCD_CMD );

    //  LCD Standard Commands, horizontal addressing mode.
    Lcd3310_Send( 0x20, LCD_CMD );

	_delay_ms(show_init_data_delay_ms); // show image from LcdCache initial value
    1690:	b8 01       	movw	r22, r16
    1692:	80 e0       	ldi	r24, 0x00	; 0
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	0e 94 a1 12 	call	0x2542	; 0x2542 <__floatunsisf>
    169a:	5b 01       	movw	r10, r22
    169c:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    169e:	20 e0       	ldi	r18, 0x00	; 0
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	4a e7       	ldi	r20, 0x7A	; 122
    16a4:	55 e4       	ldi	r21, 0x45	; 69
    16a6:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <__mulsf3>
    16aa:	7b 01       	movw	r14, r22
    16ac:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    16ae:	20 e0       	ldi	r18, 0x00	; 0
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	40 e8       	ldi	r20, 0x80	; 128
    16b4:	5f e3       	ldi	r21, 0x3F	; 63
    16b6:	0e 94 bf 11 	call	0x237e	; 0x237e <__ltsf2>
    16ba:	88 23       	and	r24, r24
    16bc:	1c f4       	brge	.+6      	; 0x16c4 <Lcd3310_Init+0xf4>
    16be:	61 e0       	ldi	r22, 0x01	; 1
    16c0:	70 e0       	ldi	r23, 0x00	; 0
    16c2:	24 c0       	rjmp	.+72     	; 0x170c <Lcd3310_Init+0x13c>
		__ticks = 1;
	else if (__tmp > 65535)
    16c4:	c8 01       	movw	r24, r16
    16c6:	b7 01       	movw	r22, r14
    16c8:	20 e0       	ldi	r18, 0x00	; 0
    16ca:	3f ef       	ldi	r19, 0xFF	; 255
    16cc:	4f e7       	ldi	r20, 0x7F	; 127
    16ce:	57 e4       	ldi	r21, 0x47	; 71
    16d0:	0e 94 5f 11 	call	0x22be	; 0x22be <__gtsf2>
    16d4:	18 16       	cp	r1, r24
    16d6:	b4 f4       	brge	.+44     	; 0x1704 <Lcd3310_Init+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16d8:	c6 01       	movw	r24, r12
    16da:	b5 01       	movw	r22, r10
    16dc:	20 e0       	ldi	r18, 0x00	; 0
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	40 e2       	ldi	r20, 0x20	; 32
    16e2:	51 e4       	ldi	r21, 0x41	; 65
    16e4:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <__mulsf3>
    16e8:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <__fixunssfsi>
    16ec:	80 e9       	ldi	r24, 0x90	; 144
    16ee:	91 e0       	ldi	r25, 0x01	; 1
    16f0:	05 c0       	rjmp	.+10     	; 0x16fc <Lcd3310_Init+0x12c>
    16f2:	fc 01       	movw	r30, r24
    16f4:	31 97       	sbiw	r30, 0x01	; 1
    16f6:	f1 f7       	brne	.-4      	; 0x16f4 <Lcd3310_Init+0x124>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16f8:	61 50       	subi	r22, 0x01	; 1
    16fa:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16fc:	61 15       	cp	r22, r1
    16fe:	71 05       	cpc	r23, r1
    1700:	c1 f7       	brne	.-16     	; 0x16f2 <Lcd3310_Init+0x122>
    1702:	07 c0       	rjmp	.+14     	; 0x1712 <Lcd3310_Init+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1704:	c8 01       	movw	r24, r16
    1706:	b7 01       	movw	r22, r14
    1708:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <__fixunssfsi>
    170c:	cb 01       	movw	r24, r22
    170e:	01 97       	sbiw	r24, 0x01	; 1
    1710:	f1 f7       	brne	.-4      	; 0x170e <Lcd3310_Init+0x13e>
}
    1712:	1f 91       	pop	r17
    1714:	0f 91       	pop	r16
    1716:	ff 90       	pop	r15
    1718:	ef 90       	pop	r14
    171a:	df 90       	pop	r13
    171c:	cf 90       	pop	r12
    171e:	bf 90       	pop	r11
    1720:	af 90       	pop	r10
    1722:	08 95       	ret

00001724 <Lcd3310_Send>:


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1724:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    1726:	61 30       	cpi	r22, 0x01	; 1
    1728:	11 f4       	brne	.+4      	; 0x172e <Lcd3310_Send+0xa>
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    172a:	c4 9a       	sbi	0x18, 4	; 24
    172c:	01 c0       	rjmp	.+2      	; 0x1730 <Lcd3310_Send+0xc>
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    172e:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    1730:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1732:	77 9b       	sbis	0x0e, 7	; 14
    1734:	fe cf       	rjmp	.-4      	; 0x1732 <Lcd3310_Send+0xe>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1736:	c3 9a       	sbi	0x18, 3	; 24
}
    1738:	08 95       	ret

0000173a <Lcd3310_UInt16AsText>:
		Lcd3310_Char( to_string_result[count], is_invert_colors );
	}
}

void Lcd3310_UInt16AsText(uint16_t i, WhiteOrBlackText is_invert_colors)
{
    173a:	1f 93       	push	r17
    173c:	16 2f       	mov	r17, r22
	UInt16ToString( i );
    173e:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <UInt16ToString>
	// show three numbers and space
	for(uint8_t count=1; count < 4; count++){ // 0x03ff - max value, show only '3ff'
			Lcd3310_Char( to_string_result[count], is_invert_colors );
    1742:	80 91 2f 03 	lds	r24, 0x032F
    1746:	61 2f       	mov	r22, r17
    1748:	0e 94 2a 09 	call	0x1254	; 0x1254 <Lcd3310_Char>
    174c:	80 91 30 03 	lds	r24, 0x0330
    1750:	61 2f       	mov	r22, r17
    1752:	0e 94 2a 09 	call	0x1254	; 0x1254 <Lcd3310_Char>
    1756:	80 91 31 03 	lds	r24, 0x0331
    175a:	61 2f       	mov	r22, r17
    175c:	0e 94 2a 09 	call	0x1254	; 0x1254 <Lcd3310_Char>
	}
	Lcd3310_Char( ' ', is_invert_colors );
    1760:	80 e2       	ldi	r24, 0x20	; 32
    1762:	61 2f       	mov	r22, r17
    1764:	0e 94 2a 09 	call	0x1254	; 0x1254 <Lcd3310_Char>
}
    1768:	1f 91       	pop	r17
    176a:	08 95       	ret

0000176c <Lcd3310_UInt8AsText>:




void Lcd3310_UInt8AsText(uint8_t ch, WhiteOrBlackText is_invert_colors)
{
    176c:	1f 93       	push	r17
    176e:	16 2f       	mov	r17, r22
	UInt8ToString( ch );
    1770:	0e 94 cb 08 	call	0x1196	; 0x1196 <UInt8ToString>
	for(uint8_t count=0; count < 2; count++){
		Lcd3310_Char( to_string_result[count], is_invert_colors );
    1774:	80 91 2e 03 	lds	r24, 0x032E
    1778:	61 2f       	mov	r22, r17
    177a:	0e 94 2a 09 	call	0x1254	; 0x1254 <Lcd3310_Char>
    177e:	80 91 2f 03 	lds	r24, 0x032F
    1782:	61 2f       	mov	r22, r17
    1784:	0e 94 2a 09 	call	0x1254	; 0x1254 <Lcd3310_Char>
	}
}
    1788:	1f 91       	pop	r17
    178a:	08 95       	ret

0000178c <init_menu_now>:



void init_menu_now(void)
{
	menu_now = &go;
    178c:	88 ee       	ldi	r24, 0xE8	; 232
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	90 93 3b 03 	sts	0x033B, r25
    1794:	80 93 3a 03 	sts	0x033A, r24
}
    1798:	08 95       	ret

0000179a <Lcd3310_UpdateDisplayInfo>:
}
#endif


void Lcd3310_UpdateDisplayInfo(void)
{
    179a:	ef 92       	push	r14
    179c:	ff 92       	push	r15
    179e:	0f 93       	push	r16
    17a0:	1f 93       	push	r17
    17a2:	cf 93       	push	r28
    17a4:	df 93       	push	r29
    uint8_t number_of_elements_in_menu_now = 1;
    
	Lcd3310_ClearCenter();
    17a6:	0e 94 93 0a 	call	0x1526	; 0x1526 <Lcd3310_ClearCenter>
	
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { menu_now_atomic = menu_now; }
    17aa:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    17ac:	f8 94       	cli
    17ae:	80 91 3a 03 	lds	r24, 0x033A
    17b2:	90 91 3b 03 	lds	r25, 0x033B
    17b6:	90 93 39 03 	sts	0x0339, r25
    17ba:	80 93 38 03 	sts	0x0338, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    17be:	2f bf       	out	0x3f, r18	; 63

	struct menu_item *menu_temp = menu_now_atomic->next;
    17c0:	e0 91 38 03 	lds	r30, 0x0338
    17c4:	f0 91 39 03 	lds	r31, 0x0339
    17c8:	c5 81       	ldd	r28, Z+5	; 0x05
    17ca:	d6 81       	ldd	r29, Z+6	; 0x06
    17cc:	ff 24       	eor	r15, r15
    17ce:	f3 94       	inc	r15
    17d0:	04 c0       	rjmp	.+8      	; 0x17da <Lcd3310_UpdateDisplayInfo+0x40>
	while( menu_temp != menu_now_atomic ){
		number_of_elements_in_menu_now++;
    17d2:	f3 94       	inc	r15
		menu_temp = menu_temp->next;
    17d4:	0d 80       	ldd	r0, Y+5	; 0x05
    17d6:	de 81       	ldd	r29, Y+6	; 0x06
    17d8:	c0 2d       	mov	r28, r0
	Lcd3310_ClearCenter();
	
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { menu_now_atomic = menu_now; }

	struct menu_item *menu_temp = menu_now_atomic->next;
	while( menu_temp != menu_now_atomic ){
    17da:	ce 17       	cp	r28, r30
    17dc:	df 07       	cpc	r29, r31
    17de:	c9 f7       	brne	.-14     	; 0x17d2 <Lcd3310_UpdateDisplayInfo+0x38>
		number_of_elements_in_menu_now++;
		menu_temp = menu_temp->next;
	}
	if(number_of_elements_in_menu_now > 4){
    17e0:	24 e0       	ldi	r18, 0x04	; 4
    17e2:	2f 15       	cp	r18, r15
    17e4:	18 f4       	brcc	.+6      	; 0x17ec <Lcd3310_UpdateDisplayInfo+0x52>
    17e6:	84 e0       	ldi	r24, 0x04	; 4
    17e8:	f8 2e       	mov	r15, r24
    17ea:	03 c0       	rjmp	.+6      	; 0x17f2 <Lcd3310_UpdateDisplayInfo+0x58>
		number_of_elements_in_menu_now = 4;
	}
	 
#ifdef ANIMATION_SWITCH_MENU_ITEMS
	if(number_of_elements_in_menu_now < 3){
    17ec:	82 e0       	ldi	r24, 0x02	; 2
    17ee:	8f 15       	cp	r24, r15
    17f0:	10 f4       	brcc	.+4      	; 0x17f6 <Lcd3310_UpdateDisplayInfo+0x5c>
		menu_temp = menu_now_atomic;
	}else{
		menu_temp = menu_now_atomic->prev;
    17f2:	c7 81       	ldd	r28, Z+7	; 0x07
    17f4:	d0 85       	ldd	r29, Z+8	; 0x08
		menu_temp = menu_temp->prev;
	}
#endif

#	ifdef LCD_FIRST_STR
	Lcd3310_GotoXY(0, 0);
    17f6:	80 e0       	ldi	r24, 0x00	; 0
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	60 e0       	ldi	r22, 0x00	; 0
    17fc:	70 e0       	ldi	r23, 0x00	; 0
    17fe:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <Lcd3310_GotoXY>
	Lcd3310_String_P(lcd_first_str, WHITE_TEXT_ON_BLACK);
    1802:	80 91 d7 00 	lds	r24, 0x00D7
    1806:	90 91 d8 00 	lds	r25, 0x00D8
    180a:	61 e0       	ldi	r22, 0x01	; 1
    180c:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <Lcd3310_String_P>
    1810:	ee 24       	eor	r14, r14
    1812:	01 e0       	ldi	r16, 0x01	; 1
    1814:	10 e0       	ldi	r17, 0x00	; 0
    1816:	27 c0       	rjmp	.+78     	; 0x1866 <Lcd3310_UpdateDisplayInfo+0xcc>
#	endif

	for(uint8_t i=0; i < number_of_elements_in_menu_now; i++){
#		ifdef LCD_IMAGES
			Lcd3310_GotoXY(0, i + 1);
    1818:	80 e0       	ldi	r24, 0x00	; 0
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	b8 01       	movw	r22, r16
    181e:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <Lcd3310_GotoXY>
				Lcd3310_GotoXY(0, i + 2);// show menu from (i+1) line because first line filled with '_COLORS_'
#			else
				Lcd3310_GotoXY(0, i); // no images at top
#			endif
#		endif
		if(menu_temp->str == results.str){
    1822:	29 85       	ldd	r18, Y+9	; 0x09
    1824:	3a 85       	ldd	r19, Y+10	; 0x0a
    1826:	80 91 0b 01 	lds	r24, 0x010B
    182a:	90 91 0c 01 	lds	r25, 0x010C
    182e:	28 17       	cp	r18, r24
    1830:	39 07       	cpc	r19, r25
    1832:	29 f4       	brne	.+10     	; 0x183e <Lcd3310_UpdateDisplayInfo+0xa4>
			Lcd3310_GotoXY(0, i + 1);
    1834:	80 e0       	ldi	r24, 0x00	; 0
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	b8 01       	movw	r22, r16
    183a:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <Lcd3310_GotoXY>
		}
		Lcd3310_String_P(menu_temp->str, (menu_now_atomic == menu_temp));
    183e:	29 85       	ldd	r18, Y+9	; 0x09
    1840:	3a 85       	ldd	r19, Y+10	; 0x0a
    1842:	60 e0       	ldi	r22, 0x00	; 0
    1844:	80 91 38 03 	lds	r24, 0x0338
    1848:	90 91 39 03 	lds	r25, 0x0339
    184c:	8c 17       	cp	r24, r28
    184e:	9d 07       	cpc	r25, r29
    1850:	09 f4       	brne	.+2      	; 0x1854 <Lcd3310_UpdateDisplayInfo+0xba>
    1852:	61 e0       	ldi	r22, 0x01	; 1
    1854:	c9 01       	movw	r24, r18
    1856:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <Lcd3310_String_P>
		menu_temp = menu_temp->next;
    185a:	0d 80       	ldd	r0, Y+5	; 0x05
    185c:	de 81       	ldd	r29, Y+6	; 0x06
    185e:	c0 2d       	mov	r28, r0
#	ifdef LCD_FIRST_STR
	Lcd3310_GotoXY(0, 0);
	Lcd3310_String_P(lcd_first_str, WHITE_TEXT_ON_BLACK);
#	endif

	for(uint8_t i=0; i < number_of_elements_in_menu_now; i++){
    1860:	e3 94       	inc	r14
    1862:	0f 5f       	subi	r16, 0xFF	; 255
    1864:	1f 4f       	sbci	r17, 0xFF	; 255
    1866:	ef 14       	cp	r14, r15
    1868:	b8 f2       	brcs	.-82     	; 0x1818 <Lcd3310_UpdateDisplayInfo+0x7e>
		Lcd3310_String_P(menu_temp->str, (menu_now_atomic == menu_temp));
		menu_temp = menu_temp->next;
	}


	if( menu_now_atomic == &results ){
    186a:	80 91 38 03 	lds	r24, 0x0338
    186e:	90 91 39 03 	lds	r25, 0x0339
    1872:	82 50       	subi	r24, 0x02	; 2
    1874:	91 40       	sbci	r25, 0x01	; 1
    1876:	09 f0       	breq	.+2      	; 0x187a <Lcd3310_UpdateDisplayInfo+0xe0>
    1878:	8d c0       	rjmp	.+282    	; 0x1994 <Lcd3310_UpdateDisplayInfo+0x1fa>
		 * |  xxxxxxxxxxx |
		 *
		 */

		// |   R   G   B  |
		Lcd3310_GotoXY(3, 2);
    187a:	83 e0       	ldi	r24, 0x03	; 3
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	62 e0       	ldi	r22, 0x02	; 2
    1880:	70 e0       	ldi	r23, 0x00	; 0
    1882:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <Lcd3310_GotoXY>
		Lcd3310_Char('R', BLACK_TEXT_ON_WHITE);
    1886:	82 e5       	ldi	r24, 0x52	; 82
    1888:	60 e0       	ldi	r22, 0x00	; 0
    188a:	0e 94 2a 09 	call	0x1254	; 0x1254 <Lcd3310_Char>
		Lcd3310_GotoXY(7, 2);
    188e:	87 e0       	ldi	r24, 0x07	; 7
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	62 e0       	ldi	r22, 0x02	; 2
    1894:	70 e0       	ldi	r23, 0x00	; 0
    1896:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <Lcd3310_GotoXY>
		Lcd3310_Char('G', BLACK_TEXT_ON_WHITE);
    189a:	87 e4       	ldi	r24, 0x47	; 71
    189c:	60 e0       	ldi	r22, 0x00	; 0
    189e:	0e 94 2a 09 	call	0x1254	; 0x1254 <Lcd3310_Char>
		Lcd3310_GotoXY(11, 2);
    18a2:	8b e0       	ldi	r24, 0x0B	; 11
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	62 e0       	ldi	r22, 0x02	; 2
    18a8:	70 e0       	ldi	r23, 0x00	; 0
    18aa:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <Lcd3310_GotoXY>
		Lcd3310_Char('B', BLACK_TEXT_ON_WHITE);
    18ae:	82 e4       	ldi	r24, 0x42	; 66
    18b0:	60 e0       	ldi	r22, 0x00	; 0
    18b2:	0e 94 2a 09 	call	0x1254	; 0x1254 <Lcd3310_Char>

		// |1 *** *** *** |
		Lcd3310_GotoXY(0, 3);
    18b6:	80 e0       	ldi	r24, 0x00	; 0
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	63 e0       	ldi	r22, 0x03	; 3
    18bc:	70 e0       	ldi	r23, 0x00	; 0
    18be:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <Lcd3310_GotoXY>
		Lcd3310_Char('1', BLACK_TEXT_ON_WHITE);
    18c2:	81 e3       	ldi	r24, 0x31	; 49
    18c4:	60 e0       	ldi	r22, 0x00	; 0
    18c6:	0e 94 2a 09 	call	0x1254	; 0x1254 <Lcd3310_Char>
		Lcd3310_GotoXY(2, 3);
    18ca:	82 e0       	ldi	r24, 0x02	; 2
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	63 e0       	ldi	r22, 0x03	; 3
    18d0:	70 e0       	ldi	r23, 0x00	; 0
    18d2:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <Lcd3310_GotoXY>
		Lcd3310_UInt16AsText(result[FIRST][RED], BLACK_TEXT_ON_WHITE);
    18d6:	80 91 10 03 	lds	r24, 0x0310
    18da:	90 91 11 03 	lds	r25, 0x0311
    18de:	60 e0       	ldi	r22, 0x00	; 0
    18e0:	0e 94 9d 0b 	call	0x173a	; 0x173a <Lcd3310_UInt16AsText>
		Lcd3310_UInt16AsText(result[FIRST][GREEN], BLACK_TEXT_ON_WHITE);
    18e4:	80 91 12 03 	lds	r24, 0x0312
    18e8:	90 91 13 03 	lds	r25, 0x0313
    18ec:	60 e0       	ldi	r22, 0x00	; 0
    18ee:	0e 94 9d 0b 	call	0x173a	; 0x173a <Lcd3310_UInt16AsText>
		Lcd3310_UInt16AsText(result[FIRST][BLUE], BLACK_TEXT_ON_WHITE);
    18f2:	80 91 14 03 	lds	r24, 0x0314
    18f6:	90 91 15 03 	lds	r25, 0x0315
    18fa:	60 e0       	ldi	r22, 0x00	; 0
    18fc:	0e 94 9d 0b 	call	0x173a	; 0x173a <Lcd3310_UInt16AsText>

		// |2 *** *** *** |
		Lcd3310_GotoXY(0, 4);
    1900:	80 e0       	ldi	r24, 0x00	; 0
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	64 e0       	ldi	r22, 0x04	; 4
    1906:	70 e0       	ldi	r23, 0x00	; 0
    1908:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <Lcd3310_GotoXY>
		Lcd3310_Char('2', BLACK_TEXT_ON_WHITE);
    190c:	82 e3       	ldi	r24, 0x32	; 50
    190e:	60 e0       	ldi	r22, 0x00	; 0
    1910:	0e 94 2a 09 	call	0x1254	; 0x1254 <Lcd3310_Char>
		Lcd3310_GotoXY(2, 4);
    1914:	82 e0       	ldi	r24, 0x02	; 2
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	64 e0       	ldi	r22, 0x04	; 4
    191a:	70 e0       	ldi	r23, 0x00	; 0
    191c:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <Lcd3310_GotoXY>
		Lcd3310_UInt16AsText(result[SECOND][RED], BLACK_TEXT_ON_WHITE);
    1920:	80 91 16 03 	lds	r24, 0x0316
    1924:	90 91 17 03 	lds	r25, 0x0317
    1928:	60 e0       	ldi	r22, 0x00	; 0
    192a:	0e 94 9d 0b 	call	0x173a	; 0x173a <Lcd3310_UInt16AsText>
		Lcd3310_UInt16AsText(result[SECOND][GREEN], BLACK_TEXT_ON_WHITE);
    192e:	80 91 18 03 	lds	r24, 0x0318
    1932:	90 91 19 03 	lds	r25, 0x0319
    1936:	60 e0       	ldi	r22, 0x00	; 0
    1938:	0e 94 9d 0b 	call	0x173a	; 0x173a <Lcd3310_UInt16AsText>
		Lcd3310_UInt16AsText(result[SECOND][BLUE], BLACK_TEXT_ON_WHITE);
    193c:	80 91 1a 03 	lds	r24, 0x031A
    1940:	90 91 1b 03 	lds	r25, 0x031B
    1944:	60 e0       	ldi	r22, 0x00	; 0
    1946:	0e 94 9d 0b 	call	0x173a	; 0x173a <Lcd3310_UInt16AsText>

		// |% **% **% **% |
		Lcd3310_GotoXY(0, 5);
    194a:	80 e0       	ldi	r24, 0x00	; 0
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	65 e0       	ldi	r22, 0x05	; 5
    1950:	70 e0       	ldi	r23, 0x00	; 0
    1952:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <Lcd3310_GotoXY>
		Lcd3310_Char('%', BLACK_TEXT_ON_WHITE);
    1956:	85 e2       	ldi	r24, 0x25	; 37
    1958:	60 e0       	ldi	r22, 0x00	; 0
    195a:	0e 94 2a 09 	call	0x1254	; 0x1254 <Lcd3310_Char>
		Lcd3310_GotoXY(2, 5);
    195e:	82 e0       	ldi	r24, 0x02	; 2
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	65 e0       	ldi	r22, 0x05	; 5
    1964:	70 e0       	ldi	r23, 0x00	; 0
    1966:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <Lcd3310_GotoXY>
		Lcd3310_UInt16AsText(result[PERCENT][RED], BLACK_TEXT_ON_WHITE);
    196a:	80 91 1c 03 	lds	r24, 0x031C
    196e:	90 91 1d 03 	lds	r25, 0x031D
    1972:	60 e0       	ldi	r22, 0x00	; 0
    1974:	0e 94 9d 0b 	call	0x173a	; 0x173a <Lcd3310_UInt16AsText>
		Lcd3310_UInt16AsText(result[PERCENT][GREEN], BLACK_TEXT_ON_WHITE);
    1978:	80 91 1e 03 	lds	r24, 0x031E
    197c:	90 91 1f 03 	lds	r25, 0x031F
    1980:	60 e0       	ldi	r22, 0x00	; 0
    1982:	0e 94 9d 0b 	call	0x173a	; 0x173a <Lcd3310_UInt16AsText>
		Lcd3310_UInt16AsText(result[PERCENT][BLUE], BLACK_TEXT_ON_WHITE);
    1986:	80 91 20 03 	lds	r24, 0x0320
    198a:	90 91 21 03 	lds	r25, 0x0321
    198e:	60 e0       	ldi	r22, 0x00	; 0
    1990:	0e 94 9d 0b 	call	0x173a	; 0x173a <Lcd3310_UInt16AsText>
	}
}
    1994:	df 91       	pop	r29
    1996:	cf 91       	pop	r28
    1998:	1f 91       	pop	r17
    199a:	0f 91       	pop	r16
    199c:	ff 90       	pop	r15
    199e:	ef 90       	pop	r14
    19a0:	08 95       	ret

000019a2 <Lcd3310_AnimationSwitchMenuItems>:
}
//==============================================//

#ifdef ANIMATION_SWITCH_MENU_ITEMS
void Lcd3310_AnimationSwitchMenuItems(char is_turn_left)
{
    19a2:	9f 92       	push	r9
    19a4:	af 92       	push	r10
    19a6:	bf 92       	push	r11
    19a8:	cf 92       	push	r12
    19aa:	df 92       	push	r13
    19ac:	ef 92       	push	r14
    19ae:	ff 92       	push	r15
    19b0:	0f 93       	push	r16
    19b2:	1f 93       	push	r17
    19b4:	cf 93       	push	r28
    19b6:	df 93       	push	r29
    19b8:	98 2e       	mov	r9, r24
	uint8_t number_of_elements_in_menu_now = 1;
	struct menu_item *menu_temp;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { 
    19ba:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    19bc:	f8 94       	cli
		menu_now_atomic = menu_now; 
    19be:	20 91 3a 03 	lds	r18, 0x033A
    19c2:	30 91 3b 03 	lds	r19, 0x033B
    19c6:	30 93 39 03 	sts	0x0339, r19
    19ca:	20 93 38 03 	sts	0x0338, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    19ce:	8f bf       	out	0x3f, r24	; 63
	}
	
	menu_temp = menu_now_atomic->next;
    19d0:	e0 91 38 03 	lds	r30, 0x0338
    19d4:	f0 91 39 03 	lds	r31, 0x0339
    19d8:	a5 81       	ldd	r26, Z+5	; 0x05
    19da:	b6 81       	ldd	r27, Z+6	; 0x06
	while( menu_temp->str != menu_now_atomic->str ){
    19dc:	21 85       	ldd	r18, Z+9	; 0x09
    19de:	32 85       	ldd	r19, Z+10	; 0x0a
    19e0:	11 e0       	ldi	r17, 0x01	; 1
    19e2:	05 c0       	rjmp	.+10     	; 0x19ee <Lcd3310_AnimationSwitchMenuItems+0x4c>
		number_of_elements_in_menu_now++;
    19e4:	1f 5f       	subi	r17, 0xFF	; 255
		menu_temp = menu_temp->next;
    19e6:	15 96       	adiw	r26, 0x05	; 5
    19e8:	0d 90       	ld	r0, X+
    19ea:	bc 91       	ld	r27, X
    19ec:	a0 2d       	mov	r26, r0
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { 
		menu_now_atomic = menu_now; 
	}
	
	menu_temp = menu_now_atomic->next;
	while( menu_temp->str != menu_now_atomic->str ){
    19ee:	19 96       	adiw	r26, 0x09	; 9
    19f0:	8d 91       	ld	r24, X+
    19f2:	9c 91       	ld	r25, X
    19f4:	1a 97       	sbiw	r26, 0x0a	; 10
    19f6:	82 17       	cp	r24, r18
    19f8:	93 07       	cpc	r25, r19
    19fa:	a1 f7       	brne	.-24     	; 0x19e4 <Lcd3310_AnimationSwitchMenuItems+0x42>
		number_of_elements_in_menu_now++;
		menu_temp = menu_temp->next;
	}
	if(number_of_elements_in_menu_now > 4){
    19fc:	15 30       	cpi	r17, 0x05	; 5
    19fe:	08 f0       	brcs	.+2      	; 0x1a02 <Lcd3310_AnimationSwitchMenuItems+0x60>
    1a00:	14 e0       	ldi	r17, 0x04	; 4
		number_of_elements_in_menu_now = 4;
	}

	Lcd3310_ClearCenter();
    1a02:	0e 94 93 0a 	call	0x1526	; 0x1526 <Lcd3310_ClearCenter>
    1a06:	e0 91 38 03 	lds	r30, 0x0338
    1a0a:	f0 91 39 03 	lds	r31, 0x0339
	if(number_of_elements_in_menu_now < 3){
    1a0e:	13 30       	cpi	r17, 0x03	; 3
    1a10:	38 f4       	brcc	.+14     	; 0x1a20 <Lcd3310_AnimationSwitchMenuItems+0x7e>
		menu_temp = menu_now_atomic;
    1a12:	ef 01       	movw	r28, r30
    1a14:	cc 24       	eor	r12, r12
    1a16:	20 e9       	ldi	r18, 0x90	; 144
    1a18:	a2 2e       	mov	r10, r18
    1a1a:	21 e0       	ldi	r18, 0x01	; 1
    1a1c:	b2 2e       	mov	r11, r18
    1a1e:	3f c0       	rjmp	.+126    	; 0x1a9e <Lcd3310_AnimationSwitchMenuItems+0xfc>
	}else{
		menu_temp = menu_now_atomic->prev;
    1a20:	c7 81       	ldd	r28, Z+7	; 0x07
    1a22:	d0 85       	ldd	r29, Z+8	; 0x08
    1a24:	f7 cf       	rjmp	.-18     	; 0x1a14 <Lcd3310_AnimationSwitchMenuItems+0x72>
	}

	for(uint8_t j=0; j<8; j++){
		for(uint8_t i=0; i < number_of_elements_in_menu_now; i++){
#			ifdef LCD_IMAGES
				Lcd3310_GotoXY(0, i + 1);// show menu from (i+1) line because first line filled with '_COLORS_'
    1a26:	80 e0       	ldi	r24, 0x00	; 0
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	b7 01       	movw	r22, r14
    1a2c:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <Lcd3310_GotoXY>
#			else
				Lcd3310_GotoXY(0, i); // no images at top
#			endif
			Lcd3310_String_P_anime(
    1a30:	99 20       	and	r9, r9
    1a32:	19 f0       	breq	.+6      	; 0x1a3a <Lcd3310_AnimationSwitchMenuItems+0x98>
    1a34:	ef 81       	ldd	r30, Y+7	; 0x07
    1a36:	f8 85       	ldd	r31, Y+8	; 0x08
    1a38:	02 c0       	rjmp	.+4      	; 0x1a3e <Lcd3310_AnimationSwitchMenuItems+0x9c>
    1a3a:	ed 81       	ldd	r30, Y+5	; 0x05
    1a3c:	fe 81       	ldd	r31, Y+6	; 0x06
    1a3e:	21 85       	ldd	r18, Z+9	; 0x09
    1a40:	32 85       	ldd	r19, Z+10	; 0x0a
    1a42:	69 85       	ldd	r22, Y+9	; 0x09
    1a44:	7a 85       	ldd	r23, Y+10	; 0x0a
    1a46:	40 e0       	ldi	r20, 0x00	; 0
    1a48:	80 91 38 03 	lds	r24, 0x0338
    1a4c:	90 91 39 03 	lds	r25, 0x0339
    1a50:	8c 17       	cp	r24, r28
    1a52:	9d 07       	cpc	r25, r29
    1a54:	09 f4       	brne	.+2      	; 0x1a58 <Lcd3310_AnimationSwitchMenuItems+0xb6>
    1a56:	41 e0       	ldi	r20, 0x01	; 1
    1a58:	c9 01       	movw	r24, r18
    1a5a:	2c 2d       	mov	r18, r12
    1a5c:	09 2d       	mov	r16, r9
    1a5e:	0e 94 ad 09 	call	0x135a	; 0x135a <Lcd3310_String_P_anime>
							menu_temp->str,
							(menu_now_atomic == menu_temp), // WhiteOrBlackText
							j, // num_of_cadr
							is_turn_left // is_next
							);
			menu_temp = menu_temp->next;
    1a62:	0d 80       	ldd	r0, Y+5	; 0x05
    1a64:	de 81       	ldd	r29, Y+6	; 0x06
    1a66:	c0 2d       	mov	r28, r0
	}else{
		menu_temp = menu_now_atomic->prev;
	}

	for(uint8_t j=0; j<8; j++){
		for(uint8_t i=0; i < number_of_elements_in_menu_now; i++){
    1a68:	d3 94       	inc	r13
    1a6a:	08 94       	sec
    1a6c:	e1 1c       	adc	r14, r1
    1a6e:	f1 1c       	adc	r15, r1
    1a70:	d1 16       	cp	r13, r17
    1a72:	c8 f2       	brcs	.-78     	; 0x1a26 <Lcd3310_AnimationSwitchMenuItems+0x84>
    1a74:	e0 91 38 03 	lds	r30, 0x0338
    1a78:	f0 91 39 03 	lds	r31, 0x0339
							j, // num_of_cadr
							is_turn_left // is_next
							);
			menu_temp = menu_temp->next;
		}
		if(number_of_elements_in_menu_now < 3){
    1a7c:	13 30       	cpi	r17, 0x03	; 3
    1a7e:	10 f4       	brcc	.+4      	; 0x1a84 <Lcd3310_AnimationSwitchMenuItems+0xe2>
			menu_temp = menu_now_atomic;
    1a80:	ef 01       	movw	r28, r30
    1a82:	02 c0       	rjmp	.+4      	; 0x1a88 <Lcd3310_AnimationSwitchMenuItems+0xe6>
		}else{
			menu_temp = menu_now_atomic->prev;
    1a84:	c7 81       	ldd	r28, Z+7	; 0x07
    1a86:	d0 85       	ldd	r29, Z+8	; 0x08
    1a88:	84 ef       	ldi	r24, 0xF4	; 244
    1a8a:	91 e0       	ldi	r25, 0x01	; 1
    1a8c:	f5 01       	movw	r30, r10
    1a8e:	31 97       	sbiw	r30, 0x01	; 1
    1a90:	f1 f7       	brne	.-4      	; 0x1a8e <Lcd3310_AnimationSwitchMenuItems+0xec>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a92:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a94:	d9 f7       	brne	.-10     	; 0x1a8c <Lcd3310_AnimationSwitchMenuItems+0xea>
		menu_temp = menu_now_atomic;
	}else{
		menu_temp = menu_now_atomic->prev;
	}

	for(uint8_t j=0; j<8; j++){
    1a96:	c3 94       	inc	r12
    1a98:	88 e0       	ldi	r24, 0x08	; 8
    1a9a:	c8 16       	cp	r12, r24
    1a9c:	29 f0       	breq	.+10     	; 0x1aa8 <Lcd3310_AnimationSwitchMenuItems+0x106>
    1a9e:	dd 24       	eor	r13, r13
    1aa0:	91 e0       	ldi	r25, 0x01	; 1
    1aa2:	e9 2e       	mov	r14, r25
    1aa4:	f1 2c       	mov	r15, r1
    1aa6:	e4 cf       	rjmp	.-56     	; 0x1a70 <Lcd3310_AnimationSwitchMenuItems+0xce>
		}else{
			menu_temp = menu_now_atomic->prev;
		}
		_delay_ms(50);
	}
}
    1aa8:	df 91       	pop	r29
    1aaa:	cf 91       	pop	r28
    1aac:	1f 91       	pop	r17
    1aae:	0f 91       	pop	r16
    1ab0:	ff 90       	pop	r15
    1ab2:	ef 90       	pop	r14
    1ab4:	df 90       	pop	r13
    1ab6:	cf 90       	pop	r12
    1ab8:	bf 90       	pop	r11
    1aba:	af 90       	pop	r10
    1abc:	9f 90       	pop	r9
    1abe:	08 95       	ret

00001ac0 <Lcd3310_InitializeDisplay>:



void init_menu_now(void)
{
	menu_now = &go;
    1ac0:	28 ee       	ldi	r18, 0xE8	; 232
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	30 93 3b 03 	sts	0x033B, r19
    1ac8:	20 93 3a 03 	sts	0x033A, r18
//==============================================//
void Lcd3310_InitializeDisplay(uint16_t show_image_delay_ms)
{
	init_menu_now();

    Lcd3310_Init(show_image_delay_ms);
    1acc:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <Lcd3310_Init>
	//Lcd3310_LcdImageUpperBottom_Fill();
    Lcd3310_UpdateDisplayInfo();
    1ad0:	0e 94 cd 0b 	call	0x179a	; 0x179a <Lcd3310_UpdateDisplayInfo>
}
    1ad4:	08 95       	ret

00001ad6 <Menu_EnterClick>:
struct menu_item readme = {ENTER_MENU_CMD, NULL, &text, &go, &setup, 								"// Readme   //"};
	struct menu_item text = {BACK_CMD, &readme, NULL, &text, &text, "[ Programmer:][   brunql   ][    (at)    ][  gmail.com ]"};

void Menu_EnterClick(void)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { menu_now_atomic = menu_now; }
    1ad6:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1ad8:	f8 94       	cli
    1ada:	20 91 3a 03 	lds	r18, 0x033A
    1ade:	30 91 3b 03 	lds	r19, 0x033B
    1ae2:	30 93 39 03 	sts	0x0339, r19
    1ae6:	20 93 38 03 	sts	0x0338, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1aea:	8f bf       	out	0x3f, r24	; 63
	switch(menu_now_atomic->cmd){
    1aec:	e0 91 38 03 	lds	r30, 0x0338
    1af0:	f0 91 39 03 	lds	r31, 0x0339
    1af4:	e0 81       	ld	r30, Z
    1af6:	e3 30       	cpi	r30, 0x03	; 3
    1af8:	49 f1       	breq	.+82     	; 0x1b4c <Menu_EnterClick+0x76>
    1afa:	e4 30       	cpi	r30, 0x04	; 4
    1afc:	28 f4       	brcc	.+10     	; 0x1b08 <Menu_EnterClick+0x32>
    1afe:	e1 30       	cpi	r30, 0x01	; 1
    1b00:	71 f0       	breq	.+28     	; 0x1b1e <Menu_EnterClick+0x48>
    1b02:	e2 30       	cpi	r30, 0x02	; 2
    1b04:	40 f5       	brcc	.+80     	; 0x1b56 <Menu_EnterClick+0x80>
    1b06:	14 c0       	rjmp	.+40     	; 0x1b30 <Menu_EnterClick+0x5a>
    1b08:	e5 30       	cpi	r30, 0x05	; 5
    1b0a:	a9 f1       	breq	.+106    	; 0x1b76 <Menu_EnterClick+0xa0>
    1b0c:	e5 30       	cpi	r30, 0x05	; 5
    1b0e:	58 f1       	brcs	.+86     	; 0x1b66 <Menu_EnterClick+0x90>
    1b10:	e6 30       	cpi	r30, 0x06	; 6
    1b12:	09 f4       	brne	.+2      	; 0x1b16 <Menu_EnterClick+0x40>
    1b14:	3d c0       	rjmp	.+122    	; 0x1b90 <Menu_EnterClick+0xba>
    1b16:	e7 30       	cpi	r30, 0x07	; 7
    1b18:	09 f0       	breq	.+2      	; 0x1b1c <Menu_EnterClick+0x46>
    1b1a:	54 c0       	rjmp	.+168    	; 0x1bc4 <Menu_EnterClick+0xee>
    1b1c:	46 c0       	rjmp	.+140    	; 0x1baa <Menu_EnterClick+0xd4>
		default:
			break;
		case ENTER_MENU_CMD:
		enter_menu_label:
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { menu_now = menu_now->sub_menu; }
    1b1e:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1b20:	f8 94       	cli
    1b22:	e0 91 3a 03 	lds	r30, 0x033A
    1b26:	f0 91 3b 03 	lds	r31, 0x033B
    1b2a:	23 81       	ldd	r18, Z+3	; 0x03
    1b2c:	34 81       	ldd	r19, Z+4	; 0x04
    1b2e:	08 c0       	rjmp	.+16     	; 0x1b40 <Menu_EnterClick+0x6a>
			break;

		case BACK_CMD:
		back_menu_label:
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { menu_now = menu_now->main_menu; }
    1b30:	8f b7       	in	r24, 0x3f	; 63
    1b32:	f8 94       	cli
    1b34:	e0 91 3a 03 	lds	r30, 0x033A
    1b38:	f0 91 3b 03 	lds	r31, 0x033B
    1b3c:	21 81       	ldd	r18, Z+1	; 0x01
    1b3e:	32 81       	ldd	r19, Z+2	; 0x02
    1b40:	30 93 3b 03 	sts	0x033B, r19
    1b44:	20 93 3a 03 	sts	0x033A, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1b48:	8f bf       	out	0x3f, r24	; 63
    1b4a:	21 c0       	rjmp	.+66     	; 0x1b8e <Menu_EnterClick+0xb8>
			break;
		
		case results_cmd:
			LedDriver_SwitchLeds( 0x0000 );
    1b4c:	80 e0       	ldi	r24, 0x00	; 0
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	0e 94 20 06 	call	0xc40	; 0xc40 <LedDriver_SwitchLeds>
    1b54:	ed cf       	rjmp	.-38     	; 0x1b30 <Menu_EnterClick+0x5a>
			goto back_menu_label;
	
		case go_cmd:
			FLAGS_SWITCH_ON( ADC_RESULT_FLAG );
    1b56:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1b58:	f8 94       	cli
    1b5a:	80 91 26 03 	lds	r24, 0x0326
    1b5e:	90 91 27 03 	lds	r25, 0x0327
    1b62:	80 61       	ori	r24, 0x10	; 16
    1b64:	1c c0       	rjmp	.+56     	; 0x1b9e <Menu_EnterClick+0xc8>
			goto enter_menu_label;
		
		case calibration_cmd:
			FLAGS_SWITCH_ON( ADC_CALIBRATE_FLAG );
    1b66:	2f b7       	in	r18, 0x3f	; 63
    1b68:	f8 94       	cli
    1b6a:	80 91 26 03 	lds	r24, 0x0326
    1b6e:	90 91 27 03 	lds	r25, 0x0327
    1b72:	80 62       	ori	r24, 0x20	; 32
    1b74:	07 c0       	rjmp	.+14     	; 0x1b84 <Menu_EnterClick+0xae>
			break;
		case set_zero_cmd:
			FLAGS_SWITCH_ON( ADC_SET_ZERO );
    1b76:	2f b7       	in	r18, 0x3f	; 63
    1b78:	f8 94       	cli
    1b7a:	80 91 26 03 	lds	r24, 0x0326
    1b7e:	90 91 27 03 	lds	r25, 0x0327
    1b82:	80 64       	ori	r24, 0x40	; 64
    1b84:	90 93 27 03 	sts	0x0327, r25
    1b88:	80 93 26 03 	sts	0x0326, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1b8c:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    1b8e:	08 95       	ret
			break;

		case snake_start_cmd:
			FLAGS_SWITCH_ON( SNAKE_START_GAME_FLAG );
    1b90:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1b92:	f8 94       	cli
    1b94:	80 91 26 03 	lds	r24, 0x0326
    1b98:	90 91 27 03 	lds	r25, 0x0327
    1b9c:	91 60       	ori	r25, 0x01	; 1
    1b9e:	90 93 27 03 	sts	0x0327, r25
    1ba2:	80 93 26 03 	sts	0x0326, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1ba6:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    1ba8:	ba cf       	rjmp	.-140    	; 0x1b1e <Menu_EnterClick+0x48>
			goto enter_menu_label;

		case snake_results_cmd:
			FLAGS_SWITCH_ON( SNAKE_STOP_GAME_FLAG );
    1baa:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1bac:	f8 94       	cli
    1bae:	80 91 26 03 	lds	r24, 0x0326
    1bb2:	90 91 27 03 	lds	r25, 0x0327
    1bb6:	92 60       	ori	r25, 0x02	; 2
    1bb8:	90 93 27 03 	sts	0x0327, r25
    1bbc:	80 93 26 03 	sts	0x0326, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1bc0:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    1bc2:	b6 cf       	rjmp	.-148    	; 0x1b30 <Menu_EnterClick+0x5a>
    1bc4:	08 95       	ret

00001bc6 <__fixunssfsi>:
    1bc6:	ef 92       	push	r14
    1bc8:	ff 92       	push	r15
    1bca:	0f 93       	push	r16
    1bcc:	1f 93       	push	r17
    1bce:	7b 01       	movw	r14, r22
    1bd0:	8c 01       	movw	r16, r24
    1bd2:	20 e0       	ldi	r18, 0x00	; 0
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	40 e0       	ldi	r20, 0x00	; 0
    1bd8:	5f e4       	ldi	r21, 0x4F	; 79
    1bda:	0e 94 8f 11 	call	0x231e	; 0x231e <__gesf2>
    1bde:	88 23       	and	r24, r24
    1be0:	8c f0       	brlt	.+34     	; 0x1c04 <__fixunssfsi+0x3e>
    1be2:	c8 01       	movw	r24, r16
    1be4:	b7 01       	movw	r22, r14
    1be6:	20 e0       	ldi	r18, 0x00	; 0
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	40 e0       	ldi	r20, 0x00	; 0
    1bec:	5f e4       	ldi	r21, 0x4F	; 79
    1bee:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <__subsf3>
    1bf2:	0e 94 4d 12 	call	0x249a	; 0x249a <__fixsfsi>
    1bf6:	9b 01       	movw	r18, r22
    1bf8:	ac 01       	movw	r20, r24
    1bfa:	20 50       	subi	r18, 0x00	; 0
    1bfc:	30 40       	sbci	r19, 0x00	; 0
    1bfe:	40 40       	sbci	r20, 0x00	; 0
    1c00:	50 48       	sbci	r21, 0x80	; 128
    1c02:	06 c0       	rjmp	.+12     	; 0x1c10 <__fixunssfsi+0x4a>
    1c04:	c8 01       	movw	r24, r16
    1c06:	b7 01       	movw	r22, r14
    1c08:	0e 94 4d 12 	call	0x249a	; 0x249a <__fixsfsi>
    1c0c:	9b 01       	movw	r18, r22
    1c0e:	ac 01       	movw	r20, r24
    1c10:	b9 01       	movw	r22, r18
    1c12:	ca 01       	movw	r24, r20
    1c14:	1f 91       	pop	r17
    1c16:	0f 91       	pop	r16
    1c18:	ff 90       	pop	r15
    1c1a:	ef 90       	pop	r14
    1c1c:	08 95       	ret

00001c1e <_fpadd_parts>:
    1c1e:	a0 e0       	ldi	r26, 0x00	; 0
    1c20:	b0 e0       	ldi	r27, 0x00	; 0
    1c22:	e5 e1       	ldi	r30, 0x15	; 21
    1c24:	fe e0       	ldi	r31, 0x0E	; 14
    1c26:	0c 94 23 15 	jmp	0x2a46	; 0x2a46 <__prologue_saves__>
    1c2a:	dc 01       	movw	r26, r24
    1c2c:	2b 01       	movw	r4, r22
    1c2e:	fa 01       	movw	r30, r20
    1c30:	9c 91       	ld	r25, X
    1c32:	92 30       	cpi	r25, 0x02	; 2
    1c34:	08 f4       	brcc	.+2      	; 0x1c38 <_fpadd_parts+0x1a>
    1c36:	39 c1       	rjmp	.+626    	; 0x1eaa <_fpadd_parts+0x28c>
    1c38:	eb 01       	movw	r28, r22
    1c3a:	88 81       	ld	r24, Y
    1c3c:	82 30       	cpi	r24, 0x02	; 2
    1c3e:	08 f4       	brcc	.+2      	; 0x1c42 <_fpadd_parts+0x24>
    1c40:	33 c1       	rjmp	.+614    	; 0x1ea8 <_fpadd_parts+0x28a>
    1c42:	94 30       	cpi	r25, 0x04	; 4
    1c44:	69 f4       	brne	.+26     	; 0x1c60 <_fpadd_parts+0x42>
    1c46:	84 30       	cpi	r24, 0x04	; 4
    1c48:	09 f0       	breq	.+2      	; 0x1c4c <_fpadd_parts+0x2e>
    1c4a:	2f c1       	rjmp	.+606    	; 0x1eaa <_fpadd_parts+0x28c>
    1c4c:	11 96       	adiw	r26, 0x01	; 1
    1c4e:	9c 91       	ld	r25, X
    1c50:	11 97       	sbiw	r26, 0x01	; 1
    1c52:	89 81       	ldd	r24, Y+1	; 0x01
    1c54:	98 17       	cp	r25, r24
    1c56:	09 f4       	brne	.+2      	; 0x1c5a <_fpadd_parts+0x3c>
    1c58:	28 c1       	rjmp	.+592    	; 0x1eaa <_fpadd_parts+0x28c>
    1c5a:	a7 e0       	ldi	r26, 0x07	; 7
    1c5c:	b2 e0       	ldi	r27, 0x02	; 2
    1c5e:	25 c1       	rjmp	.+586    	; 0x1eaa <_fpadd_parts+0x28c>
    1c60:	84 30       	cpi	r24, 0x04	; 4
    1c62:	09 f4       	brne	.+2      	; 0x1c66 <_fpadd_parts+0x48>
    1c64:	21 c1       	rjmp	.+578    	; 0x1ea8 <_fpadd_parts+0x28a>
    1c66:	82 30       	cpi	r24, 0x02	; 2
    1c68:	a9 f4       	brne	.+42     	; 0x1c94 <_fpadd_parts+0x76>
    1c6a:	92 30       	cpi	r25, 0x02	; 2
    1c6c:	09 f0       	breq	.+2      	; 0x1c70 <_fpadd_parts+0x52>
    1c6e:	1d c1       	rjmp	.+570    	; 0x1eaa <_fpadd_parts+0x28c>
    1c70:	9a 01       	movw	r18, r20
    1c72:	ad 01       	movw	r20, r26
    1c74:	88 e0       	ldi	r24, 0x08	; 8
    1c76:	ea 01       	movw	r28, r20
    1c78:	09 90       	ld	r0, Y+
    1c7a:	ae 01       	movw	r20, r28
    1c7c:	e9 01       	movw	r28, r18
    1c7e:	09 92       	st	Y+, r0
    1c80:	9e 01       	movw	r18, r28
    1c82:	81 50       	subi	r24, 0x01	; 1
    1c84:	c1 f7       	brne	.-16     	; 0x1c76 <_fpadd_parts+0x58>
    1c86:	e2 01       	movw	r28, r4
    1c88:	89 81       	ldd	r24, Y+1	; 0x01
    1c8a:	11 96       	adiw	r26, 0x01	; 1
    1c8c:	9c 91       	ld	r25, X
    1c8e:	89 23       	and	r24, r25
    1c90:	81 83       	std	Z+1, r24	; 0x01
    1c92:	08 c1       	rjmp	.+528    	; 0x1ea4 <_fpadd_parts+0x286>
    1c94:	92 30       	cpi	r25, 0x02	; 2
    1c96:	09 f4       	brne	.+2      	; 0x1c9a <_fpadd_parts+0x7c>
    1c98:	07 c1       	rjmp	.+526    	; 0x1ea8 <_fpadd_parts+0x28a>
    1c9a:	12 96       	adiw	r26, 0x02	; 2
    1c9c:	2d 90       	ld	r2, X+
    1c9e:	3c 90       	ld	r3, X
    1ca0:	13 97       	sbiw	r26, 0x03	; 3
    1ca2:	eb 01       	movw	r28, r22
    1ca4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ca8:	14 96       	adiw	r26, 0x04	; 4
    1caa:	ad 90       	ld	r10, X+
    1cac:	bd 90       	ld	r11, X+
    1cae:	cd 90       	ld	r12, X+
    1cb0:	dc 90       	ld	r13, X
    1cb2:	17 97       	sbiw	r26, 0x07	; 7
    1cb4:	ec 80       	ldd	r14, Y+4	; 0x04
    1cb6:	fd 80       	ldd	r15, Y+5	; 0x05
    1cb8:	0e 81       	ldd	r16, Y+6	; 0x06
    1cba:	1f 81       	ldd	r17, Y+7	; 0x07
    1cbc:	91 01       	movw	r18, r2
    1cbe:	28 1b       	sub	r18, r24
    1cc0:	39 0b       	sbc	r19, r25
    1cc2:	b9 01       	movw	r22, r18
    1cc4:	37 ff       	sbrs	r19, 7
    1cc6:	04 c0       	rjmp	.+8      	; 0x1cd0 <_fpadd_parts+0xb2>
    1cc8:	66 27       	eor	r22, r22
    1cca:	77 27       	eor	r23, r23
    1ccc:	62 1b       	sub	r22, r18
    1cce:	73 0b       	sbc	r23, r19
    1cd0:	60 32       	cpi	r22, 0x20	; 32
    1cd2:	71 05       	cpc	r23, r1
    1cd4:	0c f0       	brlt	.+2      	; 0x1cd8 <_fpadd_parts+0xba>
    1cd6:	61 c0       	rjmp	.+194    	; 0x1d9a <_fpadd_parts+0x17c>
    1cd8:	12 16       	cp	r1, r18
    1cda:	13 06       	cpc	r1, r19
    1cdc:	6c f5       	brge	.+90     	; 0x1d38 <_fpadd_parts+0x11a>
    1cde:	37 01       	movw	r6, r14
    1ce0:	48 01       	movw	r8, r16
    1ce2:	06 2e       	mov	r0, r22
    1ce4:	04 c0       	rjmp	.+8      	; 0x1cee <_fpadd_parts+0xd0>
    1ce6:	96 94       	lsr	r9
    1ce8:	87 94       	ror	r8
    1cea:	77 94       	ror	r7
    1cec:	67 94       	ror	r6
    1cee:	0a 94       	dec	r0
    1cf0:	d2 f7       	brpl	.-12     	; 0x1ce6 <_fpadd_parts+0xc8>
    1cf2:	21 e0       	ldi	r18, 0x01	; 1
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	40 e0       	ldi	r20, 0x00	; 0
    1cf8:	50 e0       	ldi	r21, 0x00	; 0
    1cfa:	04 c0       	rjmp	.+8      	; 0x1d04 <_fpadd_parts+0xe6>
    1cfc:	22 0f       	add	r18, r18
    1cfe:	33 1f       	adc	r19, r19
    1d00:	44 1f       	adc	r20, r20
    1d02:	55 1f       	adc	r21, r21
    1d04:	6a 95       	dec	r22
    1d06:	d2 f7       	brpl	.-12     	; 0x1cfc <_fpadd_parts+0xde>
    1d08:	21 50       	subi	r18, 0x01	; 1
    1d0a:	30 40       	sbci	r19, 0x00	; 0
    1d0c:	40 40       	sbci	r20, 0x00	; 0
    1d0e:	50 40       	sbci	r21, 0x00	; 0
    1d10:	2e 21       	and	r18, r14
    1d12:	3f 21       	and	r19, r15
    1d14:	40 23       	and	r20, r16
    1d16:	51 23       	and	r21, r17
    1d18:	21 15       	cp	r18, r1
    1d1a:	31 05       	cpc	r19, r1
    1d1c:	41 05       	cpc	r20, r1
    1d1e:	51 05       	cpc	r21, r1
    1d20:	21 f0       	breq	.+8      	; 0x1d2a <_fpadd_parts+0x10c>
    1d22:	21 e0       	ldi	r18, 0x01	; 1
    1d24:	30 e0       	ldi	r19, 0x00	; 0
    1d26:	40 e0       	ldi	r20, 0x00	; 0
    1d28:	50 e0       	ldi	r21, 0x00	; 0
    1d2a:	79 01       	movw	r14, r18
    1d2c:	8a 01       	movw	r16, r20
    1d2e:	e6 28       	or	r14, r6
    1d30:	f7 28       	or	r15, r7
    1d32:	08 29       	or	r16, r8
    1d34:	19 29       	or	r17, r9
    1d36:	3c c0       	rjmp	.+120    	; 0x1db0 <_fpadd_parts+0x192>
    1d38:	23 2b       	or	r18, r19
    1d3a:	d1 f1       	breq	.+116    	; 0x1db0 <_fpadd_parts+0x192>
    1d3c:	26 0e       	add	r2, r22
    1d3e:	37 1e       	adc	r3, r23
    1d40:	35 01       	movw	r6, r10
    1d42:	46 01       	movw	r8, r12
    1d44:	06 2e       	mov	r0, r22
    1d46:	04 c0       	rjmp	.+8      	; 0x1d50 <_fpadd_parts+0x132>
    1d48:	96 94       	lsr	r9
    1d4a:	87 94       	ror	r8
    1d4c:	77 94       	ror	r7
    1d4e:	67 94       	ror	r6
    1d50:	0a 94       	dec	r0
    1d52:	d2 f7       	brpl	.-12     	; 0x1d48 <_fpadd_parts+0x12a>
    1d54:	21 e0       	ldi	r18, 0x01	; 1
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	40 e0       	ldi	r20, 0x00	; 0
    1d5a:	50 e0       	ldi	r21, 0x00	; 0
    1d5c:	04 c0       	rjmp	.+8      	; 0x1d66 <_fpadd_parts+0x148>
    1d5e:	22 0f       	add	r18, r18
    1d60:	33 1f       	adc	r19, r19
    1d62:	44 1f       	adc	r20, r20
    1d64:	55 1f       	adc	r21, r21
    1d66:	6a 95       	dec	r22
    1d68:	d2 f7       	brpl	.-12     	; 0x1d5e <_fpadd_parts+0x140>
    1d6a:	21 50       	subi	r18, 0x01	; 1
    1d6c:	30 40       	sbci	r19, 0x00	; 0
    1d6e:	40 40       	sbci	r20, 0x00	; 0
    1d70:	50 40       	sbci	r21, 0x00	; 0
    1d72:	2a 21       	and	r18, r10
    1d74:	3b 21       	and	r19, r11
    1d76:	4c 21       	and	r20, r12
    1d78:	5d 21       	and	r21, r13
    1d7a:	21 15       	cp	r18, r1
    1d7c:	31 05       	cpc	r19, r1
    1d7e:	41 05       	cpc	r20, r1
    1d80:	51 05       	cpc	r21, r1
    1d82:	21 f0       	breq	.+8      	; 0x1d8c <_fpadd_parts+0x16e>
    1d84:	21 e0       	ldi	r18, 0x01	; 1
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	40 e0       	ldi	r20, 0x00	; 0
    1d8a:	50 e0       	ldi	r21, 0x00	; 0
    1d8c:	59 01       	movw	r10, r18
    1d8e:	6a 01       	movw	r12, r20
    1d90:	a6 28       	or	r10, r6
    1d92:	b7 28       	or	r11, r7
    1d94:	c8 28       	or	r12, r8
    1d96:	d9 28       	or	r13, r9
    1d98:	0b c0       	rjmp	.+22     	; 0x1db0 <_fpadd_parts+0x192>
    1d9a:	82 15       	cp	r24, r2
    1d9c:	93 05       	cpc	r25, r3
    1d9e:	2c f0       	brlt	.+10     	; 0x1daa <_fpadd_parts+0x18c>
    1da0:	1c 01       	movw	r2, r24
    1da2:	aa 24       	eor	r10, r10
    1da4:	bb 24       	eor	r11, r11
    1da6:	65 01       	movw	r12, r10
    1da8:	03 c0       	rjmp	.+6      	; 0x1db0 <_fpadd_parts+0x192>
    1daa:	ee 24       	eor	r14, r14
    1dac:	ff 24       	eor	r15, r15
    1dae:	87 01       	movw	r16, r14
    1db0:	11 96       	adiw	r26, 0x01	; 1
    1db2:	9c 91       	ld	r25, X
    1db4:	d2 01       	movw	r26, r4
    1db6:	11 96       	adiw	r26, 0x01	; 1
    1db8:	8c 91       	ld	r24, X
    1dba:	98 17       	cp	r25, r24
    1dbc:	09 f4       	brne	.+2      	; 0x1dc0 <_fpadd_parts+0x1a2>
    1dbe:	45 c0       	rjmp	.+138    	; 0x1e4a <_fpadd_parts+0x22c>
    1dc0:	99 23       	and	r25, r25
    1dc2:	39 f0       	breq	.+14     	; 0x1dd2 <_fpadd_parts+0x1b4>
    1dc4:	a8 01       	movw	r20, r16
    1dc6:	97 01       	movw	r18, r14
    1dc8:	2a 19       	sub	r18, r10
    1dca:	3b 09       	sbc	r19, r11
    1dcc:	4c 09       	sbc	r20, r12
    1dce:	5d 09       	sbc	r21, r13
    1dd0:	06 c0       	rjmp	.+12     	; 0x1dde <_fpadd_parts+0x1c0>
    1dd2:	a6 01       	movw	r20, r12
    1dd4:	95 01       	movw	r18, r10
    1dd6:	2e 19       	sub	r18, r14
    1dd8:	3f 09       	sbc	r19, r15
    1dda:	40 0b       	sbc	r20, r16
    1ddc:	51 0b       	sbc	r21, r17
    1dde:	57 fd       	sbrc	r21, 7
    1de0:	08 c0       	rjmp	.+16     	; 0x1df2 <_fpadd_parts+0x1d4>
    1de2:	11 82       	std	Z+1, r1	; 0x01
    1de4:	33 82       	std	Z+3, r3	; 0x03
    1de6:	22 82       	std	Z+2, r2	; 0x02
    1de8:	24 83       	std	Z+4, r18	; 0x04
    1dea:	35 83       	std	Z+5, r19	; 0x05
    1dec:	46 83       	std	Z+6, r20	; 0x06
    1dee:	57 83       	std	Z+7, r21	; 0x07
    1df0:	1d c0       	rjmp	.+58     	; 0x1e2c <_fpadd_parts+0x20e>
    1df2:	81 e0       	ldi	r24, 0x01	; 1
    1df4:	81 83       	std	Z+1, r24	; 0x01
    1df6:	33 82       	std	Z+3, r3	; 0x03
    1df8:	22 82       	std	Z+2, r2	; 0x02
    1dfa:	88 27       	eor	r24, r24
    1dfc:	99 27       	eor	r25, r25
    1dfe:	dc 01       	movw	r26, r24
    1e00:	82 1b       	sub	r24, r18
    1e02:	93 0b       	sbc	r25, r19
    1e04:	a4 0b       	sbc	r26, r20
    1e06:	b5 0b       	sbc	r27, r21
    1e08:	84 83       	std	Z+4, r24	; 0x04
    1e0a:	95 83       	std	Z+5, r25	; 0x05
    1e0c:	a6 83       	std	Z+6, r26	; 0x06
    1e0e:	b7 83       	std	Z+7, r27	; 0x07
    1e10:	0d c0       	rjmp	.+26     	; 0x1e2c <_fpadd_parts+0x20e>
    1e12:	22 0f       	add	r18, r18
    1e14:	33 1f       	adc	r19, r19
    1e16:	44 1f       	adc	r20, r20
    1e18:	55 1f       	adc	r21, r21
    1e1a:	24 83       	std	Z+4, r18	; 0x04
    1e1c:	35 83       	std	Z+5, r19	; 0x05
    1e1e:	46 83       	std	Z+6, r20	; 0x06
    1e20:	57 83       	std	Z+7, r21	; 0x07
    1e22:	82 81       	ldd	r24, Z+2	; 0x02
    1e24:	93 81       	ldd	r25, Z+3	; 0x03
    1e26:	01 97       	sbiw	r24, 0x01	; 1
    1e28:	93 83       	std	Z+3, r25	; 0x03
    1e2a:	82 83       	std	Z+2, r24	; 0x02
    1e2c:	24 81       	ldd	r18, Z+4	; 0x04
    1e2e:	35 81       	ldd	r19, Z+5	; 0x05
    1e30:	46 81       	ldd	r20, Z+6	; 0x06
    1e32:	57 81       	ldd	r21, Z+7	; 0x07
    1e34:	da 01       	movw	r26, r20
    1e36:	c9 01       	movw	r24, r18
    1e38:	01 97       	sbiw	r24, 0x01	; 1
    1e3a:	a1 09       	sbc	r26, r1
    1e3c:	b1 09       	sbc	r27, r1
    1e3e:	8f 5f       	subi	r24, 0xFF	; 255
    1e40:	9f 4f       	sbci	r25, 0xFF	; 255
    1e42:	af 4f       	sbci	r26, 0xFF	; 255
    1e44:	bf 43       	sbci	r27, 0x3F	; 63
    1e46:	28 f3       	brcs	.-54     	; 0x1e12 <_fpadd_parts+0x1f4>
    1e48:	0b c0       	rjmp	.+22     	; 0x1e60 <_fpadd_parts+0x242>
    1e4a:	91 83       	std	Z+1, r25	; 0x01
    1e4c:	33 82       	std	Z+3, r3	; 0x03
    1e4e:	22 82       	std	Z+2, r2	; 0x02
    1e50:	ea 0c       	add	r14, r10
    1e52:	fb 1c       	adc	r15, r11
    1e54:	0c 1d       	adc	r16, r12
    1e56:	1d 1d       	adc	r17, r13
    1e58:	e4 82       	std	Z+4, r14	; 0x04
    1e5a:	f5 82       	std	Z+5, r15	; 0x05
    1e5c:	06 83       	std	Z+6, r16	; 0x06
    1e5e:	17 83       	std	Z+7, r17	; 0x07
    1e60:	83 e0       	ldi	r24, 0x03	; 3
    1e62:	80 83       	st	Z, r24
    1e64:	24 81       	ldd	r18, Z+4	; 0x04
    1e66:	35 81       	ldd	r19, Z+5	; 0x05
    1e68:	46 81       	ldd	r20, Z+6	; 0x06
    1e6a:	57 81       	ldd	r21, Z+7	; 0x07
    1e6c:	57 ff       	sbrs	r21, 7
    1e6e:	1a c0       	rjmp	.+52     	; 0x1ea4 <_fpadd_parts+0x286>
    1e70:	c9 01       	movw	r24, r18
    1e72:	aa 27       	eor	r26, r26
    1e74:	97 fd       	sbrc	r25, 7
    1e76:	a0 95       	com	r26
    1e78:	ba 2f       	mov	r27, r26
    1e7a:	81 70       	andi	r24, 0x01	; 1
    1e7c:	90 70       	andi	r25, 0x00	; 0
    1e7e:	a0 70       	andi	r26, 0x00	; 0
    1e80:	b0 70       	andi	r27, 0x00	; 0
    1e82:	56 95       	lsr	r21
    1e84:	47 95       	ror	r20
    1e86:	37 95       	ror	r19
    1e88:	27 95       	ror	r18
    1e8a:	82 2b       	or	r24, r18
    1e8c:	93 2b       	or	r25, r19
    1e8e:	a4 2b       	or	r26, r20
    1e90:	b5 2b       	or	r27, r21
    1e92:	84 83       	std	Z+4, r24	; 0x04
    1e94:	95 83       	std	Z+5, r25	; 0x05
    1e96:	a6 83       	std	Z+6, r26	; 0x06
    1e98:	b7 83       	std	Z+7, r27	; 0x07
    1e9a:	82 81       	ldd	r24, Z+2	; 0x02
    1e9c:	93 81       	ldd	r25, Z+3	; 0x03
    1e9e:	01 96       	adiw	r24, 0x01	; 1
    1ea0:	93 83       	std	Z+3, r25	; 0x03
    1ea2:	82 83       	std	Z+2, r24	; 0x02
    1ea4:	df 01       	movw	r26, r30
    1ea6:	01 c0       	rjmp	.+2      	; 0x1eaa <_fpadd_parts+0x28c>
    1ea8:	d2 01       	movw	r26, r4
    1eaa:	cd 01       	movw	r24, r26
    1eac:	cd b7       	in	r28, 0x3d	; 61
    1eae:	de b7       	in	r29, 0x3e	; 62
    1eb0:	e2 e1       	ldi	r30, 0x12	; 18
    1eb2:	0c 94 3f 15 	jmp	0x2a7e	; 0x2a7e <__epilogue_restores__>

00001eb6 <__subsf3>:
    1eb6:	a0 e2       	ldi	r26, 0x20	; 32
    1eb8:	b0 e0       	ldi	r27, 0x00	; 0
    1eba:	e1 e6       	ldi	r30, 0x61	; 97
    1ebc:	ff e0       	ldi	r31, 0x0F	; 15
    1ebe:	0c 94 2f 15 	jmp	0x2a5e	; 0x2a5e <__prologue_saves__+0x18>
    1ec2:	69 83       	std	Y+1, r22	; 0x01
    1ec4:	7a 83       	std	Y+2, r23	; 0x02
    1ec6:	8b 83       	std	Y+3, r24	; 0x03
    1ec8:	9c 83       	std	Y+4, r25	; 0x04
    1eca:	2d 83       	std	Y+5, r18	; 0x05
    1ecc:	3e 83       	std	Y+6, r19	; 0x06
    1ece:	4f 83       	std	Y+7, r20	; 0x07
    1ed0:	58 87       	std	Y+8, r21	; 0x08
    1ed2:	e9 e0       	ldi	r30, 0x09	; 9
    1ed4:	ee 2e       	mov	r14, r30
    1ed6:	f1 2c       	mov	r15, r1
    1ed8:	ec 0e       	add	r14, r28
    1eda:	fd 1e       	adc	r15, r29
    1edc:	ce 01       	movw	r24, r28
    1ede:	01 96       	adiw	r24, 0x01	; 1
    1ee0:	b7 01       	movw	r22, r14
    1ee2:	0e 94 3e 14 	call	0x287c	; 0x287c <__unpack_f>
    1ee6:	8e 01       	movw	r16, r28
    1ee8:	0f 5e       	subi	r16, 0xEF	; 239
    1eea:	1f 4f       	sbci	r17, 0xFF	; 255
    1eec:	ce 01       	movw	r24, r28
    1eee:	05 96       	adiw	r24, 0x05	; 5
    1ef0:	b8 01       	movw	r22, r16
    1ef2:	0e 94 3e 14 	call	0x287c	; 0x287c <__unpack_f>
    1ef6:	8a 89       	ldd	r24, Y+18	; 0x12
    1ef8:	91 e0       	ldi	r25, 0x01	; 1
    1efa:	89 27       	eor	r24, r25
    1efc:	8a 8b       	std	Y+18, r24	; 0x12
    1efe:	c7 01       	movw	r24, r14
    1f00:	b8 01       	movw	r22, r16
    1f02:	ae 01       	movw	r20, r28
    1f04:	47 5e       	subi	r20, 0xE7	; 231
    1f06:	5f 4f       	sbci	r21, 0xFF	; 255
    1f08:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <_fpadd_parts>
    1f0c:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__pack_f>
    1f10:	a0 96       	adiw	r28, 0x20	; 32
    1f12:	e6 e0       	ldi	r30, 0x06	; 6
    1f14:	0c 94 4b 15 	jmp	0x2a96	; 0x2a96 <__epilogue_restores__+0x18>

00001f18 <__addsf3>:
    1f18:	a0 e2       	ldi	r26, 0x20	; 32
    1f1a:	b0 e0       	ldi	r27, 0x00	; 0
    1f1c:	e2 e9       	ldi	r30, 0x92	; 146
    1f1e:	ff e0       	ldi	r31, 0x0F	; 15
    1f20:	0c 94 2f 15 	jmp	0x2a5e	; 0x2a5e <__prologue_saves__+0x18>
    1f24:	69 83       	std	Y+1, r22	; 0x01
    1f26:	7a 83       	std	Y+2, r23	; 0x02
    1f28:	8b 83       	std	Y+3, r24	; 0x03
    1f2a:	9c 83       	std	Y+4, r25	; 0x04
    1f2c:	2d 83       	std	Y+5, r18	; 0x05
    1f2e:	3e 83       	std	Y+6, r19	; 0x06
    1f30:	4f 83       	std	Y+7, r20	; 0x07
    1f32:	58 87       	std	Y+8, r21	; 0x08
    1f34:	f9 e0       	ldi	r31, 0x09	; 9
    1f36:	ef 2e       	mov	r14, r31
    1f38:	f1 2c       	mov	r15, r1
    1f3a:	ec 0e       	add	r14, r28
    1f3c:	fd 1e       	adc	r15, r29
    1f3e:	ce 01       	movw	r24, r28
    1f40:	01 96       	adiw	r24, 0x01	; 1
    1f42:	b7 01       	movw	r22, r14
    1f44:	0e 94 3e 14 	call	0x287c	; 0x287c <__unpack_f>
    1f48:	8e 01       	movw	r16, r28
    1f4a:	0f 5e       	subi	r16, 0xEF	; 239
    1f4c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f4e:	ce 01       	movw	r24, r28
    1f50:	05 96       	adiw	r24, 0x05	; 5
    1f52:	b8 01       	movw	r22, r16
    1f54:	0e 94 3e 14 	call	0x287c	; 0x287c <__unpack_f>
    1f58:	c7 01       	movw	r24, r14
    1f5a:	b8 01       	movw	r22, r16
    1f5c:	ae 01       	movw	r20, r28
    1f5e:	47 5e       	subi	r20, 0xE7	; 231
    1f60:	5f 4f       	sbci	r21, 0xFF	; 255
    1f62:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <_fpadd_parts>
    1f66:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__pack_f>
    1f6a:	a0 96       	adiw	r28, 0x20	; 32
    1f6c:	e6 e0       	ldi	r30, 0x06	; 6
    1f6e:	0c 94 4b 15 	jmp	0x2a96	; 0x2a96 <__epilogue_restores__+0x18>

00001f72 <__mulsf3>:
    1f72:	a0 e2       	ldi	r26, 0x20	; 32
    1f74:	b0 e0       	ldi	r27, 0x00	; 0
    1f76:	ef eb       	ldi	r30, 0xBF	; 191
    1f78:	ff e0       	ldi	r31, 0x0F	; 15
    1f7a:	0c 94 23 15 	jmp	0x2a46	; 0x2a46 <__prologue_saves__>
    1f7e:	69 83       	std	Y+1, r22	; 0x01
    1f80:	7a 83       	std	Y+2, r23	; 0x02
    1f82:	8b 83       	std	Y+3, r24	; 0x03
    1f84:	9c 83       	std	Y+4, r25	; 0x04
    1f86:	2d 83       	std	Y+5, r18	; 0x05
    1f88:	3e 83       	std	Y+6, r19	; 0x06
    1f8a:	4f 83       	std	Y+7, r20	; 0x07
    1f8c:	58 87       	std	Y+8, r21	; 0x08
    1f8e:	ce 01       	movw	r24, r28
    1f90:	01 96       	adiw	r24, 0x01	; 1
    1f92:	be 01       	movw	r22, r28
    1f94:	67 5f       	subi	r22, 0xF7	; 247
    1f96:	7f 4f       	sbci	r23, 0xFF	; 255
    1f98:	0e 94 3e 14 	call	0x287c	; 0x287c <__unpack_f>
    1f9c:	ce 01       	movw	r24, r28
    1f9e:	05 96       	adiw	r24, 0x05	; 5
    1fa0:	be 01       	movw	r22, r28
    1fa2:	6f 5e       	subi	r22, 0xEF	; 239
    1fa4:	7f 4f       	sbci	r23, 0xFF	; 255
    1fa6:	0e 94 3e 14 	call	0x287c	; 0x287c <__unpack_f>
    1faa:	99 85       	ldd	r25, Y+9	; 0x09
    1fac:	92 30       	cpi	r25, 0x02	; 2
    1fae:	88 f0       	brcs	.+34     	; 0x1fd2 <__mulsf3+0x60>
    1fb0:	89 89       	ldd	r24, Y+17	; 0x11
    1fb2:	82 30       	cpi	r24, 0x02	; 2
    1fb4:	c8 f0       	brcs	.+50     	; 0x1fe8 <__mulsf3+0x76>
    1fb6:	94 30       	cpi	r25, 0x04	; 4
    1fb8:	19 f4       	brne	.+6      	; 0x1fc0 <__mulsf3+0x4e>
    1fba:	82 30       	cpi	r24, 0x02	; 2
    1fbc:	51 f4       	brne	.+20     	; 0x1fd2 <__mulsf3+0x60>
    1fbe:	04 c0       	rjmp	.+8      	; 0x1fc8 <__mulsf3+0x56>
    1fc0:	84 30       	cpi	r24, 0x04	; 4
    1fc2:	29 f4       	brne	.+10     	; 0x1fce <__mulsf3+0x5c>
    1fc4:	92 30       	cpi	r25, 0x02	; 2
    1fc6:	81 f4       	brne	.+32     	; 0x1fe8 <__mulsf3+0x76>
    1fc8:	87 e0       	ldi	r24, 0x07	; 7
    1fca:	92 e0       	ldi	r25, 0x02	; 2
    1fcc:	c6 c0       	rjmp	.+396    	; 0x215a <__mulsf3+0x1e8>
    1fce:	92 30       	cpi	r25, 0x02	; 2
    1fd0:	49 f4       	brne	.+18     	; 0x1fe4 <__mulsf3+0x72>
    1fd2:	20 e0       	ldi	r18, 0x00	; 0
    1fd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fd6:	8a 89       	ldd	r24, Y+18	; 0x12
    1fd8:	98 13       	cpse	r25, r24
    1fda:	21 e0       	ldi	r18, 0x01	; 1
    1fdc:	2a 87       	std	Y+10, r18	; 0x0a
    1fde:	ce 01       	movw	r24, r28
    1fe0:	09 96       	adiw	r24, 0x09	; 9
    1fe2:	bb c0       	rjmp	.+374    	; 0x215a <__mulsf3+0x1e8>
    1fe4:	82 30       	cpi	r24, 0x02	; 2
    1fe6:	49 f4       	brne	.+18     	; 0x1ffa <__mulsf3+0x88>
    1fe8:	20 e0       	ldi	r18, 0x00	; 0
    1fea:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fec:	8a 89       	ldd	r24, Y+18	; 0x12
    1fee:	98 13       	cpse	r25, r24
    1ff0:	21 e0       	ldi	r18, 0x01	; 1
    1ff2:	2a 8b       	std	Y+18, r18	; 0x12
    1ff4:	ce 01       	movw	r24, r28
    1ff6:	41 96       	adiw	r24, 0x11	; 17
    1ff8:	b0 c0       	rjmp	.+352    	; 0x215a <__mulsf3+0x1e8>
    1ffa:	2d 84       	ldd	r2, Y+13	; 0x0d
    1ffc:	3e 84       	ldd	r3, Y+14	; 0x0e
    1ffe:	4f 84       	ldd	r4, Y+15	; 0x0f
    2000:	58 88       	ldd	r5, Y+16	; 0x10
    2002:	6d 88       	ldd	r6, Y+21	; 0x15
    2004:	7e 88       	ldd	r7, Y+22	; 0x16
    2006:	8f 88       	ldd	r8, Y+23	; 0x17
    2008:	98 8c       	ldd	r9, Y+24	; 0x18
    200a:	ee 24       	eor	r14, r14
    200c:	ff 24       	eor	r15, r15
    200e:	87 01       	movw	r16, r14
    2010:	aa 24       	eor	r10, r10
    2012:	bb 24       	eor	r11, r11
    2014:	65 01       	movw	r12, r10
    2016:	40 e0       	ldi	r20, 0x00	; 0
    2018:	50 e0       	ldi	r21, 0x00	; 0
    201a:	60 e0       	ldi	r22, 0x00	; 0
    201c:	70 e0       	ldi	r23, 0x00	; 0
    201e:	e0 e0       	ldi	r30, 0x00	; 0
    2020:	f0 e0       	ldi	r31, 0x00	; 0
    2022:	c1 01       	movw	r24, r2
    2024:	81 70       	andi	r24, 0x01	; 1
    2026:	90 70       	andi	r25, 0x00	; 0
    2028:	89 2b       	or	r24, r25
    202a:	e9 f0       	breq	.+58     	; 0x2066 <__mulsf3+0xf4>
    202c:	e6 0c       	add	r14, r6
    202e:	f7 1c       	adc	r15, r7
    2030:	08 1d       	adc	r16, r8
    2032:	19 1d       	adc	r17, r9
    2034:	9a 01       	movw	r18, r20
    2036:	ab 01       	movw	r20, r22
    2038:	2a 0d       	add	r18, r10
    203a:	3b 1d       	adc	r19, r11
    203c:	4c 1d       	adc	r20, r12
    203e:	5d 1d       	adc	r21, r13
    2040:	80 e0       	ldi	r24, 0x00	; 0
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	a0 e0       	ldi	r26, 0x00	; 0
    2046:	b0 e0       	ldi	r27, 0x00	; 0
    2048:	e6 14       	cp	r14, r6
    204a:	f7 04       	cpc	r15, r7
    204c:	08 05       	cpc	r16, r8
    204e:	19 05       	cpc	r17, r9
    2050:	20 f4       	brcc	.+8      	; 0x205a <__mulsf3+0xe8>
    2052:	81 e0       	ldi	r24, 0x01	; 1
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	a0 e0       	ldi	r26, 0x00	; 0
    2058:	b0 e0       	ldi	r27, 0x00	; 0
    205a:	ba 01       	movw	r22, r20
    205c:	a9 01       	movw	r20, r18
    205e:	48 0f       	add	r20, r24
    2060:	59 1f       	adc	r21, r25
    2062:	6a 1f       	adc	r22, r26
    2064:	7b 1f       	adc	r23, r27
    2066:	aa 0c       	add	r10, r10
    2068:	bb 1c       	adc	r11, r11
    206a:	cc 1c       	adc	r12, r12
    206c:	dd 1c       	adc	r13, r13
    206e:	97 fe       	sbrs	r9, 7
    2070:	08 c0       	rjmp	.+16     	; 0x2082 <__mulsf3+0x110>
    2072:	81 e0       	ldi	r24, 0x01	; 1
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	a0 e0       	ldi	r26, 0x00	; 0
    2078:	b0 e0       	ldi	r27, 0x00	; 0
    207a:	a8 2a       	or	r10, r24
    207c:	b9 2a       	or	r11, r25
    207e:	ca 2a       	or	r12, r26
    2080:	db 2a       	or	r13, r27
    2082:	31 96       	adiw	r30, 0x01	; 1
    2084:	e0 32       	cpi	r30, 0x20	; 32
    2086:	f1 05       	cpc	r31, r1
    2088:	49 f0       	breq	.+18     	; 0x209c <__mulsf3+0x12a>
    208a:	66 0c       	add	r6, r6
    208c:	77 1c       	adc	r7, r7
    208e:	88 1c       	adc	r8, r8
    2090:	99 1c       	adc	r9, r9
    2092:	56 94       	lsr	r5
    2094:	47 94       	ror	r4
    2096:	37 94       	ror	r3
    2098:	27 94       	ror	r2
    209a:	c3 cf       	rjmp	.-122    	; 0x2022 <__mulsf3+0xb0>
    209c:	fa 85       	ldd	r31, Y+10	; 0x0a
    209e:	ea 89       	ldd	r30, Y+18	; 0x12
    20a0:	2b 89       	ldd	r18, Y+19	; 0x13
    20a2:	3c 89       	ldd	r19, Y+20	; 0x14
    20a4:	8b 85       	ldd	r24, Y+11	; 0x0b
    20a6:	9c 85       	ldd	r25, Y+12	; 0x0c
    20a8:	28 0f       	add	r18, r24
    20aa:	39 1f       	adc	r19, r25
    20ac:	2e 5f       	subi	r18, 0xFE	; 254
    20ae:	3f 4f       	sbci	r19, 0xFF	; 255
    20b0:	17 c0       	rjmp	.+46     	; 0x20e0 <__mulsf3+0x16e>
    20b2:	ca 01       	movw	r24, r20
    20b4:	81 70       	andi	r24, 0x01	; 1
    20b6:	90 70       	andi	r25, 0x00	; 0
    20b8:	89 2b       	or	r24, r25
    20ba:	61 f0       	breq	.+24     	; 0x20d4 <__mulsf3+0x162>
    20bc:	16 95       	lsr	r17
    20be:	07 95       	ror	r16
    20c0:	f7 94       	ror	r15
    20c2:	e7 94       	ror	r14
    20c4:	80 e0       	ldi	r24, 0x00	; 0
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	a0 e0       	ldi	r26, 0x00	; 0
    20ca:	b0 e8       	ldi	r27, 0x80	; 128
    20cc:	e8 2a       	or	r14, r24
    20ce:	f9 2a       	or	r15, r25
    20d0:	0a 2b       	or	r16, r26
    20d2:	1b 2b       	or	r17, r27
    20d4:	76 95       	lsr	r23
    20d6:	67 95       	ror	r22
    20d8:	57 95       	ror	r21
    20da:	47 95       	ror	r20
    20dc:	2f 5f       	subi	r18, 0xFF	; 255
    20de:	3f 4f       	sbci	r19, 0xFF	; 255
    20e0:	77 fd       	sbrc	r23, 7
    20e2:	e7 cf       	rjmp	.-50     	; 0x20b2 <__mulsf3+0x140>
    20e4:	0c c0       	rjmp	.+24     	; 0x20fe <__mulsf3+0x18c>
    20e6:	44 0f       	add	r20, r20
    20e8:	55 1f       	adc	r21, r21
    20ea:	66 1f       	adc	r22, r22
    20ec:	77 1f       	adc	r23, r23
    20ee:	17 fd       	sbrc	r17, 7
    20f0:	41 60       	ori	r20, 0x01	; 1
    20f2:	ee 0c       	add	r14, r14
    20f4:	ff 1c       	adc	r15, r15
    20f6:	00 1f       	adc	r16, r16
    20f8:	11 1f       	adc	r17, r17
    20fa:	21 50       	subi	r18, 0x01	; 1
    20fc:	30 40       	sbci	r19, 0x00	; 0
    20fe:	40 30       	cpi	r20, 0x00	; 0
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	59 07       	cpc	r21, r25
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	69 07       	cpc	r22, r25
    2108:	90 e4       	ldi	r25, 0x40	; 64
    210a:	79 07       	cpc	r23, r25
    210c:	60 f3       	brcs	.-40     	; 0x20e6 <__mulsf3+0x174>
    210e:	2b 8f       	std	Y+27, r18	; 0x1b
    2110:	3c 8f       	std	Y+28, r19	; 0x1c
    2112:	db 01       	movw	r26, r22
    2114:	ca 01       	movw	r24, r20
    2116:	8f 77       	andi	r24, 0x7F	; 127
    2118:	90 70       	andi	r25, 0x00	; 0
    211a:	a0 70       	andi	r26, 0x00	; 0
    211c:	b0 70       	andi	r27, 0x00	; 0
    211e:	80 34       	cpi	r24, 0x40	; 64
    2120:	91 05       	cpc	r25, r1
    2122:	a1 05       	cpc	r26, r1
    2124:	b1 05       	cpc	r27, r1
    2126:	61 f4       	brne	.+24     	; 0x2140 <__mulsf3+0x1ce>
    2128:	47 fd       	sbrc	r20, 7
    212a:	0a c0       	rjmp	.+20     	; 0x2140 <__mulsf3+0x1ce>
    212c:	e1 14       	cp	r14, r1
    212e:	f1 04       	cpc	r15, r1
    2130:	01 05       	cpc	r16, r1
    2132:	11 05       	cpc	r17, r1
    2134:	29 f0       	breq	.+10     	; 0x2140 <__mulsf3+0x1ce>
    2136:	40 5c       	subi	r20, 0xC0	; 192
    2138:	5f 4f       	sbci	r21, 0xFF	; 255
    213a:	6f 4f       	sbci	r22, 0xFF	; 255
    213c:	7f 4f       	sbci	r23, 0xFF	; 255
    213e:	40 78       	andi	r20, 0x80	; 128
    2140:	1a 8e       	std	Y+26, r1	; 0x1a
    2142:	fe 17       	cp	r31, r30
    2144:	11 f0       	breq	.+4      	; 0x214a <__mulsf3+0x1d8>
    2146:	81 e0       	ldi	r24, 0x01	; 1
    2148:	8a 8f       	std	Y+26, r24	; 0x1a
    214a:	4d 8f       	std	Y+29, r20	; 0x1d
    214c:	5e 8f       	std	Y+30, r21	; 0x1e
    214e:	6f 8f       	std	Y+31, r22	; 0x1f
    2150:	78 a3       	std	Y+32, r23	; 0x20
    2152:	83 e0       	ldi	r24, 0x03	; 3
    2154:	89 8f       	std	Y+25, r24	; 0x19
    2156:	ce 01       	movw	r24, r28
    2158:	49 96       	adiw	r24, 0x19	; 25
    215a:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__pack_f>
    215e:	a0 96       	adiw	r28, 0x20	; 32
    2160:	e2 e1       	ldi	r30, 0x12	; 18
    2162:	0c 94 3f 15 	jmp	0x2a7e	; 0x2a7e <__epilogue_restores__>

00002166 <__divsf3>:
    2166:	a8 e1       	ldi	r26, 0x18	; 24
    2168:	b0 e0       	ldi	r27, 0x00	; 0
    216a:	e9 eb       	ldi	r30, 0xB9	; 185
    216c:	f0 e1       	ldi	r31, 0x10	; 16
    216e:	0c 94 2b 15 	jmp	0x2a56	; 0x2a56 <__prologue_saves__+0x10>
    2172:	69 83       	std	Y+1, r22	; 0x01
    2174:	7a 83       	std	Y+2, r23	; 0x02
    2176:	8b 83       	std	Y+3, r24	; 0x03
    2178:	9c 83       	std	Y+4, r25	; 0x04
    217a:	2d 83       	std	Y+5, r18	; 0x05
    217c:	3e 83       	std	Y+6, r19	; 0x06
    217e:	4f 83       	std	Y+7, r20	; 0x07
    2180:	58 87       	std	Y+8, r21	; 0x08
    2182:	b9 e0       	ldi	r27, 0x09	; 9
    2184:	eb 2e       	mov	r14, r27
    2186:	f1 2c       	mov	r15, r1
    2188:	ec 0e       	add	r14, r28
    218a:	fd 1e       	adc	r15, r29
    218c:	ce 01       	movw	r24, r28
    218e:	01 96       	adiw	r24, 0x01	; 1
    2190:	b7 01       	movw	r22, r14
    2192:	0e 94 3e 14 	call	0x287c	; 0x287c <__unpack_f>
    2196:	8e 01       	movw	r16, r28
    2198:	0f 5e       	subi	r16, 0xEF	; 239
    219a:	1f 4f       	sbci	r17, 0xFF	; 255
    219c:	ce 01       	movw	r24, r28
    219e:	05 96       	adiw	r24, 0x05	; 5
    21a0:	b8 01       	movw	r22, r16
    21a2:	0e 94 3e 14 	call	0x287c	; 0x287c <__unpack_f>
    21a6:	29 85       	ldd	r18, Y+9	; 0x09
    21a8:	22 30       	cpi	r18, 0x02	; 2
    21aa:	08 f4       	brcc	.+2      	; 0x21ae <__divsf3+0x48>
    21ac:	7e c0       	rjmp	.+252    	; 0x22aa <__divsf3+0x144>
    21ae:	39 89       	ldd	r19, Y+17	; 0x11
    21b0:	32 30       	cpi	r19, 0x02	; 2
    21b2:	10 f4       	brcc	.+4      	; 0x21b8 <__divsf3+0x52>
    21b4:	b8 01       	movw	r22, r16
    21b6:	7c c0       	rjmp	.+248    	; 0x22b0 <__divsf3+0x14a>
    21b8:	8a 85       	ldd	r24, Y+10	; 0x0a
    21ba:	9a 89       	ldd	r25, Y+18	; 0x12
    21bc:	89 27       	eor	r24, r25
    21be:	8a 87       	std	Y+10, r24	; 0x0a
    21c0:	24 30       	cpi	r18, 0x04	; 4
    21c2:	11 f0       	breq	.+4      	; 0x21c8 <__divsf3+0x62>
    21c4:	22 30       	cpi	r18, 0x02	; 2
    21c6:	31 f4       	brne	.+12     	; 0x21d4 <__divsf3+0x6e>
    21c8:	23 17       	cp	r18, r19
    21ca:	09 f0       	breq	.+2      	; 0x21ce <__divsf3+0x68>
    21cc:	6e c0       	rjmp	.+220    	; 0x22aa <__divsf3+0x144>
    21ce:	67 e0       	ldi	r22, 0x07	; 7
    21d0:	72 e0       	ldi	r23, 0x02	; 2
    21d2:	6e c0       	rjmp	.+220    	; 0x22b0 <__divsf3+0x14a>
    21d4:	34 30       	cpi	r19, 0x04	; 4
    21d6:	39 f4       	brne	.+14     	; 0x21e6 <__divsf3+0x80>
    21d8:	1d 86       	std	Y+13, r1	; 0x0d
    21da:	1e 86       	std	Y+14, r1	; 0x0e
    21dc:	1f 86       	std	Y+15, r1	; 0x0f
    21de:	18 8a       	std	Y+16, r1	; 0x10
    21e0:	1c 86       	std	Y+12, r1	; 0x0c
    21e2:	1b 86       	std	Y+11, r1	; 0x0b
    21e4:	04 c0       	rjmp	.+8      	; 0x21ee <__divsf3+0x88>
    21e6:	32 30       	cpi	r19, 0x02	; 2
    21e8:	21 f4       	brne	.+8      	; 0x21f2 <__divsf3+0x8c>
    21ea:	84 e0       	ldi	r24, 0x04	; 4
    21ec:	89 87       	std	Y+9, r24	; 0x09
    21ee:	b7 01       	movw	r22, r14
    21f0:	5f c0       	rjmp	.+190    	; 0x22b0 <__divsf3+0x14a>
    21f2:	2b 85       	ldd	r18, Y+11	; 0x0b
    21f4:	3c 85       	ldd	r19, Y+12	; 0x0c
    21f6:	8b 89       	ldd	r24, Y+19	; 0x13
    21f8:	9c 89       	ldd	r25, Y+20	; 0x14
    21fa:	28 1b       	sub	r18, r24
    21fc:	39 0b       	sbc	r19, r25
    21fe:	3c 87       	std	Y+12, r19	; 0x0c
    2200:	2b 87       	std	Y+11, r18	; 0x0b
    2202:	ed 84       	ldd	r14, Y+13	; 0x0d
    2204:	fe 84       	ldd	r15, Y+14	; 0x0e
    2206:	0f 85       	ldd	r16, Y+15	; 0x0f
    2208:	18 89       	ldd	r17, Y+16	; 0x10
    220a:	ad 88       	ldd	r10, Y+21	; 0x15
    220c:	be 88       	ldd	r11, Y+22	; 0x16
    220e:	cf 88       	ldd	r12, Y+23	; 0x17
    2210:	d8 8c       	ldd	r13, Y+24	; 0x18
    2212:	ea 14       	cp	r14, r10
    2214:	fb 04       	cpc	r15, r11
    2216:	0c 05       	cpc	r16, r12
    2218:	1d 05       	cpc	r17, r13
    221a:	40 f4       	brcc	.+16     	; 0x222c <__divsf3+0xc6>
    221c:	ee 0c       	add	r14, r14
    221e:	ff 1c       	adc	r15, r15
    2220:	00 1f       	adc	r16, r16
    2222:	11 1f       	adc	r17, r17
    2224:	21 50       	subi	r18, 0x01	; 1
    2226:	30 40       	sbci	r19, 0x00	; 0
    2228:	3c 87       	std	Y+12, r19	; 0x0c
    222a:	2b 87       	std	Y+11, r18	; 0x0b
    222c:	20 e0       	ldi	r18, 0x00	; 0
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	40 e0       	ldi	r20, 0x00	; 0
    2232:	50 e0       	ldi	r21, 0x00	; 0
    2234:	80 e0       	ldi	r24, 0x00	; 0
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	a0 e0       	ldi	r26, 0x00	; 0
    223a:	b0 e4       	ldi	r27, 0x40	; 64
    223c:	60 e0       	ldi	r22, 0x00	; 0
    223e:	70 e0       	ldi	r23, 0x00	; 0
    2240:	ea 14       	cp	r14, r10
    2242:	fb 04       	cpc	r15, r11
    2244:	0c 05       	cpc	r16, r12
    2246:	1d 05       	cpc	r17, r13
    2248:	40 f0       	brcs	.+16     	; 0x225a <__divsf3+0xf4>
    224a:	28 2b       	or	r18, r24
    224c:	39 2b       	or	r19, r25
    224e:	4a 2b       	or	r20, r26
    2250:	5b 2b       	or	r21, r27
    2252:	ea 18       	sub	r14, r10
    2254:	fb 08       	sbc	r15, r11
    2256:	0c 09       	sbc	r16, r12
    2258:	1d 09       	sbc	r17, r13
    225a:	b6 95       	lsr	r27
    225c:	a7 95       	ror	r26
    225e:	97 95       	ror	r25
    2260:	87 95       	ror	r24
    2262:	ee 0c       	add	r14, r14
    2264:	ff 1c       	adc	r15, r15
    2266:	00 1f       	adc	r16, r16
    2268:	11 1f       	adc	r17, r17
    226a:	6f 5f       	subi	r22, 0xFF	; 255
    226c:	7f 4f       	sbci	r23, 0xFF	; 255
    226e:	6f 31       	cpi	r22, 0x1F	; 31
    2270:	71 05       	cpc	r23, r1
    2272:	31 f7       	brne	.-52     	; 0x2240 <__divsf3+0xda>
    2274:	da 01       	movw	r26, r20
    2276:	c9 01       	movw	r24, r18
    2278:	8f 77       	andi	r24, 0x7F	; 127
    227a:	90 70       	andi	r25, 0x00	; 0
    227c:	a0 70       	andi	r26, 0x00	; 0
    227e:	b0 70       	andi	r27, 0x00	; 0
    2280:	80 34       	cpi	r24, 0x40	; 64
    2282:	91 05       	cpc	r25, r1
    2284:	a1 05       	cpc	r26, r1
    2286:	b1 05       	cpc	r27, r1
    2288:	61 f4       	brne	.+24     	; 0x22a2 <__divsf3+0x13c>
    228a:	27 fd       	sbrc	r18, 7
    228c:	0a c0       	rjmp	.+20     	; 0x22a2 <__divsf3+0x13c>
    228e:	e1 14       	cp	r14, r1
    2290:	f1 04       	cpc	r15, r1
    2292:	01 05       	cpc	r16, r1
    2294:	11 05       	cpc	r17, r1
    2296:	29 f0       	breq	.+10     	; 0x22a2 <__divsf3+0x13c>
    2298:	20 5c       	subi	r18, 0xC0	; 192
    229a:	3f 4f       	sbci	r19, 0xFF	; 255
    229c:	4f 4f       	sbci	r20, 0xFF	; 255
    229e:	5f 4f       	sbci	r21, 0xFF	; 255
    22a0:	20 78       	andi	r18, 0x80	; 128
    22a2:	2d 87       	std	Y+13, r18	; 0x0d
    22a4:	3e 87       	std	Y+14, r19	; 0x0e
    22a6:	4f 87       	std	Y+15, r20	; 0x0f
    22a8:	58 8b       	std	Y+16, r21	; 0x10
    22aa:	be 01       	movw	r22, r28
    22ac:	67 5f       	subi	r22, 0xF7	; 247
    22ae:	7f 4f       	sbci	r23, 0xFF	; 255
    22b0:	cb 01       	movw	r24, r22
    22b2:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__pack_f>
    22b6:	68 96       	adiw	r28, 0x18	; 24
    22b8:	ea e0       	ldi	r30, 0x0A	; 10
    22ba:	0c 94 47 15 	jmp	0x2a8e	; 0x2a8e <__epilogue_restores__+0x10>

000022be <__gtsf2>:
    22be:	a8 e1       	ldi	r26, 0x18	; 24
    22c0:	b0 e0       	ldi	r27, 0x00	; 0
    22c2:	e5 e6       	ldi	r30, 0x65	; 101
    22c4:	f1 e1       	ldi	r31, 0x11	; 17
    22c6:	0c 94 2f 15 	jmp	0x2a5e	; 0x2a5e <__prologue_saves__+0x18>
    22ca:	69 83       	std	Y+1, r22	; 0x01
    22cc:	7a 83       	std	Y+2, r23	; 0x02
    22ce:	8b 83       	std	Y+3, r24	; 0x03
    22d0:	9c 83       	std	Y+4, r25	; 0x04
    22d2:	2d 83       	std	Y+5, r18	; 0x05
    22d4:	3e 83       	std	Y+6, r19	; 0x06
    22d6:	4f 83       	std	Y+7, r20	; 0x07
    22d8:	58 87       	std	Y+8, r21	; 0x08
    22da:	89 e0       	ldi	r24, 0x09	; 9
    22dc:	e8 2e       	mov	r14, r24
    22de:	f1 2c       	mov	r15, r1
    22e0:	ec 0e       	add	r14, r28
    22e2:	fd 1e       	adc	r15, r29
    22e4:	ce 01       	movw	r24, r28
    22e6:	01 96       	adiw	r24, 0x01	; 1
    22e8:	b7 01       	movw	r22, r14
    22ea:	0e 94 3e 14 	call	0x287c	; 0x287c <__unpack_f>
    22ee:	8e 01       	movw	r16, r28
    22f0:	0f 5e       	subi	r16, 0xEF	; 239
    22f2:	1f 4f       	sbci	r17, 0xFF	; 255
    22f4:	ce 01       	movw	r24, r28
    22f6:	05 96       	adiw	r24, 0x05	; 5
    22f8:	b8 01       	movw	r22, r16
    22fa:	0e 94 3e 14 	call	0x287c	; 0x287c <__unpack_f>
    22fe:	89 85       	ldd	r24, Y+9	; 0x09
    2300:	82 30       	cpi	r24, 0x02	; 2
    2302:	40 f0       	brcs	.+16     	; 0x2314 <__gtsf2+0x56>
    2304:	89 89       	ldd	r24, Y+17	; 0x11
    2306:	82 30       	cpi	r24, 0x02	; 2
    2308:	28 f0       	brcs	.+10     	; 0x2314 <__gtsf2+0x56>
    230a:	c7 01       	movw	r24, r14
    230c:	b8 01       	movw	r22, r16
    230e:	0e 94 b6 14 	call	0x296c	; 0x296c <__fpcmp_parts_f>
    2312:	01 c0       	rjmp	.+2      	; 0x2316 <__gtsf2+0x58>
    2314:	8f ef       	ldi	r24, 0xFF	; 255
    2316:	68 96       	adiw	r28, 0x18	; 24
    2318:	e6 e0       	ldi	r30, 0x06	; 6
    231a:	0c 94 4b 15 	jmp	0x2a96	; 0x2a96 <__epilogue_restores__+0x18>

0000231e <__gesf2>:
    231e:	a8 e1       	ldi	r26, 0x18	; 24
    2320:	b0 e0       	ldi	r27, 0x00	; 0
    2322:	e5 e9       	ldi	r30, 0x95	; 149
    2324:	f1 e1       	ldi	r31, 0x11	; 17
    2326:	0c 94 2f 15 	jmp	0x2a5e	; 0x2a5e <__prologue_saves__+0x18>
    232a:	69 83       	std	Y+1, r22	; 0x01
    232c:	7a 83       	std	Y+2, r23	; 0x02
    232e:	8b 83       	std	Y+3, r24	; 0x03
    2330:	9c 83       	std	Y+4, r25	; 0x04
    2332:	2d 83       	std	Y+5, r18	; 0x05
    2334:	3e 83       	std	Y+6, r19	; 0x06
    2336:	4f 83       	std	Y+7, r20	; 0x07
    2338:	58 87       	std	Y+8, r21	; 0x08
    233a:	89 e0       	ldi	r24, 0x09	; 9
    233c:	e8 2e       	mov	r14, r24
    233e:	f1 2c       	mov	r15, r1
    2340:	ec 0e       	add	r14, r28
    2342:	fd 1e       	adc	r15, r29
    2344:	ce 01       	movw	r24, r28
    2346:	01 96       	adiw	r24, 0x01	; 1
    2348:	b7 01       	movw	r22, r14
    234a:	0e 94 3e 14 	call	0x287c	; 0x287c <__unpack_f>
    234e:	8e 01       	movw	r16, r28
    2350:	0f 5e       	subi	r16, 0xEF	; 239
    2352:	1f 4f       	sbci	r17, 0xFF	; 255
    2354:	ce 01       	movw	r24, r28
    2356:	05 96       	adiw	r24, 0x05	; 5
    2358:	b8 01       	movw	r22, r16
    235a:	0e 94 3e 14 	call	0x287c	; 0x287c <__unpack_f>
    235e:	89 85       	ldd	r24, Y+9	; 0x09
    2360:	82 30       	cpi	r24, 0x02	; 2
    2362:	40 f0       	brcs	.+16     	; 0x2374 <__gesf2+0x56>
    2364:	89 89       	ldd	r24, Y+17	; 0x11
    2366:	82 30       	cpi	r24, 0x02	; 2
    2368:	28 f0       	brcs	.+10     	; 0x2374 <__gesf2+0x56>
    236a:	c7 01       	movw	r24, r14
    236c:	b8 01       	movw	r22, r16
    236e:	0e 94 b6 14 	call	0x296c	; 0x296c <__fpcmp_parts_f>
    2372:	01 c0       	rjmp	.+2      	; 0x2376 <__gesf2+0x58>
    2374:	8f ef       	ldi	r24, 0xFF	; 255
    2376:	68 96       	adiw	r28, 0x18	; 24
    2378:	e6 e0       	ldi	r30, 0x06	; 6
    237a:	0c 94 4b 15 	jmp	0x2a96	; 0x2a96 <__epilogue_restores__+0x18>

0000237e <__ltsf2>:
    237e:	a8 e1       	ldi	r26, 0x18	; 24
    2380:	b0 e0       	ldi	r27, 0x00	; 0
    2382:	e5 ec       	ldi	r30, 0xC5	; 197
    2384:	f1 e1       	ldi	r31, 0x11	; 17
    2386:	0c 94 2f 15 	jmp	0x2a5e	; 0x2a5e <__prologue_saves__+0x18>
    238a:	69 83       	std	Y+1, r22	; 0x01
    238c:	7a 83       	std	Y+2, r23	; 0x02
    238e:	8b 83       	std	Y+3, r24	; 0x03
    2390:	9c 83       	std	Y+4, r25	; 0x04
    2392:	2d 83       	std	Y+5, r18	; 0x05
    2394:	3e 83       	std	Y+6, r19	; 0x06
    2396:	4f 83       	std	Y+7, r20	; 0x07
    2398:	58 87       	std	Y+8, r21	; 0x08
    239a:	89 e0       	ldi	r24, 0x09	; 9
    239c:	e8 2e       	mov	r14, r24
    239e:	f1 2c       	mov	r15, r1
    23a0:	ec 0e       	add	r14, r28
    23a2:	fd 1e       	adc	r15, r29
    23a4:	ce 01       	movw	r24, r28
    23a6:	01 96       	adiw	r24, 0x01	; 1
    23a8:	b7 01       	movw	r22, r14
    23aa:	0e 94 3e 14 	call	0x287c	; 0x287c <__unpack_f>
    23ae:	8e 01       	movw	r16, r28
    23b0:	0f 5e       	subi	r16, 0xEF	; 239
    23b2:	1f 4f       	sbci	r17, 0xFF	; 255
    23b4:	ce 01       	movw	r24, r28
    23b6:	05 96       	adiw	r24, 0x05	; 5
    23b8:	b8 01       	movw	r22, r16
    23ba:	0e 94 3e 14 	call	0x287c	; 0x287c <__unpack_f>
    23be:	89 85       	ldd	r24, Y+9	; 0x09
    23c0:	82 30       	cpi	r24, 0x02	; 2
    23c2:	40 f0       	brcs	.+16     	; 0x23d4 <__ltsf2+0x56>
    23c4:	89 89       	ldd	r24, Y+17	; 0x11
    23c6:	82 30       	cpi	r24, 0x02	; 2
    23c8:	28 f0       	brcs	.+10     	; 0x23d4 <__ltsf2+0x56>
    23ca:	c7 01       	movw	r24, r14
    23cc:	b8 01       	movw	r22, r16
    23ce:	0e 94 b6 14 	call	0x296c	; 0x296c <__fpcmp_parts_f>
    23d2:	01 c0       	rjmp	.+2      	; 0x23d6 <__ltsf2+0x58>
    23d4:	81 e0       	ldi	r24, 0x01	; 1
    23d6:	68 96       	adiw	r28, 0x18	; 24
    23d8:	e6 e0       	ldi	r30, 0x06	; 6
    23da:	0c 94 4b 15 	jmp	0x2a96	; 0x2a96 <__epilogue_restores__+0x18>

000023de <__floatsisf>:
    23de:	a8 e0       	ldi	r26, 0x08	; 8
    23e0:	b0 e0       	ldi	r27, 0x00	; 0
    23e2:	e5 ef       	ldi	r30, 0xF5	; 245
    23e4:	f1 e1       	ldi	r31, 0x11	; 17
    23e6:	0c 94 2c 15 	jmp	0x2a58	; 0x2a58 <__prologue_saves__+0x12>
    23ea:	9b 01       	movw	r18, r22
    23ec:	ac 01       	movw	r20, r24
    23ee:	83 e0       	ldi	r24, 0x03	; 3
    23f0:	89 83       	std	Y+1, r24	; 0x01
    23f2:	da 01       	movw	r26, r20
    23f4:	c9 01       	movw	r24, r18
    23f6:	88 27       	eor	r24, r24
    23f8:	b7 fd       	sbrc	r27, 7
    23fa:	83 95       	inc	r24
    23fc:	99 27       	eor	r25, r25
    23fe:	aa 27       	eor	r26, r26
    2400:	bb 27       	eor	r27, r27
    2402:	b8 2e       	mov	r11, r24
    2404:	21 15       	cp	r18, r1
    2406:	31 05       	cpc	r19, r1
    2408:	41 05       	cpc	r20, r1
    240a:	51 05       	cpc	r21, r1
    240c:	19 f4       	brne	.+6      	; 0x2414 <__floatsisf+0x36>
    240e:	82 e0       	ldi	r24, 0x02	; 2
    2410:	89 83       	std	Y+1, r24	; 0x01
    2412:	3a c0       	rjmp	.+116    	; 0x2488 <__floatsisf+0xaa>
    2414:	88 23       	and	r24, r24
    2416:	a9 f0       	breq	.+42     	; 0x2442 <__floatsisf+0x64>
    2418:	20 30       	cpi	r18, 0x00	; 0
    241a:	80 e0       	ldi	r24, 0x00	; 0
    241c:	38 07       	cpc	r19, r24
    241e:	80 e0       	ldi	r24, 0x00	; 0
    2420:	48 07       	cpc	r20, r24
    2422:	80 e8       	ldi	r24, 0x80	; 128
    2424:	58 07       	cpc	r21, r24
    2426:	29 f4       	brne	.+10     	; 0x2432 <__floatsisf+0x54>
    2428:	60 e0       	ldi	r22, 0x00	; 0
    242a:	70 e0       	ldi	r23, 0x00	; 0
    242c:	80 e0       	ldi	r24, 0x00	; 0
    242e:	9f ec       	ldi	r25, 0xCF	; 207
    2430:	30 c0       	rjmp	.+96     	; 0x2492 <__floatsisf+0xb4>
    2432:	ee 24       	eor	r14, r14
    2434:	ff 24       	eor	r15, r15
    2436:	87 01       	movw	r16, r14
    2438:	e2 1a       	sub	r14, r18
    243a:	f3 0a       	sbc	r15, r19
    243c:	04 0b       	sbc	r16, r20
    243e:	15 0b       	sbc	r17, r21
    2440:	02 c0       	rjmp	.+4      	; 0x2446 <__floatsisf+0x68>
    2442:	79 01       	movw	r14, r18
    2444:	8a 01       	movw	r16, r20
    2446:	8e e1       	ldi	r24, 0x1E	; 30
    2448:	c8 2e       	mov	r12, r24
    244a:	d1 2c       	mov	r13, r1
    244c:	dc 82       	std	Y+4, r13	; 0x04
    244e:	cb 82       	std	Y+3, r12	; 0x03
    2450:	ed 82       	std	Y+5, r14	; 0x05
    2452:	fe 82       	std	Y+6, r15	; 0x06
    2454:	0f 83       	std	Y+7, r16	; 0x07
    2456:	18 87       	std	Y+8, r17	; 0x08
    2458:	c8 01       	movw	r24, r16
    245a:	b7 01       	movw	r22, r14
    245c:	0e 94 1a 13 	call	0x2634	; 0x2634 <__clzsi2>
    2460:	01 97       	sbiw	r24, 0x01	; 1
    2462:	18 16       	cp	r1, r24
    2464:	19 06       	cpc	r1, r25
    2466:	84 f4       	brge	.+32     	; 0x2488 <__floatsisf+0xaa>
    2468:	08 2e       	mov	r0, r24
    246a:	04 c0       	rjmp	.+8      	; 0x2474 <__floatsisf+0x96>
    246c:	ee 0c       	add	r14, r14
    246e:	ff 1c       	adc	r15, r15
    2470:	00 1f       	adc	r16, r16
    2472:	11 1f       	adc	r17, r17
    2474:	0a 94       	dec	r0
    2476:	d2 f7       	brpl	.-12     	; 0x246c <__floatsisf+0x8e>
    2478:	ed 82       	std	Y+5, r14	; 0x05
    247a:	fe 82       	std	Y+6, r15	; 0x06
    247c:	0f 83       	std	Y+7, r16	; 0x07
    247e:	18 87       	std	Y+8, r17	; 0x08
    2480:	c8 1a       	sub	r12, r24
    2482:	d9 0a       	sbc	r13, r25
    2484:	dc 82       	std	Y+4, r13	; 0x04
    2486:	cb 82       	std	Y+3, r12	; 0x03
    2488:	ba 82       	std	Y+2, r11	; 0x02
    248a:	ce 01       	movw	r24, r28
    248c:	01 96       	adiw	r24, 0x01	; 1
    248e:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__pack_f>
    2492:	28 96       	adiw	r28, 0x08	; 8
    2494:	e9 e0       	ldi	r30, 0x09	; 9
    2496:	0c 94 48 15 	jmp	0x2a90	; 0x2a90 <__epilogue_restores__+0x12>

0000249a <__fixsfsi>:
    249a:	ac e0       	ldi	r26, 0x0C	; 12
    249c:	b0 e0       	ldi	r27, 0x00	; 0
    249e:	e3 e5       	ldi	r30, 0x53	; 83
    24a0:	f2 e1       	ldi	r31, 0x12	; 18
    24a2:	0c 94 33 15 	jmp	0x2a66	; 0x2a66 <__prologue_saves__+0x20>
    24a6:	69 83       	std	Y+1, r22	; 0x01
    24a8:	7a 83       	std	Y+2, r23	; 0x02
    24aa:	8b 83       	std	Y+3, r24	; 0x03
    24ac:	9c 83       	std	Y+4, r25	; 0x04
    24ae:	ce 01       	movw	r24, r28
    24b0:	01 96       	adiw	r24, 0x01	; 1
    24b2:	be 01       	movw	r22, r28
    24b4:	6b 5f       	subi	r22, 0xFB	; 251
    24b6:	7f 4f       	sbci	r23, 0xFF	; 255
    24b8:	0e 94 3e 14 	call	0x287c	; 0x287c <__unpack_f>
    24bc:	8d 81       	ldd	r24, Y+5	; 0x05
    24be:	82 30       	cpi	r24, 0x02	; 2
    24c0:	61 f1       	breq	.+88     	; 0x251a <__fixsfsi+0x80>
    24c2:	82 30       	cpi	r24, 0x02	; 2
    24c4:	50 f1       	brcs	.+84     	; 0x251a <__fixsfsi+0x80>
    24c6:	84 30       	cpi	r24, 0x04	; 4
    24c8:	21 f4       	brne	.+8      	; 0x24d2 <__fixsfsi+0x38>
    24ca:	8e 81       	ldd	r24, Y+6	; 0x06
    24cc:	88 23       	and	r24, r24
    24ce:	51 f1       	breq	.+84     	; 0x2524 <__fixsfsi+0x8a>
    24d0:	2e c0       	rjmp	.+92     	; 0x252e <__fixsfsi+0x94>
    24d2:	2f 81       	ldd	r18, Y+7	; 0x07
    24d4:	38 85       	ldd	r19, Y+8	; 0x08
    24d6:	37 fd       	sbrc	r19, 7
    24d8:	20 c0       	rjmp	.+64     	; 0x251a <__fixsfsi+0x80>
    24da:	6e 81       	ldd	r22, Y+6	; 0x06
    24dc:	2f 31       	cpi	r18, 0x1F	; 31
    24de:	31 05       	cpc	r19, r1
    24e0:	1c f0       	brlt	.+6      	; 0x24e8 <__fixsfsi+0x4e>
    24e2:	66 23       	and	r22, r22
    24e4:	f9 f0       	breq	.+62     	; 0x2524 <__fixsfsi+0x8a>
    24e6:	23 c0       	rjmp	.+70     	; 0x252e <__fixsfsi+0x94>
    24e8:	8e e1       	ldi	r24, 0x1E	; 30
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	82 1b       	sub	r24, r18
    24ee:	93 0b       	sbc	r25, r19
    24f0:	29 85       	ldd	r18, Y+9	; 0x09
    24f2:	3a 85       	ldd	r19, Y+10	; 0x0a
    24f4:	4b 85       	ldd	r20, Y+11	; 0x0b
    24f6:	5c 85       	ldd	r21, Y+12	; 0x0c
    24f8:	04 c0       	rjmp	.+8      	; 0x2502 <__fixsfsi+0x68>
    24fa:	56 95       	lsr	r21
    24fc:	47 95       	ror	r20
    24fe:	37 95       	ror	r19
    2500:	27 95       	ror	r18
    2502:	8a 95       	dec	r24
    2504:	d2 f7       	brpl	.-12     	; 0x24fa <__fixsfsi+0x60>
    2506:	66 23       	and	r22, r22
    2508:	b1 f0       	breq	.+44     	; 0x2536 <__fixsfsi+0x9c>
    250a:	50 95       	com	r21
    250c:	40 95       	com	r20
    250e:	30 95       	com	r19
    2510:	21 95       	neg	r18
    2512:	3f 4f       	sbci	r19, 0xFF	; 255
    2514:	4f 4f       	sbci	r20, 0xFF	; 255
    2516:	5f 4f       	sbci	r21, 0xFF	; 255
    2518:	0e c0       	rjmp	.+28     	; 0x2536 <__fixsfsi+0x9c>
    251a:	20 e0       	ldi	r18, 0x00	; 0
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	40 e0       	ldi	r20, 0x00	; 0
    2520:	50 e0       	ldi	r21, 0x00	; 0
    2522:	09 c0       	rjmp	.+18     	; 0x2536 <__fixsfsi+0x9c>
    2524:	2f ef       	ldi	r18, 0xFF	; 255
    2526:	3f ef       	ldi	r19, 0xFF	; 255
    2528:	4f ef       	ldi	r20, 0xFF	; 255
    252a:	5f e7       	ldi	r21, 0x7F	; 127
    252c:	04 c0       	rjmp	.+8      	; 0x2536 <__fixsfsi+0x9c>
    252e:	20 e0       	ldi	r18, 0x00	; 0
    2530:	30 e0       	ldi	r19, 0x00	; 0
    2532:	40 e0       	ldi	r20, 0x00	; 0
    2534:	50 e8       	ldi	r21, 0x80	; 128
    2536:	b9 01       	movw	r22, r18
    2538:	ca 01       	movw	r24, r20
    253a:	2c 96       	adiw	r28, 0x0c	; 12
    253c:	e2 e0       	ldi	r30, 0x02	; 2
    253e:	0c 94 4f 15 	jmp	0x2a9e	; 0x2a9e <__epilogue_restores__+0x20>

00002542 <__floatunsisf>:
    2542:	a8 e0       	ldi	r26, 0x08	; 8
    2544:	b0 e0       	ldi	r27, 0x00	; 0
    2546:	e7 ea       	ldi	r30, 0xA7	; 167
    2548:	f2 e1       	ldi	r31, 0x12	; 18
    254a:	0c 94 2b 15 	jmp	0x2a56	; 0x2a56 <__prologue_saves__+0x10>
    254e:	7b 01       	movw	r14, r22
    2550:	8c 01       	movw	r16, r24
    2552:	61 15       	cp	r22, r1
    2554:	71 05       	cpc	r23, r1
    2556:	81 05       	cpc	r24, r1
    2558:	91 05       	cpc	r25, r1
    255a:	19 f4       	brne	.+6      	; 0x2562 <__floatunsisf+0x20>
    255c:	82 e0       	ldi	r24, 0x02	; 2
    255e:	89 83       	std	Y+1, r24	; 0x01
    2560:	60 c0       	rjmp	.+192    	; 0x2622 <__floatunsisf+0xe0>
    2562:	83 e0       	ldi	r24, 0x03	; 3
    2564:	89 83       	std	Y+1, r24	; 0x01
    2566:	8e e1       	ldi	r24, 0x1E	; 30
    2568:	c8 2e       	mov	r12, r24
    256a:	d1 2c       	mov	r13, r1
    256c:	dc 82       	std	Y+4, r13	; 0x04
    256e:	cb 82       	std	Y+3, r12	; 0x03
    2570:	ed 82       	std	Y+5, r14	; 0x05
    2572:	fe 82       	std	Y+6, r15	; 0x06
    2574:	0f 83       	std	Y+7, r16	; 0x07
    2576:	18 87       	std	Y+8, r17	; 0x08
    2578:	c8 01       	movw	r24, r16
    257a:	b7 01       	movw	r22, r14
    257c:	0e 94 1a 13 	call	0x2634	; 0x2634 <__clzsi2>
    2580:	fc 01       	movw	r30, r24
    2582:	31 97       	sbiw	r30, 0x01	; 1
    2584:	f7 ff       	sbrs	r31, 7
    2586:	3b c0       	rjmp	.+118    	; 0x25fe <__floatunsisf+0xbc>
    2588:	22 27       	eor	r18, r18
    258a:	33 27       	eor	r19, r19
    258c:	2e 1b       	sub	r18, r30
    258e:	3f 0b       	sbc	r19, r31
    2590:	57 01       	movw	r10, r14
    2592:	68 01       	movw	r12, r16
    2594:	02 2e       	mov	r0, r18
    2596:	04 c0       	rjmp	.+8      	; 0x25a0 <__floatunsisf+0x5e>
    2598:	d6 94       	lsr	r13
    259a:	c7 94       	ror	r12
    259c:	b7 94       	ror	r11
    259e:	a7 94       	ror	r10
    25a0:	0a 94       	dec	r0
    25a2:	d2 f7       	brpl	.-12     	; 0x2598 <__floatunsisf+0x56>
    25a4:	40 e0       	ldi	r20, 0x00	; 0
    25a6:	50 e0       	ldi	r21, 0x00	; 0
    25a8:	60 e0       	ldi	r22, 0x00	; 0
    25aa:	70 e0       	ldi	r23, 0x00	; 0
    25ac:	81 e0       	ldi	r24, 0x01	; 1
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	a0 e0       	ldi	r26, 0x00	; 0
    25b2:	b0 e0       	ldi	r27, 0x00	; 0
    25b4:	04 c0       	rjmp	.+8      	; 0x25be <__floatunsisf+0x7c>
    25b6:	88 0f       	add	r24, r24
    25b8:	99 1f       	adc	r25, r25
    25ba:	aa 1f       	adc	r26, r26
    25bc:	bb 1f       	adc	r27, r27
    25be:	2a 95       	dec	r18
    25c0:	d2 f7       	brpl	.-12     	; 0x25b6 <__floatunsisf+0x74>
    25c2:	01 97       	sbiw	r24, 0x01	; 1
    25c4:	a1 09       	sbc	r26, r1
    25c6:	b1 09       	sbc	r27, r1
    25c8:	8e 21       	and	r24, r14
    25ca:	9f 21       	and	r25, r15
    25cc:	a0 23       	and	r26, r16
    25ce:	b1 23       	and	r27, r17
    25d0:	00 97       	sbiw	r24, 0x00	; 0
    25d2:	a1 05       	cpc	r26, r1
    25d4:	b1 05       	cpc	r27, r1
    25d6:	21 f0       	breq	.+8      	; 0x25e0 <__floatunsisf+0x9e>
    25d8:	41 e0       	ldi	r20, 0x01	; 1
    25da:	50 e0       	ldi	r21, 0x00	; 0
    25dc:	60 e0       	ldi	r22, 0x00	; 0
    25de:	70 e0       	ldi	r23, 0x00	; 0
    25e0:	4a 29       	or	r20, r10
    25e2:	5b 29       	or	r21, r11
    25e4:	6c 29       	or	r22, r12
    25e6:	7d 29       	or	r23, r13
    25e8:	4d 83       	std	Y+5, r20	; 0x05
    25ea:	5e 83       	std	Y+6, r21	; 0x06
    25ec:	6f 83       	std	Y+7, r22	; 0x07
    25ee:	78 87       	std	Y+8, r23	; 0x08
    25f0:	8e e1       	ldi	r24, 0x1E	; 30
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	8e 1b       	sub	r24, r30
    25f6:	9f 0b       	sbc	r25, r31
    25f8:	9c 83       	std	Y+4, r25	; 0x04
    25fa:	8b 83       	std	Y+3, r24	; 0x03
    25fc:	12 c0       	rjmp	.+36     	; 0x2622 <__floatunsisf+0xe0>
    25fe:	30 97       	sbiw	r30, 0x00	; 0
    2600:	81 f0       	breq	.+32     	; 0x2622 <__floatunsisf+0xe0>
    2602:	0e 2e       	mov	r0, r30
    2604:	04 c0       	rjmp	.+8      	; 0x260e <__floatunsisf+0xcc>
    2606:	ee 0c       	add	r14, r14
    2608:	ff 1c       	adc	r15, r15
    260a:	00 1f       	adc	r16, r16
    260c:	11 1f       	adc	r17, r17
    260e:	0a 94       	dec	r0
    2610:	d2 f7       	brpl	.-12     	; 0x2606 <__floatunsisf+0xc4>
    2612:	ed 82       	std	Y+5, r14	; 0x05
    2614:	fe 82       	std	Y+6, r15	; 0x06
    2616:	0f 83       	std	Y+7, r16	; 0x07
    2618:	18 87       	std	Y+8, r17	; 0x08
    261a:	ce 1a       	sub	r12, r30
    261c:	df 0a       	sbc	r13, r31
    261e:	dc 82       	std	Y+4, r13	; 0x04
    2620:	cb 82       	std	Y+3, r12	; 0x03
    2622:	1a 82       	std	Y+2, r1	; 0x02
    2624:	ce 01       	movw	r24, r28
    2626:	01 96       	adiw	r24, 0x01	; 1
    2628:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__pack_f>
    262c:	28 96       	adiw	r28, 0x08	; 8
    262e:	ea e0       	ldi	r30, 0x0A	; 10
    2630:	0c 94 47 15 	jmp	0x2a8e	; 0x2a8e <__epilogue_restores__+0x10>

00002634 <__clzsi2>:
    2634:	ef 92       	push	r14
    2636:	ff 92       	push	r15
    2638:	0f 93       	push	r16
    263a:	1f 93       	push	r17
    263c:	7b 01       	movw	r14, r22
    263e:	8c 01       	movw	r16, r24
    2640:	80 e0       	ldi	r24, 0x00	; 0
    2642:	e8 16       	cp	r14, r24
    2644:	80 e0       	ldi	r24, 0x00	; 0
    2646:	f8 06       	cpc	r15, r24
    2648:	81 e0       	ldi	r24, 0x01	; 1
    264a:	08 07       	cpc	r16, r24
    264c:	80 e0       	ldi	r24, 0x00	; 0
    264e:	18 07       	cpc	r17, r24
    2650:	88 f4       	brcc	.+34     	; 0x2674 <__clzsi2+0x40>
    2652:	8f ef       	ldi	r24, 0xFF	; 255
    2654:	e8 16       	cp	r14, r24
    2656:	f1 04       	cpc	r15, r1
    2658:	01 05       	cpc	r16, r1
    265a:	11 05       	cpc	r17, r1
    265c:	31 f0       	breq	.+12     	; 0x266a <__clzsi2+0x36>
    265e:	28 f0       	brcs	.+10     	; 0x266a <__clzsi2+0x36>
    2660:	88 e0       	ldi	r24, 0x08	; 8
    2662:	90 e0       	ldi	r25, 0x00	; 0
    2664:	a0 e0       	ldi	r26, 0x00	; 0
    2666:	b0 e0       	ldi	r27, 0x00	; 0
    2668:	17 c0       	rjmp	.+46     	; 0x2698 <__clzsi2+0x64>
    266a:	80 e0       	ldi	r24, 0x00	; 0
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	a0 e0       	ldi	r26, 0x00	; 0
    2670:	b0 e0       	ldi	r27, 0x00	; 0
    2672:	12 c0       	rjmp	.+36     	; 0x2698 <__clzsi2+0x64>
    2674:	80 e0       	ldi	r24, 0x00	; 0
    2676:	e8 16       	cp	r14, r24
    2678:	80 e0       	ldi	r24, 0x00	; 0
    267a:	f8 06       	cpc	r15, r24
    267c:	80 e0       	ldi	r24, 0x00	; 0
    267e:	08 07       	cpc	r16, r24
    2680:	81 e0       	ldi	r24, 0x01	; 1
    2682:	18 07       	cpc	r17, r24
    2684:	28 f0       	brcs	.+10     	; 0x2690 <__clzsi2+0x5c>
    2686:	88 e1       	ldi	r24, 0x18	; 24
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	a0 e0       	ldi	r26, 0x00	; 0
    268c:	b0 e0       	ldi	r27, 0x00	; 0
    268e:	04 c0       	rjmp	.+8      	; 0x2698 <__clzsi2+0x64>
    2690:	80 e1       	ldi	r24, 0x10	; 16
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	a0 e0       	ldi	r26, 0x00	; 0
    2696:	b0 e0       	ldi	r27, 0x00	; 0
    2698:	20 e2       	ldi	r18, 0x20	; 32
    269a:	30 e0       	ldi	r19, 0x00	; 0
    269c:	40 e0       	ldi	r20, 0x00	; 0
    269e:	50 e0       	ldi	r21, 0x00	; 0
    26a0:	28 1b       	sub	r18, r24
    26a2:	39 0b       	sbc	r19, r25
    26a4:	4a 0b       	sbc	r20, r26
    26a6:	5b 0b       	sbc	r21, r27
    26a8:	04 c0       	rjmp	.+8      	; 0x26b2 <__clzsi2+0x7e>
    26aa:	16 95       	lsr	r17
    26ac:	07 95       	ror	r16
    26ae:	f7 94       	ror	r15
    26b0:	e7 94       	ror	r14
    26b2:	8a 95       	dec	r24
    26b4:	d2 f7       	brpl	.-12     	; 0x26aa <__clzsi2+0x76>
    26b6:	f7 01       	movw	r30, r14
    26b8:	e1 5f       	subi	r30, 0xF1	; 241
    26ba:	fd 4f       	sbci	r31, 0xFD	; 253
    26bc:	80 81       	ld	r24, Z
    26be:	28 1b       	sub	r18, r24
    26c0:	31 09       	sbc	r19, r1
    26c2:	41 09       	sbc	r20, r1
    26c4:	51 09       	sbc	r21, r1
    26c6:	c9 01       	movw	r24, r18
    26c8:	1f 91       	pop	r17
    26ca:	0f 91       	pop	r16
    26cc:	ff 90       	pop	r15
    26ce:	ef 90       	pop	r14
    26d0:	08 95       	ret

000026d2 <__pack_f>:
    26d2:	df 92       	push	r13
    26d4:	ef 92       	push	r14
    26d6:	ff 92       	push	r15
    26d8:	0f 93       	push	r16
    26da:	1f 93       	push	r17
    26dc:	fc 01       	movw	r30, r24
    26de:	e4 80       	ldd	r14, Z+4	; 0x04
    26e0:	f5 80       	ldd	r15, Z+5	; 0x05
    26e2:	06 81       	ldd	r16, Z+6	; 0x06
    26e4:	17 81       	ldd	r17, Z+7	; 0x07
    26e6:	d1 80       	ldd	r13, Z+1	; 0x01
    26e8:	80 81       	ld	r24, Z
    26ea:	82 30       	cpi	r24, 0x02	; 2
    26ec:	48 f4       	brcc	.+18     	; 0x2700 <__pack_f+0x2e>
    26ee:	80 e0       	ldi	r24, 0x00	; 0
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	a0 e1       	ldi	r26, 0x10	; 16
    26f4:	b0 e0       	ldi	r27, 0x00	; 0
    26f6:	e8 2a       	or	r14, r24
    26f8:	f9 2a       	or	r15, r25
    26fa:	0a 2b       	or	r16, r26
    26fc:	1b 2b       	or	r17, r27
    26fe:	a5 c0       	rjmp	.+330    	; 0x284a <__pack_f+0x178>
    2700:	84 30       	cpi	r24, 0x04	; 4
    2702:	09 f4       	brne	.+2      	; 0x2706 <__pack_f+0x34>
    2704:	9f c0       	rjmp	.+318    	; 0x2844 <__pack_f+0x172>
    2706:	82 30       	cpi	r24, 0x02	; 2
    2708:	21 f4       	brne	.+8      	; 0x2712 <__pack_f+0x40>
    270a:	ee 24       	eor	r14, r14
    270c:	ff 24       	eor	r15, r15
    270e:	87 01       	movw	r16, r14
    2710:	05 c0       	rjmp	.+10     	; 0x271c <__pack_f+0x4a>
    2712:	e1 14       	cp	r14, r1
    2714:	f1 04       	cpc	r15, r1
    2716:	01 05       	cpc	r16, r1
    2718:	11 05       	cpc	r17, r1
    271a:	19 f4       	brne	.+6      	; 0x2722 <__pack_f+0x50>
    271c:	e0 e0       	ldi	r30, 0x00	; 0
    271e:	f0 e0       	ldi	r31, 0x00	; 0
    2720:	96 c0       	rjmp	.+300    	; 0x284e <__pack_f+0x17c>
    2722:	62 81       	ldd	r22, Z+2	; 0x02
    2724:	73 81       	ldd	r23, Z+3	; 0x03
    2726:	9f ef       	ldi	r25, 0xFF	; 255
    2728:	62 38       	cpi	r22, 0x82	; 130
    272a:	79 07       	cpc	r23, r25
    272c:	0c f0       	brlt	.+2      	; 0x2730 <__pack_f+0x5e>
    272e:	5b c0       	rjmp	.+182    	; 0x27e6 <__pack_f+0x114>
    2730:	22 e8       	ldi	r18, 0x82	; 130
    2732:	3f ef       	ldi	r19, 0xFF	; 255
    2734:	26 1b       	sub	r18, r22
    2736:	37 0b       	sbc	r19, r23
    2738:	2a 31       	cpi	r18, 0x1A	; 26
    273a:	31 05       	cpc	r19, r1
    273c:	2c f0       	brlt	.+10     	; 0x2748 <__pack_f+0x76>
    273e:	20 e0       	ldi	r18, 0x00	; 0
    2740:	30 e0       	ldi	r19, 0x00	; 0
    2742:	40 e0       	ldi	r20, 0x00	; 0
    2744:	50 e0       	ldi	r21, 0x00	; 0
    2746:	2a c0       	rjmp	.+84     	; 0x279c <__pack_f+0xca>
    2748:	b8 01       	movw	r22, r16
    274a:	a7 01       	movw	r20, r14
    274c:	02 2e       	mov	r0, r18
    274e:	04 c0       	rjmp	.+8      	; 0x2758 <__pack_f+0x86>
    2750:	76 95       	lsr	r23
    2752:	67 95       	ror	r22
    2754:	57 95       	ror	r21
    2756:	47 95       	ror	r20
    2758:	0a 94       	dec	r0
    275a:	d2 f7       	brpl	.-12     	; 0x2750 <__pack_f+0x7e>
    275c:	81 e0       	ldi	r24, 0x01	; 1
    275e:	90 e0       	ldi	r25, 0x00	; 0
    2760:	a0 e0       	ldi	r26, 0x00	; 0
    2762:	b0 e0       	ldi	r27, 0x00	; 0
    2764:	04 c0       	rjmp	.+8      	; 0x276e <__pack_f+0x9c>
    2766:	88 0f       	add	r24, r24
    2768:	99 1f       	adc	r25, r25
    276a:	aa 1f       	adc	r26, r26
    276c:	bb 1f       	adc	r27, r27
    276e:	2a 95       	dec	r18
    2770:	d2 f7       	brpl	.-12     	; 0x2766 <__pack_f+0x94>
    2772:	01 97       	sbiw	r24, 0x01	; 1
    2774:	a1 09       	sbc	r26, r1
    2776:	b1 09       	sbc	r27, r1
    2778:	8e 21       	and	r24, r14
    277a:	9f 21       	and	r25, r15
    277c:	a0 23       	and	r26, r16
    277e:	b1 23       	and	r27, r17
    2780:	00 97       	sbiw	r24, 0x00	; 0
    2782:	a1 05       	cpc	r26, r1
    2784:	b1 05       	cpc	r27, r1
    2786:	21 f0       	breq	.+8      	; 0x2790 <__pack_f+0xbe>
    2788:	81 e0       	ldi	r24, 0x01	; 1
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	a0 e0       	ldi	r26, 0x00	; 0
    278e:	b0 e0       	ldi	r27, 0x00	; 0
    2790:	9a 01       	movw	r18, r20
    2792:	ab 01       	movw	r20, r22
    2794:	28 2b       	or	r18, r24
    2796:	39 2b       	or	r19, r25
    2798:	4a 2b       	or	r20, r26
    279a:	5b 2b       	or	r21, r27
    279c:	da 01       	movw	r26, r20
    279e:	c9 01       	movw	r24, r18
    27a0:	8f 77       	andi	r24, 0x7F	; 127
    27a2:	90 70       	andi	r25, 0x00	; 0
    27a4:	a0 70       	andi	r26, 0x00	; 0
    27a6:	b0 70       	andi	r27, 0x00	; 0
    27a8:	80 34       	cpi	r24, 0x40	; 64
    27aa:	91 05       	cpc	r25, r1
    27ac:	a1 05       	cpc	r26, r1
    27ae:	b1 05       	cpc	r27, r1
    27b0:	39 f4       	brne	.+14     	; 0x27c0 <__pack_f+0xee>
    27b2:	27 ff       	sbrs	r18, 7
    27b4:	09 c0       	rjmp	.+18     	; 0x27c8 <__pack_f+0xf6>
    27b6:	20 5c       	subi	r18, 0xC0	; 192
    27b8:	3f 4f       	sbci	r19, 0xFF	; 255
    27ba:	4f 4f       	sbci	r20, 0xFF	; 255
    27bc:	5f 4f       	sbci	r21, 0xFF	; 255
    27be:	04 c0       	rjmp	.+8      	; 0x27c8 <__pack_f+0xf6>
    27c0:	21 5c       	subi	r18, 0xC1	; 193
    27c2:	3f 4f       	sbci	r19, 0xFF	; 255
    27c4:	4f 4f       	sbci	r20, 0xFF	; 255
    27c6:	5f 4f       	sbci	r21, 0xFF	; 255
    27c8:	e0 e0       	ldi	r30, 0x00	; 0
    27ca:	f0 e0       	ldi	r31, 0x00	; 0
    27cc:	20 30       	cpi	r18, 0x00	; 0
    27ce:	a0 e0       	ldi	r26, 0x00	; 0
    27d0:	3a 07       	cpc	r19, r26
    27d2:	a0 e0       	ldi	r26, 0x00	; 0
    27d4:	4a 07       	cpc	r20, r26
    27d6:	a0 e4       	ldi	r26, 0x40	; 64
    27d8:	5a 07       	cpc	r21, r26
    27da:	10 f0       	brcs	.+4      	; 0x27e0 <__pack_f+0x10e>
    27dc:	e1 e0       	ldi	r30, 0x01	; 1
    27de:	f0 e0       	ldi	r31, 0x00	; 0
    27e0:	79 01       	movw	r14, r18
    27e2:	8a 01       	movw	r16, r20
    27e4:	27 c0       	rjmp	.+78     	; 0x2834 <__pack_f+0x162>
    27e6:	60 38       	cpi	r22, 0x80	; 128
    27e8:	71 05       	cpc	r23, r1
    27ea:	64 f5       	brge	.+88     	; 0x2844 <__pack_f+0x172>
    27ec:	fb 01       	movw	r30, r22
    27ee:	e1 58       	subi	r30, 0x81	; 129
    27f0:	ff 4f       	sbci	r31, 0xFF	; 255
    27f2:	d8 01       	movw	r26, r16
    27f4:	c7 01       	movw	r24, r14
    27f6:	8f 77       	andi	r24, 0x7F	; 127
    27f8:	90 70       	andi	r25, 0x00	; 0
    27fa:	a0 70       	andi	r26, 0x00	; 0
    27fc:	b0 70       	andi	r27, 0x00	; 0
    27fe:	80 34       	cpi	r24, 0x40	; 64
    2800:	91 05       	cpc	r25, r1
    2802:	a1 05       	cpc	r26, r1
    2804:	b1 05       	cpc	r27, r1
    2806:	39 f4       	brne	.+14     	; 0x2816 <__pack_f+0x144>
    2808:	e7 fe       	sbrs	r14, 7
    280a:	0d c0       	rjmp	.+26     	; 0x2826 <__pack_f+0x154>
    280c:	80 e4       	ldi	r24, 0x40	; 64
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	a0 e0       	ldi	r26, 0x00	; 0
    2812:	b0 e0       	ldi	r27, 0x00	; 0
    2814:	04 c0       	rjmp	.+8      	; 0x281e <__pack_f+0x14c>
    2816:	8f e3       	ldi	r24, 0x3F	; 63
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	a0 e0       	ldi	r26, 0x00	; 0
    281c:	b0 e0       	ldi	r27, 0x00	; 0
    281e:	e8 0e       	add	r14, r24
    2820:	f9 1e       	adc	r15, r25
    2822:	0a 1f       	adc	r16, r26
    2824:	1b 1f       	adc	r17, r27
    2826:	17 ff       	sbrs	r17, 7
    2828:	05 c0       	rjmp	.+10     	; 0x2834 <__pack_f+0x162>
    282a:	16 95       	lsr	r17
    282c:	07 95       	ror	r16
    282e:	f7 94       	ror	r15
    2830:	e7 94       	ror	r14
    2832:	31 96       	adiw	r30, 0x01	; 1
    2834:	87 e0       	ldi	r24, 0x07	; 7
    2836:	16 95       	lsr	r17
    2838:	07 95       	ror	r16
    283a:	f7 94       	ror	r15
    283c:	e7 94       	ror	r14
    283e:	8a 95       	dec	r24
    2840:	d1 f7       	brne	.-12     	; 0x2836 <__pack_f+0x164>
    2842:	05 c0       	rjmp	.+10     	; 0x284e <__pack_f+0x17c>
    2844:	ee 24       	eor	r14, r14
    2846:	ff 24       	eor	r15, r15
    2848:	87 01       	movw	r16, r14
    284a:	ef ef       	ldi	r30, 0xFF	; 255
    284c:	f0 e0       	ldi	r31, 0x00	; 0
    284e:	6e 2f       	mov	r22, r30
    2850:	67 95       	ror	r22
    2852:	66 27       	eor	r22, r22
    2854:	67 95       	ror	r22
    2856:	90 2f       	mov	r25, r16
    2858:	9f 77       	andi	r25, 0x7F	; 127
    285a:	d7 94       	ror	r13
    285c:	dd 24       	eor	r13, r13
    285e:	d7 94       	ror	r13
    2860:	8e 2f       	mov	r24, r30
    2862:	86 95       	lsr	r24
    2864:	49 2f       	mov	r20, r25
    2866:	46 2b       	or	r20, r22
    2868:	58 2f       	mov	r21, r24
    286a:	5d 29       	or	r21, r13
    286c:	b7 01       	movw	r22, r14
    286e:	ca 01       	movw	r24, r20
    2870:	1f 91       	pop	r17
    2872:	0f 91       	pop	r16
    2874:	ff 90       	pop	r15
    2876:	ef 90       	pop	r14
    2878:	df 90       	pop	r13
    287a:	08 95       	ret

0000287c <__unpack_f>:
    287c:	fc 01       	movw	r30, r24
    287e:	db 01       	movw	r26, r22
    2880:	40 81       	ld	r20, Z
    2882:	51 81       	ldd	r21, Z+1	; 0x01
    2884:	22 81       	ldd	r18, Z+2	; 0x02
    2886:	62 2f       	mov	r22, r18
    2888:	6f 77       	andi	r22, 0x7F	; 127
    288a:	70 e0       	ldi	r23, 0x00	; 0
    288c:	22 1f       	adc	r18, r18
    288e:	22 27       	eor	r18, r18
    2890:	22 1f       	adc	r18, r18
    2892:	93 81       	ldd	r25, Z+3	; 0x03
    2894:	89 2f       	mov	r24, r25
    2896:	88 0f       	add	r24, r24
    2898:	82 2b       	or	r24, r18
    289a:	28 2f       	mov	r18, r24
    289c:	30 e0       	ldi	r19, 0x00	; 0
    289e:	99 1f       	adc	r25, r25
    28a0:	99 27       	eor	r25, r25
    28a2:	99 1f       	adc	r25, r25
    28a4:	11 96       	adiw	r26, 0x01	; 1
    28a6:	9c 93       	st	X, r25
    28a8:	11 97       	sbiw	r26, 0x01	; 1
    28aa:	21 15       	cp	r18, r1
    28ac:	31 05       	cpc	r19, r1
    28ae:	a9 f5       	brne	.+106    	; 0x291a <__unpack_f+0x9e>
    28b0:	41 15       	cp	r20, r1
    28b2:	51 05       	cpc	r21, r1
    28b4:	61 05       	cpc	r22, r1
    28b6:	71 05       	cpc	r23, r1
    28b8:	11 f4       	brne	.+4      	; 0x28be <__unpack_f+0x42>
    28ba:	82 e0       	ldi	r24, 0x02	; 2
    28bc:	37 c0       	rjmp	.+110    	; 0x292c <__unpack_f+0xb0>
    28be:	82 e8       	ldi	r24, 0x82	; 130
    28c0:	9f ef       	ldi	r25, 0xFF	; 255
    28c2:	13 96       	adiw	r26, 0x03	; 3
    28c4:	9c 93       	st	X, r25
    28c6:	8e 93       	st	-X, r24
    28c8:	12 97       	sbiw	r26, 0x02	; 2
    28ca:	9a 01       	movw	r18, r20
    28cc:	ab 01       	movw	r20, r22
    28ce:	67 e0       	ldi	r22, 0x07	; 7
    28d0:	22 0f       	add	r18, r18
    28d2:	33 1f       	adc	r19, r19
    28d4:	44 1f       	adc	r20, r20
    28d6:	55 1f       	adc	r21, r21
    28d8:	6a 95       	dec	r22
    28da:	d1 f7       	brne	.-12     	; 0x28d0 <__unpack_f+0x54>
    28dc:	83 e0       	ldi	r24, 0x03	; 3
    28de:	8c 93       	st	X, r24
    28e0:	0d c0       	rjmp	.+26     	; 0x28fc <__unpack_f+0x80>
    28e2:	22 0f       	add	r18, r18
    28e4:	33 1f       	adc	r19, r19
    28e6:	44 1f       	adc	r20, r20
    28e8:	55 1f       	adc	r21, r21
    28ea:	12 96       	adiw	r26, 0x02	; 2
    28ec:	8d 91       	ld	r24, X+
    28ee:	9c 91       	ld	r25, X
    28f0:	13 97       	sbiw	r26, 0x03	; 3
    28f2:	01 97       	sbiw	r24, 0x01	; 1
    28f4:	13 96       	adiw	r26, 0x03	; 3
    28f6:	9c 93       	st	X, r25
    28f8:	8e 93       	st	-X, r24
    28fa:	12 97       	sbiw	r26, 0x02	; 2
    28fc:	20 30       	cpi	r18, 0x00	; 0
    28fe:	80 e0       	ldi	r24, 0x00	; 0
    2900:	38 07       	cpc	r19, r24
    2902:	80 e0       	ldi	r24, 0x00	; 0
    2904:	48 07       	cpc	r20, r24
    2906:	80 e4       	ldi	r24, 0x40	; 64
    2908:	58 07       	cpc	r21, r24
    290a:	58 f3       	brcs	.-42     	; 0x28e2 <__unpack_f+0x66>
    290c:	14 96       	adiw	r26, 0x04	; 4
    290e:	2d 93       	st	X+, r18
    2910:	3d 93       	st	X+, r19
    2912:	4d 93       	st	X+, r20
    2914:	5c 93       	st	X, r21
    2916:	17 97       	sbiw	r26, 0x07	; 7
    2918:	08 95       	ret
    291a:	2f 3f       	cpi	r18, 0xFF	; 255
    291c:	31 05       	cpc	r19, r1
    291e:	79 f4       	brne	.+30     	; 0x293e <__unpack_f+0xc2>
    2920:	41 15       	cp	r20, r1
    2922:	51 05       	cpc	r21, r1
    2924:	61 05       	cpc	r22, r1
    2926:	71 05       	cpc	r23, r1
    2928:	19 f4       	brne	.+6      	; 0x2930 <__unpack_f+0xb4>
    292a:	84 e0       	ldi	r24, 0x04	; 4
    292c:	8c 93       	st	X, r24
    292e:	08 95       	ret
    2930:	64 ff       	sbrs	r22, 4
    2932:	03 c0       	rjmp	.+6      	; 0x293a <__unpack_f+0xbe>
    2934:	81 e0       	ldi	r24, 0x01	; 1
    2936:	8c 93       	st	X, r24
    2938:	12 c0       	rjmp	.+36     	; 0x295e <__unpack_f+0xe2>
    293a:	1c 92       	st	X, r1
    293c:	10 c0       	rjmp	.+32     	; 0x295e <__unpack_f+0xe2>
    293e:	2f 57       	subi	r18, 0x7F	; 127
    2940:	30 40       	sbci	r19, 0x00	; 0
    2942:	13 96       	adiw	r26, 0x03	; 3
    2944:	3c 93       	st	X, r19
    2946:	2e 93       	st	-X, r18
    2948:	12 97       	sbiw	r26, 0x02	; 2
    294a:	83 e0       	ldi	r24, 0x03	; 3
    294c:	8c 93       	st	X, r24
    294e:	87 e0       	ldi	r24, 0x07	; 7
    2950:	44 0f       	add	r20, r20
    2952:	55 1f       	adc	r21, r21
    2954:	66 1f       	adc	r22, r22
    2956:	77 1f       	adc	r23, r23
    2958:	8a 95       	dec	r24
    295a:	d1 f7       	brne	.-12     	; 0x2950 <__unpack_f+0xd4>
    295c:	70 64       	ori	r23, 0x40	; 64
    295e:	14 96       	adiw	r26, 0x04	; 4
    2960:	4d 93       	st	X+, r20
    2962:	5d 93       	st	X+, r21
    2964:	6d 93       	st	X+, r22
    2966:	7c 93       	st	X, r23
    2968:	17 97       	sbiw	r26, 0x07	; 7
    296a:	08 95       	ret

0000296c <__fpcmp_parts_f>:
    296c:	1f 93       	push	r17
    296e:	dc 01       	movw	r26, r24
    2970:	fb 01       	movw	r30, r22
    2972:	9c 91       	ld	r25, X
    2974:	92 30       	cpi	r25, 0x02	; 2
    2976:	08 f4       	brcc	.+2      	; 0x297a <__fpcmp_parts_f+0xe>
    2978:	47 c0       	rjmp	.+142    	; 0x2a08 <__fpcmp_parts_f+0x9c>
    297a:	80 81       	ld	r24, Z
    297c:	82 30       	cpi	r24, 0x02	; 2
    297e:	08 f4       	brcc	.+2      	; 0x2982 <__fpcmp_parts_f+0x16>
    2980:	43 c0       	rjmp	.+134    	; 0x2a08 <__fpcmp_parts_f+0x9c>
    2982:	94 30       	cpi	r25, 0x04	; 4
    2984:	51 f4       	brne	.+20     	; 0x299a <__fpcmp_parts_f+0x2e>
    2986:	11 96       	adiw	r26, 0x01	; 1
    2988:	1c 91       	ld	r17, X
    298a:	84 30       	cpi	r24, 0x04	; 4
    298c:	99 f5       	brne	.+102    	; 0x29f4 <__fpcmp_parts_f+0x88>
    298e:	81 81       	ldd	r24, Z+1	; 0x01
    2990:	68 2f       	mov	r22, r24
    2992:	70 e0       	ldi	r23, 0x00	; 0
    2994:	61 1b       	sub	r22, r17
    2996:	71 09       	sbc	r23, r1
    2998:	3f c0       	rjmp	.+126    	; 0x2a18 <__fpcmp_parts_f+0xac>
    299a:	84 30       	cpi	r24, 0x04	; 4
    299c:	21 f0       	breq	.+8      	; 0x29a6 <__fpcmp_parts_f+0x3a>
    299e:	92 30       	cpi	r25, 0x02	; 2
    29a0:	31 f4       	brne	.+12     	; 0x29ae <__fpcmp_parts_f+0x42>
    29a2:	82 30       	cpi	r24, 0x02	; 2
    29a4:	b9 f1       	breq	.+110    	; 0x2a14 <__fpcmp_parts_f+0xa8>
    29a6:	81 81       	ldd	r24, Z+1	; 0x01
    29a8:	88 23       	and	r24, r24
    29aa:	89 f1       	breq	.+98     	; 0x2a0e <__fpcmp_parts_f+0xa2>
    29ac:	2d c0       	rjmp	.+90     	; 0x2a08 <__fpcmp_parts_f+0x9c>
    29ae:	11 96       	adiw	r26, 0x01	; 1
    29b0:	1c 91       	ld	r17, X
    29b2:	11 97       	sbiw	r26, 0x01	; 1
    29b4:	82 30       	cpi	r24, 0x02	; 2
    29b6:	f1 f0       	breq	.+60     	; 0x29f4 <__fpcmp_parts_f+0x88>
    29b8:	81 81       	ldd	r24, Z+1	; 0x01
    29ba:	18 17       	cp	r17, r24
    29bc:	d9 f4       	brne	.+54     	; 0x29f4 <__fpcmp_parts_f+0x88>
    29be:	12 96       	adiw	r26, 0x02	; 2
    29c0:	2d 91       	ld	r18, X+
    29c2:	3c 91       	ld	r19, X
    29c4:	13 97       	sbiw	r26, 0x03	; 3
    29c6:	82 81       	ldd	r24, Z+2	; 0x02
    29c8:	93 81       	ldd	r25, Z+3	; 0x03
    29ca:	82 17       	cp	r24, r18
    29cc:	93 07       	cpc	r25, r19
    29ce:	94 f0       	brlt	.+36     	; 0x29f4 <__fpcmp_parts_f+0x88>
    29d0:	28 17       	cp	r18, r24
    29d2:	39 07       	cpc	r19, r25
    29d4:	bc f0       	brlt	.+46     	; 0x2a04 <__fpcmp_parts_f+0x98>
    29d6:	14 96       	adiw	r26, 0x04	; 4
    29d8:	8d 91       	ld	r24, X+
    29da:	9d 91       	ld	r25, X+
    29dc:	0d 90       	ld	r0, X+
    29de:	bc 91       	ld	r27, X
    29e0:	a0 2d       	mov	r26, r0
    29e2:	24 81       	ldd	r18, Z+4	; 0x04
    29e4:	35 81       	ldd	r19, Z+5	; 0x05
    29e6:	46 81       	ldd	r20, Z+6	; 0x06
    29e8:	57 81       	ldd	r21, Z+7	; 0x07
    29ea:	28 17       	cp	r18, r24
    29ec:	39 07       	cpc	r19, r25
    29ee:	4a 07       	cpc	r20, r26
    29f0:	5b 07       	cpc	r21, r27
    29f2:	18 f4       	brcc	.+6      	; 0x29fa <__fpcmp_parts_f+0x8e>
    29f4:	11 23       	and	r17, r17
    29f6:	41 f0       	breq	.+16     	; 0x2a08 <__fpcmp_parts_f+0x9c>
    29f8:	0a c0       	rjmp	.+20     	; 0x2a0e <__fpcmp_parts_f+0xa2>
    29fa:	82 17       	cp	r24, r18
    29fc:	93 07       	cpc	r25, r19
    29fe:	a4 07       	cpc	r26, r20
    2a00:	b5 07       	cpc	r27, r21
    2a02:	40 f4       	brcc	.+16     	; 0x2a14 <__fpcmp_parts_f+0xa8>
    2a04:	11 23       	and	r17, r17
    2a06:	19 f0       	breq	.+6      	; 0x2a0e <__fpcmp_parts_f+0xa2>
    2a08:	61 e0       	ldi	r22, 0x01	; 1
    2a0a:	70 e0       	ldi	r23, 0x00	; 0
    2a0c:	05 c0       	rjmp	.+10     	; 0x2a18 <__fpcmp_parts_f+0xac>
    2a0e:	6f ef       	ldi	r22, 0xFF	; 255
    2a10:	7f ef       	ldi	r23, 0xFF	; 255
    2a12:	02 c0       	rjmp	.+4      	; 0x2a18 <__fpcmp_parts_f+0xac>
    2a14:	60 e0       	ldi	r22, 0x00	; 0
    2a16:	70 e0       	ldi	r23, 0x00	; 0
    2a18:	cb 01       	movw	r24, r22
    2a1a:	1f 91       	pop	r17
    2a1c:	08 95       	ret

00002a1e <__udivmodhi4>:
    2a1e:	aa 1b       	sub	r26, r26
    2a20:	bb 1b       	sub	r27, r27
    2a22:	51 e1       	ldi	r21, 0x11	; 17
    2a24:	07 c0       	rjmp	.+14     	; 0x2a34 <__udivmodhi4_ep>

00002a26 <__udivmodhi4_loop>:
    2a26:	aa 1f       	adc	r26, r26
    2a28:	bb 1f       	adc	r27, r27
    2a2a:	a6 17       	cp	r26, r22
    2a2c:	b7 07       	cpc	r27, r23
    2a2e:	10 f0       	brcs	.+4      	; 0x2a34 <__udivmodhi4_ep>
    2a30:	a6 1b       	sub	r26, r22
    2a32:	b7 0b       	sbc	r27, r23

00002a34 <__udivmodhi4_ep>:
    2a34:	88 1f       	adc	r24, r24
    2a36:	99 1f       	adc	r25, r25
    2a38:	5a 95       	dec	r21
    2a3a:	a9 f7       	brne	.-22     	; 0x2a26 <__udivmodhi4_loop>
    2a3c:	80 95       	com	r24
    2a3e:	90 95       	com	r25
    2a40:	bc 01       	movw	r22, r24
    2a42:	cd 01       	movw	r24, r26
    2a44:	08 95       	ret

00002a46 <__prologue_saves__>:
    2a46:	2f 92       	push	r2
    2a48:	3f 92       	push	r3
    2a4a:	4f 92       	push	r4
    2a4c:	5f 92       	push	r5
    2a4e:	6f 92       	push	r6
    2a50:	7f 92       	push	r7
    2a52:	8f 92       	push	r8
    2a54:	9f 92       	push	r9
    2a56:	af 92       	push	r10
    2a58:	bf 92       	push	r11
    2a5a:	cf 92       	push	r12
    2a5c:	df 92       	push	r13
    2a5e:	ef 92       	push	r14
    2a60:	ff 92       	push	r15
    2a62:	0f 93       	push	r16
    2a64:	1f 93       	push	r17
    2a66:	cf 93       	push	r28
    2a68:	df 93       	push	r29
    2a6a:	cd b7       	in	r28, 0x3d	; 61
    2a6c:	de b7       	in	r29, 0x3e	; 62
    2a6e:	ca 1b       	sub	r28, r26
    2a70:	db 0b       	sbc	r29, r27
    2a72:	0f b6       	in	r0, 0x3f	; 63
    2a74:	f8 94       	cli
    2a76:	de bf       	out	0x3e, r29	; 62
    2a78:	0f be       	out	0x3f, r0	; 63
    2a7a:	cd bf       	out	0x3d, r28	; 61
    2a7c:	09 94       	ijmp

00002a7e <__epilogue_restores__>:
    2a7e:	2a 88       	ldd	r2, Y+18	; 0x12
    2a80:	39 88       	ldd	r3, Y+17	; 0x11
    2a82:	48 88       	ldd	r4, Y+16	; 0x10
    2a84:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a86:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a88:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a8a:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a8c:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a8e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a90:	b9 84       	ldd	r11, Y+9	; 0x09
    2a92:	c8 84       	ldd	r12, Y+8	; 0x08
    2a94:	df 80       	ldd	r13, Y+7	; 0x07
    2a96:	ee 80       	ldd	r14, Y+6	; 0x06
    2a98:	fd 80       	ldd	r15, Y+5	; 0x05
    2a9a:	0c 81       	ldd	r16, Y+4	; 0x04
    2a9c:	1b 81       	ldd	r17, Y+3	; 0x03
    2a9e:	aa 81       	ldd	r26, Y+2	; 0x02
    2aa0:	b9 81       	ldd	r27, Y+1	; 0x01
    2aa2:	ce 0f       	add	r28, r30
    2aa4:	d1 1d       	adc	r29, r1
    2aa6:	0f b6       	in	r0, 0x3f	; 63
    2aa8:	f8 94       	cli
    2aaa:	de bf       	out	0x3e, r29	; 62
    2aac:	0f be       	out	0x3f, r0	; 63
    2aae:	cd bf       	out	0x3d, r28	; 61
    2ab0:	ed 01       	movw	r28, r26
    2ab2:	08 95       	ret

00002ab4 <_exit>:
    2ab4:	f8 94       	cli

00002ab6 <__stop_program>:
    2ab6:	ff cf       	rjmp	.-2      	; 0x2ab6 <__stop_program>
