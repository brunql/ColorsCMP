
ColorsCMP_EclipseEdition.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000332e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002f0  00800060  0000332e  000033a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003f  00800350  0000361e  00003692  2**0
                  ALLOC
  3 .stab         00005d00  00000000  00000000  00003694  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001edf  00000000  00000000  00009394  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 0a 02 	jmp	0x414	; 0x414 <__ctors_end>
       4:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
       8:	0c 94 94 07 	jmp	0xf28	; 0xf28 <__vector_2>
       c:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      10:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      14:	0c 94 58 07 	jmp	0xeb0	; 0xeb0 <__vector_5>
      18:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      1c:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      20:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      24:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      28:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      2c:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      30:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      34:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      38:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      3c:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      40:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      44:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      48:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      4c:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      50:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>

00000054 <FontLookup>:
      54:	00 00 00 00 00 00 00 2f 00 00 00 07 00 07 00 14     ......./........
      64:	7f 14 7f 14 24 2a 7f 2a 12 c4 c8 10 26 46 36 49     ....$*.*....&F6I
      74:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
      84:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 00 50 30     ....>....>....P0
      94:	00 10 10 10 10 10 00 60 60 00 00 20 10 08 04 02     .......``.. ....
      a4:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
      b4:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
      c4:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
      d4:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
      e4:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
      f4:	3e 59 65 65 5e 7e 11 11 11 7e 7f 49 49 49 36 3e     >Yee^~...~.III6>
     104:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     114:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     124:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     134:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     144:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     154:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     164:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     174:	08 07 61 51 49 45 43 00 7f 41 41 00 55 2a 55 2a     ..aQIEC..AA.U*U*
     184:	55 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40     U.AA.......@@@@@
     194:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     1a4:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     1b4:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
     1c4:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     1d4:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     1e4:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     1f4:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     204:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     214:	50 3c 44 64 54 4c 44                                P<DdTLD

0000021b <LcdImage_Upper>:
     21b:	ff ff 7f 7f 45 5d 5d 5d 5d 5d 5d 5d 5d 5d 5d 7f     ....E]]]]]]]]]].
     22b:	7f 41 5f 5d 5d 5d 5d 5d 5d 5d 5d 5d 41 7f 7f 41     .A_]]]]]]]]]A..A
     23b:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 7f 7f 41 5f 5d 5d     __________..A_]]
     24b:	5d 5d 5d 5d 5d 5d 5d 41 7f 7f 43 7d 7d 7d 7d 7d     ]]]]]]]A..C}}}}}
     25b:	7d 7d 7d 7d 7f 7f 51 55 55 55 55 55 55 55 55 45     }}}}..QUUUUUUUUE
     26b:	7f 7f ff ff                                         ....

0000026f <LcdImage_Center>:
     26f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     27f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     28f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     29f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     2af:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     2bf:	ff ff ff ff ff ff ff 0c 0c fc fc fc fc fc fc fc     ................
     2cf:	fc fc fc fc fc fc fc fc fc fc fc fc fc fc ff ff     ................
     2df:	ff 0c 0c fc fc fc fc f0 f0 f3 f3 f3 c3 cf cf cf     ................
     2ef:	cf c3 f3 f3 f3 f0 f0 fc fc fc fc 00 00 ff ff ff     ................
     2ff:	00 00 9f 9f 9c 9c 9c 9c 9c 9c 9c 9c 9c 9c 9c 9c     ................
     30f:	9c 9c 9c 9c 80 80 ff ff ff ff ff e0 e0 e7 e7 e7     ................
     31f:	e7 e7 e7 e7 e7 e7 e7 e7 e7 e7 e7 e7 e7 e7 e7 e7     ................
     32f:	e7 e7 ff ff ff e0 e0 ff ff ff ff ff ff ff ff ff     ................
     33f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff e0     ................
     34f:	e0 ff ff ff e0 e0 ff ff ff ff ff ff ff ff ff ff     ................
     35f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     36f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     37f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     38f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     39f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     3af:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................

000003bf <LcdImage_brunql_gmail_com>:
     3bf:	ff ff ff c8 db db c3 ff cb fb fb fb ff cb df df     ................
     3cf:	c3 ff cb fb fb c3 ff cb db db df 03 7f ff c0 ff     ................
     3df:	ff 01 7e 66 5a 5a 42 5a 5e 62 7f ff c7 bb ab ab     ..~fZZBZ^b......
     3ef:	cf ff cb fb c3 fb c3 ff cb db db c3 db ff c2 ff     ................
     3ff:	c0 ff df ff cb db db ff cb db db c3 ff cb fb c3     ................
     40f:	fb c3 ff ff 00                                      .....

00000414 <__ctors_end>:
     414:	11 24       	eor	r1, r1
     416:	1f be       	out	0x3f, r1	; 63
     418:	cf e5       	ldi	r28, 0x5F	; 95
     41a:	d8 e0       	ldi	r29, 0x08	; 8
     41c:	de bf       	out	0x3e, r29	; 62
     41e:	cd bf       	out	0x3d, r28	; 61

00000420 <__do_copy_data>:
     420:	13 e0       	ldi	r17, 0x03	; 3
     422:	a0 e6       	ldi	r26, 0x60	; 96
     424:	b0 e0       	ldi	r27, 0x00	; 0
     426:	ee e2       	ldi	r30, 0x2E	; 46
     428:	f3 e3       	ldi	r31, 0x33	; 51
     42a:	02 c0       	rjmp	.+4      	; 0x430 <.do_copy_data_start>

0000042c <.do_copy_data_loop>:
     42c:	05 90       	lpm	r0, Z+
     42e:	0d 92       	st	X+, r0

00000430 <.do_copy_data_start>:
     430:	a0 35       	cpi	r26, 0x50	; 80
     432:	b1 07       	cpc	r27, r17
     434:	d9 f7       	brne	.-10     	; 0x42c <.do_copy_data_loop>

00000436 <__do_clear_bss>:
     436:	13 e0       	ldi	r17, 0x03	; 3
     438:	a0 e5       	ldi	r26, 0x50	; 80
     43a:	b3 e0       	ldi	r27, 0x03	; 3
     43c:	01 c0       	rjmp	.+2      	; 0x440 <.do_clear_bss_start>

0000043e <.do_clear_bss_loop>:
     43e:	1d 92       	st	X+, r1

00000440 <.do_clear_bss_start>:
     440:	af 38       	cpi	r26, 0x8F	; 143
     442:	b1 07       	cpc	r27, r17
     444:	e1 f7       	brne	.-8      	; 0x43e <.do_clear_bss_loop>
     446:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <main>
     44a:	0c 94 95 19 	jmp	0x332a	; 0x332a <_exit>

0000044e <__bad_interrupt>:
     44e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000452 <snakegame_InitSnake>:
//================================================//


void snakegame_InitSnake(void)
{
	snake_add_index = SNAKE_START_LEN; // start length of snake
     452:	86 e0       	ldi	r24, 0x06	; 6
     454:	80 93 52 03 	sts	0x0352, r24
	score = (uwin_times<<4) | (snake_add_index - SNAKE_START_LEN);
     458:	80 91 50 03 	lds	r24, 0x0350
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	24 e0       	ldi	r18, 0x04	; 4
     460:	88 0f       	add	r24, r24
     462:	99 1f       	adc	r25, r25
     464:	2a 95       	dec	r18
     466:	e1 f7       	brne	.-8      	; 0x460 <snakegame_InitSnake+0xe>
     468:	80 93 51 03 	sts	0x0351, r24
     46c:	e7 eb       	ldi	r30, 0xB7	; 183
     46e:	f0 e0       	ldi	r31, 0x00	; 0
     470:	88 e2       	ldi	r24, 0x28	; 40
	for(uint8_t i=0; i<SNAKE_LEN; i++){
		snake[i].y = 20;
     472:	24 e1       	ldi	r18, 0x14	; 20
		snake[i].x = 40 - i;
		snake[i].direction = RIGHT;
     474:	92 e0       	ldi	r25, 0x02	; 2
void snakegame_InitSnake(void)
{
	snake_add_index = SNAKE_START_LEN; // start length of snake
	score = (uwin_times<<4) | (snake_add_index - SNAKE_START_LEN);
	for(uint8_t i=0; i<SNAKE_LEN; i++){
		snake[i].y = 20;
     476:	21 83       	std	Z+1, r18	; 0x01
		snake[i].x = 40 - i;
     478:	80 83       	st	Z, r24
		snake[i].direction = RIGHT;
     47a:	92 83       	std	Z+2, r25	; 0x02
     47c:	33 96       	adiw	r30, 0x03	; 3
     47e:	81 50       	subi	r24, 0x01	; 1

void snakegame_InitSnake(void)
{
	snake_add_index = SNAKE_START_LEN; // start length of snake
	score = (uwin_times<<4) | (snake_add_index - SNAKE_START_LEN);
	for(uint8_t i=0; i<SNAKE_LEN; i++){
     480:	8e 31       	cpi	r24, 0x1E	; 30
     482:	c9 f7       	brne	.-14     	; 0x476 <snakegame_InitSnake+0x24>
		snake[i].y = 20;
		snake[i].x = 40 - i;
		snake[i].direction = RIGHT;
	}
}
     484:	08 95       	ret

00000486 <SnakeGame_Stop>:
}

void SnakeGame_Stop(void)
{
	// show results and go to main menu
}
     486:	08 95       	ret

00000488 <SnakeGame_TurnLeft>:


void SnakeGame_TurnLeft(void)
{
	// directions mb: UP = 1, RIGHT = 2, DOWN = 3, LEFT = 4
	if( --snake[0].direction == 0){
     488:	80 91 b9 00 	lds	r24, 0x00B9
     48c:	81 50       	subi	r24, 0x01	; 1
     48e:	80 93 b9 00 	sts	0x00B9, r24
     492:	88 23       	and	r24, r24
     494:	19 f4       	brne	.+6      	; 0x49c <SnakeGame_TurnLeft+0x14>
		snake[0].direction = LEFT;
     496:	84 e0       	ldi	r24, 0x04	; 4
     498:	80 93 b9 00 	sts	0x00B9, r24
     49c:	08 95       	ret

0000049e <SnakeGame_TurnRight>:
	}
}

void SnakeGame_TurnRight(void)
{
	if( ++snake[0].direction == 5){
     49e:	80 91 b9 00 	lds	r24, 0x00B9
     4a2:	8f 5f       	subi	r24, 0xFF	; 255
     4a4:	80 93 b9 00 	sts	0x00B9, r24
     4a8:	85 30       	cpi	r24, 0x05	; 5
     4aa:	19 f4       	brne	.+6      	; 0x4b2 <SnakeGame_TurnRight+0x14>
		snake[0].direction = UP;
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	80 93 b9 00 	sts	0x00B9, r24
     4b2:	08 95       	ret

000004b4 <snakegame_DirectionStep>:
//
//	snake_add_index++; // don't forget to update index
//}

void snakegame_DirectionStep(point *p_snake)
{
     4b4:	fc 01       	movw	r30, r24
	switch(p_snake->direction)
     4b6:	92 81       	ldd	r25, Z+2	; 0x02
     4b8:	92 30       	cpi	r25, 0x02	; 2
     4ba:	09 f1       	breq	.+66     	; 0x4fe <snakegame_DirectionStep+0x4a>
     4bc:	93 30       	cpi	r25, 0x03	; 3
     4be:	18 f4       	brcc	.+6      	; 0x4c6 <snakegame_DirectionStep+0x12>
     4c0:	91 30       	cpi	r25, 0x01	; 1
     4c2:	21 f5       	brne	.+72     	; 0x50c <snakegame_DirectionStep+0x58>
     4c4:	05 c0       	rjmp	.+10     	; 0x4d0 <snakegame_DirectionStep+0x1c>
     4c6:	93 30       	cpi	r25, 0x03	; 3
     4c8:	51 f0       	breq	.+20     	; 0x4de <snakegame_DirectionStep+0x2a>
     4ca:	94 30       	cpi	r25, 0x04	; 4
     4cc:	f9 f4       	brne	.+62     	; 0x50c <snakegame_DirectionStep+0x58>
     4ce:	0f c0       	rjmp	.+30     	; 0x4ee <snakegame_DirectionStep+0x3a>
	{
		case UP:
			if(--p_snake->y < 9) 	p_snake->y = 38;
     4d0:	81 81       	ldd	r24, Z+1	; 0x01
     4d2:	81 50       	subi	r24, 0x01	; 1
     4d4:	81 83       	std	Z+1, r24	; 0x01
     4d6:	89 30       	cpi	r24, 0x09	; 9
     4d8:	f0 f4       	brcc	.+60     	; 0x516 <snakegame_DirectionStep+0x62>
     4da:	86 e2       	ldi	r24, 0x26	; 38
     4dc:	06 c0       	rjmp	.+12     	; 0x4ea <snakegame_DirectionStep+0x36>
			break;
		case DOWN:
			if(++p_snake->y > 38) 	p_snake->y = 9;
     4de:	81 81       	ldd	r24, Z+1	; 0x01
     4e0:	8f 5f       	subi	r24, 0xFF	; 255
     4e2:	81 83       	std	Z+1, r24	; 0x01
     4e4:	87 32       	cpi	r24, 0x27	; 39
     4e6:	b8 f0       	brcs	.+46     	; 0x516 <snakegame_DirectionStep+0x62>
     4e8:	89 e0       	ldi	r24, 0x09	; 9
     4ea:	81 83       	std	Z+1, r24	; 0x01
     4ec:	08 95       	ret
			break;
		case LEFT:
			if(--p_snake->x < 2) 	p_snake->x = 82;
     4ee:	80 81       	ld	r24, Z
     4f0:	81 50       	subi	r24, 0x01	; 1
     4f2:	80 83       	st	Z, r24
     4f4:	82 30       	cpi	r24, 0x02	; 2
     4f6:	78 f4       	brcc	.+30     	; 0x516 <snakegame_DirectionStep+0x62>
     4f8:	82 e5       	ldi	r24, 0x52	; 82
     4fa:	80 83       	st	Z, r24
     4fc:	08 95       	ret
			break;
		case RIGHT:
			if(++p_snake->x > 81) 	p_snake->x = 2;
     4fe:	80 81       	ld	r24, Z
     500:	8f 5f       	subi	r24, 0xFF	; 255
     502:	80 83       	st	Z, r24
     504:	82 35       	cpi	r24, 0x52	; 82
     506:	38 f0       	brcs	.+14     	; 0x516 <snakegame_DirectionStep+0x62>
     508:	90 83       	st	Z, r25
     50a:	08 95       	ret
			break;
		default: // error
			p_snake->x = 0;
     50c:	10 82       	st	Z, r1
			p_snake->y = 17;
     50e:	81 e1       	ldi	r24, 0x11	; 17
     510:	81 83       	std	Z+1, r24	; 0x01
			p_snake->direction = RIGHT;
     512:	82 e0       	ldi	r24, 0x02	; 2
     514:	82 83       	std	Z+2, r24	; 0x02
     516:	08 95       	ret

00000518 <snakegame_UpdateDisplay>:




void snakegame_UpdateDisplay(void)
{
     518:	2f 92       	push	r2
     51a:	3f 92       	push	r3
     51c:	4f 92       	push	r4
     51e:	5f 92       	push	r5
     520:	6f 92       	push	r6
     522:	7f 92       	push	r7
     524:	8f 92       	push	r8
     526:	9f 92       	push	r9
     528:	af 92       	push	r10
     52a:	bf 92       	push	r11
     52c:	cf 92       	push	r12
     52e:	df 92       	push	r13
     530:	ef 92       	push	r14
     532:	ff 92       	push	r15
     534:	0f 93       	push	r16
     536:	1f 93       	push	r17
     538:	cf 93       	push	r28
     53a:	df 93       	push	r29
	Lcd3310_ClearCenter();
     53c:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <Lcd3310_ClearCenter>

	Lcd3310_GotoXY(0, 5);
     540:	80 e0       	ldi	r24, 0x00	; 0
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	65 e0       	ldi	r22, 0x05	; 5
     546:	70 e0       	ldi	r23, 0x00	; 0
     548:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <Lcd3310_GotoXY>
	Lcd3310_String_P(score_str, WHITE_TEXT_ON_BLACK);
     54c:	80 91 86 00 	lds	r24, 0x0086
     550:	90 91 87 00 	lds	r25, 0x0087
     554:	61 e0       	ldi	r22, 0x01	; 1
     556:	0e 94 91 0c 	call	0x1922	; 0x1922 <Lcd3310_String_P>
	Lcd3310_UInt8AsText(score, WHITE_TEXT_ON_BLACK);
     55a:	80 91 51 03 	lds	r24, 0x0351
     55e:	61 e0       	ldi	r22, 0x01	; 1
     560:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <Lcd3310_UInt8AsText>
	//Lcd3310_UInt8AsText(snake[0].y, WHITE_TEXT_ON_BLACK);

	uint16_t lcd_index = 0x00;

	// eval values for addme pixel show
	uint8_t addme_line = (uint8_t)addme_y / 8;
     564:	20 91 b6 00 	lds	r18, 0x00B6
     568:	82 2e       	mov	r8, r18
     56a:	86 94       	lsr	r8
     56c:	86 94       	lsr	r8
     56e:	86 94       	lsr	r8
	uint8_t addme_display_byte = 1 << ((uint8_t)addme_y % 8);
     570:	27 70       	andi	r18, 0x07	; 7
     572:	81 e0       	ldi	r24, 0x01	; 1
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	98 2e       	mov	r9, r24
     578:	01 c0       	rjmp	.+2      	; 0x57c <snakegame_UpdateDisplay+0x64>
     57a:	99 0c       	add	r9, r9
     57c:	2a 95       	dec	r18
     57e:	ea f7       	brpl	.-6      	; 0x57a <snakegame_UpdateDisplay+0x62>
     580:	aa 24       	eor	r10, r10
	for(uint8_t i=0; i < snake_add_index; i++)
	{
		// GotoXY
		// Eval number of line (mb: 1..5) in display for display_byte
		uint8_t line = (uint8_t) (snake[i].y) / 8;
		lcd_index = (uint16_t) (snake[i].x) + (uint16_t)line * 84;
     582:	64 e5       	ldi	r22, 0x54	; 84
     584:	46 2e       	mov	r4, r22
		Lcd3310_Send( 0x80 | ((uint16_t)lcd_index % LCD_X_RES), LCD_CMD );
		Lcd3310_Send( 0x40 | ((uint16_t)lcd_index / LCD_X_RES), LCD_CMD );

		// Make sendme byte with all point in this display byte
		// Init with snake[i] point
		uint8_t display_byte = 1 << ((uint8_t)snake[i].y % 8);
     586:	51 e0       	ldi	r21, 0x01	; 1
     588:	65 2e       	mov	r6, r21
     58a:	71 2c       	mov	r7, r1
		// Find all point near here (in this display byte)
		for(uint8_t j=0; j<snake_add_index; j++)
     58c:	43 e0       	ldi	r20, 0x03	; 3
     58e:	54 2e       	mov	r5, r20
     590:	6a c0       	rjmp	.+212    	; 0x666 <snakegame_UpdateDisplay+0x14e>
	// Lets draw each point in snake to our lcd.
	for(uint8_t i=0; i < snake_add_index; i++)
	{
		// GotoXY
		// Eval number of line (mb: 1..5) in display for display_byte
		uint8_t line = (uint8_t) (snake[i].y) / 8;
     592:	2a 2c       	mov	r2, r10
     594:	33 24       	eor	r3, r3
     596:	61 01       	movw	r12, r2
     598:	cc 0c       	add	r12, r12
     59a:	dd 1c       	adc	r13, r13
     59c:	76 01       	movw	r14, r12
     59e:	e2 0c       	add	r14, r2
     5a0:	f3 1c       	adc	r15, r3
     5a2:	87 eb       	ldi	r24, 0xB7	; 183
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	e8 0e       	add	r14, r24
     5a8:	f9 1e       	adc	r15, r25
     5aa:	e7 01       	movw	r28, r14
     5ac:	b9 80       	ldd	r11, Y+1	; 0x01
     5ae:	b6 94       	lsr	r11
     5b0:	b6 94       	lsr	r11
     5b2:	b6 94       	lsr	r11
		lcd_index = (uint16_t) (snake[i].x) + (uint16_t)line * 84;
     5b4:	b4 9c       	mul	r11, r4
     5b6:	80 01       	movw	r16, r0
     5b8:	11 24       	eor	r1, r1
     5ba:	88 81       	ld	r24, Y
     5bc:	08 0f       	add	r16, r24
     5be:	11 1d       	adc	r17, r1
		Lcd3310_Send( 0x80 | ((uint16_t)lcd_index % LCD_X_RES), LCD_CMD );
     5c0:	c8 01       	movw	r24, r16
     5c2:	64 e5       	ldi	r22, 0x54	; 84
     5c4:	70 e0       	ldi	r23, 0x00	; 0
     5c6:	0e 94 db 18 	call	0x31b6	; 0x31b6 <__udivmodhi4>
     5ca:	80 68       	ori	r24, 0x80	; 128
     5cc:	60 e0       	ldi	r22, 0x00	; 0
     5ce:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <Lcd3310_Send>
		Lcd3310_Send( 0x40 | ((uint16_t)lcd_index / LCD_X_RES), LCD_CMD );
     5d2:	c8 01       	movw	r24, r16
     5d4:	64 e5       	ldi	r22, 0x54	; 84
     5d6:	70 e0       	ldi	r23, 0x00	; 0
     5d8:	0e 94 db 18 	call	0x31b6	; 0x31b6 <__udivmodhi4>
     5dc:	86 2f       	mov	r24, r22
     5de:	80 64       	ori	r24, 0x40	; 64
     5e0:	60 e0       	ldi	r22, 0x00	; 0
     5e2:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <Lcd3310_Send>

		// Make sendme byte with all point in this display byte
		// Init with snake[i] point
		uint8_t display_byte = 1 << ((uint8_t)snake[i].y % 8);
     5e6:	89 81       	ldd	r24, Y+1	; 0x01
     5e8:	87 70       	andi	r24, 0x07	; 7
     5ea:	36 2d       	mov	r19, r6
     5ec:	01 c0       	rjmp	.+2      	; 0x5f0 <snakegame_UpdateDisplay+0xd8>
     5ee:	33 0f       	add	r19, r19
     5f0:	8a 95       	dec	r24
     5f2:	ea f7       	brpl	.-6      	; 0x5ee <snakegame_UpdateDisplay+0xd6>
		// Find all point near here (in this display byte)
		for(uint8_t j=0; j<snake_add_index; j++)
     5f4:	80 91 52 03 	lds	r24, 0x0352
     5f8:	e7 eb       	ldi	r30, 0xB7	; 183
     5fa:	f0 e0       	ldi	r31, 0x00	; 0
     5fc:	85 9d       	mul	r24, r5
     5fe:	a0 01       	movw	r20, r0
     600:	11 24       	eor	r1, r1
     602:	4e 0f       	add	r20, r30
     604:	5f 1f       	adc	r21, r31
     606:	d6 01       	movw	r26, r12
		{
			uint8_t line_find = (uint8_t)snake[j].y / 8;
			if(snake[i].x == snake[j].x && line == line_find){
     608:	b7 01       	movw	r22, r14
     60a:	15 c0       	rjmp	.+42     	; 0x636 <snakegame_UpdateDisplay+0x11e>
		// Init with snake[i] point
		uint8_t display_byte = 1 << ((uint8_t)snake[i].y % 8);
		// Find all point near here (in this display byte)
		for(uint8_t j=0; j<snake_add_index; j++)
		{
			uint8_t line_find = (uint8_t)snake[j].y / 8;
     60c:	21 81       	ldd	r18, Z+1	; 0x01
			if(snake[i].x == snake[j].x && line == line_find){
     60e:	eb 01       	movw	r28, r22
     610:	98 81       	ld	r25, Y
     612:	80 81       	ld	r24, Z
     614:	98 17       	cp	r25, r24
     616:	71 f4       	brne	.+28     	; 0x634 <snakegame_UpdateDisplay+0x11c>
     618:	82 2f       	mov	r24, r18
     61a:	86 95       	lsr	r24
     61c:	86 95       	lsr	r24
     61e:	86 95       	lsr	r24
     620:	b8 16       	cp	r11, r24
     622:	41 f4       	brne	.+16     	; 0x634 <snakegame_UpdateDisplay+0x11c>
				display_byte |= 1 << ((uint8_t)snake[j].y % 8);
     624:	27 70       	andi	r18, 0x07	; 7
     626:	c3 01       	movw	r24, r6
     628:	02 c0       	rjmp	.+4      	; 0x62e <snakegame_UpdateDisplay+0x116>
     62a:	88 0f       	add	r24, r24
     62c:	99 1f       	adc	r25, r25
     62e:	2a 95       	dec	r18
     630:	e2 f7       	brpl	.-8      	; 0x62a <snakegame_UpdateDisplay+0x112>
     632:	38 2b       	or	r19, r24
     634:	33 96       	adiw	r30, 0x03	; 3

		// Make sendme byte with all point in this display byte
		// Init with snake[i] point
		uint8_t display_byte = 1 << ((uint8_t)snake[i].y % 8);
		// Find all point near here (in this display byte)
		for(uint8_t j=0; j<snake_add_index; j++)
     636:	e4 17       	cp	r30, r20
     638:	f5 07       	cpc	r31, r21
     63a:	41 f7       	brne	.-48     	; 0x60c <snakegame_UpdateDisplay+0xf4>
				display_byte |= 1 << ((uint8_t)snake[j].y % 8);
			}
		}

		// check that snake[i] and addme points are in same display_byte
		if(addme_x == snake[i].x && addme_line == line){
     63c:	a2 0d       	add	r26, r2
     63e:	b3 1d       	adc	r27, r3
     640:	a9 54       	subi	r26, 0x49	; 73
     642:	bf 4f       	sbci	r27, 0xFF	; 255
     644:	90 91 b5 00 	lds	r25, 0x00B5
     648:	8c 91       	ld	r24, X
     64a:	98 17       	cp	r25, r24
     64c:	39 f4       	brne	.+14     	; 0x65c <snakegame_UpdateDisplay+0x144>
     64e:	8b 14       	cp	r8, r11
     650:	29 f4       	brne	.+10     	; 0x65c <snakegame_UpdateDisplay+0x144>
			display_byte |= (addme_display_byte & 0x7f);
     652:	89 2d       	mov	r24, r9
     654:	8f 77       	andi	r24, 0x7F	; 127
     656:	38 2b       	or	r19, r24
			addme_display_byte |= 0x80; // say that we already draw this point
     658:	e0 e8       	ldi	r30, 0x80	; 128
     65a:	9e 2a       	or	r9, r30
		}

		Lcd3310_Send( display_byte, LCD_DATA );
     65c:	83 2f       	mov	r24, r19
     65e:	61 e0       	ldi	r22, 0x01	; 1
     660:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <Lcd3310_Send>
	// eval values for addme pixel show
	uint8_t addme_line = (uint8_t)addme_y / 8;
	uint8_t addme_display_byte = 1 << ((uint8_t)addme_y % 8);

	// Lets draw each point in snake to our lcd.
	for(uint8_t i=0; i < snake_add_index; i++)
     664:	a3 94       	inc	r10
     666:	80 91 52 03 	lds	r24, 0x0352
     66a:	a8 16       	cp	r10, r24
     66c:	08 f4       	brcc	.+2      	; 0x670 <snakegame_UpdateDisplay+0x158>
     66e:	91 cf       	rjmp	.-222    	; 0x592 <snakegame_UpdateDisplay+0x7a>
		Lcd3310_Send( display_byte, LCD_DATA );
	}


	// if we didn't draw it before lets do it now
	if(!(addme_display_byte & 0x80)){
     670:	97 fc       	sbrc	r9, 7
     672:	1f c0       	rjmp	.+62     	; 0x6b2 <snakegame_UpdateDisplay+0x19a>
		lcd_index = (uint16_t)addme_x + (uint16_t)addme_line * 84;
     674:	04 e5       	ldi	r16, 0x54	; 84
     676:	80 9e       	mul	r8, r16
     678:	80 01       	movw	r16, r0
     67a:	11 24       	eor	r1, r1
     67c:	80 91 b5 00 	lds	r24, 0x00B5
     680:	08 0f       	add	r16, r24
     682:	11 1d       	adc	r17, r1
		Lcd3310_Send( 0x80 | (lcd_index % LCD_X_RES), LCD_CMD );
     684:	c8 01       	movw	r24, r16
     686:	64 e5       	ldi	r22, 0x54	; 84
     688:	70 e0       	ldi	r23, 0x00	; 0
     68a:	0e 94 db 18 	call	0x31b6	; 0x31b6 <__udivmodhi4>
     68e:	80 68       	ori	r24, 0x80	; 128
     690:	60 e0       	ldi	r22, 0x00	; 0
     692:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <Lcd3310_Send>
		Lcd3310_Send( 0x40 | (lcd_index / LCD_X_RES), LCD_CMD );
     696:	c8 01       	movw	r24, r16
     698:	64 e5       	ldi	r22, 0x54	; 84
     69a:	70 e0       	ldi	r23, 0x00	; 0
     69c:	0e 94 db 18 	call	0x31b6	; 0x31b6 <__udivmodhi4>
     6a0:	86 2f       	mov	r24, r22
     6a2:	80 64       	ori	r24, 0x40	; 64
     6a4:	60 e0       	ldi	r22, 0x00	; 0
     6a6:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <Lcd3310_Send>
		Lcd3310_Send( addme_display_byte, LCD_DATA );
     6aa:	89 2d       	mov	r24, r9
     6ac:	61 e0       	ldi	r22, 0x01	; 1
     6ae:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <Lcd3310_Send>
	}
}
     6b2:	df 91       	pop	r29
     6b4:	cf 91       	pop	r28
     6b6:	1f 91       	pop	r17
     6b8:	0f 91       	pop	r16
     6ba:	ff 90       	pop	r15
     6bc:	ef 90       	pop	r14
     6be:	df 90       	pop	r13
     6c0:	cf 90       	pop	r12
     6c2:	bf 90       	pop	r11
     6c4:	af 90       	pop	r10
     6c6:	9f 90       	pop	r9
     6c8:	8f 90       	pop	r8
     6ca:	7f 90       	pop	r7
     6cc:	6f 90       	pop	r6
     6ce:	5f 90       	pop	r5
     6d0:	4f 90       	pop	r4
     6d2:	3f 90       	pop	r3
     6d4:	2f 90       	pop	r2
     6d6:	08 95       	ret

000006d8 <SnakeGame_AddmeUpdateXY>:
}


void SnakeGame_AddmeUpdateXY(void)
{
	addme_x = (rand() % 79) + 2; 	// 2..81
     6d8:	0e 94 cb 18 	call	0x3196	; 0x3196 <rand>
     6dc:	6f e4       	ldi	r22, 0x4F	; 79
     6de:	70 e0       	ldi	r23, 0x00	; 0
     6e0:	0e 94 ef 18 	call	0x31de	; 0x31de <__divmodhi4>
     6e4:	8e 5f       	subi	r24, 0xFE	; 254
     6e6:	80 93 b5 00 	sts	0x00B5, r24
	addme_y = (rand() % 28) + 10; // 10..38
     6ea:	0e 94 cb 18 	call	0x3196	; 0x3196 <rand>
     6ee:	6c e1       	ldi	r22, 0x1C	; 28
     6f0:	70 e0       	ldi	r23, 0x00	; 0
     6f2:	0e 94 ef 18 	call	0x31de	; 0x31de <__divmodhi4>
     6f6:	86 5f       	subi	r24, 0xF6	; 246
     6f8:	80 93 b6 00 	sts	0x00B6, r24
}
     6fc:	08 95       	ret

000006fe <SnakeGame_Start>:
}


void SnakeGame_Start(void)
{
	SnakeGame_AddmeUpdateXY();
     6fe:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <SnakeGame_AddmeUpdateXY>
//================================================//


void snakegame_InitSnake(void)
{
	snake_add_index = SNAKE_START_LEN; // start length of snake
     702:	86 e0       	ldi	r24, 0x06	; 6
     704:	80 93 52 03 	sts	0x0352, r24
	score = (uwin_times<<4) | (snake_add_index - SNAKE_START_LEN);
     708:	80 91 50 03 	lds	r24, 0x0350
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	74 e0       	ldi	r23, 0x04	; 4
     710:	88 0f       	add	r24, r24
     712:	99 1f       	adc	r25, r25
     714:	7a 95       	dec	r23
     716:	e1 f7       	brne	.-8      	; 0x710 <SnakeGame_Start+0x12>
     718:	80 93 51 03 	sts	0x0351, r24
     71c:	e7 eb       	ldi	r30, 0xB7	; 183
     71e:	f0 e0       	ldi	r31, 0x00	; 0
     720:	88 e2       	ldi	r24, 0x28	; 40
	for(uint8_t i=0; i<SNAKE_LEN; i++){
		snake[i].y = 20;
     722:	24 e1       	ldi	r18, 0x14	; 20
		snake[i].x = 40 - i;
		snake[i].direction = RIGHT;
     724:	92 e0       	ldi	r25, 0x02	; 2
void snakegame_InitSnake(void)
{
	snake_add_index = SNAKE_START_LEN; // start length of snake
	score = (uwin_times<<4) | (snake_add_index - SNAKE_START_LEN);
	for(uint8_t i=0; i<SNAKE_LEN; i++){
		snake[i].y = 20;
     726:	21 83       	std	Z+1, r18	; 0x01
		snake[i].x = 40 - i;
     728:	80 83       	st	Z, r24
		snake[i].direction = RIGHT;
     72a:	92 83       	std	Z+2, r25	; 0x02
     72c:	33 96       	adiw	r30, 0x03	; 3
     72e:	81 50       	subi	r24, 0x01	; 1

void snakegame_InitSnake(void)
{
	snake_add_index = SNAKE_START_LEN; // start length of snake
	score = (uwin_times<<4) | (snake_add_index - SNAKE_START_LEN);
	for(uint8_t i=0; i<SNAKE_LEN; i++){
     730:	8e 31       	cpi	r24, 0x1E	; 30
     732:	c9 f7       	brne	.-14     	; 0x726 <SnakeGame_Start+0x28>
void SnakeGame_Start(void)
{
	SnakeGame_AddmeUpdateXY();
	snakegame_InitSnake();

	Lcd3310_GotoXY(0, 0);
     734:	80 e0       	ldi	r24, 0x00	; 0
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	60 e0       	ldi	r22, 0x00	; 0
     73a:	70 e0       	ldi	r23, 0x00	; 0
     73c:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <Lcd3310_GotoXY>
	Lcd3310_String_P(snake_str, WHITE_TEXT_ON_BLACK);
     740:	80 91 6f 00 	lds	r24, 0x006F
     744:	90 91 70 00 	lds	r25, 0x0070
     748:	61 e0       	ldi	r22, 0x01	; 1
     74a:	0e 94 91 0c 	call	0x1922	; 0x1922 <Lcd3310_String_P>
	snakegame_UpdateDisplay();
     74e:	0e 94 8c 02 	call	0x518	; 0x518 <snakegame_UpdateDisplay>
}
     752:	08 95       	ret

00000754 <SnakeGame_TakeNextStep>:
{
	// show results and go to main menu
}

void SnakeGame_TakeNextStep(void)
{
     754:	cf 93       	push	r28
     756:	df 93       	push	r29
     758:	c7 eb       	ldi	r28, 0xB7	; 183
     75a:	d0 e0       	ldi	r29, 0x00	; 0

	// Lets go somethere:
	for(uint8_t i=0; i < SNAKE_LEN; i++)
	{
		snakegame_DirectionStep(&snake[i]);
     75c:	ce 01       	movw	r24, r28
     75e:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <snakegame_DirectionStep>
     762:	23 96       	adiw	r28, 0x03	; 3

void SnakeGame_TakeNextStep(void)
{

	// Lets go somethere:
	for(uint8_t i=0; i < SNAKE_LEN; i++)
     764:	80 e0       	ldi	r24, 0x00	; 0
     766:	c5 3d       	cpi	r28, 0xD5	; 213
     768:	d8 07       	cpc	r29, r24
     76a:	c1 f7       	brne	.-16     	; 0x75c <SnakeGame_TakeNextStep+0x8>
     76c:	89 e0       	ldi	r24, 0x09	; 9
     76e:	14 c0       	rjmp	.+40     	; 0x798 <SnakeGame_TakeNextStep+0x44>
	}

	// Update direction of each point from last to first
	for(uint8_t i = SNAKE_LEN-1; i != 0 && i < SNAKE_LEN; i--)
	{
		snake[i].direction = snake[i-1].direction;
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	dc 01       	movw	r26, r24
     774:	aa 0f       	add	r26, r26
     776:	bb 1f       	adc	r27, r27
     778:	a8 0f       	add	r26, r24
     77a:	b9 1f       	adc	r27, r25
     77c:	a9 54       	subi	r26, 0x49	; 73
     77e:	bf 4f       	sbci	r27, 0xFF	; 255
     780:	01 97       	sbiw	r24, 0x01	; 1
     782:	fc 01       	movw	r30, r24
     784:	ee 0f       	add	r30, r30
     786:	ff 1f       	adc	r31, r31
     788:	e8 0f       	add	r30, r24
     78a:	f9 1f       	adc	r31, r25
     78c:	e9 54       	subi	r30, 0x49	; 73
     78e:	ff 4f       	sbci	r31, 0xFF	; 255
     790:	82 81       	ldd	r24, Z+2	; 0x02
     792:	12 96       	adiw	r26, 0x02	; 2
     794:	8c 93       	st	X, r24
     796:	82 2f       	mov	r24, r18
	{
		snakegame_DirectionStep(&snake[i]);
	}

	// Update direction of each point from last to first
	for(uint8_t i = SNAKE_LEN-1; i != 0 && i < SNAKE_LEN; i--)
     798:	28 2f       	mov	r18, r24
     79a:	21 50       	subi	r18, 0x01	; 1
     79c:	48 f7       	brcc	.-46     	; 0x770 <SnakeGame_TakeNextStep+0x1c>
	{
		snake[i].direction = snake[i-1].direction;
	}

	// Check if we come to addme point
	if(snake[0].x == addme_x && snake[0].y == addme_y){
     79e:	90 91 b7 00 	lds	r25, 0x00B7
     7a2:	80 91 b5 00 	lds	r24, 0x00B5
     7a6:	98 17       	cp	r25, r24
     7a8:	09 f0       	breq	.+2      	; 0x7ac <SnakeGame_TakeNextStep+0x58>
     7aa:	ca c0       	rjmp	.+404    	; 0x940 <__stack+0xe1>
     7ac:	90 91 b8 00 	lds	r25, 0x00B8
     7b0:	80 91 b6 00 	lds	r24, 0x00B6
     7b4:	98 17       	cp	r25, r24
     7b6:	09 f0       	breq	.+2      	; 0x7ba <SnakeGame_TakeNextStep+0x66>
     7b8:	c3 c0       	rjmp	.+390    	; 0x940 <__stack+0xe1>
		SnakeGame_AddmeUpdateXY();
     7ba:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <SnakeGame_AddmeUpdateXY>
		snake_add_index++; // add snake point
     7be:	80 91 52 03 	lds	r24, 0x0352
     7c2:	28 2f       	mov	r18, r24
     7c4:	2f 5f       	subi	r18, 0xFF	; 255
     7c6:	20 93 52 03 	sts	0x0352, r18
		score = (uwin_times<<4) | (snake_add_index - SNAKE_START_LEN);
     7ca:	85 50       	subi	r24, 0x05	; 5
     7cc:	90 91 50 03 	lds	r25, 0x0350
     7d0:	92 95       	swap	r25
     7d2:	90 7f       	andi	r25, 0xF0	; 240
     7d4:	98 2b       	or	r25, r24
     7d6:	90 93 51 03 	sts	0x0351, r25
		if(snake_add_index >= SNAKE_LEN){
     7da:	2a 30       	cpi	r18, 0x0A	; 10
     7dc:	08 f4       	brcc	.+2      	; 0x7e0 <SnakeGame_TakeNextStep+0x8c>
     7de:	b0 c0       	rjmp	.+352    	; 0x940 <__stack+0xe1>
			Lcd3310_ClearCenter();
     7e0:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <Lcd3310_ClearCenter>
			uwin_times++;
     7e4:	80 91 50 03 	lds	r24, 0x0350
     7e8:	8f 5f       	subi	r24, 0xFF	; 255
     7ea:	80 93 50 03 	sts	0x0350, r24
			if(uwin_times >= 3){
     7ee:	83 30       	cpi	r24, 0x03	; 3
     7f0:	d0 f1       	brcs	.+116    	; 0x866 <__stack+0x7>
				uwin_times = 0x00;
     7f2:	10 92 50 03 	sts	0x0350, r1
				Lcd3310_GotoXY(3, 2);
     7f6:	83 e0       	ldi	r24, 0x03	; 3
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	62 e0       	ldi	r22, 0x02	; 2
     7fc:	70 e0       	ldi	r23, 0x00	; 0
     7fe:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <Lcd3310_GotoXY>
				Lcd3310_String_P(got_fun_str, BLACK_TEXT_ON_WHITE);
     802:	80 91 9c 00 	lds	r24, 0x009C
     806:	90 91 9d 00 	lds	r25, 0x009D
     80a:	60 e0       	ldi	r22, 0x00	; 0
     80c:	0e 94 91 0c 	call	0x1922	; 0x1922 <Lcd3310_String_P>
				Lcd3310_GotoXY(3, 3);
     810:	83 e0       	ldi	r24, 0x03	; 3
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	63 e0       	ldi	r22, 0x03	; 3
     816:	70 e0       	ldi	r23, 0x00	; 0
     818:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <Lcd3310_GotoXY>
				Lcd3310_String_P(go_work_str, BLACK_TEXT_ON_WHITE);
     81c:	80 91 a7 00 	lds	r24, 0x00A7
     820:	90 91 a8 00 	lds	r25, 0x00A8
     824:	60 e0       	ldi	r22, 0x00	; 0
     826:	0e 94 91 0c 	call	0x1922	; 0x1922 <Lcd3310_String_P>
				Lcd3310_GotoXY(0, 5);
     82a:	80 e0       	ldi	r24, 0x00	; 0
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	65 e0       	ldi	r22, 0x05	; 5
     830:	70 e0       	ldi	r23, 0x00	; 0
     832:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <Lcd3310_GotoXY>
				Lcd3310_String_P(brunql_str, WHITE_TEXT_ON_BLACK);
     836:	80 91 b1 00 	lds	r24, 0x00B1
     83a:	90 91 b2 00 	lds	r25, 0x00B2
     83e:	61 e0       	ldi	r22, 0x01	; 1
     840:	0e 94 91 0c 	call	0x1922	; 0x1922 <Lcd3310_String_P>
				FLAGS_SWITCH_ON( JOYSTICK_CENTER_CLICK_FLAG ); // stop game! go to main menu.
     844:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     846:	f8 94       	cli
     848:	80 91 7f 03 	lds	r24, 0x037F
     84c:	90 91 80 03 	lds	r25, 0x0380
     850:	82 60       	ori	r24, 0x02	; 2
     852:	90 93 80 03 	sts	0x0380, r25
     856:	80 93 7f 03 	sts	0x037F, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     85a:	2f bf       	out	0x3f, r18	; 63

				get_present_speed = SPEED_TICKS_TO_GET_PRESENT;
     85c:	88 ec       	ldi	r24, 0xC8	; 200
     85e:	80 93 b4 00 	sts	0x00B4, r24
				step_speed = SPEED_STEP;
     862:	8e e1       	ldi	r24, 0x1E	; 30
     864:	53 c0       	rjmp	.+166    	; 0x90c <__stack+0xad>
			}else{
				Lcd3310_GotoXY(3, 2);
     866:	83 e0       	ldi	r24, 0x03	; 3
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	62 e0       	ldi	r22, 0x02	; 2
     86c:	70 e0       	ldi	r23, 0x00	; 0
     86e:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <Lcd3310_GotoXY>
				Lcd3310_String_P(uwin_str, BLACK_TEXT_ON_WHITE);
     872:	80 91 7a 00 	lds	r24, 0x007A
     876:	90 91 7b 00 	lds	r25, 0x007B
     87a:	60 e0       	ldi	r22, 0x00	; 0
     87c:	0e 94 91 0c 	call	0x1922	; 0x1922 <Lcd3310_String_P>
				Lcd3310_GotoXY(2, 3);
     880:	82 e0       	ldi	r24, 0x02	; 2
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	63 e0       	ldi	r22, 0x03	; 3
     886:	70 e0       	ldi	r23, 0x00	; 0
     888:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <Lcd3310_GotoXY>
				Lcd3310_String_P(level_str, BLACK_TEXT_ON_WHITE);
     88c:	80 91 91 00 	lds	r24, 0x0091
     890:	90 91 92 00 	lds	r25, 0x0092
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	0e 94 91 0c 	call	0x1922	; 0x1922 <Lcd3310_String_P>
				Lcd3310_UInt8AsText(uwin_times, BLACK_TEXT_ON_WHITE);
     89a:	80 91 50 03 	lds	r24, 0x0350
     89e:	60 e0       	ldi	r22, 0x00	; 0
     8a0:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <Lcd3310_UInt8AsText>
				Lcd3310_GotoXY(0, 5);
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	65 e0       	ldi	r22, 0x05	; 5
     8aa:	70 e0       	ldi	r23, 0x00	; 0
     8ac:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <Lcd3310_GotoXY>
				Lcd3310_String_P(score_str, WHITE_TEXT_ON_BLACK);
     8b0:	80 91 86 00 	lds	r24, 0x0086
     8b4:	90 91 87 00 	lds	r25, 0x0087
     8b8:	61 e0       	ldi	r22, 0x01	; 1
     8ba:	0e 94 91 0c 	call	0x1922	; 0x1922 <Lcd3310_String_P>
				Lcd3310_UInt8AsText(score, WHITE_TEXT_ON_BLACK);
     8be:	80 91 51 03 	lds	r24, 0x0351
     8c2:	61 e0       	ldi	r22, 0x01	; 1
     8c4:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <Lcd3310_UInt8AsText>
				Lcd3310_Char(' ', WHITE_TEXT_ON_BLACK);
     8c8:	80 e2       	ldi	r24, 0x20	; 32
     8ca:	61 e0       	ldi	r22, 0x01	; 1
     8cc:	0e 94 40 0c 	call	0x1880	; 0x1880 <Lcd3310_Char>

				get_present_speed /= 1.5;
     8d0:	60 91 b4 00 	lds	r22, 0x00B4
     8d4:	70 e0       	ldi	r23, 0x00	; 0
     8d6:	88 27       	eor	r24, r24
     8d8:	77 fd       	sbrc	r23, 7
     8da:	80 95       	com	r24
     8dc:	98 2f       	mov	r25, r24
     8de:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <__floatsisf>
     8e2:	20 e0       	ldi	r18, 0x00	; 0
     8e4:	30 e0       	ldi	r19, 0x00	; 0
     8e6:	40 ec       	ldi	r20, 0xC0	; 192
     8e8:	5f e3       	ldi	r21, 0x3F	; 63
     8ea:	0e 94 1e 14 	call	0x283c	; 0x283c <__divsf3>
     8ee:	0e 94 4e 11 	call	0x229c	; 0x229c <__fixunssfsi>
     8f2:	60 93 b4 00 	sts	0x00B4, r22
				step_speed -= 3 * uwin_times;
     8f6:	80 91 50 03 	lds	r24, 0x0350
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	9c 01       	movw	r18, r24
     8fe:	22 0f       	add	r18, r18
     900:	33 1f       	adc	r19, r19
     902:	28 0f       	add	r18, r24
     904:	39 1f       	adc	r19, r25
     906:	80 91 b3 00 	lds	r24, 0x00B3
     90a:	82 1b       	sub	r24, r18
     90c:	80 93 b3 00 	sts	0x00B3, r24
			}
			while(JOYSTICK_INT_CHECK());
     910:	83 99       	sbic	0x10, 3	; 16
     912:	fe cf       	rjmp	.-4      	; 0x910 <__stack+0xb1>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     914:	80 e4       	ldi	r24, 0x40	; 64
     916:	9f e1       	ldi	r25, 0x1F	; 31
     918:	01 97       	sbiw	r24, 0x01	; 1
     91a:	f1 f7       	brne	.-4      	; 0x918 <__stack+0xb9>
			_delay_ms(2);
			GIFR = _BV(INTF1);
     91c:	80 e8       	ldi	r24, 0x80	; 128
     91e:	8a bf       	out	0x3a, r24	; 58


			timer_ticks_to_get_present = get_present_speed;
     920:	80 91 b4 00 	lds	r24, 0x00B4
     924:	80 93 03 01 	sts	0x0103, r24
			timer_delay = step_speed;
     928:	80 91 b3 00 	lds	r24, 0x00B3
     92c:	80 93 84 03 	sts	0x0384, r24

			score = (uwin_times<<4);
     930:	80 91 50 03 	lds	r24, 0x0350
     934:	82 95       	swap	r24
     936:	80 7f       	andi	r24, 0xF0	; 240
     938:	80 93 51 03 	sts	0x0351, r24
			SnakeGame_Start();
     93c:	0e 94 7f 03 	call	0x6fe	; 0x6fe <SnakeGame_Start>
		}
	}

	snakegame_UpdateDisplay();
     940:	0e 94 8c 02 	call	0x518	; 0x518 <snakegame_UpdateDisplay>
}
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	08 95       	ret

0000094a <hex2dec_result>:
PGM_P pstr_please_wait = "Please wait...";

uint8_t measure_delay = MEASURE_DELAY_BEFORE_START_ADC;

uint16_t hex2dec_result(uint16_t hex)
{
     94a:	1f 93       	push	r17
     94c:	9c 01       	movw	r18, r24
	uint8_t res2, res1, res0;
	res0 =  hex % 10;
	hex /= 10;
     94e:	6a e0       	ldi	r22, 0x0A	; 10
     950:	70 e0       	ldi	r23, 0x00	; 0
     952:	0e 94 db 18 	call	0x31b6	; 0x31b6 <__udivmodhi4>
     956:	46 2f       	mov	r20, r22
     958:	17 2f       	mov	r17, r23
     95a:	86 2f       	mov	r24, r22
     95c:	97 2f       	mov	r25, r23
     95e:	6a e0       	ldi	r22, 0x0A	; 10
     960:	70 e0       	ldi	r23, 0x00	; 0
     962:	0e 94 db 18 	call	0x31b6	; 0x31b6 <__udivmodhi4>
     966:	e8 2f       	mov	r30, r24
     968:	f0 e0       	ldi	r31, 0x00	; 0
     96a:	84 e0       	ldi	r24, 0x04	; 4
     96c:	ee 0f       	add	r30, r30
     96e:	ff 1f       	adc	r31, r31
     970:	8a 95       	dec	r24
     972:	e1 f7       	brne	.-8      	; 0x96c <hex2dec_result+0x22>
     974:	c9 01       	movw	r24, r18
     976:	6a e0       	ldi	r22, 0x0A	; 10
     978:	70 e0       	ldi	r23, 0x00	; 0
     97a:	0e 94 db 18 	call	0x31b6	; 0x31b6 <__udivmodhi4>
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	e8 2b       	or	r30, r24
     982:	f9 2b       	or	r31, r25
     984:	84 2f       	mov	r24, r20
     986:	91 2f       	mov	r25, r17
     988:	6a e0       	ldi	r22, 0x0A	; 10
     98a:	70 e0       	ldi	r23, 0x00	; 0
     98c:	0e 94 db 18 	call	0x31b6	; 0x31b6 <__udivmodhi4>
     990:	cb 01       	movw	r24, r22
     992:	6a e0       	ldi	r22, 0x0A	; 10
     994:	70 e0       	ldi	r23, 0x00	; 0
     996:	0e 94 db 18 	call	0x31b6	; 0x31b6 <__udivmodhi4>
     99a:	38 2f       	mov	r19, r24
     99c:	20 e0       	ldi	r18, 0x00	; 0
     99e:	e2 2b       	or	r30, r18
     9a0:	f3 2b       	or	r31, r19
	res1 = hex % 10;
	hex /= 10;
	res2 = hex % 10;

	return (res2 << 8) | (res1 << 4)| res0;
}
     9a2:	cf 01       	movw	r24, r30
     9a4:	1f 91       	pop	r17
     9a6:	08 95       	ret

000009a8 <ADC_N_Times>:


void ADC_N_Times(void)
{
	uint32_t adc_256_times = 0x00000000;
	adc_data = 0x0000;
     9a8:	10 92 7e 03 	sts	0x037E, r1
     9ac:	10 92 7d 03 	sts	0x037D, r1

	PORTC |= _BV(PC3);
     9b0:	ab 9a       	sbi	0x15, 3	; 21
	DDRC  |= _BV(PC3);	// test pin up
     9b2:	a3 9a       	sbi	0x14, 3	; 20
     9b4:	20 e0       	ldi	r18, 0x00	; 0
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	40 e0       	ldi	r20, 0x00	; 0
     9ba:	50 e0       	ldi	r21, 0x00	; 0
     9bc:	60 e0       	ldi	r22, 0x00	; 0
	do{
		ADCSRA |= _BV( ADSC ); // start conversation
		while( ADC_CONVERT_IN_PROGRESS() ) {  };
		adc_data = ADC;
		if((uint16_t)adc_data & (uint16_t)0x0200){
			adc_data = (uint16_t)0x03ff - adc_data + 1;
     9be:	e0 e0       	ldi	r30, 0x00	; 0
     9c0:	f4 e0       	ldi	r31, 0x04	; 4
	PORTC |= _BV(PC3);
	DDRC  |= _BV(PC3);	// test pin up

	uint8_t i=0;
	do{
		ADCSRA |= _BV( ADSC ); // start conversation
     9c2:	36 9a       	sbi	0x06, 6	; 6
		while( ADC_CONVERT_IN_PROGRESS() ) {  };
     9c4:	36 99       	sbic	0x06, 6	; 6
     9c6:	fe cf       	rjmp	.-4      	; 0x9c4 <ADC_N_Times+0x1c>
		adc_data = ADC;
     9c8:	84 b1       	in	r24, 0x04	; 4
     9ca:	95 b1       	in	r25, 0x05	; 5
     9cc:	90 93 7e 03 	sts	0x037E, r25
     9d0:	80 93 7d 03 	sts	0x037D, r24
		if((uint16_t)adc_data & (uint16_t)0x0200){
     9d4:	80 91 7d 03 	lds	r24, 0x037D
     9d8:	90 91 7e 03 	lds	r25, 0x037E
     9dc:	91 ff       	sbrs	r25, 1
     9de:	0b c0       	rjmp	.+22     	; 0x9f6 <ADC_N_Times+0x4e>
			adc_data = (uint16_t)0x03ff - adc_data + 1;
     9e0:	80 91 7d 03 	lds	r24, 0x037D
     9e4:	90 91 7e 03 	lds	r25, 0x037E
     9e8:	df 01       	movw	r26, r30
     9ea:	a8 1b       	sub	r26, r24
     9ec:	b9 0b       	sbc	r27, r25
     9ee:	b0 93 7e 03 	sts	0x037E, r27
     9f2:	a0 93 7d 03 	sts	0x037D, r26
		}

		adc_256_times += (uint32_t) adc_data;
     9f6:	80 91 7d 03 	lds	r24, 0x037D
     9fa:	90 91 7e 03 	lds	r25, 0x037E
     9fe:	a0 e0       	ldi	r26, 0x00	; 0
     a00:	b0 e0       	ldi	r27, 0x00	; 0
     a02:	28 0f       	add	r18, r24
     a04:	39 1f       	adc	r19, r25
     a06:	4a 1f       	adc	r20, r26
     a08:	5b 1f       	adc	r21, r27
	} while( ++i != 245 ); // loop 245 times, 7 brrrzzzzzzzzzzz
     a0a:	6f 5f       	subi	r22, 0xFF	; 255
     a0c:	65 3f       	cpi	r22, 0xF5	; 245
     a0e:	c9 f6       	brne	.-78     	; 0x9c2 <ADC_N_Times+0x1a>

	PORTC &= (uint8_t)~_BV(PC3); // test pin down
     a10:	ab 98       	cbi	0x15, 3	; 21

	adc_256_times >>= 8; // divide 256
	adc_data = (uint16_t) adc_256_times;
     a12:	bb 27       	eor	r27, r27
     a14:	a5 2f       	mov	r26, r21
     a16:	94 2f       	mov	r25, r20
     a18:	83 2f       	mov	r24, r19
     a1a:	90 93 7e 03 	sts	0x037E, r25
     a1e:	80 93 7d 03 	sts	0x037D, r24
	//===================================//
}
     a22:	08 95       	ret

00000a24 <MeasureAllAlgorithm>:
	_delay_ms(500);
}

void MeasureAllAlgorithm(uint8_t color)
{
	result[MEASURE_INDX][color] = adc_data;
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	20 91 7d 03 	lds	r18, 0x037D
     a2a:	30 91 7e 03 	lds	r19, 0x037E
     a2e:	fc 01       	movw	r30, r24
     a30:	ee 0f       	add	r30, r30
     a32:	ff 1f       	adc	r31, r31
     a34:	ef 59       	subi	r30, 0x9F	; 159
     a36:	fc 4f       	sbci	r31, 0xFC	; 252
     a38:	31 83       	std	Z+1, r19	; 0x01
     a3a:	20 83       	st	Z, r18
	int16_t diff = result[CALIBRATE_INDX][color] - result[MEASURE_INDX][color];
     a3c:	88 0f       	add	r24, r24
     a3e:	99 1f       	adc	r25, r25
     a40:	fc 01       	movw	r30, r24
     a42:	ed 5a       	subi	r30, 0xAD	; 173
     a44:	fc 4f       	sbci	r31, 0xFC	; 252
     a46:	01 90       	ld	r0, Z+
     a48:	f0 81       	ld	r31, Z
     a4a:	e0 2d       	mov	r30, r0
     a4c:	e2 1b       	sub	r30, r18
     a4e:	f3 0b       	sbc	r31, r19
	if( diff < 0 ) diff *= -1;
	result[DIFF_INDX][color] = diff;
     a50:	dc 01       	movw	r26, r24
     a52:	a1 59       	subi	r26, 0x91	; 145
     a54:	bc 4f       	sbci	r27, 0xFC	; 252
     a56:	11 96       	adiw	r26, 0x01	; 1
     a58:	fc 93       	st	X, r31
     a5a:	ee 93       	st	-X, r30
     a5c:	f7 ff       	sbrs	r31, 7
     a5e:	06 c0       	rjmp	.+12     	; 0xa6c <MeasureAllAlgorithm+0x48>
     a60:	88 27       	eor	r24, r24
     a62:	99 27       	eor	r25, r25
     a64:	8e 1b       	sub	r24, r30
     a66:	9f 0b       	sbc	r25, r31
     a68:	8d 93       	st	X+, r24
     a6a:	9c 93       	st	X, r25
     a6c:	08 95       	ret

00000a6e <CalibrationAlgorithm>:
}

void CalibrationAlgorithm(uint8_t color)
{
	result[CALIBRATE_INDX][color] = adc_data;
     a6e:	20 91 7d 03 	lds	r18, 0x037D
     a72:	30 91 7e 03 	lds	r19, 0x037E
     a76:	e8 2f       	mov	r30, r24
     a78:	f0 e0       	ldi	r31, 0x00	; 0
     a7a:	ee 0f       	add	r30, r30
     a7c:	ff 1f       	adc	r31, r31
     a7e:	ed 5a       	subi	r30, 0xAD	; 173
     a80:	fc 4f       	sbci	r31, 0xFC	; 252
     a82:	31 83       	std	Z+1, r19	; 0x01
     a84:	20 83       	st	Z, r18
}
     a86:	08 95       	ret

00000a88 <SaveMeasureResultsToCalibrate>:
	//===================================//
}

void SaveMeasureResultsToCalibrate(void)
{
	result[CALIBRATE_INDX][RED] = result[MEASURE_INDX][RED];
     a88:	80 91 61 03 	lds	r24, 0x0361
     a8c:	90 91 62 03 	lds	r25, 0x0362
     a90:	90 93 54 03 	sts	0x0354, r25
     a94:	80 93 53 03 	sts	0x0353, r24
	result[CALIBRATE_INDX][GREEN] = result[MEASURE_INDX][GREEN];
     a98:	80 91 63 03 	lds	r24, 0x0363
     a9c:	90 91 64 03 	lds	r25, 0x0364
     aa0:	90 93 56 03 	sts	0x0356, r25
     aa4:	80 93 55 03 	sts	0x0355, r24
	result[CALIBRATE_INDX][BLUE] = result[MEASURE_INDX][BLUE];
     aa8:	80 91 65 03 	lds	r24, 0x0365
     aac:	90 91 66 03 	lds	r25, 0x0366
     ab0:	90 93 58 03 	sts	0x0358, r25
     ab4:	80 93 57 03 	sts	0x0357, r24
	result[CALIBRATE_INDX][RED_GREEN] = result[MEASURE_INDX][RED_GREEN];
     ab8:	80 91 67 03 	lds	r24, 0x0367
     abc:	90 91 68 03 	lds	r25, 0x0368
     ac0:	90 93 5a 03 	sts	0x035A, r25
     ac4:	80 93 59 03 	sts	0x0359, r24
	result[CALIBRATE_INDX][RED_BLUE] = result[MEASURE_INDX][RED_BLUE];
     ac8:	80 91 69 03 	lds	r24, 0x0369
     acc:	90 91 6a 03 	lds	r25, 0x036A
     ad0:	90 93 5c 03 	sts	0x035C, r25
     ad4:	80 93 5b 03 	sts	0x035B, r24
	result[CALIBRATE_INDX][GREEN_BLUE] = result[MEASURE_INDX][GREEN_BLUE];
     ad8:	80 91 6b 03 	lds	r24, 0x036B
     adc:	90 91 6c 03 	lds	r25, 0x036C
     ae0:	90 93 5e 03 	sts	0x035E, r25
     ae4:	80 93 5d 03 	sts	0x035D, r24
	result[CALIBRATE_INDX][ALL] = result[MEASURE_INDX][ALL];
     ae8:	80 91 6d 03 	lds	r24, 0x036D
     aec:	90 91 6e 03 	lds	r25, 0x036E
     af0:	90 93 60 03 	sts	0x0360, r25
     af4:	80 93 5f 03 	sts	0x035F, r24

	result[DIFF_INDX][RED] = 0;
     af8:	10 92 70 03 	sts	0x0370, r1
     afc:	10 92 6f 03 	sts	0x036F, r1
	result[DIFF_INDX][GREEN] = 0;
     b00:	10 92 72 03 	sts	0x0372, r1
     b04:	10 92 71 03 	sts	0x0371, r1
	result[DIFF_INDX][BLUE] = 0;
     b08:	10 92 74 03 	sts	0x0374, r1
     b0c:	10 92 73 03 	sts	0x0373, r1
	result[DIFF_INDX][RED_GREEN] = 0;
     b10:	10 92 76 03 	sts	0x0376, r1
     b14:	10 92 75 03 	sts	0x0375, r1
	result[DIFF_INDX][RED_BLUE] = 0;
     b18:	10 92 78 03 	sts	0x0378, r1
     b1c:	10 92 77 03 	sts	0x0377, r1
	result[DIFF_INDX][GREEN_BLUE] = 0;
     b20:	10 92 7a 03 	sts	0x037A, r1
     b24:	10 92 79 03 	sts	0x0379, r1
	result[DIFF_INDX][ALL] = 0;
     b28:	10 92 7c 03 	sts	0x037C, r1
     b2c:	10 92 7b 03 	sts	0x037B, r1

	Lcd3310_ClearCenter();
     b30:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <Lcd3310_ClearCenter>
	Lcd3310_GotoXY(5,3);
     b34:	85 e0       	ldi	r24, 0x05	; 5
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	63 e0       	ldi	r22, 0x03	; 3
     b3a:	70 e0       	ldi	r23, 0x00	; 0
     b3c:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <Lcd3310_GotoXY>
	Lcd3310_Char('S', BLACK_TEXT_ON_WHITE);
     b40:	83 e5       	ldi	r24, 0x53	; 83
     b42:	60 e0       	ldi	r22, 0x00	; 0
     b44:	0e 94 40 0c 	call	0x1880	; 0x1880 <Lcd3310_Char>
	Lcd3310_Char('a', BLACK_TEXT_ON_WHITE);
     b48:	81 e6       	ldi	r24, 0x61	; 97
     b4a:	60 e0       	ldi	r22, 0x00	; 0
     b4c:	0e 94 40 0c 	call	0x1880	; 0x1880 <Lcd3310_Char>
	Lcd3310_Char('v', BLACK_TEXT_ON_WHITE);
     b50:	86 e7       	ldi	r24, 0x76	; 118
     b52:	60 e0       	ldi	r22, 0x00	; 0
     b54:	0e 94 40 0c 	call	0x1880	; 0x1880 <Lcd3310_Char>
	Lcd3310_Char('e', BLACK_TEXT_ON_WHITE);
     b58:	85 e6       	ldi	r24, 0x65	; 101
     b5a:	60 e0       	ldi	r22, 0x00	; 0
     b5c:	0e 94 40 0c 	call	0x1880	; 0x1880 <Lcd3310_Char>
	Lcd3310_Char('d', BLACK_TEXT_ON_WHITE);
     b60:	84 e6       	ldi	r24, 0x64	; 100
     b62:	60 e0       	ldi	r22, 0x00	; 0
     b64:	0e 94 40 0c 	call	0x1880	; 0x1880 <Lcd3310_Char>
     b68:	88 e8       	ldi	r24, 0x88	; 136
     b6a:	93 e1       	ldi	r25, 0x13	; 19
     b6c:	20 e9       	ldi	r18, 0x90	; 144
     b6e:	31 e0       	ldi	r19, 0x01	; 1
     b70:	f9 01       	movw	r30, r18
     b72:	31 97       	sbiw	r30, 0x01	; 1
     b74:	f1 f7       	brne	.-4      	; 0xb72 <SaveMeasureResultsToCalibrate+0xea>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b76:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b78:	d9 f7       	brne	.-10     	; 0xb70 <SaveMeasureResultsToCalibrate+0xe8>
	_delay_ms(500);
}
     b7a:	08 95       	ret

00000b7c <ADC_LoadingAndEvalIt>:
	result[CALIBRATE_INDX][color] = adc_data;
}


void ADC_LoadingAndEvalIt(ptrEvalMe evalMe)
{
     b7c:	4f 92       	push	r4
     b7e:	5f 92       	push	r5
     b80:	6f 92       	push	r6
     b82:	7f 92       	push	r7
     b84:	9f 92       	push	r9
     b86:	af 92       	push	r10
     b88:	bf 92       	push	r11
     b8a:	cf 92       	push	r12
     b8c:	df 92       	push	r13
     b8e:	ef 92       	push	r14
     b90:	ff 92       	push	r15
     b92:	0f 93       	push	r16
     b94:	1f 93       	push	r17
     b96:	cf 93       	push	r28
     b98:	df 93       	push	r29
     b9a:	3c 01       	movw	r6, r24
	 *
	 * [############]
	 *
	 * 	 Complete!
	 */
	JOYSTICK_INT_DISABLE();
     b9c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     b9e:	f8 94       	cli
     ba0:	8b b7       	in	r24, 0x3b	; 59
     ba2:	8f 77       	andi	r24, 0x7F	; 127
     ba4:	8b bf       	out	0x3b, r24	; 59
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     ba6:	9f bf       	out	0x3f, r25	; 63

	Lcd3310_ClearCenter();
     ba8:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <Lcd3310_ClearCenter>
	Lcd3310_GotoXY(0, 1);
     bac:	80 e0       	ldi	r24, 0x00	; 0
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	61 e0       	ldi	r22, 0x01	; 1
     bb2:	70 e0       	ldi	r23, 0x00	; 0
     bb4:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <Lcd3310_GotoXY>
	Lcd3310_String_P( pstr_please_wait, BLACK_TEXT_ON_WHITE );
     bb8:	80 91 00 01 	lds	r24, 0x0100
     bbc:	90 91 01 01 	lds	r25, 0x0101
     bc0:	60 e0       	ldi	r22, 0x00	; 0
     bc2:	0e 94 91 0c 	call	0x1922	; 0x1922 <Lcd3310_String_P>

	Lcd3310_GotoXY(1, 3);
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	63 e0       	ldi	r22, 0x03	; 3
     bcc:	70 e0       	ldi	r23, 0x00	; 0
     bce:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <Lcd3310_GotoXY>
	Lcd3310_Char('[', BLACK_TEXT_ON_WHITE);
     bd2:	8b e5       	ldi	r24, 0x5B	; 91
     bd4:	60 e0       	ldi	r22, 0x00	; 0
     bd6:	0e 94 40 0c 	call	0x1880	; 0x1880 <Lcd3310_Char>
     bda:	c7 ed       	ldi	r28, 0xD7	; 215
     bdc:	d0 e0       	ldi	r29, 0x00	; 0
     bde:	99 24       	eor	r9, r9
     be0:	70 e9       	ldi	r23, 0x90	; 144
     be2:	47 2e       	mov	r4, r23
     be4:	71 e0       	ldi	r23, 0x01	; 1
     be6:	57 2e       	mov	r5, r23

	for(uint8_t color=0; color < 7; color++){
		LedDriver_SwitchLeds( RED_LEDS | GREEN_LEDS | BLUE_LEDS );
     be8:	8c ef       	ldi	r24, 0xFC	; 252
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <LedDriver_SwitchLeds>
		_delay_ms((double) measure_delay * 1000 );
     bf0:	60 91 02 01 	lds	r22, 0x0102
     bf4:	70 e0       	ldi	r23, 0x00	; 0
     bf6:	80 e0       	ldi	r24, 0x00	; 0
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <__floatunsisf>
     bfe:	20 e0       	ldi	r18, 0x00	; 0
     c00:	30 e0       	ldi	r19, 0x00	; 0
     c02:	4a e7       	ldi	r20, 0x7A	; 122
     c04:	54 e4       	ldi	r21, 0x44	; 68
     c06:	0e 94 24 13 	call	0x2648	; 0x2648 <__mulsf3>
     c0a:	5b 01       	movw	r10, r22
     c0c:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c0e:	20 e0       	ldi	r18, 0x00	; 0
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	4a e7       	ldi	r20, 0x7A	; 122
     c14:	55 e4       	ldi	r21, 0x45	; 69
     c16:	0e 94 24 13 	call	0x2648	; 0x2648 <__mulsf3>
     c1a:	7b 01       	movw	r14, r22
     c1c:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     c1e:	20 e0       	ldi	r18, 0x00	; 0
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	40 e8       	ldi	r20, 0x80	; 128
     c24:	5f e3       	ldi	r21, 0x3F	; 63
     c26:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <__ltsf2>
     c2a:	88 23       	and	r24, r24
     c2c:	1c f4       	brge	.+6      	; 0xc34 <ADC_LoadingAndEvalIt+0xb8>
     c2e:	61 e0       	ldi	r22, 0x01	; 1
     c30:	70 e0       	ldi	r23, 0x00	; 0
     c32:	22 c0       	rjmp	.+68     	; 0xc78 <ADC_LoadingAndEvalIt+0xfc>
		__ticks = 1;
	else if (__tmp > 65535)
     c34:	c8 01       	movw	r24, r16
     c36:	b7 01       	movw	r22, r14
     c38:	20 e0       	ldi	r18, 0x00	; 0
     c3a:	3f ef       	ldi	r19, 0xFF	; 255
     c3c:	4f e7       	ldi	r20, 0x7F	; 127
     c3e:	57 e4       	ldi	r21, 0x47	; 71
     c40:	0e 94 ca 14 	call	0x2994	; 0x2994 <__gtsf2>
     c44:	18 16       	cp	r1, r24
     c46:	a4 f4       	brge	.+40     	; 0xc70 <ADC_LoadingAndEvalIt+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c48:	c6 01       	movw	r24, r12
     c4a:	b5 01       	movw	r22, r10
     c4c:	20 e0       	ldi	r18, 0x00	; 0
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	40 e2       	ldi	r20, 0x20	; 32
     c52:	51 e4       	ldi	r21, 0x41	; 65
     c54:	0e 94 24 13 	call	0x2648	; 0x2648 <__mulsf3>
     c58:	0e 94 4e 11 	call	0x229c	; 0x229c <__fixunssfsi>
     c5c:	05 c0       	rjmp	.+10     	; 0xc68 <ADC_LoadingAndEvalIt+0xec>
     c5e:	c2 01       	movw	r24, r4
     c60:	01 97       	sbiw	r24, 0x01	; 1
     c62:	f1 f7       	brne	.-4      	; 0xc60 <ADC_LoadingAndEvalIt+0xe4>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c64:	61 50       	subi	r22, 0x01	; 1
     c66:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c68:	61 15       	cp	r22, r1
     c6a:	71 05       	cpc	r23, r1
     c6c:	c1 f7       	brne	.-16     	; 0xc5e <ADC_LoadingAndEvalIt+0xe2>
     c6e:	07 c0       	rjmp	.+14     	; 0xc7e <ADC_LoadingAndEvalIt+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c70:	c8 01       	movw	r24, r16
     c72:	b7 01       	movw	r22, r14
     c74:	0e 94 4e 11 	call	0x229c	; 0x229c <__fixunssfsi>
     c78:	cb 01       	movw	r24, r22
     c7a:	01 97       	sbiw	r24, 0x01	; 1
     c7c:	f1 f7       	brne	.-4      	; 0xc7a <ADC_LoadingAndEvalIt+0xfe>
		Lcd3310_Char('#', BLACK_TEXT_ON_WHITE);
     c7e:	83 e2       	ldi	r24, 0x23	; 35
     c80:	60 e0       	ldi	r22, 0x00	; 0
     c82:	0e 94 40 0c 	call	0x1880	; 0x1880 <Lcd3310_Char>

		LedDriver_SwitchLeds( led_show_codes[color] );
     c86:	88 81       	ld	r24, Y
     c88:	99 81       	ldd	r25, Y+1	; 0x01
     c8a:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <LedDriver_SwitchLeds>
		_delay_ms((double) measure_delay * 1000 );
     c8e:	60 91 02 01 	lds	r22, 0x0102
     c92:	70 e0       	ldi	r23, 0x00	; 0
     c94:	80 e0       	ldi	r24, 0x00	; 0
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <__floatunsisf>
     c9c:	20 e0       	ldi	r18, 0x00	; 0
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	4a e7       	ldi	r20, 0x7A	; 122
     ca2:	54 e4       	ldi	r21, 0x44	; 68
     ca4:	0e 94 24 13 	call	0x2648	; 0x2648 <__mulsf3>
     ca8:	5b 01       	movw	r10, r22
     caa:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cac:	20 e0       	ldi	r18, 0x00	; 0
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	4a e7       	ldi	r20, 0x7A	; 122
     cb2:	55 e4       	ldi	r21, 0x45	; 69
     cb4:	0e 94 24 13 	call	0x2648	; 0x2648 <__mulsf3>
     cb8:	7b 01       	movw	r14, r22
     cba:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     cbc:	20 e0       	ldi	r18, 0x00	; 0
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	40 e8       	ldi	r20, 0x80	; 128
     cc2:	5f e3       	ldi	r21, 0x3F	; 63
     cc4:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <__ltsf2>
     cc8:	88 23       	and	r24, r24
     cca:	1c f4       	brge	.+6      	; 0xcd2 <ADC_LoadingAndEvalIt+0x156>
     ccc:	61 e0       	ldi	r22, 0x01	; 1
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	22 c0       	rjmp	.+68     	; 0xd16 <ADC_LoadingAndEvalIt+0x19a>
		__ticks = 1;
	else if (__tmp > 65535)
     cd2:	c8 01       	movw	r24, r16
     cd4:	b7 01       	movw	r22, r14
     cd6:	20 e0       	ldi	r18, 0x00	; 0
     cd8:	3f ef       	ldi	r19, 0xFF	; 255
     cda:	4f e7       	ldi	r20, 0x7F	; 127
     cdc:	57 e4       	ldi	r21, 0x47	; 71
     cde:	0e 94 ca 14 	call	0x2994	; 0x2994 <__gtsf2>
     ce2:	18 16       	cp	r1, r24
     ce4:	a4 f4       	brge	.+40     	; 0xd0e <ADC_LoadingAndEvalIt+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ce6:	c6 01       	movw	r24, r12
     ce8:	b5 01       	movw	r22, r10
     cea:	20 e0       	ldi	r18, 0x00	; 0
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	40 e2       	ldi	r20, 0x20	; 32
     cf0:	51 e4       	ldi	r21, 0x41	; 65
     cf2:	0e 94 24 13 	call	0x2648	; 0x2648 <__mulsf3>
     cf6:	0e 94 4e 11 	call	0x229c	; 0x229c <__fixunssfsi>
     cfa:	05 c0       	rjmp	.+10     	; 0xd06 <ADC_LoadingAndEvalIt+0x18a>
     cfc:	c2 01       	movw	r24, r4
     cfe:	01 97       	sbiw	r24, 0x01	; 1
     d00:	f1 f7       	brne	.-4      	; 0xcfe <ADC_LoadingAndEvalIt+0x182>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d02:	61 50       	subi	r22, 0x01	; 1
     d04:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d06:	61 15       	cp	r22, r1
     d08:	71 05       	cpc	r23, r1
     d0a:	c1 f7       	brne	.-16     	; 0xcfc <ADC_LoadingAndEvalIt+0x180>
     d0c:	07 c0       	rjmp	.+14     	; 0xd1c <ADC_LoadingAndEvalIt+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d0e:	c8 01       	movw	r24, r16
     d10:	b7 01       	movw	r22, r14
     d12:	0e 94 4e 11 	call	0x229c	; 0x229c <__fixunssfsi>
     d16:	cb 01       	movw	r24, r22
     d18:	01 97       	sbiw	r24, 0x01	; 1
     d1a:	f1 f7       	brne	.-4      	; 0xd18 <ADC_LoadingAndEvalIt+0x19c>

		Lcd3310_Char('#', BLACK_TEXT_ON_WHITE);
     d1c:	83 e2       	ldi	r24, 0x23	; 35
     d1e:	60 e0       	ldi	r22, 0x00	; 0
     d20:	0e 94 40 0c 	call	0x1880	; 0x1880 <Lcd3310_Char>

		ADC_N_Times();
     d24:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <ADC_N_Times>
		Lcd3310_Char('#', BLACK_TEXT_ON_WHITE);
     d28:	83 e2       	ldi	r24, 0x23	; 35
     d2a:	60 e0       	ldi	r22, 0x00	; 0
     d2c:	0e 94 40 0c 	call	0x1880	; 0x1880 <Lcd3310_Char>

		// Start Algorithm
		(evalMe)(color);
     d30:	89 2d       	mov	r24, r9
     d32:	f3 01       	movw	r30, r6
     d34:	09 95       	icall
	Lcd3310_String_P( pstr_please_wait, BLACK_TEXT_ON_WHITE );

	Lcd3310_GotoXY(1, 3);
	Lcd3310_Char('[', BLACK_TEXT_ON_WHITE);

	for(uint8_t color=0; color < 7; color++){
     d36:	93 94       	inc	r9
     d38:	22 96       	adiw	r28, 0x02	; 2
     d3a:	87 e0       	ldi	r24, 0x07	; 7
     d3c:	98 16       	cp	r9, r24
     d3e:	09 f0       	breq	.+2      	; 0xd42 <ADC_LoadingAndEvalIt+0x1c6>
     d40:	53 cf       	rjmp	.-346    	; 0xbe8 <ADC_LoadingAndEvalIt+0x6c>

		// Start Algorithm
		(evalMe)(color);
	}
//	LedDriver_SwitchLeds( 0x00 );
	LedDriver_SwitchLeds( RED_LEDS | GREEN_LEDS | BLUE_LEDS );
     d42:	8c ef       	ldi	r24, 0xFC	; 252
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <LedDriver_SwitchLeds>
	Lcd3310_Char(']', BLACK_TEXT_ON_WHITE);
     d4a:	8d e5       	ldi	r24, 0x5D	; 93
     d4c:	60 e0       	ldi	r22, 0x00	; 0
     d4e:	0e 94 40 0c 	call	0x1880	; 0x1880 <Lcd3310_Char>
	Lcd3310_GotoXY(2, 5);
     d52:	82 e0       	ldi	r24, 0x02	; 2
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	65 e0       	ldi	r22, 0x05	; 5
     d58:	70 e0       	ldi	r23, 0x00	; 0
     d5a:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <Lcd3310_GotoXY>
	Lcd3310_String_P( pstr_complete, BLACK_TEXT_ON_WHITE );
     d5e:	80 91 ef 00 	lds	r24, 0x00EF
     d62:	90 91 f0 00 	lds	r25, 0x00F0
     d66:	60 e0       	ldi	r22, 0x00	; 0
     d68:	0e 94 91 0c 	call	0x1922	; 0x1922 <Lcd3310_String_P>
     d6c:	88 e8       	ldi	r24, 0x88	; 136
     d6e:	93 e1       	ldi	r25, 0x13	; 19
     d70:	20 e9       	ldi	r18, 0x90	; 144
     d72:	31 e0       	ldi	r19, 0x01	; 1
     d74:	f9 01       	movw	r30, r18
     d76:	31 97       	sbiw	r30, 0x01	; 1
     d78:	f1 f7       	brne	.-4      	; 0xd76 <ADC_LoadingAndEvalIt+0x1fa>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d7a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d7c:	d9 f7       	brne	.-10     	; 0xd74 <ADC_LoadingAndEvalIt+0x1f8>
	_delay_ms(500); // show complete and wait 0.5 sec

	JOYSTICK_INT_ENABLE();
     d7e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     d80:	f8 94       	cli
     d82:	80 e4       	ldi	r24, 0x40	; 64
     d84:	8a bf       	out	0x3a, r24	; 58
     d86:	8b b7       	in	r24, 0x3b	; 59
     d88:	80 68       	ori	r24, 0x80	; 128
     d8a:	8b bf       	out	0x3b, r24	; 59
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     d8c:	9f bf       	out	0x3f, r25	; 63
}
     d8e:	df 91       	pop	r29
     d90:	cf 91       	pop	r28
     d92:	1f 91       	pop	r17
     d94:	0f 91       	pop	r16
     d96:	ff 90       	pop	r15
     d98:	ef 90       	pop	r14
     d9a:	df 90       	pop	r13
     d9c:	cf 90       	pop	r12
     d9e:	bf 90       	pop	r11
     da0:	af 90       	pop	r10
     da2:	9f 90       	pop	r9
     da4:	7f 90       	pop	r7
     da6:	6f 90       	pop	r6
     da8:	5f 90       	pop	r5
     daa:	4f 90       	pop	r4
     dac:	08 95       	ret

00000dae <uart_initialize>:

#if DEBUG > 0

void uart_initialize(void)
{
	UCSRA = UCSRA_VALUE;
     dae:	1b b8       	out	0x0b, r1	; 11
    UCSRB = UCSRB_VALUE;
     db0:	88 e0       	ldi	r24, 0x08	; 8
     db2:	8a b9       	out	0x0a, r24	; 10
    UCSRC = UCSRC_VALUE;
     db4:	8e e8       	ldi	r24, 0x8E	; 142
     db6:	80 bd       	out	0x20, r24	; 32
	UBRRH = UBRRH_VALUE;
     db8:	10 bc       	out	0x20, r1	; 32
	UBRRL = UBRRL_VALUE;
     dba:	87 e6       	ldi	r24, 0x67	; 103
     dbc:	89 b9       	out	0x09, r24	; 9
}
     dbe:	08 95       	ret

00000dc0 <uart_putchar>:


void uart_putchar(uint8_t c)
{
     dc0:	1f 93       	push	r17
     dc2:	18 2f       	mov	r17, r24
	if(c == '\n'){
     dc4:	8a 30       	cpi	r24, 0x0A	; 10
     dc6:	19 f4       	brne	.+6      	; 0xdce <uart_putchar+0xe>
		uart_putchar('\r');
     dc8:	8d e0       	ldi	r24, 0x0D	; 13
     dca:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <uart_putchar>
	}
	loop_until_bit_is_set( UCSRA, UDRE );
     dce:	5d 9b       	sbis	0x0b, 5	; 11
     dd0:	fe cf       	rjmp	.-4      	; 0xdce <uart_putchar+0xe>
	UDR = c;
     dd2:	1c b9       	out	0x0c, r17	; 12
} 
     dd4:	1f 91       	pop	r17
     dd6:	08 95       	ret

00000dd8 <uart_putstring_P>:

void uart_putstring_P(const char *strPtr)
{
     dd8:	cf 93       	push	r28
     dda:	df 93       	push	r29
     ddc:	ec 01       	movw	r28, r24
     dde:	02 c0       	rjmp	.+4      	; 0xde4 <uart_putstring_P+0xc>
	uint8_t temp;
	while ( (temp = pgm_read_byte ( strPtr++ )) ){
		uart_putchar( temp );
     de0:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <uart_putchar>
     de4:	fe 01       	movw	r30, r28
} 

void uart_putstring_P(const char *strPtr)
{
	uint8_t temp;
	while ( (temp = pgm_read_byte ( strPtr++ )) ){
     de6:	21 96       	adiw	r28, 0x01	; 1
     de8:	84 91       	lpm	r24, Z+
     dea:	88 23       	and	r24, r24
     dec:	c9 f7       	brne	.-14     	; 0xde0 <uart_putstring_P+0x8>
		uart_putchar( temp );
	}
}
     dee:	df 91       	pop	r29
     df0:	cf 91       	pop	r28
     df2:	08 95       	ret

00000df4 <LedDriver_SwitchLeds>:

#include "led_driver.h"


void LedDriver_SwitchLeds(uint16_t data)
{
     df4:	ac 01       	movw	r20, r24
     df6:	20 e0       	ldi	r18, 0x00	; 0
     df8:	30 e0       	ldi	r19, 0x00	; 0
	char i;
	for(i=0; i<16; i++){
		CLK_DOWN;
		if(data & _BV(i)){
     dfa:	61 e0       	ldi	r22, 0x01	; 1
     dfc:	70 e0       	ldi	r23, 0x00	; 0

void LedDriver_SwitchLeds(uint16_t data)
{
	char i;
	for(i=0; i<16; i++){
		CLK_DOWN;
     dfe:	db 98       	cbi	0x1b, 3	; 27
		if(data & _BV(i)){
     e00:	cb 01       	movw	r24, r22
     e02:	02 2e       	mov	r0, r18
     e04:	02 c0       	rjmp	.+4      	; 0xe0a <LedDriver_SwitchLeds+0x16>
     e06:	88 0f       	add	r24, r24
     e08:	99 1f       	adc	r25, r25
     e0a:	0a 94       	dec	r0
     e0c:	e2 f7       	brpl	.-8      	; 0xe06 <LedDriver_SwitchLeds+0x12>
     e0e:	84 23       	and	r24, r20
     e10:	95 23       	and	r25, r21
     e12:	89 2b       	or	r24, r25
     e14:	11 f0       	breq	.+4      	; 0xe1a <LedDriver_SwitchLeds+0x26>
			LED_DR_PORT |= DATA_PIN;
     e16:	da 9a       	sbi	0x1b, 2	; 27
     e18:	01 c0       	rjmp	.+2      	; 0xe1c <LedDriver_SwitchLeds+0x28>
		}else{
			LED_DR_PORT &= (unsigned char)~DATA_PIN;
     e1a:	da 98       	cbi	0x1b, 2	; 27
		}
		CLK_UP;
     e1c:	db 9a       	sbi	0x1b, 3	; 27
     e1e:	2f 5f       	subi	r18, 0xFF	; 255
     e20:	3f 4f       	sbci	r19, 0xFF	; 255


void LedDriver_SwitchLeds(uint16_t data)
{
	char i;
	for(i=0; i<16; i++){
     e22:	20 31       	cpi	r18, 0x10	; 16
     e24:	31 05       	cpc	r19, r1
     e26:	59 f7       	brne	.-42     	; 0xdfe <LedDriver_SwitchLeds+0xa>
		}else{
			LED_DR_PORT &= (unsigned char)~DATA_PIN;
		}
		CLK_UP;
	}
	LATCH_PULSE;
     e28:	dc 9a       	sbi	0x1b, 4	; 27
     e2a:	00 00       	nop
     e2c:	dc 98       	cbi	0x1b, 4	; 27
}
     e2e:	08 95       	ret

00000e30 <LedDriver_PWM>:

void LedDriver_PWM(uint8_t pwm, uint16_t leds)
{
     e30:	1f 93       	push	r17
     e32:	18 2f       	mov	r17, r24
     e34:	cb 01       	movw	r24, r22
	uint8_t temp = pwm;
	LedDriver_SwitchLeds(leds); // switch on leds
     e36:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <LedDriver_SwitchLeds>
     e3a:	81 2f       	mov	r24, r17
     e3c:	02 c0       	rjmp	.+4      	; 0xe42 <LedDriver_PWM+0x12>
	while(temp--){__asm__ __volatile__("nop");}
     e3e:	00 00       	nop
     e40:	81 50       	subi	r24, 0x01	; 1
     e42:	88 23       	and	r24, r24
     e44:	e1 f7       	brne	.-8      	; 0xe3e <LedDriver_PWM+0xe>
	temp = (uint8_t)~pwm;
     e46:	10 95       	com	r17
	LedDriver_SwitchLeds(0x00); // switch off all leds
     e48:	80 e0       	ldi	r24, 0x00	; 0
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <LedDriver_SwitchLeds>
     e50:	02 c0       	rjmp	.+4      	; 0xe56 <LedDriver_PWM+0x26>
	while(temp--){__asm__ __volatile__("nop");}
     e52:	00 00       	nop
     e54:	11 50       	subi	r17, 0x01	; 1
     e56:	11 23       	and	r17, r17
     e58:	e1 f7       	brne	.-8      	; 0xe52 <LedDriver_PWM+0x22>
	LedDriver_SwitchLeds(0x00);
     e5a:	80 e0       	ldi	r24, 0x00	; 0
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <LedDriver_SwitchLeds>
}
     e62:	1f 91       	pop	r17
     e64:	08 95       	ret

00000e66 <LedDriver_Init>:

void LedDriver_Init(void)
{
	LATCH_DOWN;
     e66:	dc 98       	cbi	0x1b, 4	; 27
	CLK_DOWN;
     e68:	db 98       	cbi	0x1b, 3	; 27
	LED_DR_DDR |= DATA_PIN | CLK_PIN | LATCH_PIN;
     e6a:	8a b3       	in	r24, 0x1a	; 26
     e6c:	8c 61       	ori	r24, 0x1C	; 28
     e6e:	8a bb       	out	0x1a, r24	; 26
	LedDriver_SwitchLeds(0x00);
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <LedDriver_SwitchLeds>
}
     e78:	08 95       	ret

00000e7a <LedDriver_Switch_3_Leds>:

void LedDriver_Switch_3_Leds(uint8_t data)
{
     e7a:	20 e0       	ldi	r18, 0x00	; 0
     e7c:	30 e0       	ldi	r19, 0x00	; 0
	// data mb: RED_LS, GREEN_LS, BLUE_LS

	for(uint8_t i=0; i < 3; i++){
		CLK_DOWN;
		if(data & _BV(i)){
     e7e:	48 2f       	mov	r20, r24
     e80:	50 e0       	ldi	r21, 0x00	; 0
void LedDriver_Switch_3_Leds(uint8_t data)
{
	// data mb: RED_LS, GREEN_LS, BLUE_LS

	for(uint8_t i=0; i < 3; i++){
		CLK_DOWN;
     e82:	db 98       	cbi	0x1b, 3	; 27
		if(data & _BV(i)){
     e84:	ca 01       	movw	r24, r20
     e86:	02 2e       	mov	r0, r18
     e88:	02 c0       	rjmp	.+4      	; 0xe8e <LedDriver_Switch_3_Leds+0x14>
     e8a:	95 95       	asr	r25
     e8c:	87 95       	ror	r24
     e8e:	0a 94       	dec	r0
     e90:	e2 f7       	brpl	.-8      	; 0xe8a <LedDriver_Switch_3_Leds+0x10>
     e92:	80 ff       	sbrs	r24, 0
     e94:	02 c0       	rjmp	.+4      	; 0xe9a <LedDriver_Switch_3_Leds+0x20>
			LED_DR_PORT |= DATA_PIN;
     e96:	da 9a       	sbi	0x1b, 2	; 27
     e98:	01 c0       	rjmp	.+2      	; 0xe9c <LedDriver_Switch_3_Leds+0x22>
		}else{
			LED_DR_PORT &= (uint8_t)~DATA_PIN;
     e9a:	da 98       	cbi	0x1b, 2	; 27
		}
		CLK_UP;
     e9c:	db 9a       	sbi	0x1b, 3	; 27
     e9e:	2f 5f       	subi	r18, 0xFF	; 255
     ea0:	3f 4f       	sbci	r19, 0xFF	; 255

void LedDriver_Switch_3_Leds(uint8_t data)
{
	// data mb: RED_LS, GREEN_LS, BLUE_LS

	for(uint8_t i=0; i < 3; i++){
     ea2:	23 30       	cpi	r18, 0x03	; 3
     ea4:	31 05       	cpc	r19, r1
     ea6:	69 f7       	brne	.-38     	; 0xe82 <LedDriver_Switch_3_Leds+0x8>
		}else{
			LED_DR_PORT &= (uint8_t)~DATA_PIN;
		}
		CLK_UP;
	}
	LATCH_PULSE;
     ea8:	dc 9a       	sbi	0x1b, 4	; 27
     eaa:	00 00       	nop
     eac:	dc 98       	cbi	0x1b, 4	; 27
}
     eae:	08 95       	ret

00000eb0 <__vector_5>:
}

//================================================//
//== 			Game timer ticks				==//
ISR(TIMER2_OVF_vect)
{
     eb0:	1f 92       	push	r1
     eb2:	0f 92       	push	r0
     eb4:	0f b6       	in	r0, 0x3f	; 63
     eb6:	0f 92       	push	r0
     eb8:	11 24       	eor	r1, r1
     eba:	2f 93       	push	r18
     ebc:	3f 93       	push	r19
     ebe:	4f 93       	push	r20
     ec0:	5f 93       	push	r21
     ec2:	6f 93       	push	r22
     ec4:	7f 93       	push	r23
     ec6:	8f 93       	push	r24
     ec8:	9f 93       	push	r25
     eca:	af 93       	push	r26
     ecc:	bf 93       	push	r27
     ece:	ef 93       	push	r30
     ed0:	ff 93       	push	r31
	if(!timer_delay--){
     ed2:	80 91 84 03 	lds	r24, 0x0384
     ed6:	81 50       	subi	r24, 0x01	; 1
     ed8:	80 93 84 03 	sts	0x0384, r24
     edc:	8f 5f       	subi	r24, 0xFF	; 255
     ede:	99 f4       	brne	.+38     	; 0xf06 <__vector_5+0x56>
		if(!timer_ticks_to_get_present--){
     ee0:	80 91 03 01 	lds	r24, 0x0103
     ee4:	81 50       	subi	r24, 0x01	; 1
     ee6:	80 93 03 01 	sts	0x0103, r24
     eea:	8f 5f       	subi	r24, 0xFF	; 255
     eec:	31 f4       	brne	.+12     	; 0xefa <__vector_5+0x4a>
			timer_ticks_to_get_present = get_present_speed;
     eee:	80 91 b4 00 	lds	r24, 0x00B4
     ef2:	80 93 03 01 	sts	0x0103, r24
			SnakeGame_AddmeUpdateXY();
     ef6:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <SnakeGame_AddmeUpdateXY>
		}
		SnakeGame_TakeNextStep();
     efa:	0e 94 aa 03 	call	0x754	; 0x754 <SnakeGame_TakeNextStep>
		timer_delay = step_speed;
     efe:	80 91 b3 00 	lds	r24, 0x00B3
     f02:	80 93 84 03 	sts	0x0384, r24
	}
}
     f06:	ff 91       	pop	r31
     f08:	ef 91       	pop	r30
     f0a:	bf 91       	pop	r27
     f0c:	af 91       	pop	r26
     f0e:	9f 91       	pop	r25
     f10:	8f 91       	pop	r24
     f12:	7f 91       	pop	r23
     f14:	6f 91       	pop	r22
     f16:	5f 91       	pop	r21
     f18:	4f 91       	pop	r20
     f1a:	3f 91       	pop	r19
     f1c:	2f 91       	pop	r18
     f1e:	0f 90       	pop	r0
     f20:	0f be       	out	0x3f, r0	; 63
     f22:	0f 90       	pop	r0
     f24:	1f 90       	pop	r1
     f26:	18 95       	reti

00000f28 <__vector_2>:


//================================================//
//== 				Joystick click				==//
ISR(INT1_vect)
{
     f28:	1f 92       	push	r1
     f2a:	0f 92       	push	r0
     f2c:	0f b6       	in	r0, 0x3f	; 63
     f2e:	0f 92       	push	r0
     f30:	11 24       	eor	r1, r1
     f32:	2f 93       	push	r18
     f34:	3f 93       	push	r19
     f36:	4f 93       	push	r20
     f38:	5f 93       	push	r21
     f3a:	6f 93       	push	r22
     f3c:	7f 93       	push	r23
     f3e:	8f 93       	push	r24
     f40:	9f 93       	push	r25
     f42:	af 93       	push	r26
     f44:	bf 93       	push	r27
     f46:	ef 93       	push	r30
     f48:	ff 93       	push	r31
     f4a:	80 e4       	ldi	r24, 0x40	; 64
     f4c:	9f e1       	ldi	r25, 0x1F	; 31
     f4e:	01 97       	sbiw	r24, 0x01	; 1
     f50:	f1 f7       	brne	.-4      	; 0xf4e <__vector_2+0x26>
#ifndef ANIMATION_SWITCH_MENU_ITEMS
	menu_before_now = 0x80;
#endif
	_delay_ms(2);	// anti brrrrzzzzrr

	GIFR = _BV(INTF1); // kill int1 flag
     f52:	80 e8       	ldi	r24, 0x80	; 128
     f54:	8a bf       	out	0x3a, r24	; 58

	uint8_t button_clicked = J_CENTER;

	while(1){
		uint8_t jpin_h = (JPIN & 0xf0);
     f56:	83 b3       	in	r24, 0x13	; 19
     f58:	80 7f       	andi	r24, 0xF0	; 240

		if( jpin_h == (uint8_t)(J_LU | J_RU) ){
     f5a:	80 39       	cpi	r24, 0x90	; 144
     f5c:	11 f4       	brne	.+4      	; 0xf62 <__vector_2+0x3a>
     f5e:	82 e0       	ldi	r24, 0x02	; 2
     f60:	0f c0       	rjmp	.+30     	; 0xf80 <__vector_2+0x58>
					break;
				}
			}
		}

		if( jpin_h == (uint8_t)(J_LD | J_RD) ){
     f62:	80 36       	cpi	r24, 0x60	; 96
     f64:	11 f4       	brne	.+4      	; 0xf6a <__vector_2+0x42>
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	0b c0       	rjmp	.+22     	; 0xf80 <__vector_2+0x58>
					break;
				}
			}
		}

		if( jpin_h == (uint8_t)(J_LU | J_LD) ){
     f6a:	80 3c       	cpi	r24, 0xC0	; 192
     f6c:	11 f4       	brne	.+4      	; 0xf72 <__vector_2+0x4a>
     f6e:	84 e0       	ldi	r24, 0x04	; 4
     f70:	07 c0       	rjmp	.+14     	; 0xf80 <__vector_2+0x58>
					break;
				}
			}

		}
		if( jpin_h == (uint8_t)(J_RU | J_RD) ){
     f72:	80 33       	cpi	r24, 0x30	; 48
     f74:	11 f4       	brne	.+4      	; 0xf7a <__vector_2+0x52>
     f76:	83 e0       	ldi	r24, 0x03	; 3
     f78:	03 c0       	rjmp	.+6      	; 0xf80 <__vector_2+0x58>
					break;
				}
			}

		}
		if( jpin_h == (uint8_t)(J_RU | J_LU | J_RD | J_LD) ){
     f7a:	80 3f       	cpi	r24, 0xF0	; 240
     f7c:	61 f7       	brne	.-40     	; 0xf56 <__vector_2+0x2e>
     f7e:	80 e0       	ldi	r24, 0x00	; 0
				}
			}
		}
	}

	if (JOYSTICK_INT_CHECK()) { return; } // interrupt on brrzzzz then pulling up joystick, so not need to do smth
     f80:	83 99       	sbic	0x10, 3	; 16
     f82:	9e c0       	rjmp	.+316    	; 0x10c0 <__vector_2+0x198>

	if (button_clicked == J_CENTER){
     f84:	88 23       	and	r24, r24
     f86:	41 f4       	brne	.+16     	; 0xf98 <__vector_2+0x70>
		FLAGS_SWITCH_ON(JOYSTICK_CENTER_CLICK_FLAG);
     f88:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     f8a:	f8 94       	cli
     f8c:	80 91 7f 03 	lds	r24, 0x037F
     f90:	90 91 80 03 	lds	r25, 0x0380
     f94:	82 60       	ori	r24, 0x02	; 2
     f96:	8f c0       	rjmp	.+286    	; 0x10b6 <__vector_2+0x18e>

	}else if(button_clicked == J_UP){
     f98:	81 30       	cpi	r24, 0x01	; 1
     f9a:	91 f4       	brne	.+36     	; 0xfc0 <__vector_2+0x98>
		menu_now = menu_now->prev;
     f9c:	e0 91 8d 03 	lds	r30, 0x038D
     fa0:	f0 91 8e 03 	lds	r31, 0x038E
     fa4:	87 81       	ldd	r24, Z+7	; 0x07
     fa6:	90 85       	ldd	r25, Z+8	; 0x08
     fa8:	90 93 8e 03 	sts	0x038E, r25
     fac:	80 93 8d 03 	sts	0x038D, r24

#		ifdef ANIMATION_SWITCH_MENU_ITEMS
		FLAGS_SWITCH_ON( ANIMATION_PREV_FLAG );
     fb0:	2f b7       	in	r18, 0x3f	; 63
     fb2:	f8 94       	cli
     fb4:	80 91 7f 03 	lds	r24, 0x037F
     fb8:	90 91 80 03 	lds	r25, 0x0380
     fbc:	88 60       	ori	r24, 0x08	; 8
     fbe:	7b c0       	rjmp	.+246    	; 0x10b6 <__vector_2+0x18e>
#		else
		menu_before_now--;
		FLAGS_SWITCH_ON( UPDATE_DISPLAY_FLAG );
#		endif
	}else if(button_clicked == J_DOWN){
     fc0:	82 30       	cpi	r24, 0x02	; 2
     fc2:	91 f4       	brne	.+36     	; 0xfe8 <__vector_2+0xc0>
		menu_now = menu_now->next;
     fc4:	e0 91 8d 03 	lds	r30, 0x038D
     fc8:	f0 91 8e 03 	lds	r31, 0x038E
     fcc:	85 81       	ldd	r24, Z+5	; 0x05
     fce:	96 81       	ldd	r25, Z+6	; 0x06
     fd0:	90 93 8e 03 	sts	0x038E, r25
     fd4:	80 93 8d 03 	sts	0x038D, r24

#		ifdef ANIMATION_SWITCH_MENU_ITEMS
		FLAGS_SWITCH_ON( ANIMATION_NEXT_FLAG );
     fd8:	2f b7       	in	r18, 0x3f	; 63
     fda:	f8 94       	cli
     fdc:	80 91 7f 03 	lds	r24, 0x037F
     fe0:	90 91 80 03 	lds	r25, 0x0380
     fe4:	84 60       	ori	r24, 0x04	; 4
     fe6:	67 c0       	rjmp	.+206    	; 0x10b6 <__vector_2+0x18e>
     fe8:	20 91 7f 03 	lds	r18, 0x037F
     fec:	30 91 80 03 	lds	r19, 0x0380
#		else
		menu_before_now++;
		FLAGS_SWITCH_ON( UPDATE_DISPLAY_FLAG );
#		endif
	}else if(button_clicked == J_LEFT){
     ff0:	83 30       	cpi	r24, 0x03	; 3
     ff2:	51 f5       	brne	.+84     	; 0x1048 <__vector_2+0x120>
		IF_FLAG_ON( SNAKE_PLAYING_NOW_FLAG ){
     ff4:	8f b7       	in	r24, 0x3f	; 63
     ff6:	f8 94       	cli
     ff8:	30 93 82 03 	sts	0x0382, r19
     ffc:	20 93 81 03 	sts	0x0381, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1000:	8f bf       	out	0x3f, r24	; 63
    1002:	80 91 81 03 	lds	r24, 0x0381
    1006:	86 ff       	sbrs	r24, 6
    1008:	02 c0       	rjmp	.+4      	; 0x100e <__vector_2+0xe6>
			SnakeGame_TurnLeft();
    100a:	0e 94 44 02 	call	0x488	; 0x488 <SnakeGame_TurnLeft>
		}

		if(menu_now == &results){
    100e:	80 91 8d 03 	lds	r24, 0x038D
    1012:	90 91 8e 03 	lds	r25, 0x038E
    1016:	21 e0       	ldi	r18, 0x01	; 1
    1018:	8f 33       	cpi	r24, 0x3F	; 63
    101a:	92 07       	cpc	r25, r18
    101c:	41 f4       	brne	.+16     	; 0x102e <__vector_2+0x106>
			FLAGS_SWITCH_ON( SAVE_MEASURED_AS_CALIBRATE_FLAG );
    101e:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1020:	f8 94       	cli
    1022:	80 91 7f 03 	lds	r24, 0x037F
    1026:	90 91 80 03 	lds	r25, 0x0380
    102a:	92 60       	ori	r25, 0x02	; 2
    102c:	44 c0       	rjmp	.+136    	; 0x10b6 <__vector_2+0x18e>
		}else if(menu_now == &set_measure_delay){
    102e:	87 5a       	subi	r24, 0xA7	; 167
    1030:	91 40       	sbci	r25, 0x01	; 1
    1032:	09 f0       	breq	.+2      	; 0x1036 <__vector_2+0x10e>
    1034:	45 c0       	rjmp	.+138    	; 0x10c0 <__vector_2+0x198>
			if(--measure_delay == 0){
    1036:	80 91 02 01 	lds	r24, 0x0102
    103a:	81 50       	subi	r24, 0x01	; 1
    103c:	80 93 02 01 	sts	0x0102, r24
    1040:	88 23       	and	r24, r24
    1042:	91 f5       	brne	.+100    	; 0x10a8 <__vector_2+0x180>
				measure_delay = 9;
    1044:	89 e0       	ldi	r24, 0x09	; 9
    1046:	2e c0       	rjmp	.+92     	; 0x10a4 <__vector_2+0x17c>
			}
			FLAGS_SWITCH_ON( UPDATE_DISPLAY_FLAG );
		}

	}else if(button_clicked == J_RIGHT){
		IF_FLAG_ON( SNAKE_PLAYING_NOW_FLAG ){
    1048:	8f b7       	in	r24, 0x3f	; 63
    104a:	f8 94       	cli
    104c:	30 93 82 03 	sts	0x0382, r19
    1050:	20 93 81 03 	sts	0x0381, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1054:	8f bf       	out	0x3f, r24	; 63
    1056:	80 91 81 03 	lds	r24, 0x0381
    105a:	86 ff       	sbrs	r24, 6
    105c:	02 c0       	rjmp	.+4      	; 0x1062 <__vector_2+0x13a>
			SnakeGame_TurnRight();
    105e:	0e 94 4f 02 	call	0x49e	; 0x49e <SnakeGame_TurnRight>
		}

		if(menu_now == &calibration){
    1062:	80 91 8d 03 	lds	r24, 0x038D
    1066:	90 91 8e 03 	lds	r25, 0x038E
    106a:	21 e0       	ldi	r18, 0x01	; 1
    106c:	81 3c       	cpi	r24, 0xC1	; 193
    106e:	92 07       	cpc	r25, r18
    1070:	19 f4       	brne	.+6      	; 0x1078 <__vector_2+0x150>
			menu_now = &go;
    1072:	85 e2       	ldi	r24, 0x25	; 37
    1074:	91 e0       	ldi	r25, 0x01	; 1
    1076:	06 c0       	rjmp	.+12     	; 0x1084 <__vector_2+0x15c>
		}else if(menu_now == &go){
    1078:	21 e0       	ldi	r18, 0x01	; 1
    107a:	85 32       	cpi	r24, 0x25	; 37
    107c:	92 07       	cpc	r25, r18
    107e:	39 f4       	brne	.+14     	; 0x108e <__vector_2+0x166>
			menu_now = &calibration;
    1080:	81 ec       	ldi	r24, 0xC1	; 193
    1082:	91 e0       	ldi	r25, 0x01	; 1
    1084:	90 93 8e 03 	sts	0x038E, r25
    1088:	80 93 8d 03 	sts	0x038D, r24
    108c:	0d c0       	rjmp	.+26     	; 0x10a8 <__vector_2+0x180>
		}else if(menu_now == &set_measure_delay){
    108e:	87 5a       	subi	r24, 0xA7	; 167
    1090:	91 40       	sbci	r25, 0x01	; 1
    1092:	51 f4       	brne	.+20     	; 0x10a8 <__vector_2+0x180>
			if(++measure_delay == 10){
    1094:	80 91 02 01 	lds	r24, 0x0102
    1098:	8f 5f       	subi	r24, 0xFF	; 255
    109a:	80 93 02 01 	sts	0x0102, r24
    109e:	8a 30       	cpi	r24, 0x0A	; 10
    10a0:	19 f4       	brne	.+6      	; 0x10a8 <__vector_2+0x180>
				measure_delay = 1;
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	80 93 02 01 	sts	0x0102, r24
			}
		}
		FLAGS_SWITCH_ON( UPDATE_DISPLAY_FLAG );
    10a8:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    10aa:	f8 94       	cli
    10ac:	80 91 7f 03 	lds	r24, 0x037F
    10b0:	90 91 80 03 	lds	r25, 0x0380
    10b4:	81 60       	ori	r24, 0x01	; 1
    10b6:	90 93 80 03 	sts	0x0380, r25
    10ba:	80 93 7f 03 	sts	0x037F, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    10be:	2f bf       	out	0x3f, r18	; 63

	}

}
    10c0:	ff 91       	pop	r31
    10c2:	ef 91       	pop	r30
    10c4:	bf 91       	pop	r27
    10c6:	af 91       	pop	r26
    10c8:	9f 91       	pop	r25
    10ca:	8f 91       	pop	r24
    10cc:	7f 91       	pop	r23
    10ce:	6f 91       	pop	r22
    10d0:	5f 91       	pop	r21
    10d2:	4f 91       	pop	r20
    10d4:	3f 91       	pop	r19
    10d6:	2f 91       	pop	r18
    10d8:	0f 90       	pop	r0
    10da:	0f be       	out	0x3f, r0	; 63
    10dc:	0f 90       	pop	r0
    10de:	1f 90       	pop	r1
    10e0:	18 95       	reti

000010e2 <DebugSendAllResultValues>:
uint8_t timer_ticks_to_get_present = SPEED_TICKS_TO_GET_PRESENT;



void DebugSendAllResultValues(void)
{
    10e2:	1f 93       	push	r17
	ATOMIC_BLOCK( ATOMIC_RESTORESTATE ){
    10e4:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    10e6:	f8 94       	cli
		DEBUG_PRINT_CHAR( 'C' );
    10e8:	83 e4       	ldi	r24, 0x43	; 67
    10ea:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <uart_putchar>
		DEBUG_PRINT_UINT16( hex2dec_result( result[CALIBRATE_INDX][RED] ) );
    10ee:	80 91 53 03 	lds	r24, 0x0353
    10f2:	90 91 54 03 	lds	r25, 0x0354
    10f6:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    10fa:	89 2f       	mov	r24, r25
    10fc:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <uart_putchar>
    1100:	80 91 53 03 	lds	r24, 0x0353
    1104:	90 91 54 03 	lds	r25, 0x0354
    1108:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    110c:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <uart_putchar>
		DEBUG_PRINT_UINT16( hex2dec_result( result[CALIBRATE_INDX][GREEN] ) );
    1110:	80 91 55 03 	lds	r24, 0x0355
    1114:	90 91 56 03 	lds	r25, 0x0356
    1118:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    111c:	89 2f       	mov	r24, r25
    111e:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <uart_putchar>
    1122:	80 91 55 03 	lds	r24, 0x0355
    1126:	90 91 56 03 	lds	r25, 0x0356
    112a:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    112e:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <uart_putchar>
		DEBUG_PRINT_UINT16( hex2dec_result( result[CALIBRATE_INDX][BLUE] ) );
    1132:	80 91 57 03 	lds	r24, 0x0357
    1136:	90 91 58 03 	lds	r25, 0x0358
    113a:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    113e:	89 2f       	mov	r24, r25
    1140:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <uart_putchar>
    1144:	80 91 57 03 	lds	r24, 0x0357
    1148:	90 91 58 03 	lds	r25, 0x0358
    114c:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    1150:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <uart_putchar>
		DEBUG_PRINT_UINT16( hex2dec_result( result[CALIBRATE_INDX][RED_GREEN] ) );
    1154:	80 91 59 03 	lds	r24, 0x0359
    1158:	90 91 5a 03 	lds	r25, 0x035A
    115c:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    1160:	89 2f       	mov	r24, r25
    1162:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <uart_putchar>
    1166:	80 91 59 03 	lds	r24, 0x0359
    116a:	90 91 5a 03 	lds	r25, 0x035A
    116e:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    1172:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <uart_putchar>
		DEBUG_PRINT_UINT16( hex2dec_result( result[CALIBRATE_INDX][RED_BLUE] ) );
    1176:	80 91 5b 03 	lds	r24, 0x035B
    117a:	90 91 5c 03 	lds	r25, 0x035C
    117e:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    1182:	89 2f       	mov	r24, r25
    1184:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <uart_putchar>
    1188:	80 91 5b 03 	lds	r24, 0x035B
    118c:	90 91 5c 03 	lds	r25, 0x035C
    1190:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    1194:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <uart_putchar>
		DEBUG_PRINT_UINT16( hex2dec_result( result[CALIBRATE_INDX][GREEN_BLUE] ) );
    1198:	80 91 5d 03 	lds	r24, 0x035D
    119c:	90 91 5e 03 	lds	r25, 0x035E
    11a0:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    11a4:	89 2f       	mov	r24, r25
    11a6:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <uart_putchar>
    11aa:	80 91 5d 03 	lds	r24, 0x035D
    11ae:	90 91 5e 03 	lds	r25, 0x035E
    11b2:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    11b6:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <uart_putchar>
		DEBUG_PRINT_UINT16( hex2dec_result( result[CALIBRATE_INDX][ALL] ) );
    11ba:	80 91 5f 03 	lds	r24, 0x035F
    11be:	90 91 60 03 	lds	r25, 0x0360
    11c2:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    11c6:	89 2f       	mov	r24, r25
    11c8:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <uart_putchar>
    11cc:	80 91 5f 03 	lds	r24, 0x035F
    11d0:	90 91 60 03 	lds	r25, 0x0360
    11d4:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    11d8:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <uart_putchar>

		DEBUG_PRINT_CHAR( 'M' );
    11dc:	8d e4       	ldi	r24, 0x4D	; 77
    11de:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <uart_putchar>
		DEBUG_PRINT_UINT16( hex2dec_result( result[MEASURE_INDX][RED] ) );
    11e2:	80 91 61 03 	lds	r24, 0x0361
    11e6:	90 91 62 03 	lds	r25, 0x0362
    11ea:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    11ee:	89 2f       	mov	r24, r25
    11f0:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <uart_putchar>
    11f4:	80 91 61 03 	lds	r24, 0x0361
    11f8:	90 91 62 03 	lds	r25, 0x0362
    11fc:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    1200:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <uart_putchar>
		DEBUG_PRINT_UINT16( hex2dec_result( result[MEASURE_INDX][GREEN] ) );
    1204:	80 91 63 03 	lds	r24, 0x0363
    1208:	90 91 64 03 	lds	r25, 0x0364
    120c:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    1210:	89 2f       	mov	r24, r25
    1212:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <uart_putchar>
    1216:	80 91 63 03 	lds	r24, 0x0363
    121a:	90 91 64 03 	lds	r25, 0x0364
    121e:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    1222:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <uart_putchar>
		DEBUG_PRINT_UINT16( hex2dec_result( result[MEASURE_INDX][BLUE] ) );
    1226:	80 91 65 03 	lds	r24, 0x0365
    122a:	90 91 66 03 	lds	r25, 0x0366
    122e:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    1232:	89 2f       	mov	r24, r25
    1234:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <uart_putchar>
    1238:	80 91 65 03 	lds	r24, 0x0365
    123c:	90 91 66 03 	lds	r25, 0x0366
    1240:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    1244:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <uart_putchar>
		DEBUG_PRINT_UINT16( hex2dec_result( result[MEASURE_INDX][RED_GREEN] ) );
    1248:	80 91 67 03 	lds	r24, 0x0367
    124c:	90 91 68 03 	lds	r25, 0x0368
    1250:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    1254:	89 2f       	mov	r24, r25
    1256:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <uart_putchar>
    125a:	80 91 67 03 	lds	r24, 0x0367
    125e:	90 91 68 03 	lds	r25, 0x0368
    1262:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    1266:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <uart_putchar>
		DEBUG_PRINT_UINT16( hex2dec_result( result[MEASURE_INDX][RED_BLUE] ) );
    126a:	80 91 69 03 	lds	r24, 0x0369
    126e:	90 91 6a 03 	lds	r25, 0x036A
    1272:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    1276:	89 2f       	mov	r24, r25
    1278:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <uart_putchar>
    127c:	80 91 69 03 	lds	r24, 0x0369
    1280:	90 91 6a 03 	lds	r25, 0x036A
    1284:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    1288:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <uart_putchar>
		DEBUG_PRINT_UINT16( hex2dec_result( result[MEASURE_INDX][GREEN_BLUE] ) );
    128c:	80 91 6b 03 	lds	r24, 0x036B
    1290:	90 91 6c 03 	lds	r25, 0x036C
    1294:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    1298:	89 2f       	mov	r24, r25
    129a:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <uart_putchar>
    129e:	80 91 6b 03 	lds	r24, 0x036B
    12a2:	90 91 6c 03 	lds	r25, 0x036C
    12a6:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    12aa:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <uart_putchar>
		DEBUG_PRINT_UINT16( hex2dec_result( result[MEASURE_INDX][ALL] ) );
    12ae:	80 91 6d 03 	lds	r24, 0x036D
    12b2:	90 91 6e 03 	lds	r25, 0x036E
    12b6:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    12ba:	89 2f       	mov	r24, r25
    12bc:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <uart_putchar>
    12c0:	80 91 6d 03 	lds	r24, 0x036D
    12c4:	90 91 6e 03 	lds	r25, 0x036E
    12c8:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    12cc:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <uart_putchar>

		DEBUG_PRINT_CHAR( 'D' );
    12d0:	84 e4       	ldi	r24, 0x44	; 68
    12d2:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <uart_putchar>
		DEBUG_PRINT_UINT16( hex2dec_result( result[DIFF_INDX][RED] ) );
    12d6:	80 91 6f 03 	lds	r24, 0x036F
    12da:	90 91 70 03 	lds	r25, 0x0370
    12de:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    12e2:	89 2f       	mov	r24, r25
    12e4:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <uart_putchar>
    12e8:	80 91 6f 03 	lds	r24, 0x036F
    12ec:	90 91 70 03 	lds	r25, 0x0370
    12f0:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    12f4:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <uart_putchar>
		DEBUG_PRINT_UINT16( hex2dec_result( result[DIFF_INDX][GREEN] ) );
    12f8:	80 91 71 03 	lds	r24, 0x0371
    12fc:	90 91 72 03 	lds	r25, 0x0372
    1300:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    1304:	89 2f       	mov	r24, r25
    1306:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <uart_putchar>
    130a:	80 91 71 03 	lds	r24, 0x0371
    130e:	90 91 72 03 	lds	r25, 0x0372
    1312:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    1316:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <uart_putchar>
		DEBUG_PRINT_UINT16( hex2dec_result( result[DIFF_INDX][BLUE] ) );
    131a:	80 91 73 03 	lds	r24, 0x0373
    131e:	90 91 74 03 	lds	r25, 0x0374
    1322:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    1326:	89 2f       	mov	r24, r25
    1328:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <uart_putchar>
    132c:	80 91 73 03 	lds	r24, 0x0373
    1330:	90 91 74 03 	lds	r25, 0x0374
    1334:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    1338:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <uart_putchar>
		DEBUG_PRINT_UINT16( hex2dec_result( result[DIFF_INDX][RED_GREEN] ) );
    133c:	80 91 75 03 	lds	r24, 0x0375
    1340:	90 91 76 03 	lds	r25, 0x0376
    1344:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    1348:	89 2f       	mov	r24, r25
    134a:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <uart_putchar>
    134e:	80 91 75 03 	lds	r24, 0x0375
    1352:	90 91 76 03 	lds	r25, 0x0376
    1356:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    135a:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <uart_putchar>
		DEBUG_PRINT_UINT16( hex2dec_result( result[DIFF_INDX][RED_BLUE] ) );
    135e:	80 91 77 03 	lds	r24, 0x0377
    1362:	90 91 78 03 	lds	r25, 0x0378
    1366:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    136a:	89 2f       	mov	r24, r25
    136c:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <uart_putchar>
    1370:	80 91 77 03 	lds	r24, 0x0377
    1374:	90 91 78 03 	lds	r25, 0x0378
    1378:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    137c:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <uart_putchar>
		DEBUG_PRINT_UINT16( hex2dec_result( result[DIFF_INDX][GREEN_BLUE] ) );
    1380:	80 91 79 03 	lds	r24, 0x0379
    1384:	90 91 7a 03 	lds	r25, 0x037A
    1388:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    138c:	89 2f       	mov	r24, r25
    138e:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <uart_putchar>
    1392:	80 91 79 03 	lds	r24, 0x0379
    1396:	90 91 7a 03 	lds	r25, 0x037A
    139a:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    139e:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <uart_putchar>
		DEBUG_PRINT_UINT16( hex2dec_result( result[DIFF_INDX][ALL] ) );
    13a2:	80 91 7b 03 	lds	r24, 0x037B
    13a6:	90 91 7c 03 	lds	r25, 0x037C
    13aa:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    13ae:	89 2f       	mov	r24, r25
    13b0:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <uart_putchar>
    13b4:	80 91 7b 03 	lds	r24, 0x037B
    13b8:	90 91 7c 03 	lds	r25, 0x037C
    13bc:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    13c0:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <uart_putchar>

		DEBUG_PRINT_CHAR( 'E' ); //  End
    13c4:	85 e4       	ldi	r24, 0x45	; 69
    13c6:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <uart_putchar>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    13ca:	1f bf       	out	0x3f, r17	; 63
//
//	DEBUG_PRINT_CHAR( 'D' );
//	DEBUG_PRINT_UINT16( ( result[DIFF_INDX][RED] ) );
//	DEBUG_PRINT_UINT16( ( result[DIFF_INDX][GREEN] ) );
//	DEBUG_PRINT_UINT16( ( result[DIFF_INDX][BLUE] ) );
}
    13cc:	1f 91       	pop	r17
    13ce:	08 95       	ret

000013d0 <main>:


int main(void)
{

	DEBUG_INIT(); // Initialize uart if DEBUG > 0
    13d0:	0e 94 d7 06 	call	0xdae	; 0xdae <uart_initialize>
    13d4:	88 e8       	ldi	r24, 0x88	; 136
    13d6:	93 e1       	ldi	r25, 0x13	; 19
    13d8:	20 e9       	ldi	r18, 0x90	; 144
    13da:	31 e0       	ldi	r19, 0x01	; 1
    13dc:	f9 01       	movw	r30, r18
    13de:	31 97       	sbiw	r30, 0x01	; 1
    13e0:	f1 f7       	brne	.-4      	; 0x13de <main+0xe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13e2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13e4:	d9 f7       	brne	.-10     	; 0x13dc <main+0xc>
	DEBUG_PRINT_CHAR( 0x01 );
    13e6:	81 e0       	ldi	r24, 0x01	; 1
    13e8:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <uart_putchar>

	// Input/Output Ports initialization
    PORTB = 0x00;
    13ec:	18 ba       	out	0x18, r1	; 24
    DDRB = 0x00;
    13ee:	17 ba       	out	0x17, r1	; 23

	LED_PORT = 0x00;
    13f0:	15 ba       	out	0x15, r1	; 21
	LED_DDR |= LED_P;
    13f2:	a3 9a       	sbi	0x14, 3	; 20

    PORTD |= J_C; // pull up joystick center button
    13f4:	93 9a       	sbi	0x12, 3	; 18
    DDRD = 0x00;
    13f6:	11 ba       	out	0x11, r1	; 17


    JPORT |= (uint8_t)(J_RU | J_LU | J_RD | J_LD);
    13f8:	85 b3       	in	r24, 0x15	; 21
    13fa:	80 6f       	ori	r24, 0xF0	; 240
    13fc:	85 bb       	out	0x15, r24	; 21
    JDDR &= (uint8_t)~(J_RU | J_LU | J_RD | J_LD);
    13fe:	84 b3       	in	r24, 0x14	; 20
    1400:	8f 70       	andi	r24, 0x0F	; 15
    1402:	84 bb       	out	0x14, r24	; 20


    ACSR = _BV(ACD); // turn off analog comparer, this is turns ON after RESET... delurium, but the fact ;)
    1404:	90 e8       	ldi	r25, 0x80	; 128
    1406:	98 b9       	out	0x08, r25	; 8

    // External Interrupt(s) initialization
    MCUCR= _BV(ISC11); // fall
    1408:	88 e0       	ldi	r24, 0x08	; 8
    140a:	85 bf       	out	0x35, r24	; 53
    GICR =  _BV(INT1); // joystick on int1 enable interrupt
    140c:	9b bf       	out	0x3b, r25	; 59

    ASSR = 0x00;
    140e:	12 bc       	out	0x22, r1	; 34
    TCCR0 = 0x00;
    1410:	13 be       	out	0x33, r1	; 51
    TCCR1A = 0x00;
    1412:	1f bc       	out	0x2f, r1	; 47
    TCCR1B = 0x00;
    1414:	1e bc       	out	0x2e, r1	; 46
    TCCR2 = 0x00;
    1416:	15 bc       	out	0x25, r1	; 37
    TIMSK = 0x00;
    1418:	19 be       	out	0x39, r1	; 57

	TIM2_INIT(); // see defines.h for details
    141a:	86 e0       	ldi	r24, 0x06	; 6
    141c:	85 bd       	out	0x25, r24	; 37

    // Init ADC
	ADMUX =  _BV(MUX3) | _BV(MUX0); // diff * 10; result in ADC
    141e:	89 e0       	ldi	r24, 0x09	; 9
    1420:	87 b9       	out	0x07, r24	; 7
	ADCSRA = _BV(ADEN) | _BV(ADPS2)  | _BV(ADPS1) | _BV(ADPS0); // F_CPU / 128;
    1422:	87 e8       	ldi	r24, 0x87	; 135
    1424:	86 b9       	out	0x06, r24	; 6

	// Make first conversation
	ADCSRA |= _BV( ADSC );
    1426:	36 9a       	sbi	0x06, 6	; 6
	while(ADC_CONVERT_IN_PROGRESS()){}
    1428:	36 99       	sbic	0x06, 6	; 6
    142a:	fe cf       	rjmp	.-4      	; 0x1428 <main+0x58>
	adc_data = ADC;
    142c:	84 b1       	in	r24, 0x04	; 4
    142e:	95 b1       	in	r25, 0x05	; 5
    1430:	90 93 7e 03 	sts	0x037E, r25
    1434:	80 93 7d 03 	sts	0x037D, r24

	LedDriver_Init();
    1438:	0e 94 33 07 	call	0xe66	; 0xe66 <LedDriver_Init>
	LedDriver_SwitchLeds(0x0000);
    143c:	80 e0       	ldi	r24, 0x00	; 0
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <LedDriver_SwitchLeds>

	Lcd3310_InitializeDisplay(DELAY_SHOW_SPLASH);
    1444:	88 ee       	ldi	r24, 0xE8	; 232
    1446:	93 e0       	ldi	r25, 0x03	; 3
    1448:	0e 94 d5 10 	call	0x21aa	; 0x21aa <Lcd3310_InitializeDisplay>
	DEBUG_PRINT_CHAR( 0x02 );
    144c:	82 e0       	ldi	r24, 0x02	; 2
    144e:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <uart_putchar>


	sei();
    1452:	78 94       	sei
	DEBUG_PRINT_CHAR( 0x03 );
    1454:	83 e0       	ldi	r24, 0x03	; 3
    1456:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <uart_putchar>


   	for(;;){

		IF_FLAG_ON( UPDATE_DISPLAY_FLAG ){
    145a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    145c:	f8 94       	cli
    145e:	20 91 7f 03 	lds	r18, 0x037F
    1462:	30 91 80 03 	lds	r19, 0x0380
    1466:	30 93 82 03 	sts	0x0382, r19
    146a:	20 93 81 03 	sts	0x0381, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    146e:	8f bf       	out	0x3f, r24	; 63
    1470:	80 91 81 03 	lds	r24, 0x0381
    1474:	80 ff       	sbrs	r24, 0
    1476:	1d c0       	rjmp	.+58     	; 0x14b2 <main+0xe2>
			FLAGS_SWITCH_OFF( UPDATE_DISPLAY_FLAG );
    1478:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    147a:	f8 94       	cli
    147c:	80 91 7f 03 	lds	r24, 0x037F
    1480:	90 91 80 03 	lds	r25, 0x0380
    1484:	8e 7f       	andi	r24, 0xFE	; 254
    1486:	90 93 80 03 	sts	0x0380, r25
    148a:	80 93 7f 03 	sts	0x037F, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    148e:	2f bf       	out	0x3f, r18	; 63

			IF_FLAG_OFF( SNAKE_PLAYING_NOW_FLAG ){
    1490:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1492:	f8 94       	cli
    1494:	80 91 7f 03 	lds	r24, 0x037F
    1498:	90 91 80 03 	lds	r25, 0x0380
    149c:	90 93 82 03 	sts	0x0382, r25
    14a0:	80 93 81 03 	sts	0x0381, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    14a4:	2f bf       	out	0x3f, r18	; 63
    14a6:	80 91 81 03 	lds	r24, 0x0381
    14aa:	86 fd       	sbrc	r24, 6
    14ac:	02 c0       	rjmp	.+4      	; 0x14b2 <main+0xe2>
				Lcd3310_UpdateDisplayInfo();
    14ae:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <Lcd3310_UpdateDisplayInfo>
			}
		}

		IF_FLAG_ON( JOYSTICK_CENTER_CLICK_FLAG ){
    14b2:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    14b4:	f8 94       	cli
    14b6:	20 91 7f 03 	lds	r18, 0x037F
    14ba:	30 91 80 03 	lds	r19, 0x0380
    14be:	30 93 82 03 	sts	0x0382, r19
    14c2:	20 93 81 03 	sts	0x0381, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    14c6:	8f bf       	out	0x3f, r24	; 63
    14c8:	80 91 81 03 	lds	r24, 0x0381
    14cc:	81 ff       	sbrs	r24, 1
    14ce:	1a c0       	rjmp	.+52     	; 0x1504 <main+0x134>
			FLAGS_SWITCH_OFF( JOYSTICK_CENTER_CLICK_FLAG );
    14d0:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    14d2:	f8 94       	cli
    14d4:	80 91 7f 03 	lds	r24, 0x037F
    14d8:	90 91 80 03 	lds	r25, 0x0380
    14dc:	8d 7f       	andi	r24, 0xFD	; 253
    14de:	90 93 80 03 	sts	0x0380, r25
    14e2:	80 93 7f 03 	sts	0x037F, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    14e6:	2f bf       	out	0x3f, r18	; 63

			Menu_EnterClick();
    14e8:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <Menu_EnterClick>

			FLAGS_SWITCH_ON( UPDATE_DISPLAY_FLAG );
    14ec:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    14ee:	f8 94       	cli
    14f0:	80 91 7f 03 	lds	r24, 0x037F
    14f4:	90 91 80 03 	lds	r25, 0x0380
    14f8:	81 60       	ori	r24, 0x01	; 1
    14fa:	90 93 80 03 	sts	0x0380, r25
    14fe:	80 93 7f 03 	sts	0x037F, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1502:	2f bf       	out	0x3f, r18	; 63
		}



		IF_FLAG_ON( ADC_RESULT_FLAG ){ // in menu adc result
    1504:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1506:	f8 94       	cli
    1508:	20 91 7f 03 	lds	r18, 0x037F
    150c:	30 91 80 03 	lds	r19, 0x0380
    1510:	30 93 82 03 	sts	0x0382, r19
    1514:	20 93 81 03 	sts	0x0381, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1518:	8f bf       	out	0x3f, r24	; 63
    151a:	80 91 81 03 	lds	r24, 0x0381
    151e:	84 ff       	sbrs	r24, 4
    1520:	1e c0       	rjmp	.+60     	; 0x155e <main+0x18e>

			ADC_LoadingAndEvalIt(MeasureAllAlgorithm);
    1522:	82 e1       	ldi	r24, 0x12	; 18
    1524:	95 e0       	ldi	r25, 0x05	; 5
    1526:	0e 94 be 05 	call	0xb7c	; 0xb7c <ADC_LoadingAndEvalIt>

			DebugSendAllResultValues();
    152a:	0e 94 71 08 	call	0x10e2	; 0x10e2 <DebugSendAllResultValues>

			FLAGS_SWITCH_OFF( ADC_RESULT_FLAG );
    152e:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1530:	f8 94       	cli
    1532:	80 91 7f 03 	lds	r24, 0x037F
    1536:	90 91 80 03 	lds	r25, 0x0380
    153a:	8f 7e       	andi	r24, 0xEF	; 239
    153c:	90 93 80 03 	sts	0x0380, r25
    1540:	80 93 7f 03 	sts	0x037F, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1544:	2f bf       	out	0x3f, r18	; 63
			FLAGS_SWITCH_ON( UPDATE_DISPLAY_FLAG );
    1546:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1548:	f8 94       	cli
    154a:	80 91 7f 03 	lds	r24, 0x037F
    154e:	90 91 80 03 	lds	r25, 0x0380
    1552:	81 60       	ori	r24, 0x01	; 1
    1554:	90 93 80 03 	sts	0x0380, r25
    1558:	80 93 7f 03 	sts	0x037F, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    155c:	2f bf       	out	0x3f, r18	; 63
		}

		IF_FLAG_ON( ADC_CALIBRATE_FLAG ){
    155e:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1560:	f8 94       	cli
    1562:	20 91 7f 03 	lds	r18, 0x037F
    1566:	30 91 80 03 	lds	r19, 0x0380
    156a:	30 93 82 03 	sts	0x0382, r19
    156e:	20 93 81 03 	sts	0x0381, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1572:	8f bf       	out	0x3f, r24	; 63
    1574:	80 91 81 03 	lds	r24, 0x0381
    1578:	85 ff       	sbrs	r24, 5
    157a:	10 c0       	rjmp	.+32     	; 0x159c <main+0x1cc>

			ADC_LoadingAndEvalIt(CalibrationAlgorithm);
    157c:	87 e3       	ldi	r24, 0x37	; 55
    157e:	95 e0       	ldi	r25, 0x05	; 5
    1580:	0e 94 be 05 	call	0xb7c	; 0xb7c <ADC_LoadingAndEvalIt>

			FLAGS_SWITCH_OFF( ADC_CALIBRATE_FLAG );
    1584:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1586:	f8 94       	cli
    1588:	80 91 7f 03 	lds	r24, 0x037F
    158c:	90 91 80 03 	lds	r25, 0x0380
    1590:	8f 7d       	andi	r24, 0xDF	; 223
    1592:	90 93 80 03 	sts	0x0380, r25
    1596:	80 93 7f 03 	sts	0x037F, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    159a:	2f bf       	out	0x3f, r18	; 63
		}

		IF_FLAG_ON( SAVE_MEASURED_AS_CALIBRATE_FLAG ){
    159c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    159e:	f8 94       	cli
    15a0:	20 91 7f 03 	lds	r18, 0x037F
    15a4:	30 91 80 03 	lds	r19, 0x0380
    15a8:	30 93 82 03 	sts	0x0382, r19
    15ac:	20 93 81 03 	sts	0x0381, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    15b0:	8f bf       	out	0x3f, r24	; 63
    15b2:	80 91 81 03 	lds	r24, 0x0381
    15b6:	90 91 82 03 	lds	r25, 0x0382
    15ba:	91 ff       	sbrs	r25, 1
    15bc:	1c c0       	rjmp	.+56     	; 0x15f6 <main+0x226>
			FLAGS_SWITCH_OFF( SAVE_MEASURED_AS_CALIBRATE_FLAG );
    15be:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    15c0:	f8 94       	cli
    15c2:	80 91 7f 03 	lds	r24, 0x037F
    15c6:	90 91 80 03 	lds	r25, 0x0380
    15ca:	9d 7f       	andi	r25, 0xFD	; 253
    15cc:	90 93 80 03 	sts	0x0380, r25
    15d0:	80 93 7f 03 	sts	0x037F, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    15d4:	2f bf       	out	0x3f, r18	; 63

			SaveMeasureResultsToCalibrate();
    15d6:	0e 94 44 05 	call	0xa88	; 0xa88 <SaveMeasureResultsToCalibrate>
			DebugSendAllResultValues();
    15da:	0e 94 71 08 	call	0x10e2	; 0x10e2 <DebugSendAllResultValues>

			FLAGS_SWITCH_ON( UPDATE_DISPLAY_FLAG );
    15de:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    15e0:	f8 94       	cli
    15e2:	80 91 7f 03 	lds	r24, 0x037F
    15e6:	90 91 80 03 	lds	r25, 0x0380
    15ea:	81 60       	ori	r24, 0x01	; 1
    15ec:	90 93 80 03 	sts	0x0380, r25
    15f0:	80 93 7f 03 	sts	0x037F, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    15f4:	2f bf       	out	0x3f, r18	; 63
		}


	#ifdef ANIMATION_SWITCH_MENU_ITEMS
		IF_FLAG_ON( ANIMATION_NEXT_FLAG ){
    15f6:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    15f8:	f8 94       	cli
    15fa:	20 91 7f 03 	lds	r18, 0x037F
    15fe:	30 91 80 03 	lds	r19, 0x0380
    1602:	30 93 82 03 	sts	0x0382, r19
    1606:	20 93 81 03 	sts	0x0381, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    160a:	8f bf       	out	0x3f, r24	; 63
    160c:	80 91 81 03 	lds	r24, 0x0381
    1610:	82 ff       	sbrs	r24, 2
    1612:	26 c0       	rjmp	.+76     	; 0x1660 <main+0x290>
			FLAGS_SWITCH_OFF( ANIMATION_NEXT_FLAG );
    1614:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1616:	f8 94       	cli
    1618:	80 91 7f 03 	lds	r24, 0x037F
    161c:	90 91 80 03 	lds	r25, 0x0380
    1620:	8b 7f       	andi	r24, 0xFB	; 251
    1622:	90 93 80 03 	sts	0x0380, r25
    1626:	80 93 7f 03 	sts	0x037F, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    162a:	2f bf       	out	0x3f, r18	; 63
			if(menu_now != &results && menu_now != &snake_results){
    162c:	80 91 8d 03 	lds	r24, 0x038D
    1630:	90 91 8e 03 	lds	r25, 0x038E
    1634:	21 e0       	ldi	r18, 0x01	; 1
    1636:	8f 33       	cpi	r24, 0x3F	; 63
    1638:	92 07       	cpc	r25, r18
    163a:	31 f0       	breq	.+12     	; 0x1648 <main+0x278>
    163c:	83 57       	subi	r24, 0x73	; 115
    163e:	91 40       	sbci	r25, 0x01	; 1
    1640:	19 f0       	breq	.+6      	; 0x1648 <main+0x278>
				Lcd3310_AnimationSwitchMenuItems(1);
    1642:	81 e0       	ldi	r24, 0x01	; 1
    1644:	0e 94 46 10 	call	0x208c	; 0x208c <Lcd3310_AnimationSwitchMenuItems>
			}
			FLAGS_SWITCH_ON( UPDATE_DISPLAY_FLAG );
    1648:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    164a:	f8 94       	cli
    164c:	80 91 7f 03 	lds	r24, 0x037F
    1650:	90 91 80 03 	lds	r25, 0x0380
    1654:	81 60       	ori	r24, 0x01	; 1
    1656:	90 93 80 03 	sts	0x0380, r25
    165a:	80 93 7f 03 	sts	0x037F, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    165e:	2f bf       	out	0x3f, r18	; 63
		}
		IF_FLAG_ON( ANIMATION_PREV_FLAG ){
    1660:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1662:	f8 94       	cli
    1664:	20 91 7f 03 	lds	r18, 0x037F
    1668:	30 91 80 03 	lds	r19, 0x0380
    166c:	30 93 82 03 	sts	0x0382, r19
    1670:	20 93 81 03 	sts	0x0381, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1674:	8f bf       	out	0x3f, r24	; 63
    1676:	80 91 81 03 	lds	r24, 0x0381
    167a:	83 ff       	sbrs	r24, 3
    167c:	26 c0       	rjmp	.+76     	; 0x16ca <main+0x2fa>
			FLAGS_SWITCH_OFF( ANIMATION_PREV_FLAG );
    167e:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1680:	f8 94       	cli
    1682:	80 91 7f 03 	lds	r24, 0x037F
    1686:	90 91 80 03 	lds	r25, 0x0380
    168a:	87 7f       	andi	r24, 0xF7	; 247
    168c:	90 93 80 03 	sts	0x0380, r25
    1690:	80 93 7f 03 	sts	0x037F, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1694:	2f bf       	out	0x3f, r18	; 63
			if(menu_now != &results && menu_now != &snake_results){
    1696:	80 91 8d 03 	lds	r24, 0x038D
    169a:	90 91 8e 03 	lds	r25, 0x038E
    169e:	21 e0       	ldi	r18, 0x01	; 1
    16a0:	8f 33       	cpi	r24, 0x3F	; 63
    16a2:	92 07       	cpc	r25, r18
    16a4:	31 f0       	breq	.+12     	; 0x16b2 <main+0x2e2>
    16a6:	83 57       	subi	r24, 0x73	; 115
    16a8:	91 40       	sbci	r25, 0x01	; 1
    16aa:	19 f0       	breq	.+6      	; 0x16b2 <main+0x2e2>
				Lcd3310_AnimationSwitchMenuItems(0);
    16ac:	80 e0       	ldi	r24, 0x00	; 0
    16ae:	0e 94 46 10 	call	0x208c	; 0x208c <Lcd3310_AnimationSwitchMenuItems>
			}
			FLAGS_SWITCH_ON( UPDATE_DISPLAY_FLAG );
    16b2:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    16b4:	f8 94       	cli
    16b6:	80 91 7f 03 	lds	r24, 0x037F
    16ba:	90 91 80 03 	lds	r25, 0x0380
    16be:	81 60       	ori	r24, 0x01	; 1
    16c0:	90 93 80 03 	sts	0x0380, r25
    16c4:	80 93 7f 03 	sts	0x037F, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    16c8:	2f bf       	out	0x3f, r18	; 63
		}
	#endif

		IF_FLAG_ON( SNAKE_START_GAME_FLAG ){
    16ca:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    16cc:	f8 94       	cli
    16ce:	20 91 7f 03 	lds	r18, 0x037F
    16d2:	30 91 80 03 	lds	r19, 0x0380
    16d6:	30 93 82 03 	sts	0x0382, r19
    16da:	20 93 81 03 	sts	0x0381, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    16de:	8f bf       	out	0x3f, r24	; 63
    16e0:	80 91 81 03 	lds	r24, 0x0381
    16e4:	87 ff       	sbrs	r24, 7
    16e6:	1e c0       	rjmp	.+60     	; 0x1724 <main+0x354>
			FLAGS_SWITCH_OFF( SNAKE_START_GAME_FLAG );
    16e8:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    16ea:	f8 94       	cli
    16ec:	80 91 7f 03 	lds	r24, 0x037F
    16f0:	90 91 80 03 	lds	r25, 0x0380
    16f4:	8f 77       	andi	r24, 0x7F	; 127
    16f6:	90 93 80 03 	sts	0x0380, r25
    16fa:	80 93 7f 03 	sts	0x037F, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    16fe:	2f bf       	out	0x3f, r18	; 63
			SnakeGame_Start();
    1700:	0e 94 7f 03 	call	0x6fe	; 0x6fe <SnakeGame_Start>
			TIM2_CLR_COUNTER_AND_OVF_ON();
    1704:	14 bc       	out	0x24, r1	; 36
    1706:	89 b7       	in	r24, 0x39	; 57
    1708:	80 64       	ori	r24, 0x40	; 64
    170a:	89 bf       	out	0x39, r24	; 57
			FLAGS_SWITCH_ON( SNAKE_PLAYING_NOW_FLAG );
    170c:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    170e:	f8 94       	cli
    1710:	80 91 7f 03 	lds	r24, 0x037F
    1714:	90 91 80 03 	lds	r25, 0x0380
    1718:	80 64       	ori	r24, 0x40	; 64
    171a:	90 93 80 03 	sts	0x0380, r25
    171e:	80 93 7f 03 	sts	0x037F, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1722:	2f bf       	out	0x3f, r18	; 63
		}
		IF_FLAG_ON( SNAKE_STOP_GAME_FLAG ){
    1724:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1726:	f8 94       	cli
    1728:	20 91 7f 03 	lds	r18, 0x037F
    172c:	30 91 80 03 	lds	r19, 0x0380
    1730:	30 93 82 03 	sts	0x0382, r19
    1734:	20 93 81 03 	sts	0x0381, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1738:	8f bf       	out	0x3f, r24	; 63
    173a:	80 91 81 03 	lds	r24, 0x0381
    173e:	90 91 82 03 	lds	r25, 0x0382
    1742:	90 ff       	sbrs	r25, 0
    1744:	8a ce       	rjmp	.-748    	; 0x145a <main+0x8a>
			FLAGS_SWITCH_OFF( SNAKE_STOP_GAME_FLAG );
    1746:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1748:	f8 94       	cli
    174a:	80 91 7f 03 	lds	r24, 0x037F
    174e:	90 91 80 03 	lds	r25, 0x0380
    1752:	9e 7f       	andi	r25, 0xFE	; 254
    1754:	90 93 80 03 	sts	0x0380, r25
    1758:	80 93 7f 03 	sts	0x037F, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    175c:	2f bf       	out	0x3f, r18	; 63
			TIM2_OVF_OFF();
    175e:	89 b7       	in	r24, 0x39	; 57
    1760:	8f 7b       	andi	r24, 0xBF	; 191
    1762:	89 bf       	out	0x39, r24	; 57
			SnakeGame_Stop();
    1764:	0e 94 43 02 	call	0x486	; 0x486 <SnakeGame_Stop>
			FLAGS_SWITCH_OFF( SNAKE_PLAYING_NOW_FLAG );
    1768:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    176a:	f8 94       	cli
    176c:	80 91 7f 03 	lds	r24, 0x037F
    1770:	90 91 80 03 	lds	r25, 0x0380
    1774:	8f 7b       	andi	r24, 0xBF	; 191
    1776:	90 93 80 03 	sts	0x0380, r25
    177a:	80 93 7f 03 	sts	0x037F, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    177e:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    1780:	6c ce       	rjmp	.-808    	; 0x145a <main+0x8a>

00001782 <HalfByteAsASCII>:
#include "uint8_16_to_string.h"

char to_string_result[] = {0, 0, 0, 0};

char HalfByteAsASCII(char c)
{
    1782:	98 2f       	mov	r25, r24
    if (c >= 0 && c <= 9){
    1784:	8a 30       	cpi	r24, 0x0A	; 10
    1786:	10 f4       	brcc	.+4      	; 0x178c <HalfByteAsASCII+0xa>
        c += 0x30;
    1788:	80 5d       	subi	r24, 0xD0	; 208
    178a:	08 95       	ret
    }else if (c >= 0xA && c <= 0x0F){
    178c:	8a 50       	subi	r24, 0x0A	; 10
    178e:	86 30       	cpi	r24, 0x06	; 6
    1790:	10 f0       	brcs	.+4      	; 0x1796 <HalfByteAsASCII+0x14>
    1792:	8f e3       	ldi	r24, 0x3F	; 63
    1794:	08 95       	ret
        c += 0x37;
    1796:	89 2f       	mov	r24, r25
    1798:	89 5c       	subi	r24, 0xC9	; 201
    }else{
        c = '?';
    }
    return c;
}
    179a:	08 95       	ret

0000179c <UInt8ToString>:

void UInt8ToString(uint8_t ch)
{
    179c:	28 2f       	mov	r18, r24
	to_string_result[0] = HalfByteAsASCII( (ch & 0xf0) >>4 );
    179e:	98 2f       	mov	r25, r24
    17a0:	92 95       	swap	r25
    17a2:	9f 70       	andi	r25, 0x0F	; 15

char to_string_result[] = {0, 0, 0, 0};

char HalfByteAsASCII(char c)
{
    if (c >= 0 && c <= 9){
    17a4:	9a 30       	cpi	r25, 0x0A	; 10
    17a6:	18 f4       	brcc	.+6      	; 0x17ae <UInt8ToString+0x12>
        c += 0x30;
    17a8:	89 2f       	mov	r24, r25
    17aa:	80 5d       	subi	r24, 0xD0	; 208
    17ac:	08 c0       	rjmp	.+16     	; 0x17be <UInt8ToString+0x22>
    }else if (c >= 0xA && c <= 0x0F){
    17ae:	89 2f       	mov	r24, r25
    17b0:	8a 50       	subi	r24, 0x0A	; 10
    17b2:	86 30       	cpi	r24, 0x06	; 6
    17b4:	10 f0       	brcs	.+4      	; 0x17ba <UInt8ToString+0x1e>
    17b6:	8f e3       	ldi	r24, 0x3F	; 63
    17b8:	02 c0       	rjmp	.+4      	; 0x17be <UInt8ToString+0x22>
        c += 0x37;
    17ba:	89 2f       	mov	r24, r25
    17bc:	89 5c       	subi	r24, 0xC9	; 201
    return c;
}

void UInt8ToString(uint8_t ch)
{
	to_string_result[0] = HalfByteAsASCII( (ch & 0xf0) >>4 );
    17be:	80 93 85 03 	sts	0x0385, r24
	to_string_result[1] = HalfByteAsASCII( ch & 0x0f );
    17c2:	92 2f       	mov	r25, r18
    17c4:	9f 70       	andi	r25, 0x0F	; 15

char to_string_result[] = {0, 0, 0, 0};

char HalfByteAsASCII(char c)
{
    if (c >= 0 && c <= 9){
    17c6:	9a 30       	cpi	r25, 0x0A	; 10
    17c8:	18 f4       	brcc	.+6      	; 0x17d0 <UInt8ToString+0x34>
        c += 0x30;
    17ca:	89 2f       	mov	r24, r25
    17cc:	80 5d       	subi	r24, 0xD0	; 208
    17ce:	08 c0       	rjmp	.+16     	; 0x17e0 <UInt8ToString+0x44>
    }else if (c >= 0xA && c <= 0x0F){
    17d0:	89 2f       	mov	r24, r25
    17d2:	8a 50       	subi	r24, 0x0A	; 10
    17d4:	86 30       	cpi	r24, 0x06	; 6
    17d6:	10 f0       	brcs	.+4      	; 0x17dc <UInt8ToString+0x40>
    17d8:	8f e3       	ldi	r24, 0x3F	; 63
    17da:	02 c0       	rjmp	.+4      	; 0x17e0 <UInt8ToString+0x44>
        c += 0x37;
    17dc:	89 2f       	mov	r24, r25
    17de:	89 5c       	subi	r24, 0xC9	; 201
}

void UInt8ToString(uint8_t ch)
{
	to_string_result[0] = HalfByteAsASCII( (ch & 0xf0) >>4 );
	to_string_result[1] = HalfByteAsASCII( ch & 0x0f );
    17e0:	80 93 86 03 	sts	0x0386, r24
	//to_string_result[2] = 0x00; // end of result string here
	// result in result_str
}
    17e4:	08 95       	ret

000017e6 <UInt16ToString>:

void UInt16ToString(uint16_t i)
{
    17e6:	9c 01       	movw	r18, r24
	to_string_result[0] = HalfByteAsASCII( (i & 0xf000) >> 12 );
    17e8:	93 2f       	mov	r25, r19
    17ea:	92 95       	swap	r25
    17ec:	9f 70       	andi	r25, 0x0F	; 15

char to_string_result[] = {0, 0, 0, 0};

char HalfByteAsASCII(char c)
{
    if (c >= 0 && c <= 9){
    17ee:	9a 30       	cpi	r25, 0x0A	; 10
    17f0:	18 f4       	brcc	.+6      	; 0x17f8 <UInt16ToString+0x12>
        c += 0x30;
    17f2:	89 2f       	mov	r24, r25
    17f4:	80 5d       	subi	r24, 0xD0	; 208
    17f6:	08 c0       	rjmp	.+16     	; 0x1808 <UInt16ToString+0x22>
    }else if (c >= 0xA && c <= 0x0F){
    17f8:	89 2f       	mov	r24, r25
    17fa:	8a 50       	subi	r24, 0x0A	; 10
    17fc:	86 30       	cpi	r24, 0x06	; 6
    17fe:	10 f0       	brcs	.+4      	; 0x1804 <UInt16ToString+0x1e>
    1800:	8f e3       	ldi	r24, 0x3F	; 63
    1802:	02 c0       	rjmp	.+4      	; 0x1808 <UInt16ToString+0x22>
        c += 0x37;
    1804:	89 2f       	mov	r24, r25
    1806:	89 5c       	subi	r24, 0xC9	; 201
	// result in result_str
}

void UInt16ToString(uint16_t i)
{
	to_string_result[0] = HalfByteAsASCII( (i & 0xf000) >> 12 );
    1808:	80 93 85 03 	sts	0x0385, r24
	to_string_result[1] = HalfByteAsASCII( (i & 0x0f00) >> 8  );
    180c:	c9 01       	movw	r24, r18
    180e:	80 70       	andi	r24, 0x00	; 0
    1810:	9f 70       	andi	r25, 0x0F	; 15

char to_string_result[] = {0, 0, 0, 0};

char HalfByteAsASCII(char c)
{
    if (c >= 0 && c <= 9){
    1812:	9a 30       	cpi	r25, 0x0A	; 10
    1814:	18 f4       	brcc	.+6      	; 0x181c <UInt16ToString+0x36>
        c += 0x30;
    1816:	89 2f       	mov	r24, r25
    1818:	80 5d       	subi	r24, 0xD0	; 208
    181a:	08 c0       	rjmp	.+16     	; 0x182c <UInt16ToString+0x46>
    }else if (c >= 0xA && c <= 0x0F){
    181c:	89 2f       	mov	r24, r25
    181e:	8a 50       	subi	r24, 0x0A	; 10
    1820:	86 30       	cpi	r24, 0x06	; 6
    1822:	10 f0       	brcs	.+4      	; 0x1828 <UInt16ToString+0x42>
    1824:	8f e3       	ldi	r24, 0x3F	; 63
    1826:	02 c0       	rjmp	.+4      	; 0x182c <UInt16ToString+0x46>
        c += 0x37;
    1828:	89 2f       	mov	r24, r25
    182a:	89 5c       	subi	r24, 0xC9	; 201
}

void UInt16ToString(uint16_t i)
{
	to_string_result[0] = HalfByteAsASCII( (i & 0xf000) >> 12 );
	to_string_result[1] = HalfByteAsASCII( (i & 0x0f00) >> 8  );
    182c:	80 93 86 03 	sts	0x0386, r24
	to_string_result[2] = HalfByteAsASCII( (i & 0x00f0) >> 4  );
    1830:	c9 01       	movw	r24, r18
    1832:	80 7f       	andi	r24, 0xF0	; 240
    1834:	90 70       	andi	r25, 0x00	; 0
    1836:	34 e0       	ldi	r19, 0x04	; 4
    1838:	96 95       	lsr	r25
    183a:	87 95       	ror	r24
    183c:	3a 95       	dec	r19
    183e:	e1 f7       	brne	.-8      	; 0x1838 <UInt16ToString+0x52>
    1840:	98 2f       	mov	r25, r24

char to_string_result[] = {0, 0, 0, 0};

char HalfByteAsASCII(char c)
{
    if (c >= 0 && c <= 9){
    1842:	8a 30       	cpi	r24, 0x0A	; 10
    1844:	10 f4       	brcc	.+4      	; 0x184a <UInt16ToString+0x64>
        c += 0x30;
    1846:	80 5d       	subi	r24, 0xD0	; 208
    1848:	07 c0       	rjmp	.+14     	; 0x1858 <UInt16ToString+0x72>
    }else if (c >= 0xA && c <= 0x0F){
    184a:	8a 50       	subi	r24, 0x0A	; 10
    184c:	86 30       	cpi	r24, 0x06	; 6
    184e:	10 f0       	brcs	.+4      	; 0x1854 <UInt16ToString+0x6e>
    1850:	8f e3       	ldi	r24, 0x3F	; 63
    1852:	02 c0       	rjmp	.+4      	; 0x1858 <UInt16ToString+0x72>
        c += 0x37;
    1854:	89 2f       	mov	r24, r25
    1856:	89 5c       	subi	r24, 0xC9	; 201

void UInt16ToString(uint16_t i)
{
	to_string_result[0] = HalfByteAsASCII( (i & 0xf000) >> 12 );
	to_string_result[1] = HalfByteAsASCII( (i & 0x0f00) >> 8  );
	to_string_result[2] = HalfByteAsASCII( (i & 0x00f0) >> 4  );
    1858:	80 93 87 03 	sts	0x0387, r24
	to_string_result[3] = HalfByteAsASCII(  i & 0x000f		);
    185c:	92 2f       	mov	r25, r18
    185e:	9f 70       	andi	r25, 0x0F	; 15

char to_string_result[] = {0, 0, 0, 0};

char HalfByteAsASCII(char c)
{
    if (c >= 0 && c <= 9){
    1860:	9a 30       	cpi	r25, 0x0A	; 10
    1862:	18 f4       	brcc	.+6      	; 0x186a <UInt16ToString+0x84>
        c += 0x30;
    1864:	89 2f       	mov	r24, r25
    1866:	80 5d       	subi	r24, 0xD0	; 208
    1868:	08 c0       	rjmp	.+16     	; 0x187a <UInt16ToString+0x94>
    }else if (c >= 0xA && c <= 0x0F){
    186a:	89 2f       	mov	r24, r25
    186c:	8a 50       	subi	r24, 0x0A	; 10
    186e:	86 30       	cpi	r24, 0x06	; 6
    1870:	10 f0       	brcs	.+4      	; 0x1876 <UInt16ToString+0x90>
    1872:	8f e3       	ldi	r24, 0x3F	; 63
    1874:	02 c0       	rjmp	.+4      	; 0x187a <UInt16ToString+0x94>
        c += 0x37;
    1876:	89 2f       	mov	r24, r25
    1878:	89 5c       	subi	r24, 0xC9	; 201
void UInt16ToString(uint16_t i)
{
	to_string_result[0] = HalfByteAsASCII( (i & 0xf000) >> 12 );
	to_string_result[1] = HalfByteAsASCII( (i & 0x0f00) >> 8  );
	to_string_result[2] = HalfByteAsASCII( (i & 0x00f0) >> 4  );
	to_string_result[3] = HalfByteAsASCII(  i & 0x000f		);
    187a:	80 93 88 03 	sts	0x0388, r24
	// result in result_str
}
    187e:	08 95       	ret

00001880 <Lcd3310_Char>:

	_delay_ms(show_init_data_delay_ms); // show image from LcdCache initial value
}

void Lcd3310_Char(unsigned char ch, WhiteOrBlackText is_invert_colors)
{
    1880:	cf 93       	push	r28
    1882:	df 93       	push	r29
    1884:	28 2f       	mov	r18, r24
    1886:	36 2f       	mov	r19, r22
	//  Convert to a printable character.
    if ( (ch < 0x20) ){
    1888:	80 32       	cpi	r24, 0x20	; 32
    188a:	08 f4       	brcc	.+2      	; 0x188e <Lcd3310_Char+0xe>
    188c:	2c e5       	ldi	r18, 0x5C	; 92
        ch = 92;
    }
	
	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    188e:	c0 91 89 03 	lds	r28, 0x0389
    1892:	d0 91 8a 03 	lds	r29, 0x038A
    1896:	ce 01       	movw	r24, r28
    1898:	64 e5       	ldi	r22, 0x54	; 84
    189a:	70 e0       	ldi	r23, 0x00	; 0
    189c:	0e 94 db 18 	call	0x31b6	; 0x31b6 <__udivmodhi4>
    18a0:	80 68       	ori	r24, 0x80	; 128


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    18a2:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    18a4:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    18a6:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    18a8:	77 9b       	sbis	0x0e, 7	; 14
    18aa:	fe cf       	rjmp	.-4      	; 0x18a8 <Lcd3310_Char+0x28>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    18ac:	c3 9a       	sbi	0x18, 3	; 24
    if ( (ch < 0x20) ){
        ch = 92;
    }
	
	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    Lcd3310_Send( 0x40 | (Lcd3310_Index / LCD_X_RES), LCD_CMD );
    18ae:	ce 01       	movw	r24, r28
    18b0:	64 e5       	ldi	r22, 0x54	; 84
    18b2:	70 e0       	ldi	r23, 0x00	; 0
    18b4:	0e 94 db 18 	call	0x31b6	; 0x31b6 <__udivmodhi4>
    18b8:	60 64       	ori	r22, 0x40	; 64


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    18ba:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    18bc:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    18be:	6f b9       	out	0x0f, r22	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    18c0:	77 9b       	sbis	0x0e, 7	; 14
    18c2:	fe cf       	rjmp	.-4      	; 0x18c0 <Lcd3310_Char+0x40>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    18c4:	c3 9a       	sbi	0x18, 3	; 24
	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    Lcd3310_Send( 0x40 | (Lcd3310_Index / LCD_X_RES), LCD_CMD );
	
	for (char i = 0; i < 5; i++ ){		
		char temp;
		PGM_GET_BYTE_FROM_FONTLOOKUP(temp, ch, i );
    18c6:	85 e0       	ldi	r24, 0x05	; 5
    18c8:	28 9f       	mul	r18, r24
    18ca:	c0 01       	movw	r24, r0
    18cc:	11 24       	eor	r1, r1
    18ce:	fc 01       	movw	r30, r24
    18d0:	ec 54       	subi	r30, 0x4C	; 76
    18d2:	f0 40       	sbci	r31, 0x00	; 0
    }
	
	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    Lcd3310_Send( 0x40 | (Lcd3310_Index / LCD_X_RES), LCD_CMD );
	
	for (char i = 0; i < 5; i++ ){		
    18d4:	87 54       	subi	r24, 0x47	; 71
    18d6:	90 40       	sbci	r25, 0x00	; 0
		char temp;
		PGM_GET_BYTE_FROM_FONTLOOKUP(temp, ch, i );
    18d8:	24 91       	lpm	r18, Z+
    18da:	22 0f       	add	r18, r18
		if(is_invert_colors) temp = (unsigned char) ~temp;
    18dc:	31 11       	cpse	r19, r1
    18de:	20 95       	com	r18


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    18e0:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    18e2:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    18e4:	2f b9       	out	0x0f, r18	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    18e6:	77 9b       	sbis	0x0e, 7	; 14
    18e8:	fe cf       	rjmp	.-4      	; 0x18e6 <Lcd3310_Char+0x66>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    18ea:	c3 9a       	sbi	0x18, 3	; 24
    18ec:	31 96       	adiw	r30, 0x01	; 1
    }
	
	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    Lcd3310_Send( 0x40 | (Lcd3310_Index / LCD_X_RES), LCD_CMD );
	
	for (char i = 0; i < 5; i++ ){		
    18ee:	e8 17       	cp	r30, r24
    18f0:	f9 07       	cpc	r31, r25
    18f2:	91 f7       	brne	.-28     	; 0x18d8 <Lcd3310_Char+0x58>
		char temp;
		PGM_GET_BYTE_FROM_FONTLOOKUP(temp, ch, i );
		if(is_invert_colors) temp = (unsigned char) ~temp;
	    Lcd3310_Send( temp, LCD_DATA );
    }
	if(is_invert_colors) Lcd3310_Send( 0xff, LCD_DATA );
    18f4:	33 23       	and	r19, r19
    18f6:	39 f0       	breq	.+14     	; 0x1906 <Lcd3310_Char+0x86>


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    18f8:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    18fa:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    18fc:	8f ef       	ldi	r24, 0xFF	; 255
    18fe:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1900:	77 9b       	sbis	0x0e, 7	; 14
    1902:	fe cf       	rjmp	.-4      	; 0x1900 <Lcd3310_Char+0x80>
    1904:	05 c0       	rjmp	.+10     	; 0x1910 <Lcd3310_Char+0x90>


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1906:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    1908:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    190a:	1f b8       	out	0x0f, r1	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    190c:	77 9b       	sbis	0x0e, 7	; 14
    190e:	fe cf       	rjmp	.-4      	; 0x190c <Lcd3310_Char+0x8c>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1910:	c3 9a       	sbi	0x18, 3	; 24
		if(is_invert_colors) temp = (unsigned char) ~temp;
	    Lcd3310_Send( temp, LCD_DATA );
    }
	if(is_invert_colors) Lcd3310_Send( 0xff, LCD_DATA );
	else Lcd3310_Send( 0x00, LCD_DATA );
	Lcd3310_Index += 6;
    1912:	26 96       	adiw	r28, 0x06	; 6
    1914:	d0 93 8a 03 	sts	0x038A, r29
    1918:	c0 93 89 03 	sts	0x0389, r28
}
    191c:	df 91       	pop	r29
    191e:	cf 91       	pop	r28
    1920:	08 95       	ret

00001922 <Lcd3310_String_P>:

void Lcd3310_String_P(PGM_P str_ptr, WhiteOrBlackText is_invert_colors)
{
    1922:	0f 93       	push	r16
    1924:	1f 93       	push	r17
    1926:	cf 93       	push	r28
    1928:	df 93       	push	r29
    192a:	08 2f       	mov	r16, r24
    192c:	16 2f       	mov	r17, r22
    192e:	28 2f       	mov	r18, r24
    1930:	39 2f       	mov	r19, r25
    1932:	e9 01       	movw	r28, r18
    1934:	04 c0       	rjmp	.+8      	; 0x193e <Lcd3310_String_P+0x1c>
	char count = 0;
    while ( *str_ptr ){
		count++;
        Lcd3310_Char( *(str_ptr++), is_invert_colors );
    1936:	21 96       	adiw	r28, 0x01	; 1
    1938:	61 2f       	mov	r22, r17
    193a:	0e 94 40 0c 	call	0x1880	; 0x1880 <Lcd3310_Char>
    193e:	9e 01       	movw	r18, r28
    1940:	20 1b       	sub	r18, r16
    1942:	92 2f       	mov	r25, r18
}

void Lcd3310_String_P(PGM_P str_ptr, WhiteOrBlackText is_invert_colors)
{
	char count = 0;
    while ( *str_ptr ){
    1944:	88 81       	ld	r24, Y
    1946:	88 23       	and	r24, r24
    1948:	b1 f7       	brne	.-20     	; 0x1936 <Lcd3310_String_P+0x14>
		count++;
        Lcd3310_Char( *(str_ptr++), is_invert_colors );
    }
	if(is_invert_colors && count > 0 && count < 14){
    194a:	11 23       	and	r17, r17
    194c:	b9 f0       	breq	.+46     	; 0x197c <Lcd3310_String_P+0x5a>
    194e:	22 23       	and	r18, r18
    1950:	a9 f0       	breq	.+42     	; 0x197c <Lcd3310_String_P+0x5a>
    1952:	2e 30       	cpi	r18, 0x0E	; 14
    1954:	98 f4       	brcc	.+38     	; 0x197c <Lcd3310_String_P+0x5a>
		for(count = (14 - count) * 6; count > 0; count--){
    1956:	2e e0       	ldi	r18, 0x0E	; 14
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	29 1b       	sub	r18, r25
    195c:	31 09       	sbc	r19, r1
    195e:	c9 01       	movw	r24, r18
    1960:	88 0f       	add	r24, r24
    1962:	99 1f       	adc	r25, r25
    1964:	82 0f       	add	r24, r18
    1966:	93 1f       	adc	r25, r19
    1968:	88 0f       	add	r24, r24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    196a:	9f ef       	ldi	r25, 0xFF	; 255


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    196c:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    196e:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    1970:	9f b9       	out	0x0f, r25	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1972:	77 9b       	sbis	0x0e, 7	; 14
    1974:	fe cf       	rjmp	.-4      	; 0x1972 <Lcd3310_String_P+0x50>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1976:	c3 9a       	sbi	0x18, 3	; 24
    while ( *str_ptr ){
		count++;
        Lcd3310_Char( *(str_ptr++), is_invert_colors );
    }
	if(is_invert_colors && count > 0 && count < 14){
		for(count = (14 - count) * 6; count > 0; count--){
    1978:	81 50       	subi	r24, 0x01	; 1
    197a:	c1 f7       	brne	.-16     	; 0x196c <Lcd3310_String_P+0x4a>
			Lcd3310_Send( 0xff, LCD_DATA );
		}
	}
}
    197c:	df 91       	pop	r29
    197e:	cf 91       	pop	r28
    1980:	1f 91       	pop	r17
    1982:	0f 91       	pop	r16
    1984:	08 95       	ret

00001986 <Lcd3310_String_P_Anime>:

#ifdef ANIMATION_SWITCH_MENU_ITEMS
void Lcd3310_String_P_Anime(PGM_P str_ptr, PGM_P str_ptr_next, WhiteOrBlackText is_invert_colors, char num_of_cadr, char is_next)
{
    1986:	2f 92       	push	r2
    1988:	3f 92       	push	r3
    198a:	4f 92       	push	r4
    198c:	5f 92       	push	r5
    198e:	6f 92       	push	r6
    1990:	7f 92       	push	r7
    1992:	8f 92       	push	r8
    1994:	9f 92       	push	r9
    1996:	af 92       	push	r10
    1998:	bf 92       	push	r11
    199a:	cf 92       	push	r12
    199c:	df 92       	push	r13
    199e:	ef 92       	push	r14
    19a0:	ff 92       	push	r15
    19a2:	0f 93       	push	r16
    19a4:	1f 93       	push	r17
    19a6:	cf 93       	push	r28
    19a8:	df 93       	push	r29
    19aa:	5c 01       	movw	r10, r24
    19ac:	6b 01       	movw	r12, r22
    19ae:	74 2e       	mov	r7, r20
    19b0:	60 2e       	mov	r6, r16
	unsigned char ch1 = 1, ch2 = 1, display, temp1, temp2, count = 0;

	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    19b2:	e0 91 89 03 	lds	r30, 0x0389
    19b6:	f0 91 8a 03 	lds	r31, 0x038A
    19ba:	cf 01       	movw	r24, r30
    19bc:	64 e5       	ldi	r22, 0x54	; 84
    19be:	70 e0       	ldi	r23, 0x00	; 0
    19c0:	0e 94 db 18 	call	0x31b6	; 0x31b6 <__udivmodhi4>
    19c4:	80 68       	ori	r24, 0x80	; 128


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    19c6:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    19c8:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    19ca:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    19cc:	77 9b       	sbis	0x0e, 7	; 14
    19ce:	fe cf       	rjmp	.-4      	; 0x19cc <Lcd3310_String_P_Anime+0x46>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    19d0:	c3 9a       	sbi	0x18, 3	; 24
void Lcd3310_String_P_Anime(PGM_P str_ptr, PGM_P str_ptr_next, WhiteOrBlackText is_invert_colors, char num_of_cadr, char is_next)
{
	unsigned char ch1 = 1, ch2 = 1, display, temp1, temp2, count = 0;

	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    Lcd3310_Send( 0x40 | (Lcd3310_Index / LCD_X_RES), LCD_CMD );
    19d2:	cf 01       	movw	r24, r30
    19d4:	64 e5       	ldi	r22, 0x54	; 84
    19d6:	70 e0       	ldi	r23, 0x00	; 0
    19d8:	0e 94 db 18 	call	0x31b6	; 0x31b6 <__udivmodhi4>
    19dc:	60 64       	ori	r22, 0x40	; 64


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    19de:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    19e0:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    19e2:	6f b9       	out	0x0f, r22	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    19e4:	77 9b       	sbis	0x0e, 7	; 14
    19e6:	fe cf       	rjmp	.-4      	; 0x19e4 <Lcd3310_String_P_Anime+0x5e>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    19e8:	c3 9a       	sbi	0x18, 3	; 24
	
	while ( ch1 || ch2 ){
		count++;
		if(*str_ptr) ch1 = *(str_ptr++);
		else ch1 = 0x00;
		if(str_ptr == &set_measure_delay.str[count] && count == 10){
    19ea:	40 90 b0 01 	lds	r4, 0x01B0
    19ee:	50 90 b1 01 	lds	r5, 0x01B1
			ch1 = measure_delay + 0x30;
    19f2:	80 90 02 01 	lds	r8, 0x0102
    19f6:	80 e3       	ldi	r24, 0x30	; 48
    19f8:	88 0e       	add	r8, r24
    19fa:	40 e0       	ldi	r20, 0x00	; 0

		for (char i = 0; i < 5; i++ ){		
			if(ch1) PGM_GET_BYTE_FROM_FONTLOOKUP(temp1, ch1, i )
			else temp1 = 0x00;

			if(ch2) PGM_GET_BYTE_FROM_FONTLOOKUP(temp2, ch2, i )
    19fc:	65 e0       	ldi	r22, 0x05	; 5
    19fe:	36 2e       	mov	r3, r22
    1a00:	e2 2e       	mov	r14, r18
    1a02:	ff 24       	eor	r15, r15
			else temp2 = 0x00;

			if(is_next) display = (temp1 >> num_of_cadr) | ( (temp2 << (8 - num_of_cadr)) );
			else 		display = (temp1 << num_of_cadr) | ( (temp2 >> (8 - num_of_cadr)) );
    1a04:	08 e0       	ldi	r16, 0x08	; 8
    1a06:	10 e0       	ldi	r17, 0x00	; 0
    1a08:	0e 19       	sub	r16, r14
    1a0a:	1f 09       	sbc	r17, r15
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    1a0c:	22 24       	eor	r2, r2
    1a0e:	2a 94       	dec	r2

	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    Lcd3310_Send( 0x40 | (Lcd3310_Index / LCD_X_RES), LCD_CMD );
	
	while ( ch1 || ch2 ){
		count++;
    1a10:	4f 5f       	subi	r20, 0xFF	; 255
		if(*str_ptr) ch1 = *(str_ptr++);
    1a12:	f5 01       	movw	r30, r10
    1a14:	90 80       	ld	r9, Z
    1a16:	99 20       	and	r9, r9
    1a18:	19 f0       	breq	.+6      	; 0x1a20 <Lcd3310_String_P_Anime+0x9a>
    1a1a:	08 94       	sec
    1a1c:	a1 1c       	adc	r10, r1
    1a1e:	b1 1c       	adc	r11, r1
		else ch1 = 0x00;
		if(str_ptr == &set_measure_delay.str[count] && count == 10){
    1a20:	c2 01       	movw	r24, r4
    1a22:	84 0f       	add	r24, r20
    1a24:	91 1d       	adc	r25, r1
    1a26:	a8 16       	cp	r10, r24
    1a28:	b9 06       	cpc	r11, r25
    1a2a:	19 f4       	brne	.+6      	; 0x1a32 <Lcd3310_String_P_Anime+0xac>
    1a2c:	4a 30       	cpi	r20, 0x0A	; 10
    1a2e:	09 f4       	brne	.+2      	; 0x1a32 <Lcd3310_String_P_Anime+0xac>
    1a30:	98 2c       	mov	r9, r8
			ch1 = measure_delay + 0x30;
		}
		
		if(*str_ptr_next) ch2 = *(str_ptr_next++);
    1a32:	f6 01       	movw	r30, r12
    1a34:	20 81       	ld	r18, Z
    1a36:	22 23       	and	r18, r18
    1a38:	19 f0       	breq	.+6      	; 0x1a40 <Lcd3310_String_P_Anime+0xba>
    1a3a:	08 94       	sec
    1a3c:	c1 1c       	adc	r12, r1
    1a3e:	d1 1c       	adc	r13, r1
		else ch2 = 0x00;
		if(str_ptr_next == &set_measure_delay.str[count] && count == 10){
    1a40:	c8 16       	cp	r12, r24
    1a42:	d9 06       	cpc	r13, r25
    1a44:	19 f4       	brne	.+6      	; 0x1a4c <Lcd3310_String_P_Anime+0xc6>
    1a46:	4a 30       	cpi	r20, 0x0A	; 10
    1a48:	09 f4       	brne	.+2      	; 0x1a4c <Lcd3310_String_P_Anime+0xc6>
    1a4a:	28 2d       	mov	r18, r8

		for (char i = 0; i < 5; i++ ){		
			if(ch1) PGM_GET_BYTE_FROM_FONTLOOKUP(temp1, ch1, i )
			else temp1 = 0x00;

			if(ch2) PGM_GET_BYTE_FROM_FONTLOOKUP(temp2, ch2, i )
    1a4c:	23 9d       	mul	r18, r3
    1a4e:	c0 01       	movw	r24, r0
    1a50:	11 24       	eor	r1, r1
    1a52:	ec 01       	movw	r28, r24
    1a54:	cc 54       	subi	r28, 0x4C	; 76
    1a56:	d0 40       	sbci	r29, 0x00	; 0
    1a58:	93 9c       	mul	r9, r3
    1a5a:	d0 01       	movw	r26, r0
    1a5c:	11 24       	eor	r1, r1
    1a5e:	ac 54       	subi	r26, 0x4C	; 76
    1a60:	b0 40       	sbci	r27, 0x00	; 0
		else ch2 = 0x00;
		if(str_ptr_next == &set_measure_delay.str[count] && count == 10){
			ch2 = measure_delay + 0x30;
		}

		for (char i = 0; i < 5; i++ ){		
    1a62:	87 54       	subi	r24, 0x47	; 71
    1a64:	90 40       	sbci	r25, 0x00	; 0
			if(ch1) PGM_GET_BYTE_FROM_FONTLOOKUP(temp1, ch1, i )
    1a66:	99 20       	and	r9, r9
    1a68:	11 f4       	brne	.+4      	; 0x1a6e <Lcd3310_String_P_Anime+0xe8>
    1a6a:	50 e0       	ldi	r21, 0x00	; 0
    1a6c:	03 c0       	rjmp	.+6      	; 0x1a74 <Lcd3310_String_P_Anime+0xee>
    1a6e:	fd 01       	movw	r30, r26
    1a70:	54 91       	lpm	r21, Z+
    1a72:	55 0f       	add	r21, r21
			else temp1 = 0x00;

			if(ch2) PGM_GET_BYTE_FROM_FONTLOOKUP(temp2, ch2, i )
    1a74:	22 23       	and	r18, r18
    1a76:	11 f4       	brne	.+4      	; 0x1a7c <Lcd3310_String_P_Anime+0xf6>
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	03 c0       	rjmp	.+6      	; 0x1a82 <Lcd3310_String_P_Anime+0xfc>
    1a7c:	fe 01       	movw	r30, r28
    1a7e:	34 91       	lpm	r19, Z+
    1a80:	33 0f       	add	r19, r19
    1a82:	e3 2f       	mov	r30, r19
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	65 2f       	mov	r22, r21
    1a88:	70 e0       	ldi	r23, 0x00	; 0
			else temp2 = 0x00;

			if(is_next) display = (temp1 >> num_of_cadr) | ( (temp2 << (8 - num_of_cadr)) );
    1a8a:	66 20       	and	r6, r6
    1a8c:	69 f0       	breq	.+26     	; 0x1aa8 <Lcd3310_String_P_Anime+0x122>
    1a8e:	00 2e       	mov	r0, r16
    1a90:	02 c0       	rjmp	.+4      	; 0x1a96 <Lcd3310_String_P_Anime+0x110>
    1a92:	ee 0f       	add	r30, r30
    1a94:	ff 1f       	adc	r31, r31
    1a96:	0a 94       	dec	r0
    1a98:	e2 f7       	brpl	.-8      	; 0x1a92 <Lcd3310_String_P_Anime+0x10c>
    1a9a:	0e 2c       	mov	r0, r14
    1a9c:	02 c0       	rjmp	.+4      	; 0x1aa2 <Lcd3310_String_P_Anime+0x11c>
    1a9e:	75 95       	asr	r23
    1aa0:	67 95       	ror	r22
    1aa2:	0a 94       	dec	r0
    1aa4:	e2 f7       	brpl	.-8      	; 0x1a9e <Lcd3310_String_P_Anime+0x118>
    1aa6:	0c c0       	rjmp	.+24     	; 0x1ac0 <Lcd3310_String_P_Anime+0x13a>
			else 		display = (temp1 << num_of_cadr) | ( (temp2 >> (8 - num_of_cadr)) );
    1aa8:	00 2e       	mov	r0, r16
    1aaa:	02 c0       	rjmp	.+4      	; 0x1ab0 <Lcd3310_String_P_Anime+0x12a>
    1aac:	f5 95       	asr	r31
    1aae:	e7 95       	ror	r30
    1ab0:	0a 94       	dec	r0
    1ab2:	e2 f7       	brpl	.-8      	; 0x1aac <Lcd3310_String_P_Anime+0x126>
    1ab4:	0e 2c       	mov	r0, r14
    1ab6:	02 c0       	rjmp	.+4      	; 0x1abc <Lcd3310_String_P_Anime+0x136>
    1ab8:	66 0f       	add	r22, r22
    1aba:	77 1f       	adc	r23, r23
    1abc:	0a 94       	dec	r0
    1abe:	e2 f7       	brpl	.-8      	; 0x1ab8 <Lcd3310_String_P_Anime+0x132>
    1ac0:	3e 2f       	mov	r19, r30
    1ac2:	36 2b       	or	r19, r22
			if(is_invert_colors) display = (unsigned char) ~display;
    1ac4:	71 10       	cpse	r7, r1
    1ac6:	30 95       	com	r19


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1ac8:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    1aca:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    1acc:	3f b9       	out	0x0f, r19	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1ace:	77 9b       	sbis	0x0e, 7	; 14
    1ad0:	fe cf       	rjmp	.-4      	; 0x1ace <Lcd3310_String_P_Anime+0x148>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1ad2:	c3 9a       	sbi	0x18, 3	; 24
    1ad4:	21 96       	adiw	r28, 0x01	; 1
    1ad6:	11 96       	adiw	r26, 0x01	; 1
		else ch2 = 0x00;
		if(str_ptr_next == &set_measure_delay.str[count] && count == 10){
			ch2 = measure_delay + 0x30;
		}

		for (char i = 0; i < 5; i++ ){		
    1ad8:	c8 17       	cp	r28, r24
    1ada:	d9 07       	cpc	r29, r25
    1adc:	09 f0       	breq	.+2      	; 0x1ae0 <Lcd3310_String_P_Anime+0x15a>
    1ade:	c3 cf       	rjmp	.-122    	; 0x1a66 <Lcd3310_String_P_Anime+0xe0>
			if(is_next) display = (temp1 >> num_of_cadr) | ( (temp2 << (8 - num_of_cadr)) );
			else 		display = (temp1 << num_of_cadr) | ( (temp2 >> (8 - num_of_cadr)) );
			if(is_invert_colors) display = (unsigned char) ~display;
		    Lcd3310_Send( display, LCD_DATA );
	    }
		if(is_invert_colors) Lcd3310_Send( 0xff, LCD_DATA );
    1ae0:	77 20       	and	r7, r7
    1ae2:	31 f0       	breq	.+12     	; 0x1af0 <Lcd3310_String_P_Anime+0x16a>


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1ae4:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    1ae6:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    1ae8:	2f b8       	out	0x0f, r2	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1aea:	77 9b       	sbis	0x0e, 7	; 14
    1aec:	fe cf       	rjmp	.-4      	; 0x1aea <Lcd3310_String_P_Anime+0x164>
    1aee:	05 c0       	rjmp	.+10     	; 0x1afa <Lcd3310_String_P_Anime+0x174>


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1af0:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    1af2:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    1af4:	1f b8       	out	0x0f, r1	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1af6:	77 9b       	sbis	0x0e, 7	; 14
    1af8:	fe cf       	rjmp	.-4      	; 0x1af6 <Lcd3310_String_P_Anime+0x170>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1afa:	c3 9a       	sbi	0x18, 3	; 24
	unsigned char ch1 = 1, ch2 = 1, display, temp1, temp2, count = 0;

	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    Lcd3310_Send( 0x40 | (Lcd3310_Index / LCD_X_RES), LCD_CMD );
	
	while ( ch1 || ch2 ){
    1afc:	99 20       	and	r9, r9
    1afe:	09 f0       	breq	.+2      	; 0x1b02 <Lcd3310_String_P_Anime+0x17c>
    1b00:	87 cf       	rjmp	.-242    	; 0x1a10 <Lcd3310_String_P_Anime+0x8a>
    1b02:	22 23       	and	r18, r18
    1b04:	09 f0       	breq	.+2      	; 0x1b08 <Lcd3310_String_P_Anime+0x182>
    1b06:	84 cf       	rjmp	.-248    	; 0x1a10 <Lcd3310_String_P_Anime+0x8a>
		    Lcd3310_Send( display, LCD_DATA );
	    }
		if(is_invert_colors) Lcd3310_Send( 0xff, LCD_DATA );
		else Lcd3310_Send( 0x00, LCD_DATA );
	}
	if(is_invert_colors && (count < 14)){
    1b08:	77 20       	and	r7, r7
    1b0a:	a9 f0       	breq	.+42     	; 0x1b36 <Lcd3310_String_P_Anime+0x1b0>
    1b0c:	4e 30       	cpi	r20, 0x0E	; 14
    1b0e:	98 f4       	brcc	.+38     	; 0x1b36 <Lcd3310_String_P_Anime+0x1b0>
		for(count = (14 - count) * 6; count > 0; count--){
    1b10:	2e e0       	ldi	r18, 0x0E	; 14
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	24 1b       	sub	r18, r20
    1b16:	31 09       	sbc	r19, r1
    1b18:	c9 01       	movw	r24, r18
    1b1a:	88 0f       	add	r24, r24
    1b1c:	99 1f       	adc	r25, r25
    1b1e:	82 0f       	add	r24, r18
    1b20:	93 1f       	adc	r25, r19
    1b22:	88 0f       	add	r24, r24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    1b24:	9f ef       	ldi	r25, 0xFF	; 255


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1b26:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    1b28:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    1b2a:	9f b9       	out	0x0f, r25	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1b2c:	77 9b       	sbis	0x0e, 7	; 14
    1b2e:	fe cf       	rjmp	.-4      	; 0x1b2c <Lcd3310_String_P_Anime+0x1a6>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1b30:	c3 9a       	sbi	0x18, 3	; 24
	    }
		if(is_invert_colors) Lcd3310_Send( 0xff, LCD_DATA );
		else Lcd3310_Send( 0x00, LCD_DATA );
	}
	if(is_invert_colors && (count < 14)){
		for(count = (14 - count) * 6; count > 0; count--){
    1b32:	81 50       	subi	r24, 0x01	; 1
    1b34:	c1 f7       	brne	.-16     	; 0x1b26 <Lcd3310_String_P_Anime+0x1a0>
			Lcd3310_Send( 0xff, LCD_DATA );
		}
	}
}
    1b36:	df 91       	pop	r29
    1b38:	cf 91       	pop	r28
    1b3a:	1f 91       	pop	r17
    1b3c:	0f 91       	pop	r16
    1b3e:	ff 90       	pop	r15
    1b40:	ef 90       	pop	r14
    1b42:	df 90       	pop	r13
    1b44:	cf 90       	pop	r12
    1b46:	bf 90       	pop	r11
    1b48:	af 90       	pop	r10
    1b4a:	9f 90       	pop	r9
    1b4c:	8f 90       	pop	r8
    1b4e:	7f 90       	pop	r7
    1b50:	6f 90       	pop	r6
    1b52:	5f 90       	pop	r5
    1b54:	4f 90       	pop	r4
    1b56:	3f 90       	pop	r3
    1b58:	2f 90       	pop	r2
    1b5a:	08 95       	ret

00001b5c <Lcd3310_GotoXY>:
#endif

void Lcd3310_GotoXY(uint16_t x, uint16_t y)
{
    Lcd3310_Index = (uint16_t)x * 6 + (uint16_t)y * 84;
    1b5c:	24 e5       	ldi	r18, 0x54	; 84
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	62 9f       	mul	r22, r18
    1b62:	a0 01       	movw	r20, r0
    1b64:	63 9f       	mul	r22, r19
    1b66:	50 0d       	add	r21, r0
    1b68:	72 9f       	mul	r23, r18
    1b6a:	50 0d       	add	r21, r0
    1b6c:	11 24       	eor	r1, r1
    1b6e:	9c 01       	movw	r18, r24
    1b70:	22 0f       	add	r18, r18
    1b72:	33 1f       	adc	r19, r19
    1b74:	28 0f       	add	r18, r24
    1b76:	39 1f       	adc	r19, r25
    1b78:	22 0f       	add	r18, r18
    1b7a:	33 1f       	adc	r19, r19
    1b7c:	42 0f       	add	r20, r18
    1b7e:	53 1f       	adc	r21, r19
    1b80:	50 93 8a 03 	sts	0x038A, r21
    1b84:	40 93 89 03 	sts	0x0389, r20
}
    1b88:	08 95       	ret

00001b8a <Lcd3310_ClearCenter>:


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1b8a:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    1b8c:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    1b8e:	80 e8       	ldi	r24, 0x80	; 128
    1b90:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1b92:	77 9b       	sbis	0x0e, 7	; 14
    1b94:	fe cf       	rjmp	.-4      	; 0x1b92 <Lcd3310_ClearCenter+0x8>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1b96:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1b98:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    1b9a:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    1b9c:	81 e4       	ldi	r24, 0x41	; 65
    1b9e:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1ba0:	77 9b       	sbis	0x0e, 7	; 14
    1ba2:	fe cf       	rjmp	.-4      	; 0x1ba0 <Lcd3310_ClearCenter+0x16>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1ba4:	c3 9a       	sbi	0x18, 3	; 24
    1ba6:	80 e0       	ldi	r24, 0x00	; 0
    1ba8:	90 e0       	ldi	r25, 0x00	; 0


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1baa:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    1bac:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    1bae:	1f b8       	out	0x0f, r1	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1bb0:	77 9b       	sbis	0x0e, 7	; 14
    1bb2:	fe cf       	rjmp	.-4      	; 0x1bb0 <Lcd3310_ClearCenter+0x26>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1bb4:	c3 9a       	sbi	0x18, 3	; 24
void Lcd3310_ClearCenter(void)
{
#ifdef LCD_IMAGES //  clear only center lines
	Lcd3310_Send( 0x80 | (84 % LCD_X_RES), LCD_CMD );
    Lcd3310_Send( 0x40 | (84 / LCD_X_RES), LCD_CMD );
	for(uint16_t i=0; i < LCD_CENTER_RES; i++){
    1bb6:	01 96       	adiw	r24, 0x01	; 1
    1bb8:	21 e0       	ldi	r18, 0x01	; 1
    1bba:	84 3a       	cpi	r24, 0xA4	; 164
    1bbc:	92 07       	cpc	r25, r18
    1bbe:	a9 f7       	brne	.-22     	; 0x1baa <Lcd3310_ClearCenter+0x20>
	Lcd3310_Send( 0x40, LCD_CMD );
	for(uint16_t i=0; i < LCD_XY_RES; i++){
		Lcd3310_Send( 0x00, LCD_DATA );
	}
#endif
}
    1bc0:	08 95       	ret

00001bc2 <Lcd3310_InitFill>:


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1bc2:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    1bc4:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    1bc6:	80 e8       	ldi	r24, 0x80	; 128
    1bc8:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1bca:	77 9b       	sbis	0x0e, 7	; 14
    1bcc:	fe cf       	rjmp	.-4      	; 0x1bca <Lcd3310_InitFill+0x8>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1bce:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1bd0:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    1bd2:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    1bd4:	80 e4       	ldi	r24, 0x40	; 64
    1bd6:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1bd8:	77 9b       	sbis	0x0e, 7	; 14
    1bda:	fe cf       	rjmp	.-4      	; 0x1bd8 <Lcd3310_InitFill+0x16>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1bdc:	c3 9a       	sbi	0x18, 3	; 24
    1bde:	eb e1       	ldi	r30, 0x1B	; 27
    1be0:	f2 e0       	ldi	r31, 0x02	; 2
	// Goto (0, 0) of display
	Lcd3310_Send( 0x80, LCD_CMD );
    Lcd3310_Send( 0x40, LCD_CMD );

	for (int i = 0; i < 84; i++ ){
        Lcd3310_Send( pgm_read_byte( LcdImage_Upper + i ), LCD_DATA );
    1be2:	84 91       	lpm	r24, Z+


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1be4:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    1be6:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    1be8:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1bea:	77 9b       	sbis	0x0e, 7	; 14
    1bec:	fe cf       	rjmp	.-4      	; 0x1bea <Lcd3310_InitFill+0x28>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1bee:	c3 9a       	sbi	0x18, 3	; 24
    1bf0:	31 96       	adiw	r30, 0x01	; 1
#ifdef LCD_IMAGES
	// Goto (0, 0) of display
	Lcd3310_Send( 0x80, LCD_CMD );
    Lcd3310_Send( 0x40, LCD_CMD );

	for (int i = 0; i < 84; i++ ){
    1bf2:	82 e0       	ldi	r24, 0x02	; 2
    1bf4:	ef 36       	cpi	r30, 0x6F	; 111
    1bf6:	f8 07       	cpc	r31, r24
    1bf8:	a1 f7       	brne	.-24     	; 0x1be2 <Lcd3310_InitFill+0x20>
    1bfa:	ef e6       	ldi	r30, 0x6F	; 111
    1bfc:	f2 e0       	ldi	r31, 0x02	; 2
        Lcd3310_Send( pgm_read_byte( LcdImage_Upper + i ), LCD_DATA );
    }	
	for (uint16_t i=0; i < LCD_CENTER_RES; i++ ){
        Lcd3310_Send( pgm_read_byte( LcdImage_Center + i), LCD_DATA );
    1bfe:	84 91       	lpm	r24, Z+


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1c00:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    1c02:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    1c04:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1c06:	77 9b       	sbis	0x0e, 7	; 14
    1c08:	fe cf       	rjmp	.-4      	; 0x1c06 <Lcd3310_InitFill+0x44>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1c0a:	c3 9a       	sbi	0x18, 3	; 24
    1c0c:	31 96       	adiw	r30, 0x01	; 1
    Lcd3310_Send( 0x40, LCD_CMD );

	for (int i = 0; i < 84; i++ ){
        Lcd3310_Send( pgm_read_byte( LcdImage_Upper + i ), LCD_DATA );
    }	
	for (uint16_t i=0; i < LCD_CENTER_RES; i++ ){
    1c0e:	84 e0       	ldi	r24, 0x04	; 4
    1c10:	e3 31       	cpi	r30, 0x13	; 19
    1c12:	f8 07       	cpc	r31, r24
    1c14:	a1 f7       	brne	.-24     	; 0x1bfe <Lcd3310_InitFill+0x3c>
    1c16:	ef eb       	ldi	r30, 0xBF	; 191
    1c18:	f3 e0       	ldi	r31, 0x03	; 3
        Lcd3310_Send( pgm_read_byte( LcdImage_Center + i), LCD_DATA );
	}
    for (int i = 0; i < 84; i++ ){
        Lcd3310_Send( pgm_read_byte( LcdImage_brunql_gmail_com + i), LCD_DATA );
    1c1a:	84 91       	lpm	r24, Z+


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1c1c:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    1c1e:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    1c20:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1c22:	77 9b       	sbis	0x0e, 7	; 14
    1c24:	fe cf       	rjmp	.-4      	; 0x1c22 <Lcd3310_InitFill+0x60>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1c26:	c3 9a       	sbi	0x18, 3	; 24
    1c28:	31 96       	adiw	r30, 0x01	; 1
        Lcd3310_Send( pgm_read_byte( LcdImage_Upper + i ), LCD_DATA );
    }	
	for (uint16_t i=0; i < LCD_CENTER_RES; i++ ){
        Lcd3310_Send( pgm_read_byte( LcdImage_Center + i), LCD_DATA );
	}
    for (int i = 0; i < 84; i++ ){
    1c2a:	84 e0       	ldi	r24, 0x04	; 4
    1c2c:	e3 31       	cpi	r30, 0x13	; 19
    1c2e:	f8 07       	cpc	r31, r24
    1c30:	a1 f7       	brne	.-24     	; 0x1c1a <Lcd3310_InitFill+0x58>
        Lcd3310_Send( pgm_read_byte( LcdImage_brunql_gmail_com + i), LCD_DATA );
    }
#else
    Lcd3310_ClearCenter();
#endif
}
    1c32:	08 95       	ret

00001c34 <Lcd3310_Init>:
void Lcd3310_InitFill (void);



void Lcd3310_Init(uint16_t show_init_data_delay_ms)
{
    1c34:	af 92       	push	r10
    1c36:	bf 92       	push	r11
    1c38:	cf 92       	push	r12
    1c3a:	df 92       	push	r13
    1c3c:	ef 92       	push	r14
    1c3e:	ff 92       	push	r15
    1c40:	0f 93       	push	r16
    1c42:	1f 93       	push	r17
    1c44:	8c 01       	movw	r16, r24
	//  Pull-up on reset pin.
    PORTB |= LCD_RST_PIN;
    1c46:	c2 9a       	sbi	0x18, 2	; 24

    //  Set output bits on port B.
    DDRB |= LCD_RST_PIN | LCD_DC_PIN | LCD_CE_PIN | SPI_MOSI_PIN | SPI_CLK_PIN;
    1c48:	87 b3       	in	r24, 0x17	; 23
    1c4a:	8c 6b       	ori	r24, 0xBC	; 188
    1c4c:	87 bb       	out	0x17, r24	; 23
    1c4e:	84 ef       	ldi	r24, 0xF4	; 244
    1c50:	91 e0       	ldi	r25, 0x01	; 1
    1c52:	20 e9       	ldi	r18, 0x90	; 144
    1c54:	31 e0       	ldi	r19, 0x01	; 1
    1c56:	f9 01       	movw	r30, r18
    1c58:	31 97       	sbiw	r30, 0x01	; 1
    1c5a:	f1 f7       	brne	.-4      	; 0x1c58 <Lcd3310_Init+0x24>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c5c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c5e:	d9 f7       	brne	.-10     	; 0x1c56 <Lcd3310_Init+0x22>

    _delay_ms(50);

    //  Toggle display reset pin.
    PORTB &= (unsigned char)~LCD_RST_PIN;
    1c60:	c2 98       	cbi	0x18, 2	; 24
    1c62:	80 ea       	ldi	r24, 0xA0	; 160
    1c64:	9f e0       	ldi	r25, 0x0F	; 15
    1c66:	01 97       	sbiw	r24, 0x01	; 1
    1c68:	f1 f7       	brne	.-4      	; 0x1c66 <Lcd3310_Init+0x32>
    _delay_ms(1);
    PORTB |= LCD_RST_PIN;
    1c6a:	c2 9a       	sbi	0x18, 2	; 24

    //  Enable SPI port: No interrupt, MSBit first, Master mode, CPOL->0, CPHA->0, Clk/4
    SPCR = 0x50;
    1c6c:	80 e5       	ldi	r24, 0x50	; 80
    1c6e:	8d b9       	out	0x0d, r24	; 13

    //  Disable LCD controller
    PORTB |= LCD_CE_PIN;
    1c70:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1c72:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    1c74:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    1c76:	81 e2       	ldi	r24, 0x21	; 33
    1c78:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1c7a:	77 9b       	sbis	0x0e, 7	; 14
    1c7c:	fe cf       	rjmp	.-4      	; 0x1c7a <Lcd3310_Init+0x46>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1c7e:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1c80:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    1c82:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    1c84:	88 ec       	ldi	r24, 0xC8	; 200
    1c86:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1c88:	77 9b       	sbis	0x0e, 7	; 14
    1c8a:	fe cf       	rjmp	.-4      	; 0x1c88 <Lcd3310_Init+0x54>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1c8c:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1c8e:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    1c90:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    1c92:	86 e0       	ldi	r24, 0x06	; 6
    1c94:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1c96:	77 9b       	sbis	0x0e, 7	; 14
    1c98:	fe cf       	rjmp	.-4      	; 0x1c96 <Lcd3310_Init+0x62>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1c9a:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1c9c:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    1c9e:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    1ca0:	83 e1       	ldi	r24, 0x13	; 19
    1ca2:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1ca4:	77 9b       	sbis	0x0e, 7	; 14
    1ca6:	fe cf       	rjmp	.-4      	; 0x1ca4 <Lcd3310_Init+0x70>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1ca8:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1caa:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    1cac:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    1cae:	80 e2       	ldi	r24, 0x20	; 32
    1cb0:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1cb2:	77 9b       	sbis	0x0e, 7	; 14
    1cb4:	fe cf       	rjmp	.-4      	; 0x1cb2 <Lcd3310_Init+0x7e>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1cb6:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1cb8:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    1cba:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    1cbc:	8c e0       	ldi	r24, 0x0C	; 12
    1cbe:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1cc0:	77 9b       	sbis	0x0e, 7	; 14
    1cc2:	fe cf       	rjmp	.-4      	; 0x1cc0 <Lcd3310_Init+0x8c>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1cc4:	c3 9a       	sbi	0x18, 3	; 24
    Lcd3310_Send( 0x06, LCD_CMD );  // Set Temp coefficent.
    Lcd3310_Send( 0x13, LCD_CMD );  // LCD bias mode 1:48.
    Lcd3310_Send( 0x20, LCD_CMD );  // LCD Standard Commands, Horizontal addressing mode.
    Lcd3310_Send( 0x0C, LCD_CMD );  // LCD in normal mode.

	Lcd3310_InitFill();
    1cc6:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <Lcd3310_InitFill>


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1cca:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    1ccc:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    1cce:	81 e2       	ldi	r24, 0x21	; 33
    1cd0:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1cd2:	77 9b       	sbis	0x0e, 7	; 14
    1cd4:	fe cf       	rjmp	.-4      	; 0x1cd2 <Lcd3310_Init+0x9e>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1cd6:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1cd8:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    1cda:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    1cdc:	8e e9       	ldi	r24, 0x9E	; 158
    1cde:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1ce0:	77 9b       	sbis	0x0e, 7	; 14
    1ce2:	fe cf       	rjmp	.-4      	; 0x1ce0 <Lcd3310_Init+0xac>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1ce4:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1ce6:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    1ce8:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    1cea:	80 e2       	ldi	r24, 0x20	; 32
    1cec:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1cee:	77 9b       	sbis	0x0e, 7	; 14
    1cf0:	fe cf       	rjmp	.-4      	; 0x1cee <Lcd3310_Init+0xba>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1cf2:	c3 9a       	sbi	0x18, 3	; 24
    Lcd3310_Send( 0x80 | LCD_CONTRAST, LCD_CMD );

    //  LCD Standard Commands, horizontal addressing mode.
    Lcd3310_Send( 0x20, LCD_CMD );

	_delay_ms(show_init_data_delay_ms); // show image from LcdCache initial value
    1cf4:	b8 01       	movw	r22, r16
    1cf6:	80 e0       	ldi	r24, 0x00	; 0
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <__floatunsisf>
    1cfe:	5b 01       	movw	r10, r22
    1d00:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d02:	20 e0       	ldi	r18, 0x00	; 0
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	4a e7       	ldi	r20, 0x7A	; 122
    1d08:	55 e4       	ldi	r21, 0x45	; 69
    1d0a:	0e 94 24 13 	call	0x2648	; 0x2648 <__mulsf3>
    1d0e:	7b 01       	movw	r14, r22
    1d10:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    1d12:	20 e0       	ldi	r18, 0x00	; 0
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	40 e8       	ldi	r20, 0x80	; 128
    1d18:	5f e3       	ldi	r21, 0x3F	; 63
    1d1a:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <__ltsf2>
    1d1e:	88 23       	and	r24, r24
    1d20:	1c f4       	brge	.+6      	; 0x1d28 <Lcd3310_Init+0xf4>
    1d22:	61 e0       	ldi	r22, 0x01	; 1
    1d24:	70 e0       	ldi	r23, 0x00	; 0
    1d26:	24 c0       	rjmp	.+72     	; 0x1d70 <Lcd3310_Init+0x13c>
		__ticks = 1;
	else if (__tmp > 65535)
    1d28:	c8 01       	movw	r24, r16
    1d2a:	b7 01       	movw	r22, r14
    1d2c:	20 e0       	ldi	r18, 0x00	; 0
    1d2e:	3f ef       	ldi	r19, 0xFF	; 255
    1d30:	4f e7       	ldi	r20, 0x7F	; 127
    1d32:	57 e4       	ldi	r21, 0x47	; 71
    1d34:	0e 94 ca 14 	call	0x2994	; 0x2994 <__gtsf2>
    1d38:	18 16       	cp	r1, r24
    1d3a:	b4 f4       	brge	.+44     	; 0x1d68 <Lcd3310_Init+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d3c:	c6 01       	movw	r24, r12
    1d3e:	b5 01       	movw	r22, r10
    1d40:	20 e0       	ldi	r18, 0x00	; 0
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	40 e2       	ldi	r20, 0x20	; 32
    1d46:	51 e4       	ldi	r21, 0x41	; 65
    1d48:	0e 94 24 13 	call	0x2648	; 0x2648 <__mulsf3>
    1d4c:	0e 94 4e 11 	call	0x229c	; 0x229c <__fixunssfsi>
    1d50:	80 e9       	ldi	r24, 0x90	; 144
    1d52:	91 e0       	ldi	r25, 0x01	; 1
    1d54:	05 c0       	rjmp	.+10     	; 0x1d60 <Lcd3310_Init+0x12c>
    1d56:	fc 01       	movw	r30, r24
    1d58:	31 97       	sbiw	r30, 0x01	; 1
    1d5a:	f1 f7       	brne	.-4      	; 0x1d58 <Lcd3310_Init+0x124>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d5c:	61 50       	subi	r22, 0x01	; 1
    1d5e:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d60:	61 15       	cp	r22, r1
    1d62:	71 05       	cpc	r23, r1
    1d64:	c1 f7       	brne	.-16     	; 0x1d56 <Lcd3310_Init+0x122>
    1d66:	07 c0       	rjmp	.+14     	; 0x1d76 <Lcd3310_Init+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d68:	c8 01       	movw	r24, r16
    1d6a:	b7 01       	movw	r22, r14
    1d6c:	0e 94 4e 11 	call	0x229c	; 0x229c <__fixunssfsi>
    1d70:	cb 01       	movw	r24, r22
    1d72:	01 97       	sbiw	r24, 0x01	; 1
    1d74:	f1 f7       	brne	.-4      	; 0x1d72 <Lcd3310_Init+0x13e>
}
    1d76:	1f 91       	pop	r17
    1d78:	0f 91       	pop	r16
    1d7a:	ff 90       	pop	r15
    1d7c:	ef 90       	pop	r14
    1d7e:	df 90       	pop	r13
    1d80:	cf 90       	pop	r12
    1d82:	bf 90       	pop	r11
    1d84:	af 90       	pop	r10
    1d86:	08 95       	ret

00001d88 <Lcd3310_Send>:


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1d88:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    1d8a:	61 30       	cpi	r22, 0x01	; 1
    1d8c:	11 f4       	brne	.+4      	; 0x1d92 <Lcd3310_Send+0xa>
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    1d8e:	c4 9a       	sbi	0x18, 4	; 24
    1d90:	01 c0       	rjmp	.+2      	; 0x1d94 <Lcd3310_Send+0xc>
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    1d92:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    1d94:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1d96:	77 9b       	sbis	0x0e, 7	; 14
    1d98:	fe cf       	rjmp	.-4      	; 0x1d96 <Lcd3310_Send+0xe>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1d9a:	c3 9a       	sbi	0x18, 3	; 24
}
    1d9c:	08 95       	ret

00001d9e <Lcd3310_UInt16AsText>:
	}
	Lcd3310_Char( ' ', is_invert_colors );
}

void Lcd3310_UInt16AsText(uint16_t i, WhiteOrBlackText is_invert_colors)
{
    1d9e:	1f 93       	push	r17
    1da0:	16 2f       	mov	r17, r22
	UInt16ToString( i );
    1da2:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <UInt16ToString>
	// show three numbers and space
	for(uint8_t count=0; count < 4; count++){ // 4 chars
			Lcd3310_Char( to_string_result[count], is_invert_colors );
    1da6:	80 91 85 03 	lds	r24, 0x0385
    1daa:	61 2f       	mov	r22, r17
    1dac:	0e 94 40 0c 	call	0x1880	; 0x1880 <Lcd3310_Char>
    1db0:	80 91 86 03 	lds	r24, 0x0386
    1db4:	61 2f       	mov	r22, r17
    1db6:	0e 94 40 0c 	call	0x1880	; 0x1880 <Lcd3310_Char>
    1dba:	80 91 87 03 	lds	r24, 0x0387
    1dbe:	61 2f       	mov	r22, r17
    1dc0:	0e 94 40 0c 	call	0x1880	; 0x1880 <Lcd3310_Char>
    1dc4:	80 91 88 03 	lds	r24, 0x0388
    1dc8:	61 2f       	mov	r22, r17
    1dca:	0e 94 40 0c 	call	0x1880	; 0x1880 <Lcd3310_Char>
	}
	Lcd3310_Char( ' ', is_invert_colors );
    1dce:	80 e2       	ldi	r24, 0x20	; 32
    1dd0:	61 2f       	mov	r22, r17
    1dd2:	0e 94 40 0c 	call	0x1880	; 0x1880 <Lcd3310_Char>
}
    1dd6:	1f 91       	pop	r17
    1dd8:	08 95       	ret

00001dda <Lcd3310_UInt16AsText_3Chars>:
		Lcd3310_Char( to_string_result[count], is_invert_colors );
	}
}

void Lcd3310_UInt16AsText_3Chars(uint16_t i, WhiteOrBlackText is_invert_colors)
{
    1dda:	1f 93       	push	r17
    1ddc:	16 2f       	mov	r17, r22
	UInt16ToString( i );
    1dde:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <UInt16ToString>
	// show three numbers and space
	for(uint8_t count=1; count < 4; count++){ // 0x03ff - max value, show only '3ff'
			Lcd3310_Char( to_string_result[count], is_invert_colors );
    1de2:	80 91 86 03 	lds	r24, 0x0386
    1de6:	61 2f       	mov	r22, r17
    1de8:	0e 94 40 0c 	call	0x1880	; 0x1880 <Lcd3310_Char>
    1dec:	80 91 87 03 	lds	r24, 0x0387
    1df0:	61 2f       	mov	r22, r17
    1df2:	0e 94 40 0c 	call	0x1880	; 0x1880 <Lcd3310_Char>
    1df6:	80 91 88 03 	lds	r24, 0x0388
    1dfa:	61 2f       	mov	r22, r17
    1dfc:	0e 94 40 0c 	call	0x1880	; 0x1880 <Lcd3310_Char>
	}
	Lcd3310_Char( ' ', is_invert_colors );
    1e00:	80 e2       	ldi	r24, 0x20	; 32
    1e02:	61 2f       	mov	r22, r17
    1e04:	0e 94 40 0c 	call	0x1880	; 0x1880 <Lcd3310_Char>
}
    1e08:	1f 91       	pop	r17
    1e0a:	08 95       	ret

00001e0c <Lcd3310_UInt8AsText>:




void Lcd3310_UInt8AsText(uint8_t ch, WhiteOrBlackText is_invert_colors)
{
    1e0c:	1f 93       	push	r17
    1e0e:	16 2f       	mov	r17, r22
	UInt8ToString( ch );
    1e10:	0e 94 ce 0b 	call	0x179c	; 0x179c <UInt8ToString>
	for(uint8_t count=0; count < 2; count++){
		Lcd3310_Char( to_string_result[count], is_invert_colors );
    1e14:	80 91 85 03 	lds	r24, 0x0385
    1e18:	61 2f       	mov	r22, r17
    1e1a:	0e 94 40 0c 	call	0x1880	; 0x1880 <Lcd3310_Char>
    1e1e:	80 91 86 03 	lds	r24, 0x0386
    1e22:	61 2f       	mov	r22, r17
    1e24:	0e 94 40 0c 	call	0x1880	; 0x1880 <Lcd3310_Char>
	}
}
    1e28:	1f 91       	pop	r17
    1e2a:	08 95       	ret

00001e2c <init_menu_now>:



void init_menu_now(void)
{
	menu_now = &go;
    1e2c:	85 e2       	ldi	r24, 0x25	; 37
    1e2e:	91 e0       	ldi	r25, 0x01	; 1
    1e30:	90 93 8e 03 	sts	0x038E, r25
    1e34:	80 93 8d 03 	sts	0x038D, r24
}
    1e38:	08 95       	ret

00001e3a <Lcd3310_UpdateDisplayInfo>:
}
#endif


void Lcd3310_UpdateDisplayInfo(void)
{
    1e3a:	ef 92       	push	r14
    1e3c:	ff 92       	push	r15
    1e3e:	0f 93       	push	r16
    1e40:	1f 93       	push	r17
    1e42:	cf 93       	push	r28
    1e44:	df 93       	push	r29
    uint8_t number_of_elements_in_menu_now = 1;
    
	Lcd3310_ClearCenter();
    1e46:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <Lcd3310_ClearCenter>
	
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { menu_now_atomic = menu_now; }
    1e4a:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1e4c:	f8 94       	cli
    1e4e:	80 91 8d 03 	lds	r24, 0x038D
    1e52:	90 91 8e 03 	lds	r25, 0x038E
    1e56:	90 93 8c 03 	sts	0x038C, r25
    1e5a:	80 93 8b 03 	sts	0x038B, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1e5e:	2f bf       	out	0x3f, r18	; 63

	struct menu_item *menu_temp = menu_now_atomic->next;
    1e60:	e0 91 8b 03 	lds	r30, 0x038B
    1e64:	f0 91 8c 03 	lds	r31, 0x038C
    1e68:	c5 81       	ldd	r28, Z+5	; 0x05
    1e6a:	d6 81       	ldd	r29, Z+6	; 0x06
    1e6c:	ff 24       	eor	r15, r15
    1e6e:	f3 94       	inc	r15
    1e70:	04 c0       	rjmp	.+8      	; 0x1e7a <Lcd3310_UpdateDisplayInfo+0x40>
	while( menu_temp != menu_now_atomic ){
		number_of_elements_in_menu_now++;
    1e72:	f3 94       	inc	r15
		menu_temp = menu_temp->next;
    1e74:	0d 80       	ldd	r0, Y+5	; 0x05
    1e76:	de 81       	ldd	r29, Y+6	; 0x06
    1e78:	c0 2d       	mov	r28, r0
	Lcd3310_ClearCenter();
	
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { menu_now_atomic = menu_now; }

	struct menu_item *menu_temp = menu_now_atomic->next;
	while( menu_temp != menu_now_atomic ){
    1e7a:	ce 17       	cp	r28, r30
    1e7c:	df 07       	cpc	r29, r31
    1e7e:	c9 f7       	brne	.-14     	; 0x1e72 <Lcd3310_UpdateDisplayInfo+0x38>
		number_of_elements_in_menu_now++;
		menu_temp = menu_temp->next;
	}
	if(number_of_elements_in_menu_now > 4){
    1e80:	24 e0       	ldi	r18, 0x04	; 4
    1e82:	2f 15       	cp	r18, r15
    1e84:	18 f4       	brcc	.+6      	; 0x1e8c <Lcd3310_UpdateDisplayInfo+0x52>
    1e86:	84 e0       	ldi	r24, 0x04	; 4
    1e88:	f8 2e       	mov	r15, r24
    1e8a:	03 c0       	rjmp	.+6      	; 0x1e92 <Lcd3310_UpdateDisplayInfo+0x58>
		number_of_elements_in_menu_now = 4;
	}
	 
#ifdef ANIMATION_SWITCH_MENU_ITEMS
	if(number_of_elements_in_menu_now < 3){
    1e8c:	82 e0       	ldi	r24, 0x02	; 2
    1e8e:	8f 15       	cp	r24, r15
    1e90:	10 f4       	brcc	.+4      	; 0x1e96 <Lcd3310_UpdateDisplayInfo+0x5c>
		menu_temp = menu_now_atomic;
	}else{
		menu_temp = menu_now_atomic->prev;
    1e92:	c7 81       	ldd	r28, Z+7	; 0x07
    1e94:	d0 85       	ldd	r29, Z+8	; 0x08
		menu_temp = menu_temp->prev;
	}
#endif

#	ifdef LCD_FIRST_STR
	Lcd3310_GotoXY(0, 0);
    1e96:	80 e0       	ldi	r24, 0x00	; 0
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	60 e0       	ldi	r22, 0x00	; 0
    1e9c:	70 e0       	ldi	r23, 0x00	; 0
    1e9e:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <Lcd3310_GotoXY>
	Lcd3310_String_P(lcd_first_str, WHITE_TEXT_ON_BLACK);
    1ea2:	80 91 14 01 	lds	r24, 0x0114
    1ea6:	90 91 15 01 	lds	r25, 0x0115
    1eaa:	61 e0       	ldi	r22, 0x01	; 1
    1eac:	0e 94 91 0c 	call	0x1922	; 0x1922 <Lcd3310_String_P>
    1eb0:	ee 24       	eor	r14, r14
    1eb2:	01 e0       	ldi	r16, 0x01	; 1
    1eb4:	10 e0       	ldi	r17, 0x00	; 0
    1eb6:	3a c0       	rjmp	.+116    	; 0x1f2c <Lcd3310_UpdateDisplayInfo+0xf2>
#	endif

	for(uint8_t i=0; i < number_of_elements_in_menu_now; i++){
#		ifdef LCD_IMAGES
			Lcd3310_GotoXY(0, i + 1);
    1eb8:	80 e0       	ldi	r24, 0x00	; 0
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	b8 01       	movw	r22, r16
    1ebe:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <Lcd3310_GotoXY>
				Lcd3310_GotoXY(0, i + 2);// show menu from (i+1) line because first line filled with '_COLORS_'
#			else
				Lcd3310_GotoXY(0, i); // no images at top
#			endif
#		endif
		if(menu_temp == &results){
    1ec2:	21 e0       	ldi	r18, 0x01	; 1
    1ec4:	cf 33       	cpi	r28, 0x3F	; 63
    1ec6:	d2 07       	cpc	r29, r18
    1ec8:	29 f4       	brne	.+10     	; 0x1ed4 <Lcd3310_UpdateDisplayInfo+0x9a>
			Lcd3310_GotoXY(0, i + 1);
    1eca:	80 e0       	ldi	r24, 0x00	; 0
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	b8 01       	movw	r22, r16
    1ed0:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <Lcd3310_GotoXY>
		}
		Lcd3310_String_P(menu_temp->str, (menu_now_atomic == menu_temp));
    1ed4:	29 85       	ldd	r18, Y+9	; 0x09
    1ed6:	3a 85       	ldd	r19, Y+10	; 0x0a
    1ed8:	60 e0       	ldi	r22, 0x00	; 0
    1eda:	80 91 8b 03 	lds	r24, 0x038B
    1ede:	90 91 8c 03 	lds	r25, 0x038C
    1ee2:	8c 17       	cp	r24, r28
    1ee4:	9d 07       	cpc	r25, r29
    1ee6:	09 f4       	brne	.+2      	; 0x1eea <Lcd3310_UpdateDisplayInfo+0xb0>
    1ee8:	61 e0       	ldi	r22, 0x01	; 1
    1eea:	c9 01       	movw	r24, r18
    1eec:	0e 94 91 0c 	call	0x1922	; 0x1922 <Lcd3310_String_P>
		if(menu_temp == &set_measure_delay){
    1ef0:	81 e0       	ldi	r24, 0x01	; 1
    1ef2:	c7 3a       	cpi	r28, 0xA7	; 167
    1ef4:	d8 07       	cpc	r29, r24
    1ef6:	a1 f4       	brne	.+40     	; 0x1f20 <Lcd3310_UpdateDisplayInfo+0xe6>
			Lcd3310_GotoXY(9, i + 1); // TODO: NEED TEST: (i+1) LCD_IMAGES, LCD_FIRST_STR
    1ef8:	89 e0       	ldi	r24, 0x09	; 9
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	b8 01       	movw	r22, r16
    1efe:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <Lcd3310_GotoXY>
			Lcd3310_Char(measure_delay + 0x30, (menu_now_atomic == menu_temp));
    1f02:	20 91 02 01 	lds	r18, 0x0102
    1f06:	20 5d       	subi	r18, 0xD0	; 208
    1f08:	60 e0       	ldi	r22, 0x00	; 0
    1f0a:	80 91 8b 03 	lds	r24, 0x038B
    1f0e:	90 91 8c 03 	lds	r25, 0x038C
    1f12:	8c 17       	cp	r24, r28
    1f14:	9d 07       	cpc	r25, r29
    1f16:	09 f4       	brne	.+2      	; 0x1f1a <Lcd3310_UpdateDisplayInfo+0xe0>
    1f18:	61 e0       	ldi	r22, 0x01	; 1
    1f1a:	82 2f       	mov	r24, r18
    1f1c:	0e 94 40 0c 	call	0x1880	; 0x1880 <Lcd3310_Char>
		}
		menu_temp = menu_temp->next;
    1f20:	0d 80       	ldd	r0, Y+5	; 0x05
    1f22:	de 81       	ldd	r29, Y+6	; 0x06
    1f24:	c0 2d       	mov	r28, r0
#	ifdef LCD_FIRST_STR
	Lcd3310_GotoXY(0, 0);
	Lcd3310_String_P(lcd_first_str, WHITE_TEXT_ON_BLACK);
#	endif

	for(uint8_t i=0; i < number_of_elements_in_menu_now; i++){
    1f26:	e3 94       	inc	r14
    1f28:	0f 5f       	subi	r16, 0xFF	; 255
    1f2a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f2c:	ef 14       	cp	r14, r15
    1f2e:	20 f2       	brcs	.-120    	; 0x1eb8 <Lcd3310_UpdateDisplayInfo+0x7e>
		}
		menu_temp = menu_temp->next;
	}


	if( menu_now_atomic == &results ){
    1f30:	80 91 8b 03 	lds	r24, 0x038B
    1f34:	90 91 8c 03 	lds	r25, 0x038C
    1f38:	8f 53       	subi	r24, 0x3F	; 63
    1f3a:	91 40       	sbci	r25, 0x01	; 1
    1f3c:	09 f0       	breq	.+2      	; 0x1f40 <Lcd3310_UpdateDisplayInfo+0x106>
    1f3e:	9f c0       	rjmp	.+318    	; 0x207e <Lcd3310_UpdateDisplayInfo+0x244>
		 * |D *** *** *** |  Diff = | Callibrate - Measure |;
		 *
		 */

		// |   R   G   B  |
		Lcd3310_GotoXY(3, 2);
    1f40:	83 e0       	ldi	r24, 0x03	; 3
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	62 e0       	ldi	r22, 0x02	; 2
    1f46:	70 e0       	ldi	r23, 0x00	; 0
    1f48:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <Lcd3310_GotoXY>
		Lcd3310_Char('R', BLACK_TEXT_ON_WHITE);
    1f4c:	82 e5       	ldi	r24, 0x52	; 82
    1f4e:	60 e0       	ldi	r22, 0x00	; 0
    1f50:	0e 94 40 0c 	call	0x1880	; 0x1880 <Lcd3310_Char>
		Lcd3310_GotoXY(7, 2);
    1f54:	87 e0       	ldi	r24, 0x07	; 7
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	62 e0       	ldi	r22, 0x02	; 2
    1f5a:	70 e0       	ldi	r23, 0x00	; 0
    1f5c:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <Lcd3310_GotoXY>
		Lcd3310_Char('G', BLACK_TEXT_ON_WHITE);
    1f60:	87 e4       	ldi	r24, 0x47	; 71
    1f62:	60 e0       	ldi	r22, 0x00	; 0
    1f64:	0e 94 40 0c 	call	0x1880	; 0x1880 <Lcd3310_Char>
		Lcd3310_GotoXY(11, 2);
    1f68:	8b e0       	ldi	r24, 0x0B	; 11
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	62 e0       	ldi	r22, 0x02	; 2
    1f6e:	70 e0       	ldi	r23, 0x00	; 0
    1f70:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <Lcd3310_GotoXY>
		Lcd3310_Char('B', BLACK_TEXT_ON_WHITE);
    1f74:	82 e4       	ldi	r24, 0x42	; 66
    1f76:	60 e0       	ldi	r22, 0x00	; 0
    1f78:	0e 94 40 0c 	call	0x1880	; 0x1880 <Lcd3310_Char>

		// |C *** *** *** |  Callibrate values
		Lcd3310_GotoXY(0, 3);
    1f7c:	80 e0       	ldi	r24, 0x00	; 0
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	63 e0       	ldi	r22, 0x03	; 3
    1f82:	70 e0       	ldi	r23, 0x00	; 0
    1f84:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <Lcd3310_GotoXY>
		Lcd3310_Char('C', BLACK_TEXT_ON_WHITE);
    1f88:	83 e4       	ldi	r24, 0x43	; 67
    1f8a:	60 e0       	ldi	r22, 0x00	; 0
    1f8c:	0e 94 40 0c 	call	0x1880	; 0x1880 <Lcd3310_Char>
		Lcd3310_GotoXY(2, 3);
    1f90:	82 e0       	ldi	r24, 0x02	; 2
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	63 e0       	ldi	r22, 0x03	; 3
    1f96:	70 e0       	ldi	r23, 0x00	; 0
    1f98:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <Lcd3310_GotoXY>
		Lcd3310_UInt16AsText_3Chars(hex2dec_result( result[CALIBRATE_INDX][RED] ), BLACK_TEXT_ON_WHITE);
    1f9c:	80 91 53 03 	lds	r24, 0x0353
    1fa0:	90 91 54 03 	lds	r25, 0x0354
    1fa4:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    1fa8:	60 e0       	ldi	r22, 0x00	; 0
    1faa:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <Lcd3310_UInt16AsText_3Chars>
		Lcd3310_UInt16AsText_3Chars(hex2dec_result( result[CALIBRATE_INDX][GREEN] ), BLACK_TEXT_ON_WHITE);
    1fae:	80 91 55 03 	lds	r24, 0x0355
    1fb2:	90 91 56 03 	lds	r25, 0x0356
    1fb6:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    1fba:	60 e0       	ldi	r22, 0x00	; 0
    1fbc:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <Lcd3310_UInt16AsText_3Chars>
		Lcd3310_UInt16AsText_3Chars(hex2dec_result( result[CALIBRATE_INDX][BLUE] ), BLACK_TEXT_ON_WHITE);
    1fc0:	80 91 57 03 	lds	r24, 0x0357
    1fc4:	90 91 58 03 	lds	r25, 0x0358
    1fc8:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    1fcc:	60 e0       	ldi	r22, 0x00	; 0
    1fce:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <Lcd3310_UInt16AsText_3Chars>

		// |M *** *** *** |	Measure values
		Lcd3310_GotoXY(0, 4);
    1fd2:	80 e0       	ldi	r24, 0x00	; 0
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	64 e0       	ldi	r22, 0x04	; 4
    1fd8:	70 e0       	ldi	r23, 0x00	; 0
    1fda:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <Lcd3310_GotoXY>
		Lcd3310_Char('M', BLACK_TEXT_ON_WHITE);
    1fde:	8d e4       	ldi	r24, 0x4D	; 77
    1fe0:	60 e0       	ldi	r22, 0x00	; 0
    1fe2:	0e 94 40 0c 	call	0x1880	; 0x1880 <Lcd3310_Char>
		Lcd3310_GotoXY(2, 4);
    1fe6:	82 e0       	ldi	r24, 0x02	; 2
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	64 e0       	ldi	r22, 0x04	; 4
    1fec:	70 e0       	ldi	r23, 0x00	; 0
    1fee:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <Lcd3310_GotoXY>
		Lcd3310_UInt16AsText_3Chars(hex2dec_result( result[MEASURE_INDX][RED] ), BLACK_TEXT_ON_WHITE);
    1ff2:	80 91 61 03 	lds	r24, 0x0361
    1ff6:	90 91 62 03 	lds	r25, 0x0362
    1ffa:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    1ffe:	60 e0       	ldi	r22, 0x00	; 0
    2000:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <Lcd3310_UInt16AsText_3Chars>
		Lcd3310_UInt16AsText_3Chars(hex2dec_result( result[MEASURE_INDX][GREEN] ), BLACK_TEXT_ON_WHITE);
    2004:	80 91 63 03 	lds	r24, 0x0363
    2008:	90 91 64 03 	lds	r25, 0x0364
    200c:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    2010:	60 e0       	ldi	r22, 0x00	; 0
    2012:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <Lcd3310_UInt16AsText_3Chars>
		Lcd3310_UInt16AsText_3Chars(hex2dec_result( result[MEASURE_INDX][BLUE] ), BLACK_TEXT_ON_WHITE);
    2016:	80 91 65 03 	lds	r24, 0x0365
    201a:	90 91 66 03 	lds	r25, 0x0366
    201e:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    2022:	60 e0       	ldi	r22, 0x00	; 0
    2024:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <Lcd3310_UInt16AsText_3Chars>

		// |D *** *** *** |	Diff values
		Lcd3310_GotoXY(0, 5);
    2028:	80 e0       	ldi	r24, 0x00	; 0
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	65 e0       	ldi	r22, 0x05	; 5
    202e:	70 e0       	ldi	r23, 0x00	; 0
    2030:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <Lcd3310_GotoXY>
		Lcd3310_Char('D', BLACK_TEXT_ON_WHITE);
    2034:	84 e4       	ldi	r24, 0x44	; 68
    2036:	60 e0       	ldi	r22, 0x00	; 0
    2038:	0e 94 40 0c 	call	0x1880	; 0x1880 <Lcd3310_Char>
		Lcd3310_GotoXY(2, 5);
    203c:	82 e0       	ldi	r24, 0x02	; 2
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	65 e0       	ldi	r22, 0x05	; 5
    2042:	70 e0       	ldi	r23, 0x00	; 0
    2044:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <Lcd3310_GotoXY>
		Lcd3310_UInt16AsText_3Chars(hex2dec_result( result[DIFF_INDX][RED] ), BLACK_TEXT_ON_WHITE);
    2048:	80 91 6f 03 	lds	r24, 0x036F
    204c:	90 91 70 03 	lds	r25, 0x0370
    2050:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    2054:	60 e0       	ldi	r22, 0x00	; 0
    2056:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <Lcd3310_UInt16AsText_3Chars>
		Lcd3310_UInt16AsText_3Chars(hex2dec_result( result[DIFF_INDX][GREEN] ), BLACK_TEXT_ON_WHITE);
    205a:	80 91 71 03 	lds	r24, 0x0371
    205e:	90 91 72 03 	lds	r25, 0x0372
    2062:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    2066:	60 e0       	ldi	r22, 0x00	; 0
    2068:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <Lcd3310_UInt16AsText_3Chars>
		Lcd3310_UInt16AsText_3Chars(hex2dec_result( result[DIFF_INDX][BLUE] ), BLACK_TEXT_ON_WHITE);
    206c:	80 91 73 03 	lds	r24, 0x0373
    2070:	90 91 74 03 	lds	r25, 0x0374
    2074:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    2078:	60 e0       	ldi	r22, 0x00	; 0
    207a:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <Lcd3310_UInt16AsText_3Chars>
	}
}
    207e:	df 91       	pop	r29
    2080:	cf 91       	pop	r28
    2082:	1f 91       	pop	r17
    2084:	0f 91       	pop	r16
    2086:	ff 90       	pop	r15
    2088:	ef 90       	pop	r14
    208a:	08 95       	ret

0000208c <Lcd3310_AnimationSwitchMenuItems>:
}
//==============================================//

#ifdef ANIMATION_SWITCH_MENU_ITEMS
void Lcd3310_AnimationSwitchMenuItems(char is_turn_left)
{
    208c:	9f 92       	push	r9
    208e:	af 92       	push	r10
    2090:	bf 92       	push	r11
    2092:	cf 92       	push	r12
    2094:	df 92       	push	r13
    2096:	ef 92       	push	r14
    2098:	ff 92       	push	r15
    209a:	0f 93       	push	r16
    209c:	1f 93       	push	r17
    209e:	cf 93       	push	r28
    20a0:	df 93       	push	r29
    20a2:	98 2e       	mov	r9, r24
	uint8_t number_of_elements_in_menu_now = 1;
	struct menu_item *menu_temp;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { 
    20a4:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    20a6:	f8 94       	cli
		menu_now_atomic = menu_now; 
    20a8:	20 91 8d 03 	lds	r18, 0x038D
    20ac:	30 91 8e 03 	lds	r19, 0x038E
    20b0:	30 93 8c 03 	sts	0x038C, r19
    20b4:	20 93 8b 03 	sts	0x038B, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    20b8:	8f bf       	out	0x3f, r24	; 63
	}
	
	menu_temp = menu_now_atomic->next;
    20ba:	e0 91 8b 03 	lds	r30, 0x038B
    20be:	f0 91 8c 03 	lds	r31, 0x038C
    20c2:	a5 81       	ldd	r26, Z+5	; 0x05
    20c4:	b6 81       	ldd	r27, Z+6	; 0x06
	while( menu_temp->str != menu_now_atomic->str ){
    20c6:	21 85       	ldd	r18, Z+9	; 0x09
    20c8:	32 85       	ldd	r19, Z+10	; 0x0a
    20ca:	11 e0       	ldi	r17, 0x01	; 1
    20cc:	05 c0       	rjmp	.+10     	; 0x20d8 <Lcd3310_AnimationSwitchMenuItems+0x4c>
		number_of_elements_in_menu_now++;
    20ce:	1f 5f       	subi	r17, 0xFF	; 255
		menu_temp = menu_temp->next;
    20d0:	15 96       	adiw	r26, 0x05	; 5
    20d2:	0d 90       	ld	r0, X+
    20d4:	bc 91       	ld	r27, X
    20d6:	a0 2d       	mov	r26, r0
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { 
		menu_now_atomic = menu_now; 
	}
	
	menu_temp = menu_now_atomic->next;
	while( menu_temp->str != menu_now_atomic->str ){
    20d8:	19 96       	adiw	r26, 0x09	; 9
    20da:	8d 91       	ld	r24, X+
    20dc:	9c 91       	ld	r25, X
    20de:	1a 97       	sbiw	r26, 0x0a	; 10
    20e0:	82 17       	cp	r24, r18
    20e2:	93 07       	cpc	r25, r19
    20e4:	a1 f7       	brne	.-24     	; 0x20ce <Lcd3310_AnimationSwitchMenuItems+0x42>
		number_of_elements_in_menu_now++;
		menu_temp = menu_temp->next;
	}
	if(number_of_elements_in_menu_now > 4){
    20e6:	15 30       	cpi	r17, 0x05	; 5
    20e8:	08 f0       	brcs	.+2      	; 0x20ec <Lcd3310_AnimationSwitchMenuItems+0x60>
    20ea:	14 e0       	ldi	r17, 0x04	; 4
		number_of_elements_in_menu_now = 4;
	}

	Lcd3310_ClearCenter();
    20ec:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <Lcd3310_ClearCenter>
    20f0:	e0 91 8b 03 	lds	r30, 0x038B
    20f4:	f0 91 8c 03 	lds	r31, 0x038C
	if(number_of_elements_in_menu_now < 3){
    20f8:	13 30       	cpi	r17, 0x03	; 3
    20fa:	38 f4       	brcc	.+14     	; 0x210a <Lcd3310_AnimationSwitchMenuItems+0x7e>
		menu_temp = menu_now_atomic;
    20fc:	ef 01       	movw	r28, r30
    20fe:	cc 24       	eor	r12, r12
    2100:	20 e9       	ldi	r18, 0x90	; 144
    2102:	a2 2e       	mov	r10, r18
    2104:	21 e0       	ldi	r18, 0x01	; 1
    2106:	b2 2e       	mov	r11, r18
    2108:	3f c0       	rjmp	.+126    	; 0x2188 <Lcd3310_AnimationSwitchMenuItems+0xfc>
	}else{
		menu_temp = menu_now_atomic->prev;
    210a:	c7 81       	ldd	r28, Z+7	; 0x07
    210c:	d0 85       	ldd	r29, Z+8	; 0x08
    210e:	f7 cf       	rjmp	.-18     	; 0x20fe <Lcd3310_AnimationSwitchMenuItems+0x72>
	}

	for(uint8_t j=0; j<8; j++){
		for(uint8_t i=0; i < number_of_elements_in_menu_now; i++){
#			ifdef LCD_IMAGES
				Lcd3310_GotoXY(0, i + 1);// show menu from (i+1) line because first line filled with '_COLORS_'
    2110:	80 e0       	ldi	r24, 0x00	; 0
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	b7 01       	movw	r22, r14
    2116:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <Lcd3310_GotoXY>
#			else
				Lcd3310_GotoXY(0, i); // no images at top
#			endif
			Lcd3310_String_P_Anime(
    211a:	99 20       	and	r9, r9
    211c:	19 f0       	breq	.+6      	; 0x2124 <Lcd3310_AnimationSwitchMenuItems+0x98>
    211e:	ef 81       	ldd	r30, Y+7	; 0x07
    2120:	f8 85       	ldd	r31, Y+8	; 0x08
    2122:	02 c0       	rjmp	.+4      	; 0x2128 <Lcd3310_AnimationSwitchMenuItems+0x9c>
    2124:	ed 81       	ldd	r30, Y+5	; 0x05
    2126:	fe 81       	ldd	r31, Y+6	; 0x06
    2128:	21 85       	ldd	r18, Z+9	; 0x09
    212a:	32 85       	ldd	r19, Z+10	; 0x0a
    212c:	69 85       	ldd	r22, Y+9	; 0x09
    212e:	7a 85       	ldd	r23, Y+10	; 0x0a
    2130:	40 e0       	ldi	r20, 0x00	; 0
    2132:	80 91 8b 03 	lds	r24, 0x038B
    2136:	90 91 8c 03 	lds	r25, 0x038C
    213a:	8c 17       	cp	r24, r28
    213c:	9d 07       	cpc	r25, r29
    213e:	09 f4       	brne	.+2      	; 0x2142 <Lcd3310_AnimationSwitchMenuItems+0xb6>
    2140:	41 e0       	ldi	r20, 0x01	; 1
    2142:	c9 01       	movw	r24, r18
    2144:	2c 2d       	mov	r18, r12
    2146:	09 2d       	mov	r16, r9
    2148:	0e 94 c3 0c 	call	0x1986	; 0x1986 <Lcd3310_String_P_Anime>
							menu_temp->str,
							(menu_now_atomic == menu_temp), // WhiteOrBlackText
							j, // num_of_cadr
							is_turn_left // is_next
							);
			menu_temp = menu_temp->next;
    214c:	0d 80       	ldd	r0, Y+5	; 0x05
    214e:	de 81       	ldd	r29, Y+6	; 0x06
    2150:	c0 2d       	mov	r28, r0
	}else{
		menu_temp = menu_now_atomic->prev;
	}

	for(uint8_t j=0; j<8; j++){
		for(uint8_t i=0; i < number_of_elements_in_menu_now; i++){
    2152:	d3 94       	inc	r13
    2154:	08 94       	sec
    2156:	e1 1c       	adc	r14, r1
    2158:	f1 1c       	adc	r15, r1
    215a:	d1 16       	cp	r13, r17
    215c:	c8 f2       	brcs	.-78     	; 0x2110 <Lcd3310_AnimationSwitchMenuItems+0x84>
    215e:	e0 91 8b 03 	lds	r30, 0x038B
    2162:	f0 91 8c 03 	lds	r31, 0x038C
							j, // num_of_cadr
							is_turn_left // is_next
							);
			menu_temp = menu_temp->next;
		}
		if(number_of_elements_in_menu_now < 3){
    2166:	13 30       	cpi	r17, 0x03	; 3
    2168:	10 f4       	brcc	.+4      	; 0x216e <Lcd3310_AnimationSwitchMenuItems+0xe2>
			menu_temp = menu_now_atomic;
    216a:	ef 01       	movw	r28, r30
    216c:	02 c0       	rjmp	.+4      	; 0x2172 <Lcd3310_AnimationSwitchMenuItems+0xe6>
		}else{
			menu_temp = menu_now_atomic->prev;
    216e:	c7 81       	ldd	r28, Z+7	; 0x07
    2170:	d0 85       	ldd	r29, Z+8	; 0x08
    2172:	84 ef       	ldi	r24, 0xF4	; 244
    2174:	91 e0       	ldi	r25, 0x01	; 1
    2176:	f5 01       	movw	r30, r10
    2178:	31 97       	sbiw	r30, 0x01	; 1
    217a:	f1 f7       	brne	.-4      	; 0x2178 <Lcd3310_AnimationSwitchMenuItems+0xec>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    217c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    217e:	d9 f7       	brne	.-10     	; 0x2176 <Lcd3310_AnimationSwitchMenuItems+0xea>
		menu_temp = menu_now_atomic;
	}else{
		menu_temp = menu_now_atomic->prev;
	}

	for(uint8_t j=0; j<8; j++){
    2180:	c3 94       	inc	r12
    2182:	88 e0       	ldi	r24, 0x08	; 8
    2184:	c8 16       	cp	r12, r24
    2186:	29 f0       	breq	.+10     	; 0x2192 <Lcd3310_AnimationSwitchMenuItems+0x106>
    2188:	dd 24       	eor	r13, r13
    218a:	91 e0       	ldi	r25, 0x01	; 1
    218c:	e9 2e       	mov	r14, r25
    218e:	f1 2c       	mov	r15, r1
    2190:	e4 cf       	rjmp	.-56     	; 0x215a <Lcd3310_AnimationSwitchMenuItems+0xce>
		}else{
			menu_temp = menu_now_atomic->prev;
		}
		_delay_ms(50);
	}
}
    2192:	df 91       	pop	r29
    2194:	cf 91       	pop	r28
    2196:	1f 91       	pop	r17
    2198:	0f 91       	pop	r16
    219a:	ff 90       	pop	r15
    219c:	ef 90       	pop	r14
    219e:	df 90       	pop	r13
    21a0:	cf 90       	pop	r12
    21a2:	bf 90       	pop	r11
    21a4:	af 90       	pop	r10
    21a6:	9f 90       	pop	r9
    21a8:	08 95       	ret

000021aa <Lcd3310_InitializeDisplay>:



void init_menu_now(void)
{
	menu_now = &go;
    21aa:	25 e2       	ldi	r18, 0x25	; 37
    21ac:	31 e0       	ldi	r19, 0x01	; 1
    21ae:	30 93 8e 03 	sts	0x038E, r19
    21b2:	20 93 8d 03 	sts	0x038D, r18
//==============================================//
void Lcd3310_InitializeDisplay(uint16_t show_image_delay_ms)
{
	init_menu_now();

    Lcd3310_Init(show_image_delay_ms);
    21b6:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <Lcd3310_Init>
	//Lcd3310_LcdImageUpperBottom_Fill();
    Lcd3310_UpdateDisplayInfo();
    21ba:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <Lcd3310_UpdateDisplayInfo>
}
    21be:	08 95       	ret

000021c0 <Menu_EnterClick>:
struct menu_item readme = {ENTER_MENU_CMD, NULL, &text, &go, &setup, 												"// Readme   //"};
	struct menu_item text = {BACK_CMD, &readme, NULL, &text, &text, "[ Programmer:][   brunql   ][    (at)    ][  gmail.com ]"};

void Menu_EnterClick(void)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { menu_now_atomic = menu_now; }
    21c0:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    21c2:	f8 94       	cli
    21c4:	20 91 8d 03 	lds	r18, 0x038D
    21c8:	30 91 8e 03 	lds	r19, 0x038E
    21cc:	30 93 8c 03 	sts	0x038C, r19
    21d0:	20 93 8b 03 	sts	0x038B, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    21d4:	8f bf       	out	0x3f, r24	; 63
	switch(menu_now_atomic->cmd){
    21d6:	e0 91 8b 03 	lds	r30, 0x038B
    21da:	f0 91 8c 03 	lds	r31, 0x038C
    21de:	e0 81       	ld	r30, Z
    21e0:	e3 30       	cpi	r30, 0x03	; 3
    21e2:	39 f1       	breq	.+78     	; 0x2232 <Menu_EnterClick+0x72>
    21e4:	e4 30       	cpi	r30, 0x04	; 4
    21e6:	28 f4       	brcc	.+10     	; 0x21f2 <Menu_EnterClick+0x32>
    21e8:	e1 30       	cpi	r30, 0x01	; 1
    21ea:	61 f0       	breq	.+24     	; 0x2204 <Menu_EnterClick+0x44>
    21ec:	e2 30       	cpi	r30, 0x02	; 2
    21ee:	30 f5       	brcc	.+76     	; 0x223c <Menu_EnterClick+0x7c>
    21f0:	12 c0       	rjmp	.+36     	; 0x2216 <Menu_EnterClick+0x56>
    21f2:	e6 30       	cpi	r30, 0x06	; 6
    21f4:	c1 f1       	breq	.+112    	; 0x2266 <Menu_EnterClick+0xa6>
    21f6:	e7 30       	cpi	r30, 0x07	; 7
    21f8:	09 f4       	brne	.+2      	; 0x21fc <Menu_EnterClick+0x3c>
    21fa:	42 c0       	rjmp	.+132    	; 0x2280 <Menu_EnterClick+0xc0>
    21fc:	e4 30       	cpi	r30, 0x04	; 4
    21fe:	09 f0       	breq	.+2      	; 0x2202 <Menu_EnterClick+0x42>
    2200:	4c c0       	rjmp	.+152    	; 0x229a <Menu_EnterClick+0xda>
    2202:	24 c0       	rjmp	.+72     	; 0x224c <Menu_EnterClick+0x8c>
		default:
			break;
		case ENTER_MENU_CMD:
		enter_menu_label:
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { menu_now = menu_now->sub_menu; }
    2204:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2206:	f8 94       	cli
    2208:	e0 91 8d 03 	lds	r30, 0x038D
    220c:	f0 91 8e 03 	lds	r31, 0x038E
    2210:	23 81       	ldd	r18, Z+3	; 0x03
    2212:	34 81       	ldd	r19, Z+4	; 0x04
    2214:	08 c0       	rjmp	.+16     	; 0x2226 <Menu_EnterClick+0x66>
			break;

		case BACK_CMD:
		back_menu_label:
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { menu_now = menu_now->main_menu; }
    2216:	8f b7       	in	r24, 0x3f	; 63
    2218:	f8 94       	cli
    221a:	e0 91 8d 03 	lds	r30, 0x038D
    221e:	f0 91 8e 03 	lds	r31, 0x038E
    2222:	21 81       	ldd	r18, Z+1	; 0x01
    2224:	32 81       	ldd	r19, Z+2	; 0x02
    2226:	30 93 8e 03 	sts	0x038E, r19
    222a:	20 93 8d 03 	sts	0x038D, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    222e:	8f bf       	out	0x3f, r24	; 63
    2230:	19 c0       	rjmp	.+50     	; 0x2264 <Menu_EnterClick+0xa4>
			break;
		
		case results_cmd:
			LedDriver_SwitchLeds( 0x0000 );
    2232:	80 e0       	ldi	r24, 0x00	; 0
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <LedDriver_SwitchLeds>
    223a:	ed cf       	rjmp	.-38     	; 0x2216 <Menu_EnterClick+0x56>
			goto back_menu_label;
	
		case go_cmd:
			FLAGS_SWITCH_ON( ADC_RESULT_FLAG );
    223c:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    223e:	f8 94       	cli
    2240:	80 91 7f 03 	lds	r24, 0x037F
    2244:	90 91 80 03 	lds	r25, 0x0380
    2248:	80 61       	ori	r24, 0x10	; 16
    224a:	14 c0       	rjmp	.+40     	; 0x2274 <Menu_EnterClick+0xb4>
			goto enter_menu_label;
		
		case calibration_cmd:
			FLAGS_SWITCH_ON( ADC_CALIBRATE_FLAG );
    224c:	2f b7       	in	r18, 0x3f	; 63
    224e:	f8 94       	cli
    2250:	80 91 7f 03 	lds	r24, 0x037F
    2254:	90 91 80 03 	lds	r25, 0x0380
    2258:	80 62       	ori	r24, 0x20	; 32
    225a:	90 93 80 03 	sts	0x0380, r25
    225e:	80 93 7f 03 	sts	0x037F, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2262:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    2264:	08 95       	ret
			break;

		case snake_start_cmd:
			FLAGS_SWITCH_ON( SNAKE_START_GAME_FLAG );
    2266:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2268:	f8 94       	cli
    226a:	80 91 7f 03 	lds	r24, 0x037F
    226e:	90 91 80 03 	lds	r25, 0x0380
    2272:	80 68       	ori	r24, 0x80	; 128
    2274:	90 93 80 03 	sts	0x0380, r25
    2278:	80 93 7f 03 	sts	0x037F, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    227c:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    227e:	c2 cf       	rjmp	.-124    	; 0x2204 <Menu_EnterClick+0x44>
			goto enter_menu_label;

		case snake_results_cmd:
			FLAGS_SWITCH_ON( SNAKE_STOP_GAME_FLAG );
    2280:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2282:	f8 94       	cli
    2284:	80 91 7f 03 	lds	r24, 0x037F
    2288:	90 91 80 03 	lds	r25, 0x0380
    228c:	91 60       	ori	r25, 0x01	; 1
    228e:	90 93 80 03 	sts	0x0380, r25
    2292:	80 93 7f 03 	sts	0x037F, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2296:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    2298:	be cf       	rjmp	.-132    	; 0x2216 <Menu_EnterClick+0x56>
    229a:	08 95       	ret

0000229c <__fixunssfsi>:
    229c:	ef 92       	push	r14
    229e:	ff 92       	push	r15
    22a0:	0f 93       	push	r16
    22a2:	1f 93       	push	r17
    22a4:	7b 01       	movw	r14, r22
    22a6:	8c 01       	movw	r16, r24
    22a8:	20 e0       	ldi	r18, 0x00	; 0
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	40 e0       	ldi	r20, 0x00	; 0
    22ae:	5f e4       	ldi	r21, 0x4F	; 79
    22b0:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <__gesf2>
    22b4:	88 23       	and	r24, r24
    22b6:	8c f0       	brlt	.+34     	; 0x22da <__fixunssfsi+0x3e>
    22b8:	c8 01       	movw	r24, r16
    22ba:	b7 01       	movw	r22, r14
    22bc:	20 e0       	ldi	r18, 0x00	; 0
    22be:	30 e0       	ldi	r19, 0x00	; 0
    22c0:	40 e0       	ldi	r20, 0x00	; 0
    22c2:	5f e4       	ldi	r21, 0x4F	; 79
    22c4:	0e 94 c6 12 	call	0x258c	; 0x258c <__subsf3>
    22c8:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__fixsfsi>
    22cc:	9b 01       	movw	r18, r22
    22ce:	ac 01       	movw	r20, r24
    22d0:	20 50       	subi	r18, 0x00	; 0
    22d2:	30 40       	sbci	r19, 0x00	; 0
    22d4:	40 40       	sbci	r20, 0x00	; 0
    22d6:	50 48       	sbci	r21, 0x80	; 128
    22d8:	06 c0       	rjmp	.+12     	; 0x22e6 <__fixunssfsi+0x4a>
    22da:	c8 01       	movw	r24, r16
    22dc:	b7 01       	movw	r22, r14
    22de:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__fixsfsi>
    22e2:	9b 01       	movw	r18, r22
    22e4:	ac 01       	movw	r20, r24
    22e6:	b9 01       	movw	r22, r18
    22e8:	ca 01       	movw	r24, r20
    22ea:	1f 91       	pop	r17
    22ec:	0f 91       	pop	r16
    22ee:	ff 90       	pop	r15
    22f0:	ef 90       	pop	r14
    22f2:	08 95       	ret

000022f4 <_fpadd_parts>:
    22f4:	a0 e0       	ldi	r26, 0x00	; 0
    22f6:	b0 e0       	ldi	r27, 0x00	; 0
    22f8:	e0 e8       	ldi	r30, 0x80	; 128
    22fa:	f1 e1       	ldi	r31, 0x11	; 17
    22fc:	0c 94 02 19 	jmp	0x3204	; 0x3204 <__prologue_saves__>
    2300:	dc 01       	movw	r26, r24
    2302:	2b 01       	movw	r4, r22
    2304:	fa 01       	movw	r30, r20
    2306:	9c 91       	ld	r25, X
    2308:	92 30       	cpi	r25, 0x02	; 2
    230a:	08 f4       	brcc	.+2      	; 0x230e <_fpadd_parts+0x1a>
    230c:	39 c1       	rjmp	.+626    	; 0x2580 <_fpadd_parts+0x28c>
    230e:	eb 01       	movw	r28, r22
    2310:	88 81       	ld	r24, Y
    2312:	82 30       	cpi	r24, 0x02	; 2
    2314:	08 f4       	brcc	.+2      	; 0x2318 <_fpadd_parts+0x24>
    2316:	33 c1       	rjmp	.+614    	; 0x257e <_fpadd_parts+0x28a>
    2318:	94 30       	cpi	r25, 0x04	; 4
    231a:	69 f4       	brne	.+26     	; 0x2336 <_fpadd_parts+0x42>
    231c:	84 30       	cpi	r24, 0x04	; 4
    231e:	09 f0       	breq	.+2      	; 0x2322 <_fpadd_parts+0x2e>
    2320:	2f c1       	rjmp	.+606    	; 0x2580 <_fpadd_parts+0x28c>
    2322:	11 96       	adiw	r26, 0x01	; 1
    2324:	9c 91       	ld	r25, X
    2326:	11 97       	sbiw	r26, 0x01	; 1
    2328:	89 81       	ldd	r24, Y+1	; 0x01
    232a:	98 17       	cp	r25, r24
    232c:	09 f4       	brne	.+2      	; 0x2330 <_fpadd_parts+0x3c>
    232e:	28 c1       	rjmp	.+592    	; 0x2580 <_fpadd_parts+0x28c>
    2330:	a4 e4       	ldi	r26, 0x44	; 68
    2332:	b2 e0       	ldi	r27, 0x02	; 2
    2334:	25 c1       	rjmp	.+586    	; 0x2580 <_fpadd_parts+0x28c>
    2336:	84 30       	cpi	r24, 0x04	; 4
    2338:	09 f4       	brne	.+2      	; 0x233c <_fpadd_parts+0x48>
    233a:	21 c1       	rjmp	.+578    	; 0x257e <_fpadd_parts+0x28a>
    233c:	82 30       	cpi	r24, 0x02	; 2
    233e:	a9 f4       	brne	.+42     	; 0x236a <_fpadd_parts+0x76>
    2340:	92 30       	cpi	r25, 0x02	; 2
    2342:	09 f0       	breq	.+2      	; 0x2346 <_fpadd_parts+0x52>
    2344:	1d c1       	rjmp	.+570    	; 0x2580 <_fpadd_parts+0x28c>
    2346:	9a 01       	movw	r18, r20
    2348:	ad 01       	movw	r20, r26
    234a:	88 e0       	ldi	r24, 0x08	; 8
    234c:	ea 01       	movw	r28, r20
    234e:	09 90       	ld	r0, Y+
    2350:	ae 01       	movw	r20, r28
    2352:	e9 01       	movw	r28, r18
    2354:	09 92       	st	Y+, r0
    2356:	9e 01       	movw	r18, r28
    2358:	81 50       	subi	r24, 0x01	; 1
    235a:	c1 f7       	brne	.-16     	; 0x234c <_fpadd_parts+0x58>
    235c:	e2 01       	movw	r28, r4
    235e:	89 81       	ldd	r24, Y+1	; 0x01
    2360:	11 96       	adiw	r26, 0x01	; 1
    2362:	9c 91       	ld	r25, X
    2364:	89 23       	and	r24, r25
    2366:	81 83       	std	Z+1, r24	; 0x01
    2368:	08 c1       	rjmp	.+528    	; 0x257a <_fpadd_parts+0x286>
    236a:	92 30       	cpi	r25, 0x02	; 2
    236c:	09 f4       	brne	.+2      	; 0x2370 <_fpadd_parts+0x7c>
    236e:	07 c1       	rjmp	.+526    	; 0x257e <_fpadd_parts+0x28a>
    2370:	12 96       	adiw	r26, 0x02	; 2
    2372:	2d 90       	ld	r2, X+
    2374:	3c 90       	ld	r3, X
    2376:	13 97       	sbiw	r26, 0x03	; 3
    2378:	eb 01       	movw	r28, r22
    237a:	8a 81       	ldd	r24, Y+2	; 0x02
    237c:	9b 81       	ldd	r25, Y+3	; 0x03
    237e:	14 96       	adiw	r26, 0x04	; 4
    2380:	ad 90       	ld	r10, X+
    2382:	bd 90       	ld	r11, X+
    2384:	cd 90       	ld	r12, X+
    2386:	dc 90       	ld	r13, X
    2388:	17 97       	sbiw	r26, 0x07	; 7
    238a:	ec 80       	ldd	r14, Y+4	; 0x04
    238c:	fd 80       	ldd	r15, Y+5	; 0x05
    238e:	0e 81       	ldd	r16, Y+6	; 0x06
    2390:	1f 81       	ldd	r17, Y+7	; 0x07
    2392:	91 01       	movw	r18, r2
    2394:	28 1b       	sub	r18, r24
    2396:	39 0b       	sbc	r19, r25
    2398:	b9 01       	movw	r22, r18
    239a:	37 ff       	sbrs	r19, 7
    239c:	04 c0       	rjmp	.+8      	; 0x23a6 <_fpadd_parts+0xb2>
    239e:	66 27       	eor	r22, r22
    23a0:	77 27       	eor	r23, r23
    23a2:	62 1b       	sub	r22, r18
    23a4:	73 0b       	sbc	r23, r19
    23a6:	60 32       	cpi	r22, 0x20	; 32
    23a8:	71 05       	cpc	r23, r1
    23aa:	0c f0       	brlt	.+2      	; 0x23ae <_fpadd_parts+0xba>
    23ac:	61 c0       	rjmp	.+194    	; 0x2470 <_fpadd_parts+0x17c>
    23ae:	12 16       	cp	r1, r18
    23b0:	13 06       	cpc	r1, r19
    23b2:	6c f5       	brge	.+90     	; 0x240e <_fpadd_parts+0x11a>
    23b4:	37 01       	movw	r6, r14
    23b6:	48 01       	movw	r8, r16
    23b8:	06 2e       	mov	r0, r22
    23ba:	04 c0       	rjmp	.+8      	; 0x23c4 <_fpadd_parts+0xd0>
    23bc:	96 94       	lsr	r9
    23be:	87 94       	ror	r8
    23c0:	77 94       	ror	r7
    23c2:	67 94       	ror	r6
    23c4:	0a 94       	dec	r0
    23c6:	d2 f7       	brpl	.-12     	; 0x23bc <_fpadd_parts+0xc8>
    23c8:	21 e0       	ldi	r18, 0x01	; 1
    23ca:	30 e0       	ldi	r19, 0x00	; 0
    23cc:	40 e0       	ldi	r20, 0x00	; 0
    23ce:	50 e0       	ldi	r21, 0x00	; 0
    23d0:	04 c0       	rjmp	.+8      	; 0x23da <_fpadd_parts+0xe6>
    23d2:	22 0f       	add	r18, r18
    23d4:	33 1f       	adc	r19, r19
    23d6:	44 1f       	adc	r20, r20
    23d8:	55 1f       	adc	r21, r21
    23da:	6a 95       	dec	r22
    23dc:	d2 f7       	brpl	.-12     	; 0x23d2 <_fpadd_parts+0xde>
    23de:	21 50       	subi	r18, 0x01	; 1
    23e0:	30 40       	sbci	r19, 0x00	; 0
    23e2:	40 40       	sbci	r20, 0x00	; 0
    23e4:	50 40       	sbci	r21, 0x00	; 0
    23e6:	2e 21       	and	r18, r14
    23e8:	3f 21       	and	r19, r15
    23ea:	40 23       	and	r20, r16
    23ec:	51 23       	and	r21, r17
    23ee:	21 15       	cp	r18, r1
    23f0:	31 05       	cpc	r19, r1
    23f2:	41 05       	cpc	r20, r1
    23f4:	51 05       	cpc	r21, r1
    23f6:	21 f0       	breq	.+8      	; 0x2400 <_fpadd_parts+0x10c>
    23f8:	21 e0       	ldi	r18, 0x01	; 1
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	40 e0       	ldi	r20, 0x00	; 0
    23fe:	50 e0       	ldi	r21, 0x00	; 0
    2400:	79 01       	movw	r14, r18
    2402:	8a 01       	movw	r16, r20
    2404:	e6 28       	or	r14, r6
    2406:	f7 28       	or	r15, r7
    2408:	08 29       	or	r16, r8
    240a:	19 29       	or	r17, r9
    240c:	3c c0       	rjmp	.+120    	; 0x2486 <_fpadd_parts+0x192>
    240e:	23 2b       	or	r18, r19
    2410:	d1 f1       	breq	.+116    	; 0x2486 <_fpadd_parts+0x192>
    2412:	26 0e       	add	r2, r22
    2414:	37 1e       	adc	r3, r23
    2416:	35 01       	movw	r6, r10
    2418:	46 01       	movw	r8, r12
    241a:	06 2e       	mov	r0, r22
    241c:	04 c0       	rjmp	.+8      	; 0x2426 <_fpadd_parts+0x132>
    241e:	96 94       	lsr	r9
    2420:	87 94       	ror	r8
    2422:	77 94       	ror	r7
    2424:	67 94       	ror	r6
    2426:	0a 94       	dec	r0
    2428:	d2 f7       	brpl	.-12     	; 0x241e <_fpadd_parts+0x12a>
    242a:	21 e0       	ldi	r18, 0x01	; 1
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	40 e0       	ldi	r20, 0x00	; 0
    2430:	50 e0       	ldi	r21, 0x00	; 0
    2432:	04 c0       	rjmp	.+8      	; 0x243c <_fpadd_parts+0x148>
    2434:	22 0f       	add	r18, r18
    2436:	33 1f       	adc	r19, r19
    2438:	44 1f       	adc	r20, r20
    243a:	55 1f       	adc	r21, r21
    243c:	6a 95       	dec	r22
    243e:	d2 f7       	brpl	.-12     	; 0x2434 <_fpadd_parts+0x140>
    2440:	21 50       	subi	r18, 0x01	; 1
    2442:	30 40       	sbci	r19, 0x00	; 0
    2444:	40 40       	sbci	r20, 0x00	; 0
    2446:	50 40       	sbci	r21, 0x00	; 0
    2448:	2a 21       	and	r18, r10
    244a:	3b 21       	and	r19, r11
    244c:	4c 21       	and	r20, r12
    244e:	5d 21       	and	r21, r13
    2450:	21 15       	cp	r18, r1
    2452:	31 05       	cpc	r19, r1
    2454:	41 05       	cpc	r20, r1
    2456:	51 05       	cpc	r21, r1
    2458:	21 f0       	breq	.+8      	; 0x2462 <_fpadd_parts+0x16e>
    245a:	21 e0       	ldi	r18, 0x01	; 1
    245c:	30 e0       	ldi	r19, 0x00	; 0
    245e:	40 e0       	ldi	r20, 0x00	; 0
    2460:	50 e0       	ldi	r21, 0x00	; 0
    2462:	59 01       	movw	r10, r18
    2464:	6a 01       	movw	r12, r20
    2466:	a6 28       	or	r10, r6
    2468:	b7 28       	or	r11, r7
    246a:	c8 28       	or	r12, r8
    246c:	d9 28       	or	r13, r9
    246e:	0b c0       	rjmp	.+22     	; 0x2486 <_fpadd_parts+0x192>
    2470:	82 15       	cp	r24, r2
    2472:	93 05       	cpc	r25, r3
    2474:	2c f0       	brlt	.+10     	; 0x2480 <_fpadd_parts+0x18c>
    2476:	1c 01       	movw	r2, r24
    2478:	aa 24       	eor	r10, r10
    247a:	bb 24       	eor	r11, r11
    247c:	65 01       	movw	r12, r10
    247e:	03 c0       	rjmp	.+6      	; 0x2486 <_fpadd_parts+0x192>
    2480:	ee 24       	eor	r14, r14
    2482:	ff 24       	eor	r15, r15
    2484:	87 01       	movw	r16, r14
    2486:	11 96       	adiw	r26, 0x01	; 1
    2488:	9c 91       	ld	r25, X
    248a:	d2 01       	movw	r26, r4
    248c:	11 96       	adiw	r26, 0x01	; 1
    248e:	8c 91       	ld	r24, X
    2490:	98 17       	cp	r25, r24
    2492:	09 f4       	brne	.+2      	; 0x2496 <_fpadd_parts+0x1a2>
    2494:	45 c0       	rjmp	.+138    	; 0x2520 <_fpadd_parts+0x22c>
    2496:	99 23       	and	r25, r25
    2498:	39 f0       	breq	.+14     	; 0x24a8 <_fpadd_parts+0x1b4>
    249a:	a8 01       	movw	r20, r16
    249c:	97 01       	movw	r18, r14
    249e:	2a 19       	sub	r18, r10
    24a0:	3b 09       	sbc	r19, r11
    24a2:	4c 09       	sbc	r20, r12
    24a4:	5d 09       	sbc	r21, r13
    24a6:	06 c0       	rjmp	.+12     	; 0x24b4 <_fpadd_parts+0x1c0>
    24a8:	a6 01       	movw	r20, r12
    24aa:	95 01       	movw	r18, r10
    24ac:	2e 19       	sub	r18, r14
    24ae:	3f 09       	sbc	r19, r15
    24b0:	40 0b       	sbc	r20, r16
    24b2:	51 0b       	sbc	r21, r17
    24b4:	57 fd       	sbrc	r21, 7
    24b6:	08 c0       	rjmp	.+16     	; 0x24c8 <_fpadd_parts+0x1d4>
    24b8:	11 82       	std	Z+1, r1	; 0x01
    24ba:	33 82       	std	Z+3, r3	; 0x03
    24bc:	22 82       	std	Z+2, r2	; 0x02
    24be:	24 83       	std	Z+4, r18	; 0x04
    24c0:	35 83       	std	Z+5, r19	; 0x05
    24c2:	46 83       	std	Z+6, r20	; 0x06
    24c4:	57 83       	std	Z+7, r21	; 0x07
    24c6:	1d c0       	rjmp	.+58     	; 0x2502 <_fpadd_parts+0x20e>
    24c8:	81 e0       	ldi	r24, 0x01	; 1
    24ca:	81 83       	std	Z+1, r24	; 0x01
    24cc:	33 82       	std	Z+3, r3	; 0x03
    24ce:	22 82       	std	Z+2, r2	; 0x02
    24d0:	88 27       	eor	r24, r24
    24d2:	99 27       	eor	r25, r25
    24d4:	dc 01       	movw	r26, r24
    24d6:	82 1b       	sub	r24, r18
    24d8:	93 0b       	sbc	r25, r19
    24da:	a4 0b       	sbc	r26, r20
    24dc:	b5 0b       	sbc	r27, r21
    24de:	84 83       	std	Z+4, r24	; 0x04
    24e0:	95 83       	std	Z+5, r25	; 0x05
    24e2:	a6 83       	std	Z+6, r26	; 0x06
    24e4:	b7 83       	std	Z+7, r27	; 0x07
    24e6:	0d c0       	rjmp	.+26     	; 0x2502 <_fpadd_parts+0x20e>
    24e8:	22 0f       	add	r18, r18
    24ea:	33 1f       	adc	r19, r19
    24ec:	44 1f       	adc	r20, r20
    24ee:	55 1f       	adc	r21, r21
    24f0:	24 83       	std	Z+4, r18	; 0x04
    24f2:	35 83       	std	Z+5, r19	; 0x05
    24f4:	46 83       	std	Z+6, r20	; 0x06
    24f6:	57 83       	std	Z+7, r21	; 0x07
    24f8:	82 81       	ldd	r24, Z+2	; 0x02
    24fa:	93 81       	ldd	r25, Z+3	; 0x03
    24fc:	01 97       	sbiw	r24, 0x01	; 1
    24fe:	93 83       	std	Z+3, r25	; 0x03
    2500:	82 83       	std	Z+2, r24	; 0x02
    2502:	24 81       	ldd	r18, Z+4	; 0x04
    2504:	35 81       	ldd	r19, Z+5	; 0x05
    2506:	46 81       	ldd	r20, Z+6	; 0x06
    2508:	57 81       	ldd	r21, Z+7	; 0x07
    250a:	da 01       	movw	r26, r20
    250c:	c9 01       	movw	r24, r18
    250e:	01 97       	sbiw	r24, 0x01	; 1
    2510:	a1 09       	sbc	r26, r1
    2512:	b1 09       	sbc	r27, r1
    2514:	8f 5f       	subi	r24, 0xFF	; 255
    2516:	9f 4f       	sbci	r25, 0xFF	; 255
    2518:	af 4f       	sbci	r26, 0xFF	; 255
    251a:	bf 43       	sbci	r27, 0x3F	; 63
    251c:	28 f3       	brcs	.-54     	; 0x24e8 <_fpadd_parts+0x1f4>
    251e:	0b c0       	rjmp	.+22     	; 0x2536 <_fpadd_parts+0x242>
    2520:	91 83       	std	Z+1, r25	; 0x01
    2522:	33 82       	std	Z+3, r3	; 0x03
    2524:	22 82       	std	Z+2, r2	; 0x02
    2526:	ea 0c       	add	r14, r10
    2528:	fb 1c       	adc	r15, r11
    252a:	0c 1d       	adc	r16, r12
    252c:	1d 1d       	adc	r17, r13
    252e:	e4 82       	std	Z+4, r14	; 0x04
    2530:	f5 82       	std	Z+5, r15	; 0x05
    2532:	06 83       	std	Z+6, r16	; 0x06
    2534:	17 83       	std	Z+7, r17	; 0x07
    2536:	83 e0       	ldi	r24, 0x03	; 3
    2538:	80 83       	st	Z, r24
    253a:	24 81       	ldd	r18, Z+4	; 0x04
    253c:	35 81       	ldd	r19, Z+5	; 0x05
    253e:	46 81       	ldd	r20, Z+6	; 0x06
    2540:	57 81       	ldd	r21, Z+7	; 0x07
    2542:	57 ff       	sbrs	r21, 7
    2544:	1a c0       	rjmp	.+52     	; 0x257a <_fpadd_parts+0x286>
    2546:	c9 01       	movw	r24, r18
    2548:	aa 27       	eor	r26, r26
    254a:	97 fd       	sbrc	r25, 7
    254c:	a0 95       	com	r26
    254e:	ba 2f       	mov	r27, r26
    2550:	81 70       	andi	r24, 0x01	; 1
    2552:	90 70       	andi	r25, 0x00	; 0
    2554:	a0 70       	andi	r26, 0x00	; 0
    2556:	b0 70       	andi	r27, 0x00	; 0
    2558:	56 95       	lsr	r21
    255a:	47 95       	ror	r20
    255c:	37 95       	ror	r19
    255e:	27 95       	ror	r18
    2560:	82 2b       	or	r24, r18
    2562:	93 2b       	or	r25, r19
    2564:	a4 2b       	or	r26, r20
    2566:	b5 2b       	or	r27, r21
    2568:	84 83       	std	Z+4, r24	; 0x04
    256a:	95 83       	std	Z+5, r25	; 0x05
    256c:	a6 83       	std	Z+6, r26	; 0x06
    256e:	b7 83       	std	Z+7, r27	; 0x07
    2570:	82 81       	ldd	r24, Z+2	; 0x02
    2572:	93 81       	ldd	r25, Z+3	; 0x03
    2574:	01 96       	adiw	r24, 0x01	; 1
    2576:	93 83       	std	Z+3, r25	; 0x03
    2578:	82 83       	std	Z+2, r24	; 0x02
    257a:	df 01       	movw	r26, r30
    257c:	01 c0       	rjmp	.+2      	; 0x2580 <_fpadd_parts+0x28c>
    257e:	d2 01       	movw	r26, r4
    2580:	cd 01       	movw	r24, r26
    2582:	cd b7       	in	r28, 0x3d	; 61
    2584:	de b7       	in	r29, 0x3e	; 62
    2586:	e2 e1       	ldi	r30, 0x12	; 18
    2588:	0c 94 1e 19 	jmp	0x323c	; 0x323c <__epilogue_restores__>

0000258c <__subsf3>:
    258c:	a0 e2       	ldi	r26, 0x20	; 32
    258e:	b0 e0       	ldi	r27, 0x00	; 0
    2590:	ec ec       	ldi	r30, 0xCC	; 204
    2592:	f2 e1       	ldi	r31, 0x12	; 18
    2594:	0c 94 0e 19 	jmp	0x321c	; 0x321c <__prologue_saves__+0x18>
    2598:	69 83       	std	Y+1, r22	; 0x01
    259a:	7a 83       	std	Y+2, r23	; 0x02
    259c:	8b 83       	std	Y+3, r24	; 0x03
    259e:	9c 83       	std	Y+4, r25	; 0x04
    25a0:	2d 83       	std	Y+5, r18	; 0x05
    25a2:	3e 83       	std	Y+6, r19	; 0x06
    25a4:	4f 83       	std	Y+7, r20	; 0x07
    25a6:	58 87       	std	Y+8, r21	; 0x08
    25a8:	e9 e0       	ldi	r30, 0x09	; 9
    25aa:	ee 2e       	mov	r14, r30
    25ac:	f1 2c       	mov	r15, r1
    25ae:	ec 0e       	add	r14, r28
    25b0:	fd 1e       	adc	r15, r29
    25b2:	ce 01       	movw	r24, r28
    25b4:	01 96       	adiw	r24, 0x01	; 1
    25b6:	b7 01       	movw	r22, r14
    25b8:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <__unpack_f>
    25bc:	8e 01       	movw	r16, r28
    25be:	0f 5e       	subi	r16, 0xEF	; 239
    25c0:	1f 4f       	sbci	r17, 0xFF	; 255
    25c2:	ce 01       	movw	r24, r28
    25c4:	05 96       	adiw	r24, 0x05	; 5
    25c6:	b8 01       	movw	r22, r16
    25c8:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <__unpack_f>
    25cc:	8a 89       	ldd	r24, Y+18	; 0x12
    25ce:	91 e0       	ldi	r25, 0x01	; 1
    25d0:	89 27       	eor	r24, r25
    25d2:	8a 8b       	std	Y+18, r24	; 0x12
    25d4:	c7 01       	movw	r24, r14
    25d6:	b8 01       	movw	r22, r16
    25d8:	ae 01       	movw	r20, r28
    25da:	47 5e       	subi	r20, 0xE7	; 231
    25dc:	5f 4f       	sbci	r21, 0xFF	; 255
    25de:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <_fpadd_parts>
    25e2:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <__pack_f>
    25e6:	a0 96       	adiw	r28, 0x20	; 32
    25e8:	e6 e0       	ldi	r30, 0x06	; 6
    25ea:	0c 94 2a 19 	jmp	0x3254	; 0x3254 <__epilogue_restores__+0x18>

000025ee <__addsf3>:
    25ee:	a0 e2       	ldi	r26, 0x20	; 32
    25f0:	b0 e0       	ldi	r27, 0x00	; 0
    25f2:	ed ef       	ldi	r30, 0xFD	; 253
    25f4:	f2 e1       	ldi	r31, 0x12	; 18
    25f6:	0c 94 0e 19 	jmp	0x321c	; 0x321c <__prologue_saves__+0x18>
    25fa:	69 83       	std	Y+1, r22	; 0x01
    25fc:	7a 83       	std	Y+2, r23	; 0x02
    25fe:	8b 83       	std	Y+3, r24	; 0x03
    2600:	9c 83       	std	Y+4, r25	; 0x04
    2602:	2d 83       	std	Y+5, r18	; 0x05
    2604:	3e 83       	std	Y+6, r19	; 0x06
    2606:	4f 83       	std	Y+7, r20	; 0x07
    2608:	58 87       	std	Y+8, r21	; 0x08
    260a:	f9 e0       	ldi	r31, 0x09	; 9
    260c:	ef 2e       	mov	r14, r31
    260e:	f1 2c       	mov	r15, r1
    2610:	ec 0e       	add	r14, r28
    2612:	fd 1e       	adc	r15, r29
    2614:	ce 01       	movw	r24, r28
    2616:	01 96       	adiw	r24, 0x01	; 1
    2618:	b7 01       	movw	r22, r14
    261a:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <__unpack_f>
    261e:	8e 01       	movw	r16, r28
    2620:	0f 5e       	subi	r16, 0xEF	; 239
    2622:	1f 4f       	sbci	r17, 0xFF	; 255
    2624:	ce 01       	movw	r24, r28
    2626:	05 96       	adiw	r24, 0x05	; 5
    2628:	b8 01       	movw	r22, r16
    262a:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <__unpack_f>
    262e:	c7 01       	movw	r24, r14
    2630:	b8 01       	movw	r22, r16
    2632:	ae 01       	movw	r20, r28
    2634:	47 5e       	subi	r20, 0xE7	; 231
    2636:	5f 4f       	sbci	r21, 0xFF	; 255
    2638:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <_fpadd_parts>
    263c:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <__pack_f>
    2640:	a0 96       	adiw	r28, 0x20	; 32
    2642:	e6 e0       	ldi	r30, 0x06	; 6
    2644:	0c 94 2a 19 	jmp	0x3254	; 0x3254 <__epilogue_restores__+0x18>

00002648 <__mulsf3>:
    2648:	a0 e2       	ldi	r26, 0x20	; 32
    264a:	b0 e0       	ldi	r27, 0x00	; 0
    264c:	ea e2       	ldi	r30, 0x2A	; 42
    264e:	f3 e1       	ldi	r31, 0x13	; 19
    2650:	0c 94 02 19 	jmp	0x3204	; 0x3204 <__prologue_saves__>
    2654:	69 83       	std	Y+1, r22	; 0x01
    2656:	7a 83       	std	Y+2, r23	; 0x02
    2658:	8b 83       	std	Y+3, r24	; 0x03
    265a:	9c 83       	std	Y+4, r25	; 0x04
    265c:	2d 83       	std	Y+5, r18	; 0x05
    265e:	3e 83       	std	Y+6, r19	; 0x06
    2660:	4f 83       	std	Y+7, r20	; 0x07
    2662:	58 87       	std	Y+8, r21	; 0x08
    2664:	ce 01       	movw	r24, r28
    2666:	01 96       	adiw	r24, 0x01	; 1
    2668:	be 01       	movw	r22, r28
    266a:	67 5f       	subi	r22, 0xF7	; 247
    266c:	7f 4f       	sbci	r23, 0xFF	; 255
    266e:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <__unpack_f>
    2672:	ce 01       	movw	r24, r28
    2674:	05 96       	adiw	r24, 0x05	; 5
    2676:	be 01       	movw	r22, r28
    2678:	6f 5e       	subi	r22, 0xEF	; 239
    267a:	7f 4f       	sbci	r23, 0xFF	; 255
    267c:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <__unpack_f>
    2680:	99 85       	ldd	r25, Y+9	; 0x09
    2682:	92 30       	cpi	r25, 0x02	; 2
    2684:	88 f0       	brcs	.+34     	; 0x26a8 <__mulsf3+0x60>
    2686:	89 89       	ldd	r24, Y+17	; 0x11
    2688:	82 30       	cpi	r24, 0x02	; 2
    268a:	c8 f0       	brcs	.+50     	; 0x26be <__mulsf3+0x76>
    268c:	94 30       	cpi	r25, 0x04	; 4
    268e:	19 f4       	brne	.+6      	; 0x2696 <__mulsf3+0x4e>
    2690:	82 30       	cpi	r24, 0x02	; 2
    2692:	51 f4       	brne	.+20     	; 0x26a8 <__mulsf3+0x60>
    2694:	04 c0       	rjmp	.+8      	; 0x269e <__mulsf3+0x56>
    2696:	84 30       	cpi	r24, 0x04	; 4
    2698:	29 f4       	brne	.+10     	; 0x26a4 <__mulsf3+0x5c>
    269a:	92 30       	cpi	r25, 0x02	; 2
    269c:	81 f4       	brne	.+32     	; 0x26be <__mulsf3+0x76>
    269e:	84 e4       	ldi	r24, 0x44	; 68
    26a0:	92 e0       	ldi	r25, 0x02	; 2
    26a2:	c6 c0       	rjmp	.+396    	; 0x2830 <__mulsf3+0x1e8>
    26a4:	92 30       	cpi	r25, 0x02	; 2
    26a6:	49 f4       	brne	.+18     	; 0x26ba <__mulsf3+0x72>
    26a8:	20 e0       	ldi	r18, 0x00	; 0
    26aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ac:	8a 89       	ldd	r24, Y+18	; 0x12
    26ae:	98 13       	cpse	r25, r24
    26b0:	21 e0       	ldi	r18, 0x01	; 1
    26b2:	2a 87       	std	Y+10, r18	; 0x0a
    26b4:	ce 01       	movw	r24, r28
    26b6:	09 96       	adiw	r24, 0x09	; 9
    26b8:	bb c0       	rjmp	.+374    	; 0x2830 <__mulsf3+0x1e8>
    26ba:	82 30       	cpi	r24, 0x02	; 2
    26bc:	49 f4       	brne	.+18     	; 0x26d0 <__mulsf3+0x88>
    26be:	20 e0       	ldi	r18, 0x00	; 0
    26c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    26c2:	8a 89       	ldd	r24, Y+18	; 0x12
    26c4:	98 13       	cpse	r25, r24
    26c6:	21 e0       	ldi	r18, 0x01	; 1
    26c8:	2a 8b       	std	Y+18, r18	; 0x12
    26ca:	ce 01       	movw	r24, r28
    26cc:	41 96       	adiw	r24, 0x11	; 17
    26ce:	b0 c0       	rjmp	.+352    	; 0x2830 <__mulsf3+0x1e8>
    26d0:	2d 84       	ldd	r2, Y+13	; 0x0d
    26d2:	3e 84       	ldd	r3, Y+14	; 0x0e
    26d4:	4f 84       	ldd	r4, Y+15	; 0x0f
    26d6:	58 88       	ldd	r5, Y+16	; 0x10
    26d8:	6d 88       	ldd	r6, Y+21	; 0x15
    26da:	7e 88       	ldd	r7, Y+22	; 0x16
    26dc:	8f 88       	ldd	r8, Y+23	; 0x17
    26de:	98 8c       	ldd	r9, Y+24	; 0x18
    26e0:	ee 24       	eor	r14, r14
    26e2:	ff 24       	eor	r15, r15
    26e4:	87 01       	movw	r16, r14
    26e6:	aa 24       	eor	r10, r10
    26e8:	bb 24       	eor	r11, r11
    26ea:	65 01       	movw	r12, r10
    26ec:	40 e0       	ldi	r20, 0x00	; 0
    26ee:	50 e0       	ldi	r21, 0x00	; 0
    26f0:	60 e0       	ldi	r22, 0x00	; 0
    26f2:	70 e0       	ldi	r23, 0x00	; 0
    26f4:	e0 e0       	ldi	r30, 0x00	; 0
    26f6:	f0 e0       	ldi	r31, 0x00	; 0
    26f8:	c1 01       	movw	r24, r2
    26fa:	81 70       	andi	r24, 0x01	; 1
    26fc:	90 70       	andi	r25, 0x00	; 0
    26fe:	89 2b       	or	r24, r25
    2700:	e9 f0       	breq	.+58     	; 0x273c <__mulsf3+0xf4>
    2702:	e6 0c       	add	r14, r6
    2704:	f7 1c       	adc	r15, r7
    2706:	08 1d       	adc	r16, r8
    2708:	19 1d       	adc	r17, r9
    270a:	9a 01       	movw	r18, r20
    270c:	ab 01       	movw	r20, r22
    270e:	2a 0d       	add	r18, r10
    2710:	3b 1d       	adc	r19, r11
    2712:	4c 1d       	adc	r20, r12
    2714:	5d 1d       	adc	r21, r13
    2716:	80 e0       	ldi	r24, 0x00	; 0
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	a0 e0       	ldi	r26, 0x00	; 0
    271c:	b0 e0       	ldi	r27, 0x00	; 0
    271e:	e6 14       	cp	r14, r6
    2720:	f7 04       	cpc	r15, r7
    2722:	08 05       	cpc	r16, r8
    2724:	19 05       	cpc	r17, r9
    2726:	20 f4       	brcc	.+8      	; 0x2730 <__mulsf3+0xe8>
    2728:	81 e0       	ldi	r24, 0x01	; 1
    272a:	90 e0       	ldi	r25, 0x00	; 0
    272c:	a0 e0       	ldi	r26, 0x00	; 0
    272e:	b0 e0       	ldi	r27, 0x00	; 0
    2730:	ba 01       	movw	r22, r20
    2732:	a9 01       	movw	r20, r18
    2734:	48 0f       	add	r20, r24
    2736:	59 1f       	adc	r21, r25
    2738:	6a 1f       	adc	r22, r26
    273a:	7b 1f       	adc	r23, r27
    273c:	aa 0c       	add	r10, r10
    273e:	bb 1c       	adc	r11, r11
    2740:	cc 1c       	adc	r12, r12
    2742:	dd 1c       	adc	r13, r13
    2744:	97 fe       	sbrs	r9, 7
    2746:	08 c0       	rjmp	.+16     	; 0x2758 <__mulsf3+0x110>
    2748:	81 e0       	ldi	r24, 0x01	; 1
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	a0 e0       	ldi	r26, 0x00	; 0
    274e:	b0 e0       	ldi	r27, 0x00	; 0
    2750:	a8 2a       	or	r10, r24
    2752:	b9 2a       	or	r11, r25
    2754:	ca 2a       	or	r12, r26
    2756:	db 2a       	or	r13, r27
    2758:	31 96       	adiw	r30, 0x01	; 1
    275a:	e0 32       	cpi	r30, 0x20	; 32
    275c:	f1 05       	cpc	r31, r1
    275e:	49 f0       	breq	.+18     	; 0x2772 <__mulsf3+0x12a>
    2760:	66 0c       	add	r6, r6
    2762:	77 1c       	adc	r7, r7
    2764:	88 1c       	adc	r8, r8
    2766:	99 1c       	adc	r9, r9
    2768:	56 94       	lsr	r5
    276a:	47 94       	ror	r4
    276c:	37 94       	ror	r3
    276e:	27 94       	ror	r2
    2770:	c3 cf       	rjmp	.-122    	; 0x26f8 <__mulsf3+0xb0>
    2772:	fa 85       	ldd	r31, Y+10	; 0x0a
    2774:	ea 89       	ldd	r30, Y+18	; 0x12
    2776:	2b 89       	ldd	r18, Y+19	; 0x13
    2778:	3c 89       	ldd	r19, Y+20	; 0x14
    277a:	8b 85       	ldd	r24, Y+11	; 0x0b
    277c:	9c 85       	ldd	r25, Y+12	; 0x0c
    277e:	28 0f       	add	r18, r24
    2780:	39 1f       	adc	r19, r25
    2782:	2e 5f       	subi	r18, 0xFE	; 254
    2784:	3f 4f       	sbci	r19, 0xFF	; 255
    2786:	17 c0       	rjmp	.+46     	; 0x27b6 <__mulsf3+0x16e>
    2788:	ca 01       	movw	r24, r20
    278a:	81 70       	andi	r24, 0x01	; 1
    278c:	90 70       	andi	r25, 0x00	; 0
    278e:	89 2b       	or	r24, r25
    2790:	61 f0       	breq	.+24     	; 0x27aa <__mulsf3+0x162>
    2792:	16 95       	lsr	r17
    2794:	07 95       	ror	r16
    2796:	f7 94       	ror	r15
    2798:	e7 94       	ror	r14
    279a:	80 e0       	ldi	r24, 0x00	; 0
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	a0 e0       	ldi	r26, 0x00	; 0
    27a0:	b0 e8       	ldi	r27, 0x80	; 128
    27a2:	e8 2a       	or	r14, r24
    27a4:	f9 2a       	or	r15, r25
    27a6:	0a 2b       	or	r16, r26
    27a8:	1b 2b       	or	r17, r27
    27aa:	76 95       	lsr	r23
    27ac:	67 95       	ror	r22
    27ae:	57 95       	ror	r21
    27b0:	47 95       	ror	r20
    27b2:	2f 5f       	subi	r18, 0xFF	; 255
    27b4:	3f 4f       	sbci	r19, 0xFF	; 255
    27b6:	77 fd       	sbrc	r23, 7
    27b8:	e7 cf       	rjmp	.-50     	; 0x2788 <__mulsf3+0x140>
    27ba:	0c c0       	rjmp	.+24     	; 0x27d4 <__mulsf3+0x18c>
    27bc:	44 0f       	add	r20, r20
    27be:	55 1f       	adc	r21, r21
    27c0:	66 1f       	adc	r22, r22
    27c2:	77 1f       	adc	r23, r23
    27c4:	17 fd       	sbrc	r17, 7
    27c6:	41 60       	ori	r20, 0x01	; 1
    27c8:	ee 0c       	add	r14, r14
    27ca:	ff 1c       	adc	r15, r15
    27cc:	00 1f       	adc	r16, r16
    27ce:	11 1f       	adc	r17, r17
    27d0:	21 50       	subi	r18, 0x01	; 1
    27d2:	30 40       	sbci	r19, 0x00	; 0
    27d4:	40 30       	cpi	r20, 0x00	; 0
    27d6:	90 e0       	ldi	r25, 0x00	; 0
    27d8:	59 07       	cpc	r21, r25
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	69 07       	cpc	r22, r25
    27de:	90 e4       	ldi	r25, 0x40	; 64
    27e0:	79 07       	cpc	r23, r25
    27e2:	60 f3       	brcs	.-40     	; 0x27bc <__mulsf3+0x174>
    27e4:	2b 8f       	std	Y+27, r18	; 0x1b
    27e6:	3c 8f       	std	Y+28, r19	; 0x1c
    27e8:	db 01       	movw	r26, r22
    27ea:	ca 01       	movw	r24, r20
    27ec:	8f 77       	andi	r24, 0x7F	; 127
    27ee:	90 70       	andi	r25, 0x00	; 0
    27f0:	a0 70       	andi	r26, 0x00	; 0
    27f2:	b0 70       	andi	r27, 0x00	; 0
    27f4:	80 34       	cpi	r24, 0x40	; 64
    27f6:	91 05       	cpc	r25, r1
    27f8:	a1 05       	cpc	r26, r1
    27fa:	b1 05       	cpc	r27, r1
    27fc:	61 f4       	brne	.+24     	; 0x2816 <__mulsf3+0x1ce>
    27fe:	47 fd       	sbrc	r20, 7
    2800:	0a c0       	rjmp	.+20     	; 0x2816 <__mulsf3+0x1ce>
    2802:	e1 14       	cp	r14, r1
    2804:	f1 04       	cpc	r15, r1
    2806:	01 05       	cpc	r16, r1
    2808:	11 05       	cpc	r17, r1
    280a:	29 f0       	breq	.+10     	; 0x2816 <__mulsf3+0x1ce>
    280c:	40 5c       	subi	r20, 0xC0	; 192
    280e:	5f 4f       	sbci	r21, 0xFF	; 255
    2810:	6f 4f       	sbci	r22, 0xFF	; 255
    2812:	7f 4f       	sbci	r23, 0xFF	; 255
    2814:	40 78       	andi	r20, 0x80	; 128
    2816:	1a 8e       	std	Y+26, r1	; 0x1a
    2818:	fe 17       	cp	r31, r30
    281a:	11 f0       	breq	.+4      	; 0x2820 <__mulsf3+0x1d8>
    281c:	81 e0       	ldi	r24, 0x01	; 1
    281e:	8a 8f       	std	Y+26, r24	; 0x1a
    2820:	4d 8f       	std	Y+29, r20	; 0x1d
    2822:	5e 8f       	std	Y+30, r21	; 0x1e
    2824:	6f 8f       	std	Y+31, r22	; 0x1f
    2826:	78 a3       	std	Y+32, r23	; 0x20
    2828:	83 e0       	ldi	r24, 0x03	; 3
    282a:	89 8f       	std	Y+25, r24	; 0x19
    282c:	ce 01       	movw	r24, r28
    282e:	49 96       	adiw	r24, 0x19	; 25
    2830:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <__pack_f>
    2834:	a0 96       	adiw	r28, 0x20	; 32
    2836:	e2 e1       	ldi	r30, 0x12	; 18
    2838:	0c 94 1e 19 	jmp	0x323c	; 0x323c <__epilogue_restores__>

0000283c <__divsf3>:
    283c:	a8 e1       	ldi	r26, 0x18	; 24
    283e:	b0 e0       	ldi	r27, 0x00	; 0
    2840:	e4 e2       	ldi	r30, 0x24	; 36
    2842:	f4 e1       	ldi	r31, 0x14	; 20
    2844:	0c 94 0a 19 	jmp	0x3214	; 0x3214 <__prologue_saves__+0x10>
    2848:	69 83       	std	Y+1, r22	; 0x01
    284a:	7a 83       	std	Y+2, r23	; 0x02
    284c:	8b 83       	std	Y+3, r24	; 0x03
    284e:	9c 83       	std	Y+4, r25	; 0x04
    2850:	2d 83       	std	Y+5, r18	; 0x05
    2852:	3e 83       	std	Y+6, r19	; 0x06
    2854:	4f 83       	std	Y+7, r20	; 0x07
    2856:	58 87       	std	Y+8, r21	; 0x08
    2858:	b9 e0       	ldi	r27, 0x09	; 9
    285a:	eb 2e       	mov	r14, r27
    285c:	f1 2c       	mov	r15, r1
    285e:	ec 0e       	add	r14, r28
    2860:	fd 1e       	adc	r15, r29
    2862:	ce 01       	movw	r24, r28
    2864:	01 96       	adiw	r24, 0x01	; 1
    2866:	b7 01       	movw	r22, r14
    2868:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <__unpack_f>
    286c:	8e 01       	movw	r16, r28
    286e:	0f 5e       	subi	r16, 0xEF	; 239
    2870:	1f 4f       	sbci	r17, 0xFF	; 255
    2872:	ce 01       	movw	r24, r28
    2874:	05 96       	adiw	r24, 0x05	; 5
    2876:	b8 01       	movw	r22, r16
    2878:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <__unpack_f>
    287c:	29 85       	ldd	r18, Y+9	; 0x09
    287e:	22 30       	cpi	r18, 0x02	; 2
    2880:	08 f4       	brcc	.+2      	; 0x2884 <__divsf3+0x48>
    2882:	7e c0       	rjmp	.+252    	; 0x2980 <__divsf3+0x144>
    2884:	39 89       	ldd	r19, Y+17	; 0x11
    2886:	32 30       	cpi	r19, 0x02	; 2
    2888:	10 f4       	brcc	.+4      	; 0x288e <__divsf3+0x52>
    288a:	b8 01       	movw	r22, r16
    288c:	7c c0       	rjmp	.+248    	; 0x2986 <__divsf3+0x14a>
    288e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2890:	9a 89       	ldd	r25, Y+18	; 0x12
    2892:	89 27       	eor	r24, r25
    2894:	8a 87       	std	Y+10, r24	; 0x0a
    2896:	24 30       	cpi	r18, 0x04	; 4
    2898:	11 f0       	breq	.+4      	; 0x289e <__divsf3+0x62>
    289a:	22 30       	cpi	r18, 0x02	; 2
    289c:	31 f4       	brne	.+12     	; 0x28aa <__divsf3+0x6e>
    289e:	23 17       	cp	r18, r19
    28a0:	09 f0       	breq	.+2      	; 0x28a4 <__divsf3+0x68>
    28a2:	6e c0       	rjmp	.+220    	; 0x2980 <__divsf3+0x144>
    28a4:	64 e4       	ldi	r22, 0x44	; 68
    28a6:	72 e0       	ldi	r23, 0x02	; 2
    28a8:	6e c0       	rjmp	.+220    	; 0x2986 <__divsf3+0x14a>
    28aa:	34 30       	cpi	r19, 0x04	; 4
    28ac:	39 f4       	brne	.+14     	; 0x28bc <__divsf3+0x80>
    28ae:	1d 86       	std	Y+13, r1	; 0x0d
    28b0:	1e 86       	std	Y+14, r1	; 0x0e
    28b2:	1f 86       	std	Y+15, r1	; 0x0f
    28b4:	18 8a       	std	Y+16, r1	; 0x10
    28b6:	1c 86       	std	Y+12, r1	; 0x0c
    28b8:	1b 86       	std	Y+11, r1	; 0x0b
    28ba:	04 c0       	rjmp	.+8      	; 0x28c4 <__divsf3+0x88>
    28bc:	32 30       	cpi	r19, 0x02	; 2
    28be:	21 f4       	brne	.+8      	; 0x28c8 <__divsf3+0x8c>
    28c0:	84 e0       	ldi	r24, 0x04	; 4
    28c2:	89 87       	std	Y+9, r24	; 0x09
    28c4:	b7 01       	movw	r22, r14
    28c6:	5f c0       	rjmp	.+190    	; 0x2986 <__divsf3+0x14a>
    28c8:	2b 85       	ldd	r18, Y+11	; 0x0b
    28ca:	3c 85       	ldd	r19, Y+12	; 0x0c
    28cc:	8b 89       	ldd	r24, Y+19	; 0x13
    28ce:	9c 89       	ldd	r25, Y+20	; 0x14
    28d0:	28 1b       	sub	r18, r24
    28d2:	39 0b       	sbc	r19, r25
    28d4:	3c 87       	std	Y+12, r19	; 0x0c
    28d6:	2b 87       	std	Y+11, r18	; 0x0b
    28d8:	ed 84       	ldd	r14, Y+13	; 0x0d
    28da:	fe 84       	ldd	r15, Y+14	; 0x0e
    28dc:	0f 85       	ldd	r16, Y+15	; 0x0f
    28de:	18 89       	ldd	r17, Y+16	; 0x10
    28e0:	ad 88       	ldd	r10, Y+21	; 0x15
    28e2:	be 88       	ldd	r11, Y+22	; 0x16
    28e4:	cf 88       	ldd	r12, Y+23	; 0x17
    28e6:	d8 8c       	ldd	r13, Y+24	; 0x18
    28e8:	ea 14       	cp	r14, r10
    28ea:	fb 04       	cpc	r15, r11
    28ec:	0c 05       	cpc	r16, r12
    28ee:	1d 05       	cpc	r17, r13
    28f0:	40 f4       	brcc	.+16     	; 0x2902 <__divsf3+0xc6>
    28f2:	ee 0c       	add	r14, r14
    28f4:	ff 1c       	adc	r15, r15
    28f6:	00 1f       	adc	r16, r16
    28f8:	11 1f       	adc	r17, r17
    28fa:	21 50       	subi	r18, 0x01	; 1
    28fc:	30 40       	sbci	r19, 0x00	; 0
    28fe:	3c 87       	std	Y+12, r19	; 0x0c
    2900:	2b 87       	std	Y+11, r18	; 0x0b
    2902:	20 e0       	ldi	r18, 0x00	; 0
    2904:	30 e0       	ldi	r19, 0x00	; 0
    2906:	40 e0       	ldi	r20, 0x00	; 0
    2908:	50 e0       	ldi	r21, 0x00	; 0
    290a:	80 e0       	ldi	r24, 0x00	; 0
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	a0 e0       	ldi	r26, 0x00	; 0
    2910:	b0 e4       	ldi	r27, 0x40	; 64
    2912:	60 e0       	ldi	r22, 0x00	; 0
    2914:	70 e0       	ldi	r23, 0x00	; 0
    2916:	ea 14       	cp	r14, r10
    2918:	fb 04       	cpc	r15, r11
    291a:	0c 05       	cpc	r16, r12
    291c:	1d 05       	cpc	r17, r13
    291e:	40 f0       	brcs	.+16     	; 0x2930 <__divsf3+0xf4>
    2920:	28 2b       	or	r18, r24
    2922:	39 2b       	or	r19, r25
    2924:	4a 2b       	or	r20, r26
    2926:	5b 2b       	or	r21, r27
    2928:	ea 18       	sub	r14, r10
    292a:	fb 08       	sbc	r15, r11
    292c:	0c 09       	sbc	r16, r12
    292e:	1d 09       	sbc	r17, r13
    2930:	b6 95       	lsr	r27
    2932:	a7 95       	ror	r26
    2934:	97 95       	ror	r25
    2936:	87 95       	ror	r24
    2938:	ee 0c       	add	r14, r14
    293a:	ff 1c       	adc	r15, r15
    293c:	00 1f       	adc	r16, r16
    293e:	11 1f       	adc	r17, r17
    2940:	6f 5f       	subi	r22, 0xFF	; 255
    2942:	7f 4f       	sbci	r23, 0xFF	; 255
    2944:	6f 31       	cpi	r22, 0x1F	; 31
    2946:	71 05       	cpc	r23, r1
    2948:	31 f7       	brne	.-52     	; 0x2916 <__divsf3+0xda>
    294a:	da 01       	movw	r26, r20
    294c:	c9 01       	movw	r24, r18
    294e:	8f 77       	andi	r24, 0x7F	; 127
    2950:	90 70       	andi	r25, 0x00	; 0
    2952:	a0 70       	andi	r26, 0x00	; 0
    2954:	b0 70       	andi	r27, 0x00	; 0
    2956:	80 34       	cpi	r24, 0x40	; 64
    2958:	91 05       	cpc	r25, r1
    295a:	a1 05       	cpc	r26, r1
    295c:	b1 05       	cpc	r27, r1
    295e:	61 f4       	brne	.+24     	; 0x2978 <__divsf3+0x13c>
    2960:	27 fd       	sbrc	r18, 7
    2962:	0a c0       	rjmp	.+20     	; 0x2978 <__divsf3+0x13c>
    2964:	e1 14       	cp	r14, r1
    2966:	f1 04       	cpc	r15, r1
    2968:	01 05       	cpc	r16, r1
    296a:	11 05       	cpc	r17, r1
    296c:	29 f0       	breq	.+10     	; 0x2978 <__divsf3+0x13c>
    296e:	20 5c       	subi	r18, 0xC0	; 192
    2970:	3f 4f       	sbci	r19, 0xFF	; 255
    2972:	4f 4f       	sbci	r20, 0xFF	; 255
    2974:	5f 4f       	sbci	r21, 0xFF	; 255
    2976:	20 78       	andi	r18, 0x80	; 128
    2978:	2d 87       	std	Y+13, r18	; 0x0d
    297a:	3e 87       	std	Y+14, r19	; 0x0e
    297c:	4f 87       	std	Y+15, r20	; 0x0f
    297e:	58 8b       	std	Y+16, r21	; 0x10
    2980:	be 01       	movw	r22, r28
    2982:	67 5f       	subi	r22, 0xF7	; 247
    2984:	7f 4f       	sbci	r23, 0xFF	; 255
    2986:	cb 01       	movw	r24, r22
    2988:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <__pack_f>
    298c:	68 96       	adiw	r28, 0x18	; 24
    298e:	ea e0       	ldi	r30, 0x0A	; 10
    2990:	0c 94 26 19 	jmp	0x324c	; 0x324c <__epilogue_restores__+0x10>

00002994 <__gtsf2>:
    2994:	a8 e1       	ldi	r26, 0x18	; 24
    2996:	b0 e0       	ldi	r27, 0x00	; 0
    2998:	e0 ed       	ldi	r30, 0xD0	; 208
    299a:	f4 e1       	ldi	r31, 0x14	; 20
    299c:	0c 94 0e 19 	jmp	0x321c	; 0x321c <__prologue_saves__+0x18>
    29a0:	69 83       	std	Y+1, r22	; 0x01
    29a2:	7a 83       	std	Y+2, r23	; 0x02
    29a4:	8b 83       	std	Y+3, r24	; 0x03
    29a6:	9c 83       	std	Y+4, r25	; 0x04
    29a8:	2d 83       	std	Y+5, r18	; 0x05
    29aa:	3e 83       	std	Y+6, r19	; 0x06
    29ac:	4f 83       	std	Y+7, r20	; 0x07
    29ae:	58 87       	std	Y+8, r21	; 0x08
    29b0:	89 e0       	ldi	r24, 0x09	; 9
    29b2:	e8 2e       	mov	r14, r24
    29b4:	f1 2c       	mov	r15, r1
    29b6:	ec 0e       	add	r14, r28
    29b8:	fd 1e       	adc	r15, r29
    29ba:	ce 01       	movw	r24, r28
    29bc:	01 96       	adiw	r24, 0x01	; 1
    29be:	b7 01       	movw	r22, r14
    29c0:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <__unpack_f>
    29c4:	8e 01       	movw	r16, r28
    29c6:	0f 5e       	subi	r16, 0xEF	; 239
    29c8:	1f 4f       	sbci	r17, 0xFF	; 255
    29ca:	ce 01       	movw	r24, r28
    29cc:	05 96       	adiw	r24, 0x05	; 5
    29ce:	b8 01       	movw	r22, r16
    29d0:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <__unpack_f>
    29d4:	89 85       	ldd	r24, Y+9	; 0x09
    29d6:	82 30       	cpi	r24, 0x02	; 2
    29d8:	40 f0       	brcs	.+16     	; 0x29ea <__gtsf2+0x56>
    29da:	89 89       	ldd	r24, Y+17	; 0x11
    29dc:	82 30       	cpi	r24, 0x02	; 2
    29de:	28 f0       	brcs	.+10     	; 0x29ea <__gtsf2+0x56>
    29e0:	c7 01       	movw	r24, r14
    29e2:	b8 01       	movw	r22, r16
    29e4:	0e 94 21 18 	call	0x3042	; 0x3042 <__fpcmp_parts_f>
    29e8:	01 c0       	rjmp	.+2      	; 0x29ec <__gtsf2+0x58>
    29ea:	8f ef       	ldi	r24, 0xFF	; 255
    29ec:	68 96       	adiw	r28, 0x18	; 24
    29ee:	e6 e0       	ldi	r30, 0x06	; 6
    29f0:	0c 94 2a 19 	jmp	0x3254	; 0x3254 <__epilogue_restores__+0x18>

000029f4 <__gesf2>:
    29f4:	a8 e1       	ldi	r26, 0x18	; 24
    29f6:	b0 e0       	ldi	r27, 0x00	; 0
    29f8:	e0 e0       	ldi	r30, 0x00	; 0
    29fa:	f5 e1       	ldi	r31, 0x15	; 21
    29fc:	0c 94 0e 19 	jmp	0x321c	; 0x321c <__prologue_saves__+0x18>
    2a00:	69 83       	std	Y+1, r22	; 0x01
    2a02:	7a 83       	std	Y+2, r23	; 0x02
    2a04:	8b 83       	std	Y+3, r24	; 0x03
    2a06:	9c 83       	std	Y+4, r25	; 0x04
    2a08:	2d 83       	std	Y+5, r18	; 0x05
    2a0a:	3e 83       	std	Y+6, r19	; 0x06
    2a0c:	4f 83       	std	Y+7, r20	; 0x07
    2a0e:	58 87       	std	Y+8, r21	; 0x08
    2a10:	89 e0       	ldi	r24, 0x09	; 9
    2a12:	e8 2e       	mov	r14, r24
    2a14:	f1 2c       	mov	r15, r1
    2a16:	ec 0e       	add	r14, r28
    2a18:	fd 1e       	adc	r15, r29
    2a1a:	ce 01       	movw	r24, r28
    2a1c:	01 96       	adiw	r24, 0x01	; 1
    2a1e:	b7 01       	movw	r22, r14
    2a20:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <__unpack_f>
    2a24:	8e 01       	movw	r16, r28
    2a26:	0f 5e       	subi	r16, 0xEF	; 239
    2a28:	1f 4f       	sbci	r17, 0xFF	; 255
    2a2a:	ce 01       	movw	r24, r28
    2a2c:	05 96       	adiw	r24, 0x05	; 5
    2a2e:	b8 01       	movw	r22, r16
    2a30:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <__unpack_f>
    2a34:	89 85       	ldd	r24, Y+9	; 0x09
    2a36:	82 30       	cpi	r24, 0x02	; 2
    2a38:	40 f0       	brcs	.+16     	; 0x2a4a <__gesf2+0x56>
    2a3a:	89 89       	ldd	r24, Y+17	; 0x11
    2a3c:	82 30       	cpi	r24, 0x02	; 2
    2a3e:	28 f0       	brcs	.+10     	; 0x2a4a <__gesf2+0x56>
    2a40:	c7 01       	movw	r24, r14
    2a42:	b8 01       	movw	r22, r16
    2a44:	0e 94 21 18 	call	0x3042	; 0x3042 <__fpcmp_parts_f>
    2a48:	01 c0       	rjmp	.+2      	; 0x2a4c <__gesf2+0x58>
    2a4a:	8f ef       	ldi	r24, 0xFF	; 255
    2a4c:	68 96       	adiw	r28, 0x18	; 24
    2a4e:	e6 e0       	ldi	r30, 0x06	; 6
    2a50:	0c 94 2a 19 	jmp	0x3254	; 0x3254 <__epilogue_restores__+0x18>

00002a54 <__ltsf2>:
    2a54:	a8 e1       	ldi	r26, 0x18	; 24
    2a56:	b0 e0       	ldi	r27, 0x00	; 0
    2a58:	e0 e3       	ldi	r30, 0x30	; 48
    2a5a:	f5 e1       	ldi	r31, 0x15	; 21
    2a5c:	0c 94 0e 19 	jmp	0x321c	; 0x321c <__prologue_saves__+0x18>
    2a60:	69 83       	std	Y+1, r22	; 0x01
    2a62:	7a 83       	std	Y+2, r23	; 0x02
    2a64:	8b 83       	std	Y+3, r24	; 0x03
    2a66:	9c 83       	std	Y+4, r25	; 0x04
    2a68:	2d 83       	std	Y+5, r18	; 0x05
    2a6a:	3e 83       	std	Y+6, r19	; 0x06
    2a6c:	4f 83       	std	Y+7, r20	; 0x07
    2a6e:	58 87       	std	Y+8, r21	; 0x08
    2a70:	89 e0       	ldi	r24, 0x09	; 9
    2a72:	e8 2e       	mov	r14, r24
    2a74:	f1 2c       	mov	r15, r1
    2a76:	ec 0e       	add	r14, r28
    2a78:	fd 1e       	adc	r15, r29
    2a7a:	ce 01       	movw	r24, r28
    2a7c:	01 96       	adiw	r24, 0x01	; 1
    2a7e:	b7 01       	movw	r22, r14
    2a80:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <__unpack_f>
    2a84:	8e 01       	movw	r16, r28
    2a86:	0f 5e       	subi	r16, 0xEF	; 239
    2a88:	1f 4f       	sbci	r17, 0xFF	; 255
    2a8a:	ce 01       	movw	r24, r28
    2a8c:	05 96       	adiw	r24, 0x05	; 5
    2a8e:	b8 01       	movw	r22, r16
    2a90:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <__unpack_f>
    2a94:	89 85       	ldd	r24, Y+9	; 0x09
    2a96:	82 30       	cpi	r24, 0x02	; 2
    2a98:	40 f0       	brcs	.+16     	; 0x2aaa <__ltsf2+0x56>
    2a9a:	89 89       	ldd	r24, Y+17	; 0x11
    2a9c:	82 30       	cpi	r24, 0x02	; 2
    2a9e:	28 f0       	brcs	.+10     	; 0x2aaa <__ltsf2+0x56>
    2aa0:	c7 01       	movw	r24, r14
    2aa2:	b8 01       	movw	r22, r16
    2aa4:	0e 94 21 18 	call	0x3042	; 0x3042 <__fpcmp_parts_f>
    2aa8:	01 c0       	rjmp	.+2      	; 0x2aac <__ltsf2+0x58>
    2aaa:	81 e0       	ldi	r24, 0x01	; 1
    2aac:	68 96       	adiw	r28, 0x18	; 24
    2aae:	e6 e0       	ldi	r30, 0x06	; 6
    2ab0:	0c 94 2a 19 	jmp	0x3254	; 0x3254 <__epilogue_restores__+0x18>

00002ab4 <__floatsisf>:
    2ab4:	a8 e0       	ldi	r26, 0x08	; 8
    2ab6:	b0 e0       	ldi	r27, 0x00	; 0
    2ab8:	e0 e6       	ldi	r30, 0x60	; 96
    2aba:	f5 e1       	ldi	r31, 0x15	; 21
    2abc:	0c 94 0b 19 	jmp	0x3216	; 0x3216 <__prologue_saves__+0x12>
    2ac0:	9b 01       	movw	r18, r22
    2ac2:	ac 01       	movw	r20, r24
    2ac4:	83 e0       	ldi	r24, 0x03	; 3
    2ac6:	89 83       	std	Y+1, r24	; 0x01
    2ac8:	da 01       	movw	r26, r20
    2aca:	c9 01       	movw	r24, r18
    2acc:	88 27       	eor	r24, r24
    2ace:	b7 fd       	sbrc	r27, 7
    2ad0:	83 95       	inc	r24
    2ad2:	99 27       	eor	r25, r25
    2ad4:	aa 27       	eor	r26, r26
    2ad6:	bb 27       	eor	r27, r27
    2ad8:	b8 2e       	mov	r11, r24
    2ada:	21 15       	cp	r18, r1
    2adc:	31 05       	cpc	r19, r1
    2ade:	41 05       	cpc	r20, r1
    2ae0:	51 05       	cpc	r21, r1
    2ae2:	19 f4       	brne	.+6      	; 0x2aea <__floatsisf+0x36>
    2ae4:	82 e0       	ldi	r24, 0x02	; 2
    2ae6:	89 83       	std	Y+1, r24	; 0x01
    2ae8:	3a c0       	rjmp	.+116    	; 0x2b5e <__floatsisf+0xaa>
    2aea:	88 23       	and	r24, r24
    2aec:	a9 f0       	breq	.+42     	; 0x2b18 <__floatsisf+0x64>
    2aee:	20 30       	cpi	r18, 0x00	; 0
    2af0:	80 e0       	ldi	r24, 0x00	; 0
    2af2:	38 07       	cpc	r19, r24
    2af4:	80 e0       	ldi	r24, 0x00	; 0
    2af6:	48 07       	cpc	r20, r24
    2af8:	80 e8       	ldi	r24, 0x80	; 128
    2afa:	58 07       	cpc	r21, r24
    2afc:	29 f4       	brne	.+10     	; 0x2b08 <__floatsisf+0x54>
    2afe:	60 e0       	ldi	r22, 0x00	; 0
    2b00:	70 e0       	ldi	r23, 0x00	; 0
    2b02:	80 e0       	ldi	r24, 0x00	; 0
    2b04:	9f ec       	ldi	r25, 0xCF	; 207
    2b06:	30 c0       	rjmp	.+96     	; 0x2b68 <__floatsisf+0xb4>
    2b08:	ee 24       	eor	r14, r14
    2b0a:	ff 24       	eor	r15, r15
    2b0c:	87 01       	movw	r16, r14
    2b0e:	e2 1a       	sub	r14, r18
    2b10:	f3 0a       	sbc	r15, r19
    2b12:	04 0b       	sbc	r16, r20
    2b14:	15 0b       	sbc	r17, r21
    2b16:	02 c0       	rjmp	.+4      	; 0x2b1c <__floatsisf+0x68>
    2b18:	79 01       	movw	r14, r18
    2b1a:	8a 01       	movw	r16, r20
    2b1c:	8e e1       	ldi	r24, 0x1E	; 30
    2b1e:	c8 2e       	mov	r12, r24
    2b20:	d1 2c       	mov	r13, r1
    2b22:	dc 82       	std	Y+4, r13	; 0x04
    2b24:	cb 82       	std	Y+3, r12	; 0x03
    2b26:	ed 82       	std	Y+5, r14	; 0x05
    2b28:	fe 82       	std	Y+6, r15	; 0x06
    2b2a:	0f 83       	std	Y+7, r16	; 0x07
    2b2c:	18 87       	std	Y+8, r17	; 0x08
    2b2e:	c8 01       	movw	r24, r16
    2b30:	b7 01       	movw	r22, r14
    2b32:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <__clzsi2>
    2b36:	01 97       	sbiw	r24, 0x01	; 1
    2b38:	18 16       	cp	r1, r24
    2b3a:	19 06       	cpc	r1, r25
    2b3c:	84 f4       	brge	.+32     	; 0x2b5e <__floatsisf+0xaa>
    2b3e:	08 2e       	mov	r0, r24
    2b40:	04 c0       	rjmp	.+8      	; 0x2b4a <__floatsisf+0x96>
    2b42:	ee 0c       	add	r14, r14
    2b44:	ff 1c       	adc	r15, r15
    2b46:	00 1f       	adc	r16, r16
    2b48:	11 1f       	adc	r17, r17
    2b4a:	0a 94       	dec	r0
    2b4c:	d2 f7       	brpl	.-12     	; 0x2b42 <__floatsisf+0x8e>
    2b4e:	ed 82       	std	Y+5, r14	; 0x05
    2b50:	fe 82       	std	Y+6, r15	; 0x06
    2b52:	0f 83       	std	Y+7, r16	; 0x07
    2b54:	18 87       	std	Y+8, r17	; 0x08
    2b56:	c8 1a       	sub	r12, r24
    2b58:	d9 0a       	sbc	r13, r25
    2b5a:	dc 82       	std	Y+4, r13	; 0x04
    2b5c:	cb 82       	std	Y+3, r12	; 0x03
    2b5e:	ba 82       	std	Y+2, r11	; 0x02
    2b60:	ce 01       	movw	r24, r28
    2b62:	01 96       	adiw	r24, 0x01	; 1
    2b64:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <__pack_f>
    2b68:	28 96       	adiw	r28, 0x08	; 8
    2b6a:	e9 e0       	ldi	r30, 0x09	; 9
    2b6c:	0c 94 27 19 	jmp	0x324e	; 0x324e <__epilogue_restores__+0x12>

00002b70 <__fixsfsi>:
    2b70:	ac e0       	ldi	r26, 0x0C	; 12
    2b72:	b0 e0       	ldi	r27, 0x00	; 0
    2b74:	ee eb       	ldi	r30, 0xBE	; 190
    2b76:	f5 e1       	ldi	r31, 0x15	; 21
    2b78:	0c 94 12 19 	jmp	0x3224	; 0x3224 <__prologue_saves__+0x20>
    2b7c:	69 83       	std	Y+1, r22	; 0x01
    2b7e:	7a 83       	std	Y+2, r23	; 0x02
    2b80:	8b 83       	std	Y+3, r24	; 0x03
    2b82:	9c 83       	std	Y+4, r25	; 0x04
    2b84:	ce 01       	movw	r24, r28
    2b86:	01 96       	adiw	r24, 0x01	; 1
    2b88:	be 01       	movw	r22, r28
    2b8a:	6b 5f       	subi	r22, 0xFB	; 251
    2b8c:	7f 4f       	sbci	r23, 0xFF	; 255
    2b8e:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <__unpack_f>
    2b92:	8d 81       	ldd	r24, Y+5	; 0x05
    2b94:	82 30       	cpi	r24, 0x02	; 2
    2b96:	61 f1       	breq	.+88     	; 0x2bf0 <__fixsfsi+0x80>
    2b98:	82 30       	cpi	r24, 0x02	; 2
    2b9a:	50 f1       	brcs	.+84     	; 0x2bf0 <__fixsfsi+0x80>
    2b9c:	84 30       	cpi	r24, 0x04	; 4
    2b9e:	21 f4       	brne	.+8      	; 0x2ba8 <__fixsfsi+0x38>
    2ba0:	8e 81       	ldd	r24, Y+6	; 0x06
    2ba2:	88 23       	and	r24, r24
    2ba4:	51 f1       	breq	.+84     	; 0x2bfa <__fixsfsi+0x8a>
    2ba6:	2e c0       	rjmp	.+92     	; 0x2c04 <__fixsfsi+0x94>
    2ba8:	2f 81       	ldd	r18, Y+7	; 0x07
    2baa:	38 85       	ldd	r19, Y+8	; 0x08
    2bac:	37 fd       	sbrc	r19, 7
    2bae:	20 c0       	rjmp	.+64     	; 0x2bf0 <__fixsfsi+0x80>
    2bb0:	6e 81       	ldd	r22, Y+6	; 0x06
    2bb2:	2f 31       	cpi	r18, 0x1F	; 31
    2bb4:	31 05       	cpc	r19, r1
    2bb6:	1c f0       	brlt	.+6      	; 0x2bbe <__fixsfsi+0x4e>
    2bb8:	66 23       	and	r22, r22
    2bba:	f9 f0       	breq	.+62     	; 0x2bfa <__fixsfsi+0x8a>
    2bbc:	23 c0       	rjmp	.+70     	; 0x2c04 <__fixsfsi+0x94>
    2bbe:	8e e1       	ldi	r24, 0x1E	; 30
    2bc0:	90 e0       	ldi	r25, 0x00	; 0
    2bc2:	82 1b       	sub	r24, r18
    2bc4:	93 0b       	sbc	r25, r19
    2bc6:	29 85       	ldd	r18, Y+9	; 0x09
    2bc8:	3a 85       	ldd	r19, Y+10	; 0x0a
    2bca:	4b 85       	ldd	r20, Y+11	; 0x0b
    2bcc:	5c 85       	ldd	r21, Y+12	; 0x0c
    2bce:	04 c0       	rjmp	.+8      	; 0x2bd8 <__fixsfsi+0x68>
    2bd0:	56 95       	lsr	r21
    2bd2:	47 95       	ror	r20
    2bd4:	37 95       	ror	r19
    2bd6:	27 95       	ror	r18
    2bd8:	8a 95       	dec	r24
    2bda:	d2 f7       	brpl	.-12     	; 0x2bd0 <__fixsfsi+0x60>
    2bdc:	66 23       	and	r22, r22
    2bde:	b1 f0       	breq	.+44     	; 0x2c0c <__fixsfsi+0x9c>
    2be0:	50 95       	com	r21
    2be2:	40 95       	com	r20
    2be4:	30 95       	com	r19
    2be6:	21 95       	neg	r18
    2be8:	3f 4f       	sbci	r19, 0xFF	; 255
    2bea:	4f 4f       	sbci	r20, 0xFF	; 255
    2bec:	5f 4f       	sbci	r21, 0xFF	; 255
    2bee:	0e c0       	rjmp	.+28     	; 0x2c0c <__fixsfsi+0x9c>
    2bf0:	20 e0       	ldi	r18, 0x00	; 0
    2bf2:	30 e0       	ldi	r19, 0x00	; 0
    2bf4:	40 e0       	ldi	r20, 0x00	; 0
    2bf6:	50 e0       	ldi	r21, 0x00	; 0
    2bf8:	09 c0       	rjmp	.+18     	; 0x2c0c <__fixsfsi+0x9c>
    2bfa:	2f ef       	ldi	r18, 0xFF	; 255
    2bfc:	3f ef       	ldi	r19, 0xFF	; 255
    2bfe:	4f ef       	ldi	r20, 0xFF	; 255
    2c00:	5f e7       	ldi	r21, 0x7F	; 127
    2c02:	04 c0       	rjmp	.+8      	; 0x2c0c <__fixsfsi+0x9c>
    2c04:	20 e0       	ldi	r18, 0x00	; 0
    2c06:	30 e0       	ldi	r19, 0x00	; 0
    2c08:	40 e0       	ldi	r20, 0x00	; 0
    2c0a:	50 e8       	ldi	r21, 0x80	; 128
    2c0c:	b9 01       	movw	r22, r18
    2c0e:	ca 01       	movw	r24, r20
    2c10:	2c 96       	adiw	r28, 0x0c	; 12
    2c12:	e2 e0       	ldi	r30, 0x02	; 2
    2c14:	0c 94 2e 19 	jmp	0x325c	; 0x325c <__epilogue_restores__+0x20>

00002c18 <__floatunsisf>:
    2c18:	a8 e0       	ldi	r26, 0x08	; 8
    2c1a:	b0 e0       	ldi	r27, 0x00	; 0
    2c1c:	e2 e1       	ldi	r30, 0x12	; 18
    2c1e:	f6 e1       	ldi	r31, 0x16	; 22
    2c20:	0c 94 0a 19 	jmp	0x3214	; 0x3214 <__prologue_saves__+0x10>
    2c24:	7b 01       	movw	r14, r22
    2c26:	8c 01       	movw	r16, r24
    2c28:	61 15       	cp	r22, r1
    2c2a:	71 05       	cpc	r23, r1
    2c2c:	81 05       	cpc	r24, r1
    2c2e:	91 05       	cpc	r25, r1
    2c30:	19 f4       	brne	.+6      	; 0x2c38 <__floatunsisf+0x20>
    2c32:	82 e0       	ldi	r24, 0x02	; 2
    2c34:	89 83       	std	Y+1, r24	; 0x01
    2c36:	60 c0       	rjmp	.+192    	; 0x2cf8 <__floatunsisf+0xe0>
    2c38:	83 e0       	ldi	r24, 0x03	; 3
    2c3a:	89 83       	std	Y+1, r24	; 0x01
    2c3c:	8e e1       	ldi	r24, 0x1E	; 30
    2c3e:	c8 2e       	mov	r12, r24
    2c40:	d1 2c       	mov	r13, r1
    2c42:	dc 82       	std	Y+4, r13	; 0x04
    2c44:	cb 82       	std	Y+3, r12	; 0x03
    2c46:	ed 82       	std	Y+5, r14	; 0x05
    2c48:	fe 82       	std	Y+6, r15	; 0x06
    2c4a:	0f 83       	std	Y+7, r16	; 0x07
    2c4c:	18 87       	std	Y+8, r17	; 0x08
    2c4e:	c8 01       	movw	r24, r16
    2c50:	b7 01       	movw	r22, r14
    2c52:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <__clzsi2>
    2c56:	fc 01       	movw	r30, r24
    2c58:	31 97       	sbiw	r30, 0x01	; 1
    2c5a:	f7 ff       	sbrs	r31, 7
    2c5c:	3b c0       	rjmp	.+118    	; 0x2cd4 <__floatunsisf+0xbc>
    2c5e:	22 27       	eor	r18, r18
    2c60:	33 27       	eor	r19, r19
    2c62:	2e 1b       	sub	r18, r30
    2c64:	3f 0b       	sbc	r19, r31
    2c66:	57 01       	movw	r10, r14
    2c68:	68 01       	movw	r12, r16
    2c6a:	02 2e       	mov	r0, r18
    2c6c:	04 c0       	rjmp	.+8      	; 0x2c76 <__floatunsisf+0x5e>
    2c6e:	d6 94       	lsr	r13
    2c70:	c7 94       	ror	r12
    2c72:	b7 94       	ror	r11
    2c74:	a7 94       	ror	r10
    2c76:	0a 94       	dec	r0
    2c78:	d2 f7       	brpl	.-12     	; 0x2c6e <__floatunsisf+0x56>
    2c7a:	40 e0       	ldi	r20, 0x00	; 0
    2c7c:	50 e0       	ldi	r21, 0x00	; 0
    2c7e:	60 e0       	ldi	r22, 0x00	; 0
    2c80:	70 e0       	ldi	r23, 0x00	; 0
    2c82:	81 e0       	ldi	r24, 0x01	; 1
    2c84:	90 e0       	ldi	r25, 0x00	; 0
    2c86:	a0 e0       	ldi	r26, 0x00	; 0
    2c88:	b0 e0       	ldi	r27, 0x00	; 0
    2c8a:	04 c0       	rjmp	.+8      	; 0x2c94 <__floatunsisf+0x7c>
    2c8c:	88 0f       	add	r24, r24
    2c8e:	99 1f       	adc	r25, r25
    2c90:	aa 1f       	adc	r26, r26
    2c92:	bb 1f       	adc	r27, r27
    2c94:	2a 95       	dec	r18
    2c96:	d2 f7       	brpl	.-12     	; 0x2c8c <__floatunsisf+0x74>
    2c98:	01 97       	sbiw	r24, 0x01	; 1
    2c9a:	a1 09       	sbc	r26, r1
    2c9c:	b1 09       	sbc	r27, r1
    2c9e:	8e 21       	and	r24, r14
    2ca0:	9f 21       	and	r25, r15
    2ca2:	a0 23       	and	r26, r16
    2ca4:	b1 23       	and	r27, r17
    2ca6:	00 97       	sbiw	r24, 0x00	; 0
    2ca8:	a1 05       	cpc	r26, r1
    2caa:	b1 05       	cpc	r27, r1
    2cac:	21 f0       	breq	.+8      	; 0x2cb6 <__floatunsisf+0x9e>
    2cae:	41 e0       	ldi	r20, 0x01	; 1
    2cb0:	50 e0       	ldi	r21, 0x00	; 0
    2cb2:	60 e0       	ldi	r22, 0x00	; 0
    2cb4:	70 e0       	ldi	r23, 0x00	; 0
    2cb6:	4a 29       	or	r20, r10
    2cb8:	5b 29       	or	r21, r11
    2cba:	6c 29       	or	r22, r12
    2cbc:	7d 29       	or	r23, r13
    2cbe:	4d 83       	std	Y+5, r20	; 0x05
    2cc0:	5e 83       	std	Y+6, r21	; 0x06
    2cc2:	6f 83       	std	Y+7, r22	; 0x07
    2cc4:	78 87       	std	Y+8, r23	; 0x08
    2cc6:	8e e1       	ldi	r24, 0x1E	; 30
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
    2cca:	8e 1b       	sub	r24, r30
    2ccc:	9f 0b       	sbc	r25, r31
    2cce:	9c 83       	std	Y+4, r25	; 0x04
    2cd0:	8b 83       	std	Y+3, r24	; 0x03
    2cd2:	12 c0       	rjmp	.+36     	; 0x2cf8 <__floatunsisf+0xe0>
    2cd4:	30 97       	sbiw	r30, 0x00	; 0
    2cd6:	81 f0       	breq	.+32     	; 0x2cf8 <__floatunsisf+0xe0>
    2cd8:	0e 2e       	mov	r0, r30
    2cda:	04 c0       	rjmp	.+8      	; 0x2ce4 <__floatunsisf+0xcc>
    2cdc:	ee 0c       	add	r14, r14
    2cde:	ff 1c       	adc	r15, r15
    2ce0:	00 1f       	adc	r16, r16
    2ce2:	11 1f       	adc	r17, r17
    2ce4:	0a 94       	dec	r0
    2ce6:	d2 f7       	brpl	.-12     	; 0x2cdc <__floatunsisf+0xc4>
    2ce8:	ed 82       	std	Y+5, r14	; 0x05
    2cea:	fe 82       	std	Y+6, r15	; 0x06
    2cec:	0f 83       	std	Y+7, r16	; 0x07
    2cee:	18 87       	std	Y+8, r17	; 0x08
    2cf0:	ce 1a       	sub	r12, r30
    2cf2:	df 0a       	sbc	r13, r31
    2cf4:	dc 82       	std	Y+4, r13	; 0x04
    2cf6:	cb 82       	std	Y+3, r12	; 0x03
    2cf8:	1a 82       	std	Y+2, r1	; 0x02
    2cfa:	ce 01       	movw	r24, r28
    2cfc:	01 96       	adiw	r24, 0x01	; 1
    2cfe:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <__pack_f>
    2d02:	28 96       	adiw	r28, 0x08	; 8
    2d04:	ea e0       	ldi	r30, 0x0A	; 10
    2d06:	0c 94 26 19 	jmp	0x324c	; 0x324c <__epilogue_restores__+0x10>

00002d0a <__clzsi2>:
    2d0a:	ef 92       	push	r14
    2d0c:	ff 92       	push	r15
    2d0e:	0f 93       	push	r16
    2d10:	1f 93       	push	r17
    2d12:	7b 01       	movw	r14, r22
    2d14:	8c 01       	movw	r16, r24
    2d16:	80 e0       	ldi	r24, 0x00	; 0
    2d18:	e8 16       	cp	r14, r24
    2d1a:	80 e0       	ldi	r24, 0x00	; 0
    2d1c:	f8 06       	cpc	r15, r24
    2d1e:	81 e0       	ldi	r24, 0x01	; 1
    2d20:	08 07       	cpc	r16, r24
    2d22:	80 e0       	ldi	r24, 0x00	; 0
    2d24:	18 07       	cpc	r17, r24
    2d26:	88 f4       	brcc	.+34     	; 0x2d4a <__clzsi2+0x40>
    2d28:	8f ef       	ldi	r24, 0xFF	; 255
    2d2a:	e8 16       	cp	r14, r24
    2d2c:	f1 04       	cpc	r15, r1
    2d2e:	01 05       	cpc	r16, r1
    2d30:	11 05       	cpc	r17, r1
    2d32:	31 f0       	breq	.+12     	; 0x2d40 <__clzsi2+0x36>
    2d34:	28 f0       	brcs	.+10     	; 0x2d40 <__clzsi2+0x36>
    2d36:	88 e0       	ldi	r24, 0x08	; 8
    2d38:	90 e0       	ldi	r25, 0x00	; 0
    2d3a:	a0 e0       	ldi	r26, 0x00	; 0
    2d3c:	b0 e0       	ldi	r27, 0x00	; 0
    2d3e:	17 c0       	rjmp	.+46     	; 0x2d6e <__clzsi2+0x64>
    2d40:	80 e0       	ldi	r24, 0x00	; 0
    2d42:	90 e0       	ldi	r25, 0x00	; 0
    2d44:	a0 e0       	ldi	r26, 0x00	; 0
    2d46:	b0 e0       	ldi	r27, 0x00	; 0
    2d48:	12 c0       	rjmp	.+36     	; 0x2d6e <__clzsi2+0x64>
    2d4a:	80 e0       	ldi	r24, 0x00	; 0
    2d4c:	e8 16       	cp	r14, r24
    2d4e:	80 e0       	ldi	r24, 0x00	; 0
    2d50:	f8 06       	cpc	r15, r24
    2d52:	80 e0       	ldi	r24, 0x00	; 0
    2d54:	08 07       	cpc	r16, r24
    2d56:	81 e0       	ldi	r24, 0x01	; 1
    2d58:	18 07       	cpc	r17, r24
    2d5a:	28 f0       	brcs	.+10     	; 0x2d66 <__clzsi2+0x5c>
    2d5c:	88 e1       	ldi	r24, 0x18	; 24
    2d5e:	90 e0       	ldi	r25, 0x00	; 0
    2d60:	a0 e0       	ldi	r26, 0x00	; 0
    2d62:	b0 e0       	ldi	r27, 0x00	; 0
    2d64:	04 c0       	rjmp	.+8      	; 0x2d6e <__clzsi2+0x64>
    2d66:	80 e1       	ldi	r24, 0x10	; 16
    2d68:	90 e0       	ldi	r25, 0x00	; 0
    2d6a:	a0 e0       	ldi	r26, 0x00	; 0
    2d6c:	b0 e0       	ldi	r27, 0x00	; 0
    2d6e:	20 e2       	ldi	r18, 0x20	; 32
    2d70:	30 e0       	ldi	r19, 0x00	; 0
    2d72:	40 e0       	ldi	r20, 0x00	; 0
    2d74:	50 e0       	ldi	r21, 0x00	; 0
    2d76:	28 1b       	sub	r18, r24
    2d78:	39 0b       	sbc	r19, r25
    2d7a:	4a 0b       	sbc	r20, r26
    2d7c:	5b 0b       	sbc	r21, r27
    2d7e:	04 c0       	rjmp	.+8      	; 0x2d88 <__clzsi2+0x7e>
    2d80:	16 95       	lsr	r17
    2d82:	07 95       	ror	r16
    2d84:	f7 94       	ror	r15
    2d86:	e7 94       	ror	r14
    2d88:	8a 95       	dec	r24
    2d8a:	d2 f7       	brpl	.-12     	; 0x2d80 <__clzsi2+0x76>
    2d8c:	f7 01       	movw	r30, r14
    2d8e:	e4 5b       	subi	r30, 0xB4	; 180
    2d90:	fd 4f       	sbci	r31, 0xFD	; 253
    2d92:	80 81       	ld	r24, Z
    2d94:	28 1b       	sub	r18, r24
    2d96:	31 09       	sbc	r19, r1
    2d98:	41 09       	sbc	r20, r1
    2d9a:	51 09       	sbc	r21, r1
    2d9c:	c9 01       	movw	r24, r18
    2d9e:	1f 91       	pop	r17
    2da0:	0f 91       	pop	r16
    2da2:	ff 90       	pop	r15
    2da4:	ef 90       	pop	r14
    2da6:	08 95       	ret

00002da8 <__pack_f>:
    2da8:	df 92       	push	r13
    2daa:	ef 92       	push	r14
    2dac:	ff 92       	push	r15
    2dae:	0f 93       	push	r16
    2db0:	1f 93       	push	r17
    2db2:	fc 01       	movw	r30, r24
    2db4:	e4 80       	ldd	r14, Z+4	; 0x04
    2db6:	f5 80       	ldd	r15, Z+5	; 0x05
    2db8:	06 81       	ldd	r16, Z+6	; 0x06
    2dba:	17 81       	ldd	r17, Z+7	; 0x07
    2dbc:	d1 80       	ldd	r13, Z+1	; 0x01
    2dbe:	80 81       	ld	r24, Z
    2dc0:	82 30       	cpi	r24, 0x02	; 2
    2dc2:	48 f4       	brcc	.+18     	; 0x2dd6 <__pack_f+0x2e>
    2dc4:	80 e0       	ldi	r24, 0x00	; 0
    2dc6:	90 e0       	ldi	r25, 0x00	; 0
    2dc8:	a0 e1       	ldi	r26, 0x10	; 16
    2dca:	b0 e0       	ldi	r27, 0x00	; 0
    2dcc:	e8 2a       	or	r14, r24
    2dce:	f9 2a       	or	r15, r25
    2dd0:	0a 2b       	or	r16, r26
    2dd2:	1b 2b       	or	r17, r27
    2dd4:	a5 c0       	rjmp	.+330    	; 0x2f20 <__pack_f+0x178>
    2dd6:	84 30       	cpi	r24, 0x04	; 4
    2dd8:	09 f4       	brne	.+2      	; 0x2ddc <__pack_f+0x34>
    2dda:	9f c0       	rjmp	.+318    	; 0x2f1a <__pack_f+0x172>
    2ddc:	82 30       	cpi	r24, 0x02	; 2
    2dde:	21 f4       	brne	.+8      	; 0x2de8 <__pack_f+0x40>
    2de0:	ee 24       	eor	r14, r14
    2de2:	ff 24       	eor	r15, r15
    2de4:	87 01       	movw	r16, r14
    2de6:	05 c0       	rjmp	.+10     	; 0x2df2 <__pack_f+0x4a>
    2de8:	e1 14       	cp	r14, r1
    2dea:	f1 04       	cpc	r15, r1
    2dec:	01 05       	cpc	r16, r1
    2dee:	11 05       	cpc	r17, r1
    2df0:	19 f4       	brne	.+6      	; 0x2df8 <__pack_f+0x50>
    2df2:	e0 e0       	ldi	r30, 0x00	; 0
    2df4:	f0 e0       	ldi	r31, 0x00	; 0
    2df6:	96 c0       	rjmp	.+300    	; 0x2f24 <__pack_f+0x17c>
    2df8:	62 81       	ldd	r22, Z+2	; 0x02
    2dfa:	73 81       	ldd	r23, Z+3	; 0x03
    2dfc:	9f ef       	ldi	r25, 0xFF	; 255
    2dfe:	62 38       	cpi	r22, 0x82	; 130
    2e00:	79 07       	cpc	r23, r25
    2e02:	0c f0       	brlt	.+2      	; 0x2e06 <__pack_f+0x5e>
    2e04:	5b c0       	rjmp	.+182    	; 0x2ebc <__pack_f+0x114>
    2e06:	22 e8       	ldi	r18, 0x82	; 130
    2e08:	3f ef       	ldi	r19, 0xFF	; 255
    2e0a:	26 1b       	sub	r18, r22
    2e0c:	37 0b       	sbc	r19, r23
    2e0e:	2a 31       	cpi	r18, 0x1A	; 26
    2e10:	31 05       	cpc	r19, r1
    2e12:	2c f0       	brlt	.+10     	; 0x2e1e <__pack_f+0x76>
    2e14:	20 e0       	ldi	r18, 0x00	; 0
    2e16:	30 e0       	ldi	r19, 0x00	; 0
    2e18:	40 e0       	ldi	r20, 0x00	; 0
    2e1a:	50 e0       	ldi	r21, 0x00	; 0
    2e1c:	2a c0       	rjmp	.+84     	; 0x2e72 <__pack_f+0xca>
    2e1e:	b8 01       	movw	r22, r16
    2e20:	a7 01       	movw	r20, r14
    2e22:	02 2e       	mov	r0, r18
    2e24:	04 c0       	rjmp	.+8      	; 0x2e2e <__pack_f+0x86>
    2e26:	76 95       	lsr	r23
    2e28:	67 95       	ror	r22
    2e2a:	57 95       	ror	r21
    2e2c:	47 95       	ror	r20
    2e2e:	0a 94       	dec	r0
    2e30:	d2 f7       	brpl	.-12     	; 0x2e26 <__pack_f+0x7e>
    2e32:	81 e0       	ldi	r24, 0x01	; 1
    2e34:	90 e0       	ldi	r25, 0x00	; 0
    2e36:	a0 e0       	ldi	r26, 0x00	; 0
    2e38:	b0 e0       	ldi	r27, 0x00	; 0
    2e3a:	04 c0       	rjmp	.+8      	; 0x2e44 <__pack_f+0x9c>
    2e3c:	88 0f       	add	r24, r24
    2e3e:	99 1f       	adc	r25, r25
    2e40:	aa 1f       	adc	r26, r26
    2e42:	bb 1f       	adc	r27, r27
    2e44:	2a 95       	dec	r18
    2e46:	d2 f7       	brpl	.-12     	; 0x2e3c <__pack_f+0x94>
    2e48:	01 97       	sbiw	r24, 0x01	; 1
    2e4a:	a1 09       	sbc	r26, r1
    2e4c:	b1 09       	sbc	r27, r1
    2e4e:	8e 21       	and	r24, r14
    2e50:	9f 21       	and	r25, r15
    2e52:	a0 23       	and	r26, r16
    2e54:	b1 23       	and	r27, r17
    2e56:	00 97       	sbiw	r24, 0x00	; 0
    2e58:	a1 05       	cpc	r26, r1
    2e5a:	b1 05       	cpc	r27, r1
    2e5c:	21 f0       	breq	.+8      	; 0x2e66 <__pack_f+0xbe>
    2e5e:	81 e0       	ldi	r24, 0x01	; 1
    2e60:	90 e0       	ldi	r25, 0x00	; 0
    2e62:	a0 e0       	ldi	r26, 0x00	; 0
    2e64:	b0 e0       	ldi	r27, 0x00	; 0
    2e66:	9a 01       	movw	r18, r20
    2e68:	ab 01       	movw	r20, r22
    2e6a:	28 2b       	or	r18, r24
    2e6c:	39 2b       	or	r19, r25
    2e6e:	4a 2b       	or	r20, r26
    2e70:	5b 2b       	or	r21, r27
    2e72:	da 01       	movw	r26, r20
    2e74:	c9 01       	movw	r24, r18
    2e76:	8f 77       	andi	r24, 0x7F	; 127
    2e78:	90 70       	andi	r25, 0x00	; 0
    2e7a:	a0 70       	andi	r26, 0x00	; 0
    2e7c:	b0 70       	andi	r27, 0x00	; 0
    2e7e:	80 34       	cpi	r24, 0x40	; 64
    2e80:	91 05       	cpc	r25, r1
    2e82:	a1 05       	cpc	r26, r1
    2e84:	b1 05       	cpc	r27, r1
    2e86:	39 f4       	brne	.+14     	; 0x2e96 <__pack_f+0xee>
    2e88:	27 ff       	sbrs	r18, 7
    2e8a:	09 c0       	rjmp	.+18     	; 0x2e9e <__pack_f+0xf6>
    2e8c:	20 5c       	subi	r18, 0xC0	; 192
    2e8e:	3f 4f       	sbci	r19, 0xFF	; 255
    2e90:	4f 4f       	sbci	r20, 0xFF	; 255
    2e92:	5f 4f       	sbci	r21, 0xFF	; 255
    2e94:	04 c0       	rjmp	.+8      	; 0x2e9e <__pack_f+0xf6>
    2e96:	21 5c       	subi	r18, 0xC1	; 193
    2e98:	3f 4f       	sbci	r19, 0xFF	; 255
    2e9a:	4f 4f       	sbci	r20, 0xFF	; 255
    2e9c:	5f 4f       	sbci	r21, 0xFF	; 255
    2e9e:	e0 e0       	ldi	r30, 0x00	; 0
    2ea0:	f0 e0       	ldi	r31, 0x00	; 0
    2ea2:	20 30       	cpi	r18, 0x00	; 0
    2ea4:	a0 e0       	ldi	r26, 0x00	; 0
    2ea6:	3a 07       	cpc	r19, r26
    2ea8:	a0 e0       	ldi	r26, 0x00	; 0
    2eaa:	4a 07       	cpc	r20, r26
    2eac:	a0 e4       	ldi	r26, 0x40	; 64
    2eae:	5a 07       	cpc	r21, r26
    2eb0:	10 f0       	brcs	.+4      	; 0x2eb6 <__pack_f+0x10e>
    2eb2:	e1 e0       	ldi	r30, 0x01	; 1
    2eb4:	f0 e0       	ldi	r31, 0x00	; 0
    2eb6:	79 01       	movw	r14, r18
    2eb8:	8a 01       	movw	r16, r20
    2eba:	27 c0       	rjmp	.+78     	; 0x2f0a <__pack_f+0x162>
    2ebc:	60 38       	cpi	r22, 0x80	; 128
    2ebe:	71 05       	cpc	r23, r1
    2ec0:	64 f5       	brge	.+88     	; 0x2f1a <__pack_f+0x172>
    2ec2:	fb 01       	movw	r30, r22
    2ec4:	e1 58       	subi	r30, 0x81	; 129
    2ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec8:	d8 01       	movw	r26, r16
    2eca:	c7 01       	movw	r24, r14
    2ecc:	8f 77       	andi	r24, 0x7F	; 127
    2ece:	90 70       	andi	r25, 0x00	; 0
    2ed0:	a0 70       	andi	r26, 0x00	; 0
    2ed2:	b0 70       	andi	r27, 0x00	; 0
    2ed4:	80 34       	cpi	r24, 0x40	; 64
    2ed6:	91 05       	cpc	r25, r1
    2ed8:	a1 05       	cpc	r26, r1
    2eda:	b1 05       	cpc	r27, r1
    2edc:	39 f4       	brne	.+14     	; 0x2eec <__pack_f+0x144>
    2ede:	e7 fe       	sbrs	r14, 7
    2ee0:	0d c0       	rjmp	.+26     	; 0x2efc <__pack_f+0x154>
    2ee2:	80 e4       	ldi	r24, 0x40	; 64
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	a0 e0       	ldi	r26, 0x00	; 0
    2ee8:	b0 e0       	ldi	r27, 0x00	; 0
    2eea:	04 c0       	rjmp	.+8      	; 0x2ef4 <__pack_f+0x14c>
    2eec:	8f e3       	ldi	r24, 0x3F	; 63
    2eee:	90 e0       	ldi	r25, 0x00	; 0
    2ef0:	a0 e0       	ldi	r26, 0x00	; 0
    2ef2:	b0 e0       	ldi	r27, 0x00	; 0
    2ef4:	e8 0e       	add	r14, r24
    2ef6:	f9 1e       	adc	r15, r25
    2ef8:	0a 1f       	adc	r16, r26
    2efa:	1b 1f       	adc	r17, r27
    2efc:	17 ff       	sbrs	r17, 7
    2efe:	05 c0       	rjmp	.+10     	; 0x2f0a <__pack_f+0x162>
    2f00:	16 95       	lsr	r17
    2f02:	07 95       	ror	r16
    2f04:	f7 94       	ror	r15
    2f06:	e7 94       	ror	r14
    2f08:	31 96       	adiw	r30, 0x01	; 1
    2f0a:	87 e0       	ldi	r24, 0x07	; 7
    2f0c:	16 95       	lsr	r17
    2f0e:	07 95       	ror	r16
    2f10:	f7 94       	ror	r15
    2f12:	e7 94       	ror	r14
    2f14:	8a 95       	dec	r24
    2f16:	d1 f7       	brne	.-12     	; 0x2f0c <__pack_f+0x164>
    2f18:	05 c0       	rjmp	.+10     	; 0x2f24 <__pack_f+0x17c>
    2f1a:	ee 24       	eor	r14, r14
    2f1c:	ff 24       	eor	r15, r15
    2f1e:	87 01       	movw	r16, r14
    2f20:	ef ef       	ldi	r30, 0xFF	; 255
    2f22:	f0 e0       	ldi	r31, 0x00	; 0
    2f24:	6e 2f       	mov	r22, r30
    2f26:	67 95       	ror	r22
    2f28:	66 27       	eor	r22, r22
    2f2a:	67 95       	ror	r22
    2f2c:	90 2f       	mov	r25, r16
    2f2e:	9f 77       	andi	r25, 0x7F	; 127
    2f30:	d7 94       	ror	r13
    2f32:	dd 24       	eor	r13, r13
    2f34:	d7 94       	ror	r13
    2f36:	8e 2f       	mov	r24, r30
    2f38:	86 95       	lsr	r24
    2f3a:	49 2f       	mov	r20, r25
    2f3c:	46 2b       	or	r20, r22
    2f3e:	58 2f       	mov	r21, r24
    2f40:	5d 29       	or	r21, r13
    2f42:	b7 01       	movw	r22, r14
    2f44:	ca 01       	movw	r24, r20
    2f46:	1f 91       	pop	r17
    2f48:	0f 91       	pop	r16
    2f4a:	ff 90       	pop	r15
    2f4c:	ef 90       	pop	r14
    2f4e:	df 90       	pop	r13
    2f50:	08 95       	ret

00002f52 <__unpack_f>:
    2f52:	fc 01       	movw	r30, r24
    2f54:	db 01       	movw	r26, r22
    2f56:	40 81       	ld	r20, Z
    2f58:	51 81       	ldd	r21, Z+1	; 0x01
    2f5a:	22 81       	ldd	r18, Z+2	; 0x02
    2f5c:	62 2f       	mov	r22, r18
    2f5e:	6f 77       	andi	r22, 0x7F	; 127
    2f60:	70 e0       	ldi	r23, 0x00	; 0
    2f62:	22 1f       	adc	r18, r18
    2f64:	22 27       	eor	r18, r18
    2f66:	22 1f       	adc	r18, r18
    2f68:	93 81       	ldd	r25, Z+3	; 0x03
    2f6a:	89 2f       	mov	r24, r25
    2f6c:	88 0f       	add	r24, r24
    2f6e:	82 2b       	or	r24, r18
    2f70:	28 2f       	mov	r18, r24
    2f72:	30 e0       	ldi	r19, 0x00	; 0
    2f74:	99 1f       	adc	r25, r25
    2f76:	99 27       	eor	r25, r25
    2f78:	99 1f       	adc	r25, r25
    2f7a:	11 96       	adiw	r26, 0x01	; 1
    2f7c:	9c 93       	st	X, r25
    2f7e:	11 97       	sbiw	r26, 0x01	; 1
    2f80:	21 15       	cp	r18, r1
    2f82:	31 05       	cpc	r19, r1
    2f84:	a9 f5       	brne	.+106    	; 0x2ff0 <__unpack_f+0x9e>
    2f86:	41 15       	cp	r20, r1
    2f88:	51 05       	cpc	r21, r1
    2f8a:	61 05       	cpc	r22, r1
    2f8c:	71 05       	cpc	r23, r1
    2f8e:	11 f4       	brne	.+4      	; 0x2f94 <__unpack_f+0x42>
    2f90:	82 e0       	ldi	r24, 0x02	; 2
    2f92:	37 c0       	rjmp	.+110    	; 0x3002 <__unpack_f+0xb0>
    2f94:	82 e8       	ldi	r24, 0x82	; 130
    2f96:	9f ef       	ldi	r25, 0xFF	; 255
    2f98:	13 96       	adiw	r26, 0x03	; 3
    2f9a:	9c 93       	st	X, r25
    2f9c:	8e 93       	st	-X, r24
    2f9e:	12 97       	sbiw	r26, 0x02	; 2
    2fa0:	9a 01       	movw	r18, r20
    2fa2:	ab 01       	movw	r20, r22
    2fa4:	67 e0       	ldi	r22, 0x07	; 7
    2fa6:	22 0f       	add	r18, r18
    2fa8:	33 1f       	adc	r19, r19
    2faa:	44 1f       	adc	r20, r20
    2fac:	55 1f       	adc	r21, r21
    2fae:	6a 95       	dec	r22
    2fb0:	d1 f7       	brne	.-12     	; 0x2fa6 <__unpack_f+0x54>
    2fb2:	83 e0       	ldi	r24, 0x03	; 3
    2fb4:	8c 93       	st	X, r24
    2fb6:	0d c0       	rjmp	.+26     	; 0x2fd2 <__unpack_f+0x80>
    2fb8:	22 0f       	add	r18, r18
    2fba:	33 1f       	adc	r19, r19
    2fbc:	44 1f       	adc	r20, r20
    2fbe:	55 1f       	adc	r21, r21
    2fc0:	12 96       	adiw	r26, 0x02	; 2
    2fc2:	8d 91       	ld	r24, X+
    2fc4:	9c 91       	ld	r25, X
    2fc6:	13 97       	sbiw	r26, 0x03	; 3
    2fc8:	01 97       	sbiw	r24, 0x01	; 1
    2fca:	13 96       	adiw	r26, 0x03	; 3
    2fcc:	9c 93       	st	X, r25
    2fce:	8e 93       	st	-X, r24
    2fd0:	12 97       	sbiw	r26, 0x02	; 2
    2fd2:	20 30       	cpi	r18, 0x00	; 0
    2fd4:	80 e0       	ldi	r24, 0x00	; 0
    2fd6:	38 07       	cpc	r19, r24
    2fd8:	80 e0       	ldi	r24, 0x00	; 0
    2fda:	48 07       	cpc	r20, r24
    2fdc:	80 e4       	ldi	r24, 0x40	; 64
    2fde:	58 07       	cpc	r21, r24
    2fe0:	58 f3       	brcs	.-42     	; 0x2fb8 <__unpack_f+0x66>
    2fe2:	14 96       	adiw	r26, 0x04	; 4
    2fe4:	2d 93       	st	X+, r18
    2fe6:	3d 93       	st	X+, r19
    2fe8:	4d 93       	st	X+, r20
    2fea:	5c 93       	st	X, r21
    2fec:	17 97       	sbiw	r26, 0x07	; 7
    2fee:	08 95       	ret
    2ff0:	2f 3f       	cpi	r18, 0xFF	; 255
    2ff2:	31 05       	cpc	r19, r1
    2ff4:	79 f4       	brne	.+30     	; 0x3014 <__unpack_f+0xc2>
    2ff6:	41 15       	cp	r20, r1
    2ff8:	51 05       	cpc	r21, r1
    2ffa:	61 05       	cpc	r22, r1
    2ffc:	71 05       	cpc	r23, r1
    2ffe:	19 f4       	brne	.+6      	; 0x3006 <__unpack_f+0xb4>
    3000:	84 e0       	ldi	r24, 0x04	; 4
    3002:	8c 93       	st	X, r24
    3004:	08 95       	ret
    3006:	64 ff       	sbrs	r22, 4
    3008:	03 c0       	rjmp	.+6      	; 0x3010 <__unpack_f+0xbe>
    300a:	81 e0       	ldi	r24, 0x01	; 1
    300c:	8c 93       	st	X, r24
    300e:	12 c0       	rjmp	.+36     	; 0x3034 <__unpack_f+0xe2>
    3010:	1c 92       	st	X, r1
    3012:	10 c0       	rjmp	.+32     	; 0x3034 <__unpack_f+0xe2>
    3014:	2f 57       	subi	r18, 0x7F	; 127
    3016:	30 40       	sbci	r19, 0x00	; 0
    3018:	13 96       	adiw	r26, 0x03	; 3
    301a:	3c 93       	st	X, r19
    301c:	2e 93       	st	-X, r18
    301e:	12 97       	sbiw	r26, 0x02	; 2
    3020:	83 e0       	ldi	r24, 0x03	; 3
    3022:	8c 93       	st	X, r24
    3024:	87 e0       	ldi	r24, 0x07	; 7
    3026:	44 0f       	add	r20, r20
    3028:	55 1f       	adc	r21, r21
    302a:	66 1f       	adc	r22, r22
    302c:	77 1f       	adc	r23, r23
    302e:	8a 95       	dec	r24
    3030:	d1 f7       	brne	.-12     	; 0x3026 <__unpack_f+0xd4>
    3032:	70 64       	ori	r23, 0x40	; 64
    3034:	14 96       	adiw	r26, 0x04	; 4
    3036:	4d 93       	st	X+, r20
    3038:	5d 93       	st	X+, r21
    303a:	6d 93       	st	X+, r22
    303c:	7c 93       	st	X, r23
    303e:	17 97       	sbiw	r26, 0x07	; 7
    3040:	08 95       	ret

00003042 <__fpcmp_parts_f>:
    3042:	1f 93       	push	r17
    3044:	dc 01       	movw	r26, r24
    3046:	fb 01       	movw	r30, r22
    3048:	9c 91       	ld	r25, X
    304a:	92 30       	cpi	r25, 0x02	; 2
    304c:	08 f4       	brcc	.+2      	; 0x3050 <__fpcmp_parts_f+0xe>
    304e:	47 c0       	rjmp	.+142    	; 0x30de <__fpcmp_parts_f+0x9c>
    3050:	80 81       	ld	r24, Z
    3052:	82 30       	cpi	r24, 0x02	; 2
    3054:	08 f4       	brcc	.+2      	; 0x3058 <__fpcmp_parts_f+0x16>
    3056:	43 c0       	rjmp	.+134    	; 0x30de <__fpcmp_parts_f+0x9c>
    3058:	94 30       	cpi	r25, 0x04	; 4
    305a:	51 f4       	brne	.+20     	; 0x3070 <__fpcmp_parts_f+0x2e>
    305c:	11 96       	adiw	r26, 0x01	; 1
    305e:	1c 91       	ld	r17, X
    3060:	84 30       	cpi	r24, 0x04	; 4
    3062:	99 f5       	brne	.+102    	; 0x30ca <__fpcmp_parts_f+0x88>
    3064:	81 81       	ldd	r24, Z+1	; 0x01
    3066:	68 2f       	mov	r22, r24
    3068:	70 e0       	ldi	r23, 0x00	; 0
    306a:	61 1b       	sub	r22, r17
    306c:	71 09       	sbc	r23, r1
    306e:	3f c0       	rjmp	.+126    	; 0x30ee <__fpcmp_parts_f+0xac>
    3070:	84 30       	cpi	r24, 0x04	; 4
    3072:	21 f0       	breq	.+8      	; 0x307c <__fpcmp_parts_f+0x3a>
    3074:	92 30       	cpi	r25, 0x02	; 2
    3076:	31 f4       	brne	.+12     	; 0x3084 <__fpcmp_parts_f+0x42>
    3078:	82 30       	cpi	r24, 0x02	; 2
    307a:	b9 f1       	breq	.+110    	; 0x30ea <__fpcmp_parts_f+0xa8>
    307c:	81 81       	ldd	r24, Z+1	; 0x01
    307e:	88 23       	and	r24, r24
    3080:	89 f1       	breq	.+98     	; 0x30e4 <__fpcmp_parts_f+0xa2>
    3082:	2d c0       	rjmp	.+90     	; 0x30de <__fpcmp_parts_f+0x9c>
    3084:	11 96       	adiw	r26, 0x01	; 1
    3086:	1c 91       	ld	r17, X
    3088:	11 97       	sbiw	r26, 0x01	; 1
    308a:	82 30       	cpi	r24, 0x02	; 2
    308c:	f1 f0       	breq	.+60     	; 0x30ca <__fpcmp_parts_f+0x88>
    308e:	81 81       	ldd	r24, Z+1	; 0x01
    3090:	18 17       	cp	r17, r24
    3092:	d9 f4       	brne	.+54     	; 0x30ca <__fpcmp_parts_f+0x88>
    3094:	12 96       	adiw	r26, 0x02	; 2
    3096:	2d 91       	ld	r18, X+
    3098:	3c 91       	ld	r19, X
    309a:	13 97       	sbiw	r26, 0x03	; 3
    309c:	82 81       	ldd	r24, Z+2	; 0x02
    309e:	93 81       	ldd	r25, Z+3	; 0x03
    30a0:	82 17       	cp	r24, r18
    30a2:	93 07       	cpc	r25, r19
    30a4:	94 f0       	brlt	.+36     	; 0x30ca <__fpcmp_parts_f+0x88>
    30a6:	28 17       	cp	r18, r24
    30a8:	39 07       	cpc	r19, r25
    30aa:	bc f0       	brlt	.+46     	; 0x30da <__fpcmp_parts_f+0x98>
    30ac:	14 96       	adiw	r26, 0x04	; 4
    30ae:	8d 91       	ld	r24, X+
    30b0:	9d 91       	ld	r25, X+
    30b2:	0d 90       	ld	r0, X+
    30b4:	bc 91       	ld	r27, X
    30b6:	a0 2d       	mov	r26, r0
    30b8:	24 81       	ldd	r18, Z+4	; 0x04
    30ba:	35 81       	ldd	r19, Z+5	; 0x05
    30bc:	46 81       	ldd	r20, Z+6	; 0x06
    30be:	57 81       	ldd	r21, Z+7	; 0x07
    30c0:	28 17       	cp	r18, r24
    30c2:	39 07       	cpc	r19, r25
    30c4:	4a 07       	cpc	r20, r26
    30c6:	5b 07       	cpc	r21, r27
    30c8:	18 f4       	brcc	.+6      	; 0x30d0 <__fpcmp_parts_f+0x8e>
    30ca:	11 23       	and	r17, r17
    30cc:	41 f0       	breq	.+16     	; 0x30de <__fpcmp_parts_f+0x9c>
    30ce:	0a c0       	rjmp	.+20     	; 0x30e4 <__fpcmp_parts_f+0xa2>
    30d0:	82 17       	cp	r24, r18
    30d2:	93 07       	cpc	r25, r19
    30d4:	a4 07       	cpc	r26, r20
    30d6:	b5 07       	cpc	r27, r21
    30d8:	40 f4       	brcc	.+16     	; 0x30ea <__fpcmp_parts_f+0xa8>
    30da:	11 23       	and	r17, r17
    30dc:	19 f0       	breq	.+6      	; 0x30e4 <__fpcmp_parts_f+0xa2>
    30de:	61 e0       	ldi	r22, 0x01	; 1
    30e0:	70 e0       	ldi	r23, 0x00	; 0
    30e2:	05 c0       	rjmp	.+10     	; 0x30ee <__fpcmp_parts_f+0xac>
    30e4:	6f ef       	ldi	r22, 0xFF	; 255
    30e6:	7f ef       	ldi	r23, 0xFF	; 255
    30e8:	02 c0       	rjmp	.+4      	; 0x30ee <__fpcmp_parts_f+0xac>
    30ea:	60 e0       	ldi	r22, 0x00	; 0
    30ec:	70 e0       	ldi	r23, 0x00	; 0
    30ee:	cb 01       	movw	r24, r22
    30f0:	1f 91       	pop	r17
    30f2:	08 95       	ret

000030f4 <do_rand>:
    30f4:	a0 e0       	ldi	r26, 0x00	; 0
    30f6:	b0 e0       	ldi	r27, 0x00	; 0
    30f8:	e0 e8       	ldi	r30, 0x80	; 128
    30fa:	f8 e1       	ldi	r31, 0x18	; 24
    30fc:	0c 94 0a 19 	jmp	0x3214	; 0x3214 <__prologue_saves__+0x10>
    3100:	ec 01       	movw	r28, r24
    3102:	a8 80       	ld	r10, Y
    3104:	b9 80       	ldd	r11, Y+1	; 0x01
    3106:	ca 80       	ldd	r12, Y+2	; 0x02
    3108:	db 80       	ldd	r13, Y+3	; 0x03
    310a:	a1 14       	cp	r10, r1
    310c:	b1 04       	cpc	r11, r1
    310e:	c1 04       	cpc	r12, r1
    3110:	d1 04       	cpc	r13, r1
    3112:	41 f4       	brne	.+16     	; 0x3124 <do_rand+0x30>
    3114:	84 e2       	ldi	r24, 0x24	; 36
    3116:	a8 2e       	mov	r10, r24
    3118:	89 ed       	ldi	r24, 0xD9	; 217
    311a:	b8 2e       	mov	r11, r24
    311c:	8b e5       	ldi	r24, 0x5B	; 91
    311e:	c8 2e       	mov	r12, r24
    3120:	87 e0       	ldi	r24, 0x07	; 7
    3122:	d8 2e       	mov	r13, r24
    3124:	c6 01       	movw	r24, r12
    3126:	b5 01       	movw	r22, r10
    3128:	2d e1       	ldi	r18, 0x1D	; 29
    312a:	33 ef       	ldi	r19, 0xF3	; 243
    312c:	41 e0       	ldi	r20, 0x01	; 1
    312e:	50 e0       	ldi	r21, 0x00	; 0
    3130:	0e 94 58 19 	call	0x32b0	; 0x32b0 <__divmodsi4>
    3134:	27 ea       	ldi	r18, 0xA7	; 167
    3136:	31 e4       	ldi	r19, 0x41	; 65
    3138:	40 e0       	ldi	r20, 0x00	; 0
    313a:	50 e0       	ldi	r21, 0x00	; 0
    313c:	0e 94 39 19 	call	0x3272	; 0x3272 <__mulsi3>
    3140:	7b 01       	movw	r14, r22
    3142:	8c 01       	movw	r16, r24
    3144:	c6 01       	movw	r24, r12
    3146:	b5 01       	movw	r22, r10
    3148:	2d e1       	ldi	r18, 0x1D	; 29
    314a:	33 ef       	ldi	r19, 0xF3	; 243
    314c:	41 e0       	ldi	r20, 0x01	; 1
    314e:	50 e0       	ldi	r21, 0x00	; 0
    3150:	0e 94 58 19 	call	0x32b0	; 0x32b0 <__divmodsi4>
    3154:	ca 01       	movw	r24, r20
    3156:	b9 01       	movw	r22, r18
    3158:	2c ee       	ldi	r18, 0xEC	; 236
    315a:	34 ef       	ldi	r19, 0xF4	; 244
    315c:	4f ef       	ldi	r20, 0xFF	; 255
    315e:	5f ef       	ldi	r21, 0xFF	; 255
    3160:	0e 94 39 19 	call	0x3272	; 0x3272 <__mulsi3>
    3164:	6e 0d       	add	r22, r14
    3166:	7f 1d       	adc	r23, r15
    3168:	80 1f       	adc	r24, r16
    316a:	91 1f       	adc	r25, r17
    316c:	97 ff       	sbrs	r25, 7
    316e:	04 c0       	rjmp	.+8      	; 0x3178 <do_rand+0x84>
    3170:	61 50       	subi	r22, 0x01	; 1
    3172:	70 40       	sbci	r23, 0x00	; 0
    3174:	80 40       	sbci	r24, 0x00	; 0
    3176:	90 48       	sbci	r25, 0x80	; 128
    3178:	68 83       	st	Y, r22
    317a:	79 83       	std	Y+1, r23	; 0x01
    317c:	8a 83       	std	Y+2, r24	; 0x02
    317e:	9b 83       	std	Y+3, r25	; 0x03
    3180:	9b 01       	movw	r18, r22
    3182:	3f 77       	andi	r19, 0x7F	; 127
    3184:	c9 01       	movw	r24, r18
    3186:	cd b7       	in	r28, 0x3d	; 61
    3188:	de b7       	in	r29, 0x3e	; 62
    318a:	ea e0       	ldi	r30, 0x0A	; 10
    318c:	0c 94 26 19 	jmp	0x324c	; 0x324c <__epilogue_restores__+0x10>

00003190 <rand_r>:
    3190:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <do_rand>
    3194:	08 95       	ret

00003196 <rand>:
    3196:	8c e4       	ldi	r24, 0x4C	; 76
    3198:	93 e0       	ldi	r25, 0x03	; 3
    319a:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <do_rand>
    319e:	08 95       	ret

000031a0 <srand>:
    31a0:	a0 e0       	ldi	r26, 0x00	; 0
    31a2:	b0 e0       	ldi	r27, 0x00	; 0
    31a4:	80 93 4c 03 	sts	0x034C, r24
    31a8:	90 93 4d 03 	sts	0x034D, r25
    31ac:	a0 93 4e 03 	sts	0x034E, r26
    31b0:	b0 93 4f 03 	sts	0x034F, r27
    31b4:	08 95       	ret

000031b6 <__udivmodhi4>:
    31b6:	aa 1b       	sub	r26, r26
    31b8:	bb 1b       	sub	r27, r27
    31ba:	51 e1       	ldi	r21, 0x11	; 17
    31bc:	07 c0       	rjmp	.+14     	; 0x31cc <__udivmodhi4_ep>

000031be <__udivmodhi4_loop>:
    31be:	aa 1f       	adc	r26, r26
    31c0:	bb 1f       	adc	r27, r27
    31c2:	a6 17       	cp	r26, r22
    31c4:	b7 07       	cpc	r27, r23
    31c6:	10 f0       	brcs	.+4      	; 0x31cc <__udivmodhi4_ep>
    31c8:	a6 1b       	sub	r26, r22
    31ca:	b7 0b       	sbc	r27, r23

000031cc <__udivmodhi4_ep>:
    31cc:	88 1f       	adc	r24, r24
    31ce:	99 1f       	adc	r25, r25
    31d0:	5a 95       	dec	r21
    31d2:	a9 f7       	brne	.-22     	; 0x31be <__udivmodhi4_loop>
    31d4:	80 95       	com	r24
    31d6:	90 95       	com	r25
    31d8:	bc 01       	movw	r22, r24
    31da:	cd 01       	movw	r24, r26
    31dc:	08 95       	ret

000031de <__divmodhi4>:
    31de:	97 fb       	bst	r25, 7
    31e0:	09 2e       	mov	r0, r25
    31e2:	07 26       	eor	r0, r23
    31e4:	0a d0       	rcall	.+20     	; 0x31fa <__divmodhi4_neg1>
    31e6:	77 fd       	sbrc	r23, 7
    31e8:	04 d0       	rcall	.+8      	; 0x31f2 <__divmodhi4_neg2>
    31ea:	e5 df       	rcall	.-54     	; 0x31b6 <__udivmodhi4>
    31ec:	06 d0       	rcall	.+12     	; 0x31fa <__divmodhi4_neg1>
    31ee:	00 20       	and	r0, r0
    31f0:	1a f4       	brpl	.+6      	; 0x31f8 <__divmodhi4_exit>

000031f2 <__divmodhi4_neg2>:
    31f2:	70 95       	com	r23
    31f4:	61 95       	neg	r22
    31f6:	7f 4f       	sbci	r23, 0xFF	; 255

000031f8 <__divmodhi4_exit>:
    31f8:	08 95       	ret

000031fa <__divmodhi4_neg1>:
    31fa:	f6 f7       	brtc	.-4      	; 0x31f8 <__divmodhi4_exit>
    31fc:	90 95       	com	r25
    31fe:	81 95       	neg	r24
    3200:	9f 4f       	sbci	r25, 0xFF	; 255
    3202:	08 95       	ret

00003204 <__prologue_saves__>:
    3204:	2f 92       	push	r2
    3206:	3f 92       	push	r3
    3208:	4f 92       	push	r4
    320a:	5f 92       	push	r5
    320c:	6f 92       	push	r6
    320e:	7f 92       	push	r7
    3210:	8f 92       	push	r8
    3212:	9f 92       	push	r9
    3214:	af 92       	push	r10
    3216:	bf 92       	push	r11
    3218:	cf 92       	push	r12
    321a:	df 92       	push	r13
    321c:	ef 92       	push	r14
    321e:	ff 92       	push	r15
    3220:	0f 93       	push	r16
    3222:	1f 93       	push	r17
    3224:	cf 93       	push	r28
    3226:	df 93       	push	r29
    3228:	cd b7       	in	r28, 0x3d	; 61
    322a:	de b7       	in	r29, 0x3e	; 62
    322c:	ca 1b       	sub	r28, r26
    322e:	db 0b       	sbc	r29, r27
    3230:	0f b6       	in	r0, 0x3f	; 63
    3232:	f8 94       	cli
    3234:	de bf       	out	0x3e, r29	; 62
    3236:	0f be       	out	0x3f, r0	; 63
    3238:	cd bf       	out	0x3d, r28	; 61
    323a:	09 94       	ijmp

0000323c <__epilogue_restores__>:
    323c:	2a 88       	ldd	r2, Y+18	; 0x12
    323e:	39 88       	ldd	r3, Y+17	; 0x11
    3240:	48 88       	ldd	r4, Y+16	; 0x10
    3242:	5f 84       	ldd	r5, Y+15	; 0x0f
    3244:	6e 84       	ldd	r6, Y+14	; 0x0e
    3246:	7d 84       	ldd	r7, Y+13	; 0x0d
    3248:	8c 84       	ldd	r8, Y+12	; 0x0c
    324a:	9b 84       	ldd	r9, Y+11	; 0x0b
    324c:	aa 84       	ldd	r10, Y+10	; 0x0a
    324e:	b9 84       	ldd	r11, Y+9	; 0x09
    3250:	c8 84       	ldd	r12, Y+8	; 0x08
    3252:	df 80       	ldd	r13, Y+7	; 0x07
    3254:	ee 80       	ldd	r14, Y+6	; 0x06
    3256:	fd 80       	ldd	r15, Y+5	; 0x05
    3258:	0c 81       	ldd	r16, Y+4	; 0x04
    325a:	1b 81       	ldd	r17, Y+3	; 0x03
    325c:	aa 81       	ldd	r26, Y+2	; 0x02
    325e:	b9 81       	ldd	r27, Y+1	; 0x01
    3260:	ce 0f       	add	r28, r30
    3262:	d1 1d       	adc	r29, r1
    3264:	0f b6       	in	r0, 0x3f	; 63
    3266:	f8 94       	cli
    3268:	de bf       	out	0x3e, r29	; 62
    326a:	0f be       	out	0x3f, r0	; 63
    326c:	cd bf       	out	0x3d, r28	; 61
    326e:	ed 01       	movw	r28, r26
    3270:	08 95       	ret

00003272 <__mulsi3>:
    3272:	62 9f       	mul	r22, r18
    3274:	d0 01       	movw	r26, r0
    3276:	73 9f       	mul	r23, r19
    3278:	f0 01       	movw	r30, r0
    327a:	82 9f       	mul	r24, r18
    327c:	e0 0d       	add	r30, r0
    327e:	f1 1d       	adc	r31, r1
    3280:	64 9f       	mul	r22, r20
    3282:	e0 0d       	add	r30, r0
    3284:	f1 1d       	adc	r31, r1
    3286:	92 9f       	mul	r25, r18
    3288:	f0 0d       	add	r31, r0
    328a:	83 9f       	mul	r24, r19
    328c:	f0 0d       	add	r31, r0
    328e:	74 9f       	mul	r23, r20
    3290:	f0 0d       	add	r31, r0
    3292:	65 9f       	mul	r22, r21
    3294:	f0 0d       	add	r31, r0
    3296:	99 27       	eor	r25, r25
    3298:	72 9f       	mul	r23, r18
    329a:	b0 0d       	add	r27, r0
    329c:	e1 1d       	adc	r30, r1
    329e:	f9 1f       	adc	r31, r25
    32a0:	63 9f       	mul	r22, r19
    32a2:	b0 0d       	add	r27, r0
    32a4:	e1 1d       	adc	r30, r1
    32a6:	f9 1f       	adc	r31, r25
    32a8:	bd 01       	movw	r22, r26
    32aa:	cf 01       	movw	r24, r30
    32ac:	11 24       	eor	r1, r1
    32ae:	08 95       	ret

000032b0 <__divmodsi4>:
    32b0:	97 fb       	bst	r25, 7
    32b2:	09 2e       	mov	r0, r25
    32b4:	05 26       	eor	r0, r21
    32b6:	0e d0       	rcall	.+28     	; 0x32d4 <__divmodsi4_neg1>
    32b8:	57 fd       	sbrc	r21, 7
    32ba:	04 d0       	rcall	.+8      	; 0x32c4 <__divmodsi4_neg2>
    32bc:	14 d0       	rcall	.+40     	; 0x32e6 <__udivmodsi4>
    32be:	0a d0       	rcall	.+20     	; 0x32d4 <__divmodsi4_neg1>
    32c0:	00 1c       	adc	r0, r0
    32c2:	38 f4       	brcc	.+14     	; 0x32d2 <__divmodsi4_exit>

000032c4 <__divmodsi4_neg2>:
    32c4:	50 95       	com	r21
    32c6:	40 95       	com	r20
    32c8:	30 95       	com	r19
    32ca:	21 95       	neg	r18
    32cc:	3f 4f       	sbci	r19, 0xFF	; 255
    32ce:	4f 4f       	sbci	r20, 0xFF	; 255
    32d0:	5f 4f       	sbci	r21, 0xFF	; 255

000032d2 <__divmodsi4_exit>:
    32d2:	08 95       	ret

000032d4 <__divmodsi4_neg1>:
    32d4:	f6 f7       	brtc	.-4      	; 0x32d2 <__divmodsi4_exit>
    32d6:	90 95       	com	r25
    32d8:	80 95       	com	r24
    32da:	70 95       	com	r23
    32dc:	61 95       	neg	r22
    32de:	7f 4f       	sbci	r23, 0xFF	; 255
    32e0:	8f 4f       	sbci	r24, 0xFF	; 255
    32e2:	9f 4f       	sbci	r25, 0xFF	; 255
    32e4:	08 95       	ret

000032e6 <__udivmodsi4>:
    32e6:	a1 e2       	ldi	r26, 0x21	; 33
    32e8:	1a 2e       	mov	r1, r26
    32ea:	aa 1b       	sub	r26, r26
    32ec:	bb 1b       	sub	r27, r27
    32ee:	fd 01       	movw	r30, r26
    32f0:	0d c0       	rjmp	.+26     	; 0x330c <__udivmodsi4_ep>

000032f2 <__udivmodsi4_loop>:
    32f2:	aa 1f       	adc	r26, r26
    32f4:	bb 1f       	adc	r27, r27
    32f6:	ee 1f       	adc	r30, r30
    32f8:	ff 1f       	adc	r31, r31
    32fa:	a2 17       	cp	r26, r18
    32fc:	b3 07       	cpc	r27, r19
    32fe:	e4 07       	cpc	r30, r20
    3300:	f5 07       	cpc	r31, r21
    3302:	20 f0       	brcs	.+8      	; 0x330c <__udivmodsi4_ep>
    3304:	a2 1b       	sub	r26, r18
    3306:	b3 0b       	sbc	r27, r19
    3308:	e4 0b       	sbc	r30, r20
    330a:	f5 0b       	sbc	r31, r21

0000330c <__udivmodsi4_ep>:
    330c:	66 1f       	adc	r22, r22
    330e:	77 1f       	adc	r23, r23
    3310:	88 1f       	adc	r24, r24
    3312:	99 1f       	adc	r25, r25
    3314:	1a 94       	dec	r1
    3316:	69 f7       	brne	.-38     	; 0x32f2 <__udivmodsi4_loop>
    3318:	60 95       	com	r22
    331a:	70 95       	com	r23
    331c:	80 95       	com	r24
    331e:	90 95       	com	r25
    3320:	9b 01       	movw	r18, r22
    3322:	ac 01       	movw	r20, r24
    3324:	bd 01       	movw	r22, r26
    3326:	cf 01       	movw	r24, r30
    3328:	08 95       	ret

0000332a <_exit>:
    332a:	f8 94       	cli

0000332c <__stop_program>:
    332c:	ff cf       	rjmp	.-2      	; 0x332c <__stop_program>
