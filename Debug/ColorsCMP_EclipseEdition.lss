
ColorsCMP_EclipseEdition.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b4c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002e6  00800060  00002b4c  00002bc0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002f  00800346  00002e32  00002ea6  2**0
                  ALLOC
  3 .stab         00005088  00000000  00000000  00002ea8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001a89  00000000  00000000  00007f30  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 0a 02 	jmp	0x414	; 0x414 <__ctors_end>
       4:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
       8:	0c 94 71 08 	jmp	0x10e2	; 0x10e2 <__vector_2>
       c:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      10:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      14:	0c 94 36 08 	jmp	0x106c	; 0x106c <__vector_5>
      18:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      1c:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      20:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      24:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      28:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      2c:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      30:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      34:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      38:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      3c:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      40:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      44:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      48:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      4c:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      50:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>

00000054 <FontLookup>:
      54:	00 00 00 00 00 00 00 2f 00 00 00 07 00 07 00 14     ......./........
      64:	7f 14 7f 14 24 2a 7f 2a 12 c4 c8 10 26 46 36 49     ....$*.*....&F6I
      74:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
      84:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 00 50 30     ....>....>....P0
      94:	00 10 10 10 10 10 00 60 60 00 00 20 10 08 04 02     .......``.. ....
      a4:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
      b4:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
      c4:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
      d4:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
      e4:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
      f4:	3e 59 65 65 5e 7e 11 11 11 7e 7f 49 49 49 36 3e     >Yee^~...~.III6>
     104:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     114:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     124:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     134:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     144:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     154:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     164:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     174:	08 07 61 51 49 45 43 00 7f 41 41 00 55 2a 55 2a     ..aQIEC..AA.U*U*
     184:	55 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40     U.AA.......@@@@@
     194:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     1a4:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     1b4:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
     1c4:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     1d4:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     1e4:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     1f4:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     204:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     214:	50 3c 44 64 54 4c 44                                P<DdTLD

0000021b <LcdImage_Upper>:
     21b:	ff ff 7f 7f 45 5d 5d 5d 5d 5d 5d 5d 5d 5d 5d 7f     ....E]]]]]]]]]].
     22b:	7f 41 5f 5d 5d 5d 5d 5d 5d 5d 5d 5d 41 7f 7f 41     .A_]]]]]]]]]A..A
     23b:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 7f 7f 41 5f 5d 5d     __________..A_]]
     24b:	5d 5d 5d 5d 5d 5d 5d 41 7f 7f 43 7d 7d 7d 7d 7d     ]]]]]]]A..C}}}}}
     25b:	7d 7d 7d 7d 7f 7f 51 55 55 55 55 55 55 55 55 45     }}}}..QUUUUUUUUE
     26b:	7f 7f ff ff                                         ....

0000026f <LcdImage_Center>:
     26f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     27f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     28f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     29f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     2af:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     2bf:	ff ff ff ff ff ff ff 0c 0c fc fc fc fc fc fc fc     ................
     2cf:	fc fc fc fc fc fc fc fc fc fc fc fc fc fc ff ff     ................
     2df:	ff 0c 0c fc fc fc fc f0 f0 f3 f3 f3 c3 cf cf cf     ................
     2ef:	cf c3 f3 f3 f3 f0 f0 fc fc fc fc 00 00 ff ff ff     ................
     2ff:	00 00 9f 9f 9c 9c 9c 9c 9c 9c 9c 9c 9c 9c 9c 9c     ................
     30f:	9c 9c 9c 9c 80 80 ff ff ff ff ff e0 e0 e7 e7 e7     ................
     31f:	e7 e7 e7 e7 e7 e7 e7 e7 e7 e7 e7 e7 e7 e7 e7 e7     ................
     32f:	e7 e7 ff ff ff e0 e0 ff ff ff ff ff ff ff ff ff     ................
     33f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff e0     ................
     34f:	e0 ff ff ff e0 e0 ff ff ff ff ff ff ff ff ff ff     ................
     35f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     36f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     37f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     38f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     39f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     3af:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................

000003bf <LcdImage_brunql_gmail_com>:
     3bf:	ff ff ff c8 db db c3 ff cb fb fb fb ff cb df df     ................
     3cf:	c3 ff cb fb fb c3 ff cb db db df 03 7f ff c0 ff     ................
     3df:	ff 01 7e 66 5a 5a 42 5a 5e 62 7f ff c7 bb ab ab     ..~fZZBZ^b......
     3ef:	cf ff cb fb c3 fb c3 ff cb db db c3 db ff c2 ff     ................
     3ff:	c0 ff df ff cb db db ff cb db db c3 ff cb fb c3     ................
     40f:	fb c3 ff ff 00                                      .....

00000414 <__ctors_end>:
     414:	11 24       	eor	r1, r1
     416:	1f be       	out	0x3f, r1	; 63
     418:	cf e5       	ldi	r28, 0x5F	; 95
     41a:	d8 e0       	ldi	r29, 0x08	; 8
     41c:	de bf       	out	0x3e, r29	; 62
     41e:	cd bf       	out	0x3d, r28	; 61

00000420 <__do_copy_data>:
     420:	13 e0       	ldi	r17, 0x03	; 3
     422:	a0 e6       	ldi	r26, 0x60	; 96
     424:	b0 e0       	ldi	r27, 0x00	; 0
     426:	ec e4       	ldi	r30, 0x4C	; 76
     428:	fb e2       	ldi	r31, 0x2B	; 43
     42a:	02 c0       	rjmp	.+4      	; 0x430 <.do_copy_data_start>

0000042c <.do_copy_data_loop>:
     42c:	05 90       	lpm	r0, Z+
     42e:	0d 92       	st	X+, r0

00000430 <.do_copy_data_start>:
     430:	a6 34       	cpi	r26, 0x46	; 70
     432:	b1 07       	cpc	r27, r17
     434:	d9 f7       	brne	.-10     	; 0x42c <.do_copy_data_loop>

00000436 <__do_clear_bss>:
     436:	13 e0       	ldi	r17, 0x03	; 3
     438:	a6 e4       	ldi	r26, 0x46	; 70
     43a:	b3 e0       	ldi	r27, 0x03	; 3
     43c:	01 c0       	rjmp	.+2      	; 0x440 <.do_clear_bss_start>

0000043e <.do_clear_bss_loop>:
     43e:	1d 92       	st	X+, r1

00000440 <.do_clear_bss_start>:
     440:	a5 37       	cpi	r26, 0x75	; 117
     442:	b1 07       	cpc	r27, r17
     444:	e1 f7       	brne	.-8      	; 0x43e <.do_clear_bss_loop>
     446:	0e 94 92 06 	call	0xd24	; 0xd24 <main>
     44a:	0c 94 a4 15 	jmp	0x2b48	; 0x2b48 <_exit>

0000044e <__bad_interrupt>:
     44e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000452 <snakegame_InitSnake>:
//================================================//


void snakegame_InitSnake(void)
{
	snake_add_index = SNAKE_START_LEN; // start length of snake
     452:	86 e0       	ldi	r24, 0x06	; 6
     454:	80 93 48 03 	sts	0x0348, r24
	score = (uwin_times<<4) | (snake_add_index - SNAKE_START_LEN);
     458:	80 91 46 03 	lds	r24, 0x0346
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	24 e0       	ldi	r18, 0x04	; 4
     460:	88 0f       	add	r24, r24
     462:	99 1f       	adc	r25, r25
     464:	2a 95       	dec	r18
     466:	e1 f7       	brne	.-8      	; 0x460 <snakegame_InitSnake+0xe>
     468:	80 93 47 03 	sts	0x0347, r24
     46c:	e5 ea       	ldi	r30, 0xA5	; 165
     46e:	f0 e0       	ldi	r31, 0x00	; 0
     470:	88 e2       	ldi	r24, 0x28	; 40
	for(uint8_t i=0; i<SNAKE_LEN; i++){
		snake[i].y = 20;
     472:	24 e1       	ldi	r18, 0x14	; 20
		snake[i].x = 40 - i;
		snake[i].direction = RIGHT;
     474:	92 e0       	ldi	r25, 0x02	; 2
void snakegame_InitSnake(void)
{
	snake_add_index = SNAKE_START_LEN; // start length of snake
	score = (uwin_times<<4) | (snake_add_index - SNAKE_START_LEN);
	for(uint8_t i=0; i<SNAKE_LEN; i++){
		snake[i].y = 20;
     476:	21 83       	std	Z+1, r18	; 0x01
		snake[i].x = 40 - i;
     478:	80 83       	st	Z, r24
		snake[i].direction = RIGHT;
     47a:	92 83       	std	Z+2, r25	; 0x02
     47c:	33 96       	adiw	r30, 0x03	; 3
     47e:	81 50       	subi	r24, 0x01	; 1

void snakegame_InitSnake(void)
{
	snake_add_index = SNAKE_START_LEN; // start length of snake
	score = (uwin_times<<4) | (snake_add_index - SNAKE_START_LEN);
	for(uint8_t i=0; i<SNAKE_LEN; i++){
     480:	8e 31       	cpi	r24, 0x1E	; 30
     482:	c9 f7       	brne	.-14     	; 0x476 <snakegame_InitSnake+0x24>
		snake[i].y = 20;
		snake[i].x = 40 - i;
		snake[i].direction = RIGHT;
	}
}
     484:	08 95       	ret

00000486 <SnakeGame_Stop>:
}

void SnakeGame_Stop(void)
{
	// show results and go to main menu
}
     486:	08 95       	ret

00000488 <SnakeGame_TurnLeft>:


void SnakeGame_TurnLeft(void)
{
	// directions mb: UP = 1, RIGHT = 2, DOWN = 3, LEFT = 4
	if( --snake[0].direction == 0){
     488:	80 91 a7 00 	lds	r24, 0x00A7
     48c:	81 50       	subi	r24, 0x01	; 1
     48e:	80 93 a7 00 	sts	0x00A7, r24
     492:	88 23       	and	r24, r24
     494:	19 f4       	brne	.+6      	; 0x49c <SnakeGame_TurnLeft+0x14>
		snake[0].direction = LEFT;
     496:	84 e0       	ldi	r24, 0x04	; 4
     498:	80 93 a7 00 	sts	0x00A7, r24
     49c:	08 95       	ret

0000049e <SnakeGame_TurnRight>:
	}
}

void SnakeGame_TurnRight(void)
{
	if( ++snake[0].direction == 5){
     49e:	80 91 a7 00 	lds	r24, 0x00A7
     4a2:	8f 5f       	subi	r24, 0xFF	; 255
     4a4:	80 93 a7 00 	sts	0x00A7, r24
     4a8:	85 30       	cpi	r24, 0x05	; 5
     4aa:	19 f4       	brne	.+6      	; 0x4b2 <SnakeGame_TurnRight+0x14>
		snake[0].direction = UP;
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	80 93 a7 00 	sts	0x00A7, r24
     4b2:	08 95       	ret

000004b4 <SnakeGame_AddmeUpdateXY>:
}


void SnakeGame_AddmeUpdateXY(void)
{
	addme_x = 60;//rand() % 82 + 1;
     4b4:	8c e3       	ldi	r24, 0x3C	; 60
     4b6:	80 93 a3 00 	sts	0x00A3, r24
	addme_y = 20;//rand() % 31 + 9;
     4ba:	84 e1       	ldi	r24, 0x14	; 20
     4bc:	80 93 a4 00 	sts	0x00A4, r24
}
     4c0:	08 95       	ret

000004c2 <snakegame_DirectionStep>:
//
//	snake_add_index++; // don't forget to update index
//}

void snakegame_DirectionStep(point *p_snake)
{
     4c2:	fc 01       	movw	r30, r24
	switch(p_snake->direction)
     4c4:	92 81       	ldd	r25, Z+2	; 0x02
     4c6:	92 30       	cpi	r25, 0x02	; 2
     4c8:	09 f1       	breq	.+66     	; 0x50c <snakegame_DirectionStep+0x4a>
     4ca:	93 30       	cpi	r25, 0x03	; 3
     4cc:	18 f4       	brcc	.+6      	; 0x4d4 <snakegame_DirectionStep+0x12>
     4ce:	91 30       	cpi	r25, 0x01	; 1
     4d0:	21 f5       	brne	.+72     	; 0x51a <snakegame_DirectionStep+0x58>
     4d2:	05 c0       	rjmp	.+10     	; 0x4de <snakegame_DirectionStep+0x1c>
     4d4:	93 30       	cpi	r25, 0x03	; 3
     4d6:	51 f0       	breq	.+20     	; 0x4ec <snakegame_DirectionStep+0x2a>
     4d8:	94 30       	cpi	r25, 0x04	; 4
     4da:	f9 f4       	brne	.+62     	; 0x51a <snakegame_DirectionStep+0x58>
     4dc:	0f c0       	rjmp	.+30     	; 0x4fc <snakegame_DirectionStep+0x3a>
	{
		case UP:
			if(--p_snake->y < 9) 	p_snake->y = 38;
     4de:	81 81       	ldd	r24, Z+1	; 0x01
     4e0:	81 50       	subi	r24, 0x01	; 1
     4e2:	81 83       	std	Z+1, r24	; 0x01
     4e4:	89 30       	cpi	r24, 0x09	; 9
     4e6:	f0 f4       	brcc	.+60     	; 0x524 <snakegame_DirectionStep+0x62>
     4e8:	86 e2       	ldi	r24, 0x26	; 38
     4ea:	06 c0       	rjmp	.+12     	; 0x4f8 <snakegame_DirectionStep+0x36>
			break;
		case DOWN:
			if(++p_snake->y > 38) 	p_snake->y = 9;
     4ec:	81 81       	ldd	r24, Z+1	; 0x01
     4ee:	8f 5f       	subi	r24, 0xFF	; 255
     4f0:	81 83       	std	Z+1, r24	; 0x01
     4f2:	87 32       	cpi	r24, 0x27	; 39
     4f4:	b8 f0       	brcs	.+46     	; 0x524 <snakegame_DirectionStep+0x62>
     4f6:	89 e0       	ldi	r24, 0x09	; 9
     4f8:	81 83       	std	Z+1, r24	; 0x01
     4fa:	08 95       	ret
			break;
		case LEFT:
			if(--p_snake->x < 2) 	p_snake->x = 82;
     4fc:	80 81       	ld	r24, Z
     4fe:	81 50       	subi	r24, 0x01	; 1
     500:	80 83       	st	Z, r24
     502:	82 30       	cpi	r24, 0x02	; 2
     504:	78 f4       	brcc	.+30     	; 0x524 <snakegame_DirectionStep+0x62>
     506:	82 e5       	ldi	r24, 0x52	; 82
     508:	80 83       	st	Z, r24
     50a:	08 95       	ret
			break;
		case RIGHT:
			if(++p_snake->x > 81) 	p_snake->x = 2;
     50c:	80 81       	ld	r24, Z
     50e:	8f 5f       	subi	r24, 0xFF	; 255
     510:	80 83       	st	Z, r24
     512:	82 35       	cpi	r24, 0x52	; 82
     514:	38 f0       	brcs	.+14     	; 0x524 <snakegame_DirectionStep+0x62>
     516:	90 83       	st	Z, r25
     518:	08 95       	ret
			break;
		default: // error
			p_snake->x = 0;
     51a:	10 82       	st	Z, r1
			p_snake->y = 17;
     51c:	81 e1       	ldi	r24, 0x11	; 17
     51e:	81 83       	std	Z+1, r24	; 0x01
			p_snake->direction = RIGHT;
     520:	82 e0       	ldi	r24, 0x02	; 2
     522:	82 83       	std	Z+2, r24	; 0x02
     524:	08 95       	ret

00000526 <snakegame_UpdateDisplay>:




void snakegame_UpdateDisplay(void)
{
     526:	2f 92       	push	r2
     528:	3f 92       	push	r3
     52a:	4f 92       	push	r4
     52c:	5f 92       	push	r5
     52e:	6f 92       	push	r6
     530:	7f 92       	push	r7
     532:	8f 92       	push	r8
     534:	9f 92       	push	r9
     536:	af 92       	push	r10
     538:	bf 92       	push	r11
     53a:	cf 92       	push	r12
     53c:	df 92       	push	r13
     53e:	ef 92       	push	r14
     540:	ff 92       	push	r15
     542:	0f 93       	push	r16
     544:	1f 93       	push	r17
     546:	cf 93       	push	r28
     548:	df 93       	push	r29
	Lcd3310_ClearCenter();
     54a:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <Lcd3310_ClearCenter>

	Lcd3310_GotoXY(0, 5);
     54e:	80 e0       	ldi	r24, 0x00	; 0
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	65 e0       	ldi	r22, 0x05	; 5
     554:	70 e0       	ldi	r23, 0x00	; 0
     556:	0e 94 c6 0a 	call	0x158c	; 0x158c <Lcd3310_GotoXY>
	Lcd3310_String_P(score_str, WHITE_TEXT_ON_BLACK);
     55a:	80 91 75 00 	lds	r24, 0x0075
     55e:	90 91 76 00 	lds	r25, 0x0076
     562:	61 e0       	ldi	r22, 0x01	; 1
     564:	0e 94 c5 09 	call	0x138a	; 0x138a <Lcd3310_String_P>
	Lcd3310_UInt8AsText(score, WHITE_TEXT_ON_BLACK);
     568:	80 91 47 03 	lds	r24, 0x0347
     56c:	61 e0       	ldi	r22, 0x01	; 1
     56e:	0e 94 00 0c 	call	0x1800	; 0x1800 <Lcd3310_UInt8AsText>
	//Lcd3310_UInt8AsText(snake[0].y, WHITE_TEXT_ON_BLACK);

	uint16_t lcd_index = 0x00;

	// eval values for addme pixel show
	uint8_t addme_line = (uint8_t)addme_y / 8;
     572:	20 91 a4 00 	lds	r18, 0x00A4
     576:	82 2e       	mov	r8, r18
     578:	86 94       	lsr	r8
     57a:	86 94       	lsr	r8
     57c:	86 94       	lsr	r8
	uint8_t addme_display_byte = 1 << ((uint8_t)addme_y % 8);
     57e:	27 70       	andi	r18, 0x07	; 7
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	98 2e       	mov	r9, r24
     586:	01 c0       	rjmp	.+2      	; 0x58a <snakegame_UpdateDisplay+0x64>
     588:	99 0c       	add	r9, r9
     58a:	2a 95       	dec	r18
     58c:	ea f7       	brpl	.-6      	; 0x588 <snakegame_UpdateDisplay+0x62>
     58e:	aa 24       	eor	r10, r10
	for(uint8_t i=0; i < snake_add_index; i++)
	{
		// GotoXY
		// Eval number of line (mb: 1..5) in display for display_byte
		uint8_t line = (uint8_t) (snake[i].y) / 8;
		lcd_index = (uint16_t) (snake[i].x) + (uint16_t)line * 84;
     590:	64 e5       	ldi	r22, 0x54	; 84
     592:	46 2e       	mov	r4, r22
		Lcd3310_Send( 0x80 | ((uint16_t)lcd_index % LCD_X_RES), LCD_CMD );
		Lcd3310_Send( 0x40 | ((uint16_t)lcd_index / LCD_X_RES), LCD_CMD );

		// Make sendme byte with all point in this display byte
		// Init with snake[i] point
		uint8_t display_byte = 1 << ((uint8_t)snake[i].y % 8);
     594:	51 e0       	ldi	r21, 0x01	; 1
     596:	65 2e       	mov	r6, r21
     598:	71 2c       	mov	r7, r1
		// Find all point near here (in this display byte)
		for(uint8_t j=0; j<snake_add_index; j++)
     59a:	43 e0       	ldi	r20, 0x03	; 3
     59c:	54 2e       	mov	r5, r20
     59e:	67 c0       	rjmp	.+206    	; 0x66e <snakegame_UpdateDisplay+0x148>
	// Lets draw each point in snake to our lcd.
	for(uint8_t i=0; i < snake_add_index; i++)
	{
		// GotoXY
		// Eval number of line (mb: 1..5) in display for display_byte
		uint8_t line = (uint8_t) (snake[i].y) / 8;
     5a0:	2a 2c       	mov	r2, r10
     5a2:	33 24       	eor	r3, r3
     5a4:	61 01       	movw	r12, r2
     5a6:	cc 0c       	add	r12, r12
     5a8:	dd 1c       	adc	r13, r13
     5aa:	76 01       	movw	r14, r12
     5ac:	e2 0c       	add	r14, r2
     5ae:	f3 1c       	adc	r15, r3
     5b0:	85 ea       	ldi	r24, 0xA5	; 165
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	e8 0e       	add	r14, r24
     5b6:	f9 1e       	adc	r15, r25
     5b8:	e7 01       	movw	r28, r14
     5ba:	b9 80       	ldd	r11, Y+1	; 0x01
     5bc:	b6 94       	lsr	r11
     5be:	b6 94       	lsr	r11
     5c0:	b6 94       	lsr	r11
		lcd_index = (uint16_t) (snake[i].x) + (uint16_t)line * 84;
     5c2:	b4 9c       	mul	r11, r4
     5c4:	80 01       	movw	r16, r0
     5c6:	11 24       	eor	r1, r1
     5c8:	88 81       	ld	r24, Y
     5ca:	08 0f       	add	r16, r24
     5cc:	11 1d       	adc	r17, r1
		Lcd3310_Send( 0x80 | ((uint16_t)lcd_index % LCD_X_RES), LCD_CMD );
     5ce:	c8 01       	movw	r24, r16
     5d0:	64 e5       	ldi	r22, 0x54	; 84
     5d2:	70 e0       	ldi	r23, 0x00	; 0
     5d4:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <__udivmodhi4>
     5d8:	80 68       	ori	r24, 0x80	; 128
     5da:	60 e0       	ldi	r22, 0x00	; 0
     5dc:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <Lcd3310_Send>
		Lcd3310_Send( 0x40 | ((uint16_t)lcd_index / LCD_X_RES), LCD_CMD );
     5e0:	c8 01       	movw	r24, r16
     5e2:	64 e5       	ldi	r22, 0x54	; 84
     5e4:	70 e0       	ldi	r23, 0x00	; 0
     5e6:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <__udivmodhi4>
     5ea:	86 2f       	mov	r24, r22
     5ec:	80 64       	ori	r24, 0x40	; 64
     5ee:	60 e0       	ldi	r22, 0x00	; 0
     5f0:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <Lcd3310_Send>

		// Make sendme byte with all point in this display byte
		// Init with snake[i] point
		uint8_t display_byte = 1 << ((uint8_t)snake[i].y % 8);
     5f4:	89 81       	ldd	r24, Y+1	; 0x01
     5f6:	87 70       	andi	r24, 0x07	; 7
     5f8:	36 2d       	mov	r19, r6
     5fa:	01 c0       	rjmp	.+2      	; 0x5fe <snakegame_UpdateDisplay+0xd8>
     5fc:	33 0f       	add	r19, r19
     5fe:	8a 95       	dec	r24
     600:	ea f7       	brpl	.-6      	; 0x5fc <snakegame_UpdateDisplay+0xd6>
		// Find all point near here (in this display byte)
		for(uint8_t j=0; j<snake_add_index; j++)
     602:	80 91 48 03 	lds	r24, 0x0348
     606:	e5 ea       	ldi	r30, 0xA5	; 165
     608:	f0 e0       	ldi	r31, 0x00	; 0
     60a:	85 9d       	mul	r24, r5
     60c:	a0 01       	movw	r20, r0
     60e:	11 24       	eor	r1, r1
     610:	4e 0f       	add	r20, r30
     612:	5f 1f       	adc	r21, r31
     614:	d6 01       	movw	r26, r12
		{
			uint8_t line_find = (uint8_t)snake[j].y / 8;
			if(snake[i].x == snake[j].x && line == line_find){
     616:	b7 01       	movw	r22, r14
     618:	15 c0       	rjmp	.+42     	; 0x644 <snakegame_UpdateDisplay+0x11e>
		// Init with snake[i] point
		uint8_t display_byte = 1 << ((uint8_t)snake[i].y % 8);
		// Find all point near here (in this display byte)
		for(uint8_t j=0; j<snake_add_index; j++)
		{
			uint8_t line_find = (uint8_t)snake[j].y / 8;
     61a:	21 81       	ldd	r18, Z+1	; 0x01
			if(snake[i].x == snake[j].x && line == line_find){
     61c:	eb 01       	movw	r28, r22
     61e:	98 81       	ld	r25, Y
     620:	80 81       	ld	r24, Z
     622:	98 17       	cp	r25, r24
     624:	71 f4       	brne	.+28     	; 0x642 <snakegame_UpdateDisplay+0x11c>
     626:	82 2f       	mov	r24, r18
     628:	86 95       	lsr	r24
     62a:	86 95       	lsr	r24
     62c:	86 95       	lsr	r24
     62e:	b8 16       	cp	r11, r24
     630:	41 f4       	brne	.+16     	; 0x642 <snakegame_UpdateDisplay+0x11c>
				display_byte |= 1 << ((uint8_t)snake[j].y % 8);
     632:	27 70       	andi	r18, 0x07	; 7
     634:	c3 01       	movw	r24, r6
     636:	02 c0       	rjmp	.+4      	; 0x63c <snakegame_UpdateDisplay+0x116>
     638:	88 0f       	add	r24, r24
     63a:	99 1f       	adc	r25, r25
     63c:	2a 95       	dec	r18
     63e:	e2 f7       	brpl	.-8      	; 0x638 <snakegame_UpdateDisplay+0x112>
     640:	38 2b       	or	r19, r24
     642:	33 96       	adiw	r30, 0x03	; 3

		// Make sendme byte with all point in this display byte
		// Init with snake[i] point
		uint8_t display_byte = 1 << ((uint8_t)snake[i].y % 8);
		// Find all point near here (in this display byte)
		for(uint8_t j=0; j<snake_add_index; j++)
     644:	e4 17       	cp	r30, r20
     646:	f5 07       	cpc	r31, r21
     648:	41 f7       	brne	.-48     	; 0x61a <snakegame_UpdateDisplay+0xf4>
				display_byte |= 1 << ((uint8_t)snake[j].y % 8);
			}
		}

		// check that snake[i] and addme points are in same display_byte
		if(addme_x == snake[i].x && addme_line == line){
     64a:	a2 0d       	add	r26, r2
     64c:	b3 1d       	adc	r27, r3
     64e:	ab 55       	subi	r26, 0x5B	; 91
     650:	bf 4f       	sbci	r27, 0xFF	; 255
     652:	90 91 a3 00 	lds	r25, 0x00A3
     656:	8c 91       	ld	r24, X
     658:	98 17       	cp	r25, r24
     65a:	21 f4       	brne	.+8      	; 0x664 <snakegame_UpdateDisplay+0x13e>
     65c:	8b 14       	cp	r8, r11
     65e:	11 f4       	brne	.+4      	; 0x664 <snakegame_UpdateDisplay+0x13e>
			display_byte |= addme_display_byte;
     660:	39 29       	or	r19, r9
     662:	99 24       	eor	r9, r9
			addme_display_byte = 0x00; // say that we already draw this point
		}

		Lcd3310_Send( display_byte, LCD_DATA );
     664:	83 2f       	mov	r24, r19
     666:	61 e0       	ldi	r22, 0x01	; 1
     668:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <Lcd3310_Send>
	// eval values for addme pixel show
	uint8_t addme_line = (uint8_t)addme_y / 8;
	uint8_t addme_display_byte = 1 << ((uint8_t)addme_y % 8);

	// Lets draw each point in snake to our lcd.
	for(uint8_t i=0; i < snake_add_index; i++)
     66c:	a3 94       	inc	r10
     66e:	80 91 48 03 	lds	r24, 0x0348
     672:	a8 16       	cp	r10, r24
     674:	08 f4       	brcc	.+2      	; 0x678 <snakegame_UpdateDisplay+0x152>
     676:	94 cf       	rjmp	.-216    	; 0x5a0 <snakegame_UpdateDisplay+0x7a>
		Lcd3310_Send( display_byte, LCD_DATA );
	}


	// if we didn't draw it before lets do it now
	if(addme_display_byte){
     678:	99 20       	and	r9, r9
     67a:	f9 f0       	breq	.+62     	; 0x6ba <snakegame_UpdateDisplay+0x194>
		lcd_index = (uint16_t)addme_x + (uint16_t)addme_line * 84;
     67c:	04 e5       	ldi	r16, 0x54	; 84
     67e:	80 9e       	mul	r8, r16
     680:	80 01       	movw	r16, r0
     682:	11 24       	eor	r1, r1
     684:	80 91 a3 00 	lds	r24, 0x00A3
     688:	08 0f       	add	r16, r24
     68a:	11 1d       	adc	r17, r1
		Lcd3310_Send( 0x80 | (lcd_index % LCD_X_RES), LCD_CMD );
     68c:	c8 01       	movw	r24, r16
     68e:	64 e5       	ldi	r22, 0x54	; 84
     690:	70 e0       	ldi	r23, 0x00	; 0
     692:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <__udivmodhi4>
     696:	80 68       	ori	r24, 0x80	; 128
     698:	60 e0       	ldi	r22, 0x00	; 0
     69a:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <Lcd3310_Send>
		Lcd3310_Send( 0x40 | (lcd_index / LCD_X_RES), LCD_CMD );
     69e:	c8 01       	movw	r24, r16
     6a0:	64 e5       	ldi	r22, 0x54	; 84
     6a2:	70 e0       	ldi	r23, 0x00	; 0
     6a4:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <__udivmodhi4>
     6a8:	86 2f       	mov	r24, r22
     6aa:	80 64       	ori	r24, 0x40	; 64
     6ac:	60 e0       	ldi	r22, 0x00	; 0
     6ae:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <Lcd3310_Send>
		Lcd3310_Send( addme_display_byte, LCD_DATA );
     6b2:	89 2d       	mov	r24, r9
     6b4:	61 e0       	ldi	r22, 0x01	; 1
     6b6:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <Lcd3310_Send>
	}
}
     6ba:	df 91       	pop	r29
     6bc:	cf 91       	pop	r28
     6be:	1f 91       	pop	r17
     6c0:	0f 91       	pop	r16
     6c2:	ff 90       	pop	r15
     6c4:	ef 90       	pop	r14
     6c6:	df 90       	pop	r13
     6c8:	cf 90       	pop	r12
     6ca:	bf 90       	pop	r11
     6cc:	af 90       	pop	r10
     6ce:	9f 90       	pop	r9
     6d0:	8f 90       	pop	r8
     6d2:	7f 90       	pop	r7
     6d4:	6f 90       	pop	r6
     6d6:	5f 90       	pop	r5
     6d8:	4f 90       	pop	r4
     6da:	3f 90       	pop	r3
     6dc:	2f 90       	pop	r2
     6de:	08 95       	ret

000006e0 <SnakeGame_Start>:
}


void SnakeGame_AddmeUpdateXY(void)
{
	addme_x = 60;//rand() % 82 + 1;
     6e0:	8c e3       	ldi	r24, 0x3C	; 60
     6e2:	80 93 a3 00 	sts	0x00A3, r24
	addme_y = 20;//rand() % 31 + 9;
     6e6:	84 e1       	ldi	r24, 0x14	; 20
     6e8:	80 93 a4 00 	sts	0x00A4, r24
//================================================//


void snakegame_InitSnake(void)
{
	snake_add_index = SNAKE_START_LEN; // start length of snake
     6ec:	86 e0       	ldi	r24, 0x06	; 6
     6ee:	80 93 48 03 	sts	0x0348, r24
	score = (uwin_times<<4) | (snake_add_index - SNAKE_START_LEN);
     6f2:	80 91 46 03 	lds	r24, 0x0346
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	74 e0       	ldi	r23, 0x04	; 4
     6fa:	88 0f       	add	r24, r24
     6fc:	99 1f       	adc	r25, r25
     6fe:	7a 95       	dec	r23
     700:	e1 f7       	brne	.-8      	; 0x6fa <SnakeGame_Start+0x1a>
     702:	80 93 47 03 	sts	0x0347, r24
     706:	e5 ea       	ldi	r30, 0xA5	; 165
     708:	f0 e0       	ldi	r31, 0x00	; 0
     70a:	88 e2       	ldi	r24, 0x28	; 40
	for(uint8_t i=0; i<SNAKE_LEN; i++){
		snake[i].y = 20;
     70c:	24 e1       	ldi	r18, 0x14	; 20
		snake[i].x = 40 - i;
		snake[i].direction = RIGHT;
     70e:	92 e0       	ldi	r25, 0x02	; 2
void snakegame_InitSnake(void)
{
	snake_add_index = SNAKE_START_LEN; // start length of snake
	score = (uwin_times<<4) | (snake_add_index - SNAKE_START_LEN);
	for(uint8_t i=0; i<SNAKE_LEN; i++){
		snake[i].y = 20;
     710:	21 83       	std	Z+1, r18	; 0x01
		snake[i].x = 40 - i;
     712:	80 83       	st	Z, r24
		snake[i].direction = RIGHT;
     714:	92 83       	std	Z+2, r25	; 0x02
     716:	33 96       	adiw	r30, 0x03	; 3
     718:	81 50       	subi	r24, 0x01	; 1

void snakegame_InitSnake(void)
{
	snake_add_index = SNAKE_START_LEN; // start length of snake
	score = (uwin_times<<4) | (snake_add_index - SNAKE_START_LEN);
	for(uint8_t i=0; i<SNAKE_LEN; i++){
     71a:	8e 31       	cpi	r24, 0x1E	; 30
     71c:	c9 f7       	brne	.-14     	; 0x710 <SnakeGame_Start+0x30>

void SnakeGame_Start(void)
{
	SnakeGame_AddmeUpdateXY();
	snakegame_InitSnake();
	snakegame_UpdateDisplay();
     71e:	0e 94 93 02 	call	0x526	; 0x526 <snakegame_UpdateDisplay>
}
     722:	08 95       	ret

00000724 <SnakeGame_TakeNextStep>:
{
	// show results and go to main menu
}

void SnakeGame_TakeNextStep(void)
{
     724:	cf 93       	push	r28
     726:	df 93       	push	r29
     728:	c5 ea       	ldi	r28, 0xA5	; 165
     72a:	d0 e0       	ldi	r29, 0x00	; 0

	// Lets go somethere:
	for(uint8_t i=0; i < SNAKE_LEN; i++)
	{
		snakegame_DirectionStep(&snake[i]);
     72c:	ce 01       	movw	r24, r28
     72e:	0e 94 61 02 	call	0x4c2	; 0x4c2 <snakegame_DirectionStep>
     732:	23 96       	adiw	r28, 0x03	; 3

void SnakeGame_TakeNextStep(void)
{

	// Lets go somethere:
	for(uint8_t i=0; i < SNAKE_LEN; i++)
     734:	80 e0       	ldi	r24, 0x00	; 0
     736:	c3 3c       	cpi	r28, 0xC3	; 195
     738:	d8 07       	cpc	r29, r24
     73a:	c1 f7       	brne	.-16     	; 0x72c <SnakeGame_TakeNextStep+0x8>
     73c:	89 e0       	ldi	r24, 0x09	; 9
     73e:	14 c0       	rjmp	.+40     	; 0x768 <SnakeGame_TakeNextStep+0x44>
	}

	// Update direction of each point from last to first
	for(uint8_t i = SNAKE_LEN-1; i != 0 && i < SNAKE_LEN; i--)
	{
		snake[i].direction = snake[i-1].direction;
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	dc 01       	movw	r26, r24
     744:	aa 0f       	add	r26, r26
     746:	bb 1f       	adc	r27, r27
     748:	a8 0f       	add	r26, r24
     74a:	b9 1f       	adc	r27, r25
     74c:	ab 55       	subi	r26, 0x5B	; 91
     74e:	bf 4f       	sbci	r27, 0xFF	; 255
     750:	01 97       	sbiw	r24, 0x01	; 1
     752:	fc 01       	movw	r30, r24
     754:	ee 0f       	add	r30, r30
     756:	ff 1f       	adc	r31, r31
     758:	e8 0f       	add	r30, r24
     75a:	f9 1f       	adc	r31, r25
     75c:	eb 55       	subi	r30, 0x5B	; 91
     75e:	ff 4f       	sbci	r31, 0xFF	; 255
     760:	82 81       	ldd	r24, Z+2	; 0x02
     762:	12 96       	adiw	r26, 0x02	; 2
     764:	8c 93       	st	X, r24
     766:	82 2f       	mov	r24, r18
	{
		snakegame_DirectionStep(&snake[i]);
	}

	// Update direction of each point from last to first
	for(uint8_t i = SNAKE_LEN-1; i != 0 && i < SNAKE_LEN; i--)
     768:	28 2f       	mov	r18, r24
     76a:	21 50       	subi	r18, 0x01	; 1
     76c:	48 f7       	brcc	.-46     	; 0x740 <SnakeGame_TakeNextStep+0x1c>
	{
		snake[i].direction = snake[i-1].direction;
	}

	// Check if we come to addme point
	if(snake[0].x == addme_x && snake[0].y == addme_y){
     76e:	90 91 a5 00 	lds	r25, 0x00A5
     772:	80 91 a3 00 	lds	r24, 0x00A3
     776:	98 17       	cp	r25, r24
     778:	09 f0       	breq	.+2      	; 0x77c <SnakeGame_TakeNextStep+0x58>
     77a:	9c c0       	rjmp	.+312    	; 0x8b4 <__stack+0x55>
     77c:	90 91 a6 00 	lds	r25, 0x00A6
     780:	80 91 a4 00 	lds	r24, 0x00A4
     784:	98 17       	cp	r25, r24
     786:	09 f0       	breq	.+2      	; 0x78a <SnakeGame_TakeNextStep+0x66>
     788:	95 c0       	rjmp	.+298    	; 0x8b4 <__stack+0x55>
		snake_add_index += 2; // add snake point
     78a:	80 91 48 03 	lds	r24, 0x0348
     78e:	28 2f       	mov	r18, r24
     790:	2e 5f       	subi	r18, 0xFE	; 254
     792:	20 93 48 03 	sts	0x0348, r18
		score = (uwin_times<<4) | (snake_add_index - SNAKE_START_LEN);
     796:	84 50       	subi	r24, 0x04	; 4
     798:	90 91 46 03 	lds	r25, 0x0346
     79c:	92 95       	swap	r25
     79e:	90 7f       	andi	r25, 0xF0	; 240
     7a0:	98 2b       	or	r25, r24
     7a2:	90 93 47 03 	sts	0x0347, r25
		if(snake_add_index >= SNAKE_LEN){
     7a6:	2a 30       	cpi	r18, 0x0A	; 10
     7a8:	08 f4       	brcc	.+2      	; 0x7ac <SnakeGame_TakeNextStep+0x88>
     7aa:	84 c0       	rjmp	.+264    	; 0x8b4 <__stack+0x55>
			Lcd3310_ClearCenter();
     7ac:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <Lcd3310_ClearCenter>
			uwin_times++;
     7b0:	80 91 46 03 	lds	r24, 0x0346
     7b4:	8f 5f       	subi	r24, 0xFF	; 255
     7b6:	80 93 46 03 	sts	0x0346, r24
			if(uwin_times >= 1){
     7ba:	88 23       	and	r24, r24
     7bc:	b1 f1       	breq	.+108    	; 0x82a <SnakeGame_TakeNextStep+0x106>
				uwin_times = 0x00;
     7be:	10 92 46 03 	sts	0x0346, r1
				Lcd3310_GotoXY(3, 2);
     7c2:	83 e0       	ldi	r24, 0x03	; 3
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	62 e0       	ldi	r22, 0x02	; 2
     7c8:	70 e0       	ldi	r23, 0x00	; 0
     7ca:	0e 94 c6 0a 	call	0x158c	; 0x158c <Lcd3310_GotoXY>
				Lcd3310_String_P(got_fun_str, BLACK_TEXT_ON_WHITE);
     7ce:	80 91 8b 00 	lds	r24, 0x008B
     7d2:	90 91 8c 00 	lds	r25, 0x008C
     7d6:	60 e0       	ldi	r22, 0x00	; 0
     7d8:	0e 94 c5 09 	call	0x138a	; 0x138a <Lcd3310_String_P>
				Lcd3310_GotoXY(3, 3);
     7dc:	83 e0       	ldi	r24, 0x03	; 3
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	63 e0       	ldi	r22, 0x03	; 3
     7e2:	70 e0       	ldi	r23, 0x00	; 0
     7e4:	0e 94 c6 0a 	call	0x158c	; 0x158c <Lcd3310_GotoXY>
				Lcd3310_String_P(go_work_str, BLACK_TEXT_ON_WHITE);
     7e8:	80 91 96 00 	lds	r24, 0x0096
     7ec:	90 91 97 00 	lds	r25, 0x0097
     7f0:	60 e0       	ldi	r22, 0x00	; 0
     7f2:	0e 94 c5 09 	call	0x138a	; 0x138a <Lcd3310_String_P>
				Lcd3310_GotoXY(0, 5);
     7f6:	80 e0       	ldi	r24, 0x00	; 0
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	65 e0       	ldi	r22, 0x05	; 5
     7fc:	70 e0       	ldi	r23, 0x00	; 0
     7fe:	0e 94 c6 0a 	call	0x158c	; 0x158c <Lcd3310_GotoXY>
				Lcd3310_String_P(brunql_str, WHITE_TEXT_ON_BLACK);
     802:	80 91 a0 00 	lds	r24, 0x00A0
     806:	90 91 a1 00 	lds	r25, 0x00A1
     80a:	61 e0       	ldi	r22, 0x01	; 1
     80c:	0e 94 c5 09 	call	0x138a	; 0x138a <Lcd3310_String_P>
				FLAGS_SWITCH_ON( JOYSTICK_CENTER_CLICK_FLAG ); // stop game! go to main menu.
     810:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     812:	f8 94       	cli
     814:	80 91 5f 03 	lds	r24, 0x035F
     818:	90 91 60 03 	lds	r25, 0x0360
     81c:	82 60       	ori	r24, 0x02	; 2
     81e:	90 93 60 03 	sts	0x0360, r25
     822:	80 93 5f 03 	sts	0x035F, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     826:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
     828:	35 c0       	rjmp	.+106    	; 0x894 <__stack+0x35>
			}else{
				Lcd3310_GotoXY(3, 2);
     82a:	83 e0       	ldi	r24, 0x03	; 3
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	62 e0       	ldi	r22, 0x02	; 2
     830:	70 e0       	ldi	r23, 0x00	; 0
     832:	0e 94 c6 0a 	call	0x158c	; 0x158c <Lcd3310_GotoXY>
				Lcd3310_String_P(uwin_str, BLACK_TEXT_ON_WHITE);
     836:	80 91 69 00 	lds	r24, 0x0069
     83a:	90 91 6a 00 	lds	r25, 0x006A
     83e:	60 e0       	ldi	r22, 0x00	; 0
     840:	0e 94 c5 09 	call	0x138a	; 0x138a <Lcd3310_String_P>
				Lcd3310_GotoXY(2, 3);
     844:	82 e0       	ldi	r24, 0x02	; 2
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	63 e0       	ldi	r22, 0x03	; 3
     84a:	70 e0       	ldi	r23, 0x00	; 0
     84c:	0e 94 c6 0a 	call	0x158c	; 0x158c <Lcd3310_GotoXY>
				Lcd3310_String_P(level_str, BLACK_TEXT_ON_WHITE);
     850:	80 91 80 00 	lds	r24, 0x0080
     854:	90 91 81 00 	lds	r25, 0x0081
     858:	60 e0       	ldi	r22, 0x00	; 0
     85a:	0e 94 c5 09 	call	0x138a	; 0x138a <Lcd3310_String_P>
				Lcd3310_UInt8AsText(uwin_times, BLACK_TEXT_ON_WHITE);
     85e:	80 91 46 03 	lds	r24, 0x0346
     862:	60 e0       	ldi	r22, 0x00	; 0
     864:	0e 94 00 0c 	call	0x1800	; 0x1800 <Lcd3310_UInt8AsText>
				Lcd3310_GotoXY(0, 5);
     868:	80 e0       	ldi	r24, 0x00	; 0
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	65 e0       	ldi	r22, 0x05	; 5
     86e:	70 e0       	ldi	r23, 0x00	; 0
     870:	0e 94 c6 0a 	call	0x158c	; 0x158c <Lcd3310_GotoXY>
				Lcd3310_String_P(score_str, WHITE_TEXT_ON_BLACK);
     874:	80 91 75 00 	lds	r24, 0x0075
     878:	90 91 76 00 	lds	r25, 0x0076
     87c:	61 e0       	ldi	r22, 0x01	; 1
     87e:	0e 94 c5 09 	call	0x138a	; 0x138a <Lcd3310_String_P>
				Lcd3310_UInt8AsText(score, WHITE_TEXT_ON_BLACK);
     882:	80 91 47 03 	lds	r24, 0x0347
     886:	61 e0       	ldi	r22, 0x01	; 1
     888:	0e 94 00 0c 	call	0x1800	; 0x1800 <Lcd3310_UInt8AsText>
				Lcd3310_Char(' ', WHITE_TEXT_ON_BLACK);
     88c:	80 e2       	ldi	r24, 0x20	; 32
     88e:	61 e0       	ldi	r22, 0x01	; 1
     890:	0e 94 74 09 	call	0x12e8	; 0x12e8 <Lcd3310_Char>
			}
			while(JOYSTICK_INT_CHECK());
     894:	83 99       	sbic	0x10, 3	; 16
     896:	fe cf       	rjmp	.-4      	; 0x894 <__stack+0x35>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     898:	80 e4       	ldi	r24, 0x40	; 64
     89a:	9f e1       	ldi	r25, 0x1F	; 31
     89c:	01 97       	sbiw	r24, 0x01	; 1
     89e:	f1 f7       	brne	.-4      	; 0x89c <__stack+0x3d>
			_delay_ms(2);
			GIFR = _BV(INTF1);
     8a0:	80 e8       	ldi	r24, 0x80	; 128
     8a2:	8a bf       	out	0x3a, r24	; 58

			score = (uwin_times<<4);
     8a4:	80 91 46 03 	lds	r24, 0x0346
     8a8:	82 95       	swap	r24
     8aa:	80 7f       	andi	r24, 0xF0	; 240
     8ac:	80 93 47 03 	sts	0x0347, r24
			SnakeGame_Start();
     8b0:	0e 94 70 03 	call	0x6e0	; 0x6e0 <SnakeGame_Start>
		}
	}

	snakegame_UpdateDisplay();
     8b4:	0e 94 93 02 	call	0x526	; 0x526 <snakegame_UpdateDisplay>
}
     8b8:	df 91       	pop	r29
     8ba:	cf 91       	pop	r28
     8bc:	08 95       	ret

000008be <hex2dec_result>:
PGM_P pstr_complete = "Done!";
PGM_P pstr_please_wait = "Please wait...";


void hex2dec_result(uint16_t hex, uint8_t result_index, uint8_t result_color)
{
     8be:	cf 92       	push	r12
     8c0:	df 92       	push	r13
     8c2:	ef 92       	push	r14
     8c4:	ff 92       	push	r15
     8c6:	0f 93       	push	r16
     8c8:	1f 93       	push	r17
     8ca:	7c 01       	movw	r14, r24
     8cc:	26 2f       	mov	r18, r22
	uint8_t res2, res1, res0;
	res0 =  hex % 10;
	hex /= 10;
     8ce:	6a e0       	ldi	r22, 0x0A	; 10
     8d0:	70 e0       	ldi	r23, 0x00	; 0
     8d2:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <__udivmodhi4>
     8d6:	d6 2e       	mov	r13, r22
     8d8:	c7 2e       	mov	r12, r23
	hex /= 10;
	res2 = hex % 10;

	uint16_t dec_result = (res2 << 8) | (res1 << 4)| res0;

	result[result_index][result_color] = dec_result;
     8da:	30 e0       	ldi	r19, 0x00	; 0
     8dc:	89 01       	movw	r16, r18
     8de:	00 0f       	add	r16, r16
     8e0:	11 1f       	adc	r17, r17
     8e2:	02 0f       	add	r16, r18
     8e4:	13 1f       	adc	r17, r19
     8e6:	04 0f       	add	r16, r20
     8e8:	11 1d       	adc	r17, r1
     8ea:	00 0f       	add	r16, r16
     8ec:	11 1f       	adc	r17, r17
     8ee:	07 5b       	subi	r16, 0xB7	; 183
     8f0:	1c 4f       	sbci	r17, 0xFC	; 252
     8f2:	86 2f       	mov	r24, r22
     8f4:	97 2f       	mov	r25, r23
     8f6:	6a e0       	ldi	r22, 0x0A	; 10
     8f8:	70 e0       	ldi	r23, 0x00	; 0
     8fa:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <__udivmodhi4>
     8fe:	e8 2f       	mov	r30, r24
     900:	f0 e0       	ldi	r31, 0x00	; 0
     902:	84 e0       	ldi	r24, 0x04	; 4
     904:	ee 0f       	add	r30, r30
     906:	ff 1f       	adc	r31, r31
     908:	8a 95       	dec	r24
     90a:	e1 f7       	brne	.-8      	; 0x904 <hex2dec_result+0x46>
     90c:	c7 01       	movw	r24, r14
     90e:	6a e0       	ldi	r22, 0x0A	; 10
     910:	70 e0       	ldi	r23, 0x00	; 0
     912:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <__udivmodhi4>
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	e8 2b       	or	r30, r24
     91a:	f9 2b       	or	r31, r25
     91c:	8d 2d       	mov	r24, r13
     91e:	9c 2d       	mov	r25, r12
     920:	6a e0       	ldi	r22, 0x0A	; 10
     922:	70 e0       	ldi	r23, 0x00	; 0
     924:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <__udivmodhi4>
     928:	cb 01       	movw	r24, r22
     92a:	6a e0       	ldi	r22, 0x0A	; 10
     92c:	70 e0       	ldi	r23, 0x00	; 0
     92e:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <__udivmodhi4>
     932:	38 2f       	mov	r19, r24
     934:	20 e0       	ldi	r18, 0x00	; 0
     936:	e2 2b       	or	r30, r18
     938:	f3 2b       	or	r31, r19
     93a:	d8 01       	movw	r26, r16
     93c:	ed 93       	st	X+, r30
     93e:	fc 93       	st	X, r31
}
     940:	1f 91       	pop	r17
     942:	0f 91       	pop	r16
     944:	ff 90       	pop	r15
     946:	ef 90       	pop	r14
     948:	df 90       	pop	r13
     94a:	cf 90       	pop	r12
     94c:	08 95       	ret

0000094e <StartADC>:


void StartADC(FirstOrSecond first)
{
	if (first){
     94e:	88 23       	and	r24, r24
     950:	11 f0       	breq	.+4      	; 0x956 <StartADC+0x8>
		ADMUX &= (unsigned char) ~ _BV(MUX0);
     952:	38 98       	cbi	0x07, 0	; 7
     954:	01 c0       	rjmp	.+2      	; 0x958 <StartADC+0xa>
	}else{ // second
		ADMUX |= _BV(MUX0);
     956:	38 9a       	sbi	0x07, 0	; 7
     958:	88 ec       	ldi	r24, 0xC8	; 200
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	01 97       	sbiw	r24, 0x01	; 1
     95e:	f1 f7       	brne	.-4      	; 0x95c <StartADC+0xe>

	// delay for stabilisation on ADC pin (charge intro reference capacitor)
	// TODO: NEED TEST!
	_delay_us(50);

	ADCSRA |= _BV( ADSC ); // start conversation
     960:	36 9a       	sbi	0x06, 6	; 6
	while( ADC_CONVERT_IN_PROGRESS() ) {  };
     962:	36 99       	sbic	0x06, 6	; 6
     964:	fe cf       	rjmp	.-4      	; 0x962 <StartADC+0x14>
	adc_data = ADC;
     966:	84 b1       	in	r24, 0x04	; 4
     968:	95 b1       	in	r25, 0x05	; 5
     96a:	90 93 65 03 	sts	0x0365, r25
     96e:	80 93 64 03 	sts	0x0364, r24
	//result in adc_data
}
     972:	08 95       	ret

00000974 <GetValuesFromADC>:

void GetValuesFromADC(void) // with simple averaging
{
	uint16_t temp_val = adc_res_first;
     974:	20 91 5b 03 	lds	r18, 0x035B
     978:	30 91 5c 03 	lds	r19, 0x035C
void StartADC(FirstOrSecond first)
{
	if (first){
		ADMUX &= (unsigned char) ~ _BV(MUX0);
	}else{ // second
		ADMUX |= _BV(MUX0);
     97c:	38 9a       	sbi	0x07, 0	; 7
     97e:	88 ec       	ldi	r24, 0xC8	; 200
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	01 97       	sbiw	r24, 0x01	; 1
     984:	f1 f7       	brne	.-4      	; 0x982 <GetValuesFromADC+0xe>

	// delay for stabilisation on ADC pin (charge intro reference capacitor)
	// TODO: NEED TEST!
	_delay_us(50);

	ADCSRA |= _BV( ADSC ); // start conversation
     986:	36 9a       	sbi	0x06, 6	; 6
	while( ADC_CONVERT_IN_PROGRESS() ) {  };
     988:	36 99       	sbic	0x06, 6	; 6
     98a:	fe cf       	rjmp	.-4      	; 0x988 <GetValuesFromADC+0x14>
	adc_data = ADC;
     98c:	84 b1       	in	r24, 0x04	; 4
     98e:	95 b1       	in	r25, 0x05	; 5
     990:	90 93 65 03 	sts	0x0365, r25
     994:	80 93 64 03 	sts	0x0364, r24

void GetValuesFromADC(void) // with simple averaging
{
	uint16_t temp_val = adc_res_first;
	StartADC( FIRST );
	if(temp_val){
     998:	21 15       	cp	r18, r1
     99a:	31 05       	cpc	r19, r1
     99c:	49 f0       	breq	.+18     	; 0x9b0 <GetValuesFromADC+0x3c>
		adc_res_first = (adc_data + temp_val) / 2;
     99e:	80 91 64 03 	lds	r24, 0x0364
     9a2:	90 91 65 03 	lds	r25, 0x0365
     9a6:	82 0f       	add	r24, r18
     9a8:	93 1f       	adc	r25, r19
     9aa:	96 95       	lsr	r25
     9ac:	87 95       	ror	r24
     9ae:	04 c0       	rjmp	.+8      	; 0x9b8 <GetValuesFromADC+0x44>
	}else{
		adc_res_first = adc_data;
     9b0:	80 91 64 03 	lds	r24, 0x0364
     9b4:	90 91 65 03 	lds	r25, 0x0365
     9b8:	90 93 5c 03 	sts	0x035C, r25
     9bc:	80 93 5b 03 	sts	0x035B, r24
	}

	temp_val = adc_res_second;
     9c0:	20 91 5d 03 	lds	r18, 0x035D
     9c4:	30 91 5e 03 	lds	r19, 0x035E


void StartADC(FirstOrSecond first)
{
	if (first){
		ADMUX &= (unsigned char) ~ _BV(MUX0);
     9c8:	38 98       	cbi	0x07, 0	; 7
     9ca:	88 ec       	ldi	r24, 0xC8	; 200
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	01 97       	sbiw	r24, 0x01	; 1
     9d0:	f1 f7       	brne	.-4      	; 0x9ce <GetValuesFromADC+0x5a>

	// delay for stabilisation on ADC pin (charge intro reference capacitor)
	// TODO: NEED TEST!
	_delay_us(50);

	ADCSRA |= _BV( ADSC ); // start conversation
     9d2:	36 9a       	sbi	0x06, 6	; 6
	while( ADC_CONVERT_IN_PROGRESS() ) {  };
     9d4:	36 99       	sbic	0x06, 6	; 6
     9d6:	fe cf       	rjmp	.-4      	; 0x9d4 <GetValuesFromADC+0x60>
	adc_data = ADC;
     9d8:	84 b1       	in	r24, 0x04	; 4
     9da:	95 b1       	in	r25, 0x05	; 5
     9dc:	90 93 65 03 	sts	0x0365, r25
     9e0:	80 93 64 03 	sts	0x0364, r24
		adc_res_first = adc_data;
	}

	temp_val = adc_res_second;
	StartADC( SECOND );
	if(temp_val){
     9e4:	21 15       	cp	r18, r1
     9e6:	31 05       	cpc	r19, r1
     9e8:	49 f0       	breq	.+18     	; 0x9fc <GetValuesFromADC+0x88>
		adc_res_second = (adc_data + temp_val) / 2;
     9ea:	80 91 64 03 	lds	r24, 0x0364
     9ee:	90 91 65 03 	lds	r25, 0x0365
     9f2:	82 0f       	add	r24, r18
     9f4:	93 1f       	adc	r25, r19
     9f6:	96 95       	lsr	r25
     9f8:	87 95       	ror	r24
     9fa:	04 c0       	rjmp	.+8      	; 0xa04 <GetValuesFromADC+0x90>
	}else{
		adc_res_second = adc_data;
     9fc:	80 91 64 03 	lds	r24, 0x0364
     a00:	90 91 65 03 	lds	r25, 0x0365
     a04:	90 93 5e 03 	sts	0x035E, r25
     a08:	80 93 5d 03 	sts	0x035D, r24
     a0c:	08 95       	ret

00000a0e <ADC_255_Times>:
	}
}


void ADC_255_Times(void)
{
     a0e:	1f 93       	push	r17
	//===================================//
	adc_res_first = 0x00;
     a10:	10 92 5c 03 	sts	0x035C, r1
     a14:	10 92 5b 03 	sts	0x035B, r1
	adc_res_second = 0x00;
     a18:	10 92 5e 03 	sts	0x035E, r1
     a1c:	10 92 5d 03 	sts	0x035D, r1
     a20:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0; i < 0xff;  i++){
		GetValuesFromADC();
     a22:	0e 94 ba 04 	call	0x974	; 0x974 <GetValuesFromADC>
void ADC_255_Times(void)
{
	//===================================//
	adc_res_first = 0x00;
	adc_res_second = 0x00;
	for(uint8_t i=0; i < 0xff;  i++){
     a26:	1f 5f       	subi	r17, 0xFF	; 255
     a28:	1f 3f       	cpi	r17, 0xFF	; 255
     a2a:	d9 f7       	brne	.-10     	; 0xa22 <ADC_255_Times+0x14>
		GetValuesFromADC();
	}
	//===================================//
}
     a2c:	1f 91       	pop	r17
     a2e:	08 95       	ret

00000a30 <CalibrationAlgorithm>:


void CalibrationAlgorithm(uint8_t color)
{
     a30:	cf 92       	push	r12
     a32:	df 92       	push	r13
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
//	uint8_t adc_res_first_8 = (uint8_t)((uint16_t)adc_res_first >> 2);
//	uint8_t adc_res_second_8 = (uint8_t)((uint16_t)adc_res_second >> 2);
//	coefs[FIRST][color] = (double) EVP_ALG_PERCENT * ADC_MAX_VALUE / adc_res_first_8;
//	coefs[SECOND][color] = (double) EVP_ALG_PERCENT * ADC_MAX_VALUE / adc_res_second_8;
//
	coefs[FIRST][color] = (double) EVP_ALG_PERCENT * ADC_MAX_VALUE / adc_res_first;
     a3c:	08 2f       	mov	r16, r24
     a3e:	10 e0       	ldi	r17, 0x00	; 0
     a40:	60 91 5b 03 	lds	r22, 0x035B
     a44:	70 91 5c 03 	lds	r23, 0x035C
     a48:	a3 ec       	ldi	r26, 0xC3	; 195
     a4a:	ca 2e       	mov	r12, r26
     a4c:	a0 e0       	ldi	r26, 0x00	; 0
     a4e:	da 2e       	mov	r13, r26
     a50:	78 01       	movw	r14, r16
     a52:	ee 0c       	add	r14, r14
     a54:	ff 1c       	adc	r15, r15
     a56:	ee 0c       	add	r14, r14
     a58:	ff 1c       	adc	r15, r15
     a5a:	ec 0c       	add	r14, r12
     a5c:	fd 1c       	adc	r15, r13
     a5e:	88 27       	eor	r24, r24
     a60:	77 fd       	sbrc	r23, 7
     a62:	80 95       	com	r24
     a64:	98 2f       	mov	r25, r24
     a66:	0e 94 39 12 	call	0x2472	; 0x2472 <__floatsisf>
     a6a:	9b 01       	movw	r18, r22
     a6c:	ac 01       	movw	r20, r24
     a6e:	60 e0       	ldi	r22, 0x00	; 0
     a70:	70 ec       	ldi	r23, 0xC0	; 192
     a72:	8f ef       	ldi	r24, 0xFF	; 255
     a74:	93 e4       	ldi	r25, 0x43	; 67
     a76:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__divsf3>
     a7a:	f7 01       	movw	r30, r14
     a7c:	60 83       	st	Z, r22
     a7e:	71 83       	std	Z+1, r23	; 0x01
     a80:	82 83       	std	Z+2, r24	; 0x02
     a82:	93 83       	std	Z+3, r25	; 0x03
	coefs[SECOND][color] = (double) EVP_ALG_PERCENT * ADC_MAX_VALUE / adc_res_second;
     a84:	60 91 5d 03 	lds	r22, 0x035D
     a88:	70 91 5e 03 	lds	r23, 0x035E
     a8c:	0d 5f       	subi	r16, 0xFD	; 253
     a8e:	1f 4f       	sbci	r17, 0xFF	; 255
     a90:	00 0f       	add	r16, r16
     a92:	11 1f       	adc	r17, r17
     a94:	00 0f       	add	r16, r16
     a96:	11 1f       	adc	r17, r17
     a98:	c0 0e       	add	r12, r16
     a9a:	d1 1e       	adc	r13, r17
     a9c:	88 27       	eor	r24, r24
     a9e:	77 fd       	sbrc	r23, 7
     aa0:	80 95       	com	r24
     aa2:	98 2f       	mov	r25, r24
     aa4:	0e 94 39 12 	call	0x2472	; 0x2472 <__floatsisf>
     aa8:	9b 01       	movw	r18, r22
     aaa:	ac 01       	movw	r20, r24
     aac:	60 e0       	ldi	r22, 0x00	; 0
     aae:	70 ec       	ldi	r23, 0xC0	; 192
     ab0:	8f ef       	ldi	r24, 0xFF	; 255
     ab2:	93 e4       	ldi	r25, 0x43	; 67
     ab4:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__divsf3>
     ab8:	f6 01       	movw	r30, r12
     aba:	60 83       	st	Z, r22
     abc:	71 83       	std	Z+1, r23	; 0x01
     abe:	82 83       	std	Z+2, r24	; 0x02
     ac0:	93 83       	std	Z+3, r25	; 0x03

#else
	coefs[FIRST][color] = 1;
	coefs[SECOND][color] = (double)adc_res_first / adc_res_second;
#endif
}
     ac2:	1f 91       	pop	r17
     ac4:	0f 91       	pop	r16
     ac6:	ff 90       	pop	r15
     ac8:	ef 90       	pop	r14
     aca:	df 90       	pop	r13
     acc:	cf 90       	pop	r12
     ace:	08 95       	ret

00000ad0 <SetZeroAlgorithm>:
void SetZeroAlgorithm(uint8_t color)
{
//	zero[FIRST] = adc_res_first;
//	zero[SECOND] = adc_res_second;

	max_diff = ADC_MAX_VALUE;// -  ((adc_res_first < adc_res_second) ? adc_res_first : adc_res_second);
     ad0:	8f ef       	ldi	r24, 0xFF	; 255
     ad2:	93 e0       	ldi	r25, 0x03	; 3
     ad4:	90 93 dc 00 	sts	0x00DC, r25
     ad8:	80 93 db 00 	sts	0x00DB, r24
}
     adc:	08 95       	ret

00000ade <SaveResultsAlgorithm>:

void SaveResultsAlgorithm(uint8_t color)
{
     ade:	df 92       	push	r13
     ae0:	ef 92       	push	r14
     ae2:	ff 92       	push	r15
     ae4:	0f 93       	push	r16
     ae6:	1f 93       	push	r17
     ae8:	cf 93       	push	r28
     aea:	df 93       	push	r29
     aec:	d8 2e       	mov	r13, r24
//	uint8_t adc_res_second_8 = (uint8_t)((uint16_t)adc_res_second >> 2);
//
//	int16_t result1 = (int16_t)((double)(((double)adc_res_first_8) * coefs[FIRST][color]));
//	int16_t result2 = (int16_t)((double)(((double)adc_res_second_8) * coefs[SECOND][color]));

	int16_t result1 = (int16_t)((double)(((double)adc_res_first) * coefs[FIRST][color]));
     aee:	60 91 5b 03 	lds	r22, 0x035B
     af2:	70 91 5c 03 	lds	r23, 0x035C
     af6:	08 2f       	mov	r16, r24
     af8:	10 e0       	ldi	r17, 0x00	; 0
     afa:	88 27       	eor	r24, r24
     afc:	77 fd       	sbrc	r23, 7
     afe:	80 95       	com	r24
     b00:	98 2f       	mov	r25, r24
     b02:	0e 94 39 12 	call	0x2472	; 0x2472 <__floatsisf>
     b06:	00 0f       	add	r16, r16
     b08:	11 1f       	adc	r17, r17
     b0a:	00 0f       	add	r16, r16
     b0c:	11 1f       	adc	r17, r17
     b0e:	f8 01       	movw	r30, r16
     b10:	ed 53       	subi	r30, 0x3D	; 61
     b12:	ff 4f       	sbci	r31, 0xFF	; 255
     b14:	20 81       	ld	r18, Z
     b16:	31 81       	ldd	r19, Z+1	; 0x01
     b18:	42 81       	ldd	r20, Z+2	; 0x02
     b1a:	53 81       	ldd	r21, Z+3	; 0x03
     b1c:	0e 94 03 10 	call	0x2006	; 0x2006 <__mulsf3>
     b20:	0e 94 97 12 	call	0x252e	; 0x252e <__fixsfsi>
     b24:	7b 01       	movw	r14, r22
	int16_t result2 = (int16_t)((double)(((double)adc_res_second) * coefs[SECOND][color]));
     b26:	60 91 5d 03 	lds	r22, 0x035D
     b2a:	70 91 5e 03 	lds	r23, 0x035E
     b2e:	88 27       	eor	r24, r24
     b30:	77 fd       	sbrc	r23, 7
     b32:	80 95       	com	r24
     b34:	98 2f       	mov	r25, r24
     b36:	0e 94 39 12 	call	0x2472	; 0x2472 <__floatsisf>
     b3a:	01 53       	subi	r16, 0x31	; 49
     b3c:	1f 4f       	sbci	r17, 0xFF	; 255
     b3e:	f8 01       	movw	r30, r16
     b40:	20 81       	ld	r18, Z
     b42:	31 81       	ldd	r19, Z+1	; 0x01
     b44:	42 81       	ldd	r20, Z+2	; 0x02
     b46:	53 81       	ldd	r21, Z+3	; 0x03
     b48:	0e 94 03 10 	call	0x2006	; 0x2006 <__mulsf3>
     b4c:	0e 94 97 12 	call	0x252e	; 0x252e <__fixsfsi>
     b50:	eb 01       	movw	r28, r22
	uint16_t diff_percent = DIFF(result1, result2) * 100 / max_diff;
     b52:	97 01       	movw	r18, r14
     b54:	26 1b       	sub	r18, r22
     b56:	37 0b       	sbc	r19, r23
     b58:	37 ff       	sbrs	r19, 7
     b5a:	03 c0       	rjmp	.+6      	; 0xb62 <SaveResultsAlgorithm+0x84>
     b5c:	30 95       	com	r19
     b5e:	21 95       	neg	r18
     b60:	3f 4f       	sbci	r19, 0xFF	; 255
     b62:	60 91 db 00 	lds	r22, 0x00DB
     b66:	70 91 dc 00 	lds	r23, 0x00DC
     b6a:	84 e6       	ldi	r24, 0x64	; 100
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	ac 01       	movw	r20, r24
     b70:	24 9f       	mul	r18, r20
     b72:	c0 01       	movw	r24, r0
     b74:	25 9f       	mul	r18, r21
     b76:	90 0d       	add	r25, r0
     b78:	34 9f       	mul	r19, r20
     b7a:	90 0d       	add	r25, r0
     b7c:	11 24       	eor	r1, r1
     b7e:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <__udivmodhi4>
     b82:	16 2f       	mov	r17, r22
     b84:	07 2f       	mov	r16, r23

	hex2dec_result(result1, FIRST, color); // result[FIRST][color] = result1;
     b86:	c7 01       	movw	r24, r14
     b88:	60 e0       	ldi	r22, 0x00	; 0
     b8a:	4d 2d       	mov	r20, r13
     b8c:	0e 94 5f 04 	call	0x8be	; 0x8be <hex2dec_result>
	hex2dec_result(result2, SECOND, color); //result[SECOND][color] = result2;
     b90:	ce 01       	movw	r24, r28
     b92:	61 e0       	ldi	r22, 0x01	; 1
     b94:	4d 2d       	mov	r20, r13
     b96:	0e 94 5f 04 	call	0x8be	; 0x8be <hex2dec_result>
	hex2dec_result(diff_percent, PERCENT, color); //result[PERCENT][color] = DIFF(result1, result2);// * 100 / max_diff;
     b9a:	81 2f       	mov	r24, r17
     b9c:	90 2f       	mov	r25, r16
     b9e:	62 e0       	ldi	r22, 0x02	; 2
     ba0:	4d 2d       	mov	r20, r13
     ba2:	0e 94 5f 04 	call	0x8be	; 0x8be <hex2dec_result>
}
     ba6:	df 91       	pop	r29
     ba8:	cf 91       	pop	r28
     baa:	1f 91       	pop	r17
     bac:	0f 91       	pop	r16
     bae:	ff 90       	pop	r15
     bb0:	ef 90       	pop	r14
     bb2:	df 90       	pop	r13
     bb4:	08 95       	ret

00000bb6 <ADC_LoadingAndEvalIt>:

void ADC_LoadingAndEvalIt(ptrEvalMe evalMe)
{
     bb6:	cf 92       	push	r12
     bb8:	df 92       	push	r13
     bba:	ff 92       	push	r15
     bbc:	0f 93       	push	r16
     bbe:	1f 93       	push	r17
     bc0:	cf 93       	push	r28
     bc2:	df 93       	push	r29
     bc4:	8c 01       	movw	r16, r24
	 *
	 * [############]
	 *
	 * 	 Complete!
	 */
	JOYSTICK_INT_DISABLE();
     bc6:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     bc8:	f8 94       	cli
     bca:	8b b7       	in	r24, 0x3b	; 59
     bcc:	8f 77       	andi	r24, 0x7F	; 127
     bce:	8b bf       	out	0x3b, r24	; 59
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     bd0:	9f bf       	out	0x3f, r25	; 63

	Lcd3310_ClearCenter();
     bd2:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <Lcd3310_ClearCenter>
	Lcd3310_GotoXY(0, 1);
     bd6:	80 e0       	ldi	r24, 0x00	; 0
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	61 e0       	ldi	r22, 0x01	; 1
     bdc:	70 e0       	ldi	r23, 0x00	; 0
     bde:	0e 94 c6 0a 	call	0x158c	; 0x158c <Lcd3310_GotoXY>
	Lcd3310_String_P( pstr_please_wait, BLACK_TEXT_ON_WHITE );
     be2:	80 91 fa 00 	lds	r24, 0x00FA
     be6:	90 91 fb 00 	lds	r25, 0x00FB
     bea:	60 e0       	ldi	r22, 0x00	; 0
     bec:	0e 94 c5 09 	call	0x138a	; 0x138a <Lcd3310_String_P>
	if(evalMe == SetZeroAlgorithm){
     bf0:	85 e0       	ldi	r24, 0x05	; 5
     bf2:	08 36       	cpi	r16, 0x68	; 104
     bf4:	18 07       	cpc	r17, r24
     bf6:	19 f4       	brne	.+6      	; 0xbfe <ADC_LoadingAndEvalIt+0x48>
		Lcd3310_GotoXY(5, 3);
     bf8:	85 e0       	ldi	r24, 0x05	; 5
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	02 c0       	rjmp	.+4      	; 0xc02 <ADC_LoadingAndEvalIt+0x4c>
	}else{
		Lcd3310_GotoXY(1, 3);
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	63 e0       	ldi	r22, 0x03	; 3
     c04:	70 e0       	ldi	r23, 0x00	; 0
     c06:	0e 94 c6 0a 	call	0x158c	; 0x158c <Lcd3310_GotoXY>
	}
	Lcd3310_Char('[', BLACK_TEXT_ON_WHITE);
     c0a:	8b e5       	ldi	r24, 0x5B	; 91
     c0c:	60 e0       	ldi	r22, 0x00	; 0
     c0e:	0e 94 74 09 	call	0x12e8	; 0x12e8 <Lcd3310_Char>
     c12:	cd ed       	ldi	r28, 0xDD	; 221
     c14:	d0 e0       	ldi	r29, 0x00	; 0
     c16:	ff 24       	eor	r15, r15
     c18:	30 e9       	ldi	r19, 0x90	; 144
     c1a:	c3 2e       	mov	r12, r19
     c1c:	31 e0       	ldi	r19, 0x01	; 1
     c1e:	d3 2e       	mov	r13, r19
	for(uint8_t color=0; color < 3; color++){
		Lcd3310_Char('#', BLACK_TEXT_ON_WHITE);
     c20:	83 e2       	ldi	r24, 0x23	; 35
     c22:	60 e0       	ldi	r22, 0x00	; 0
     c24:	0e 94 74 09 	call	0x12e8	; 0x12e8 <Lcd3310_Char>
		if(evalMe == SetZeroAlgorithm){
     c28:	85 e0       	ldi	r24, 0x05	; 5
     c2a:	08 36       	cpi	r16, 0x68	; 104
     c2c:	18 07       	cpc	r17, r24
     c2e:	19 f4       	brne	.+6      	; 0xc36 <ADC_LoadingAndEvalIt+0x80>
			LedDriver_SwitchLeds( 0x00 );
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	02 c0       	rjmp	.+4      	; 0xc3a <ADC_LoadingAndEvalIt+0x84>
		}else{
			LedDriver_SwitchLeds( led_show_codes[color] );
     c36:	88 81       	ld	r24, Y
     c38:	99 81       	ldd	r25, Y+1	; 0x01
     c3a:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <LedDriver_SwitchLeds>
     c3e:	80 e2       	ldi	r24, 0x20	; 32
     c40:	9e e4       	ldi	r25, 0x4E	; 78
     c42:	f6 01       	movw	r30, r12
     c44:	31 97       	sbiw	r30, 0x01	; 1
     c46:	f1 f7       	brne	.-4      	; 0xc44 <ADC_LoadingAndEvalIt+0x8e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c48:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c4a:	d9 f7       	brne	.-10     	; 0xc42 <ADC_LoadingAndEvalIt+0x8c>
		}
		_delay_ms( DELAY_BEFORE_START_ADC );
		Lcd3310_Char('#', BLACK_TEXT_ON_WHITE);
     c4c:	83 e2       	ldi	r24, 0x23	; 35
     c4e:	60 e0       	ldi	r22, 0x00	; 0
     c50:	0e 94 74 09 	call	0x12e8	; 0x12e8 <Lcd3310_Char>
		ADC_255_Times();
     c54:	0e 94 07 05 	call	0xa0e	; 0xa0e <ADC_255_Times>
		Lcd3310_Char('#', BLACK_TEXT_ON_WHITE);
     c58:	83 e2       	ldi	r24, 0x23	; 35
     c5a:	60 e0       	ldi	r22, 0x00	; 0
     c5c:	0e 94 74 09 	call	0x12e8	; 0x12e8 <Lcd3310_Char>

		// Start Algorithm
		(evalMe)(color);
     c60:	8f 2d       	mov	r24, r15
     c62:	f8 01       	movw	r30, r16
     c64:	09 95       	icall

		if(evalMe == SetZeroAlgorithm){
     c66:	85 e0       	ldi	r24, 0x05	; 5
     c68:	08 36       	cpi	r16, 0x68	; 104
     c6a:	18 07       	cpc	r17, r24
     c6c:	29 f0       	breq	.+10     	; 0xc78 <ADC_LoadingAndEvalIt+0xc2>
		Lcd3310_GotoXY(5, 3);
	}else{
		Lcd3310_GotoXY(1, 3);
	}
	Lcd3310_Char('[', BLACK_TEXT_ON_WHITE);
	for(uint8_t color=0; color < 3; color++){
     c6e:	f3 94       	inc	r15
     c70:	22 96       	adiw	r28, 0x02	; 2
     c72:	83 e0       	ldi	r24, 0x03	; 3
     c74:	f8 16       	cp	r15, r24
     c76:	a1 f6       	brne	.-88     	; 0xc20 <ADC_LoadingAndEvalIt+0x6a>

		if(evalMe == SetZeroAlgorithm){
			break; // not need to switch off leds 3 times :)
		}
	}
	LedDriver_SwitchLeds( 0x00 );
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <LedDriver_SwitchLeds>
	Lcd3310_Char(']', BLACK_TEXT_ON_WHITE);
     c80:	8d e5       	ldi	r24, 0x5D	; 93
     c82:	60 e0       	ldi	r22, 0x00	; 0
     c84:	0e 94 74 09 	call	0x12e8	; 0x12e8 <Lcd3310_Char>
	Lcd3310_GotoXY(2, 5);
     c88:	82 e0       	ldi	r24, 0x02	; 2
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	65 e0       	ldi	r22, 0x05	; 5
     c8e:	70 e0       	ldi	r23, 0x00	; 0
     c90:	0e 94 c6 0a 	call	0x158c	; 0x158c <Lcd3310_GotoXY>
	Lcd3310_String_P( pstr_complete, BLACK_TEXT_ON_WHITE );
     c94:	80 91 e9 00 	lds	r24, 0x00E9
     c98:	90 91 ea 00 	lds	r25, 0x00EA
     c9c:	60 e0       	ldi	r22, 0x00	; 0
     c9e:	0e 94 c5 09 	call	0x138a	; 0x138a <Lcd3310_String_P>
     ca2:	88 e8       	ldi	r24, 0x88	; 136
     ca4:	93 e1       	ldi	r25, 0x13	; 19
     ca6:	20 e9       	ldi	r18, 0x90	; 144
     ca8:	31 e0       	ldi	r19, 0x01	; 1
     caa:	f9 01       	movw	r30, r18
     cac:	31 97       	sbiw	r30, 0x01	; 1
     cae:	f1 f7       	brne	.-4      	; 0xcac <ADC_LoadingAndEvalIt+0xf6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cb0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cb2:	d9 f7       	brne	.-10     	; 0xcaa <ADC_LoadingAndEvalIt+0xf4>
	_delay_ms(500); // show complete and wait 0.5 sec
	JOYSTICK_INT_ENABLE();
     cb4:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     cb6:	f8 94       	cli
     cb8:	80 e4       	ldi	r24, 0x40	; 64
     cba:	8a bf       	out	0x3a, r24	; 58
     cbc:	8b b7       	in	r24, 0x3b	; 59
     cbe:	80 68       	ori	r24, 0x80	; 128
     cc0:	8b bf       	out	0x3b, r24	; 59
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     cc2:	9f bf       	out	0x3f, r25	; 63
//	LedDriver_SwitchLeds(GREEN_LEDS);
//	(evalMe)(0);
}
     cc4:	df 91       	pop	r29
     cc6:	cf 91       	pop	r28
     cc8:	1f 91       	pop	r17
     cca:	0f 91       	pop	r16
     ccc:	ff 90       	pop	r15
     cce:	df 90       	pop	r13
     cd0:	cf 90       	pop	r12
     cd2:	08 95       	ret

00000cd4 <LedDriver_SwitchLeds>:

#include "led_driver.h"


void LedDriver_SwitchLeds(uint16_t data)
{
     cd4:	ac 01       	movw	r20, r24
     cd6:	20 e0       	ldi	r18, 0x00	; 0
     cd8:	30 e0       	ldi	r19, 0x00	; 0
	char i;
	for(i=0; i<16; i++){
		CLK_DOWN;
		if(data & _BV(i)){
     cda:	61 e0       	ldi	r22, 0x01	; 1
     cdc:	70 e0       	ldi	r23, 0x00	; 0

void LedDriver_SwitchLeds(uint16_t data)
{
	char i;
	for(i=0; i<16; i++){
		CLK_DOWN;
     cde:	db 98       	cbi	0x1b, 3	; 27
		if(data & _BV(i)){
     ce0:	cb 01       	movw	r24, r22
     ce2:	02 2e       	mov	r0, r18
     ce4:	02 c0       	rjmp	.+4      	; 0xcea <LedDriver_SwitchLeds+0x16>
     ce6:	88 0f       	add	r24, r24
     ce8:	99 1f       	adc	r25, r25
     cea:	0a 94       	dec	r0
     cec:	e2 f7       	brpl	.-8      	; 0xce6 <LedDriver_SwitchLeds+0x12>
     cee:	84 23       	and	r24, r20
     cf0:	95 23       	and	r25, r21
     cf2:	89 2b       	or	r24, r25
     cf4:	11 f0       	breq	.+4      	; 0xcfa <LedDriver_SwitchLeds+0x26>
			LED_DR_PORT |= DATA_PIN;
     cf6:	da 9a       	sbi	0x1b, 2	; 27
     cf8:	01 c0       	rjmp	.+2      	; 0xcfc <LedDriver_SwitchLeds+0x28>
		}else{
			LED_DR_PORT &= (unsigned char)~DATA_PIN;
     cfa:	da 98       	cbi	0x1b, 2	; 27
		}
		CLK_UP;
     cfc:	db 9a       	sbi	0x1b, 3	; 27
     cfe:	2f 5f       	subi	r18, 0xFF	; 255
     d00:	3f 4f       	sbci	r19, 0xFF	; 255


void LedDriver_SwitchLeds(uint16_t data)
{
	char i;
	for(i=0; i<16; i++){
     d02:	20 31       	cpi	r18, 0x10	; 16
     d04:	31 05       	cpc	r19, r1
     d06:	59 f7       	brne	.-42     	; 0xcde <LedDriver_SwitchLeds+0xa>
		}else{
			LED_DR_PORT &= (unsigned char)~DATA_PIN;
		}
		CLK_UP;
	}
	LATCH_PULSE;
     d08:	dc 9a       	sbi	0x1b, 4	; 27
     d0a:	00 00       	nop
     d0c:	dc 98       	cbi	0x1b, 4	; 27
}
     d0e:	08 95       	ret

00000d10 <LedDriver_Init>:
//	LedDriver_SwitchLeds(0x00);
//}

void LedDriver_Init(void)
{
	LATCH_DOWN;
     d10:	dc 98       	cbi	0x1b, 4	; 27
	CLK_DOWN;
     d12:	db 98       	cbi	0x1b, 3	; 27
	LED_DR_DDR |= DATA_PIN | CLK_PIN | LATCH_PIN;
     d14:	8a b3       	in	r24, 0x1a	; 26
     d16:	8c 61       	ori	r24, 0x1C	; 28
     d18:	8a bb       	out	0x1a, r24	; 26
	LedDriver_SwitchLeds(0x00);
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <LedDriver_SwitchLeds>
}
     d22:	08 95       	ret

00000d24 <main>:

//	DEBUG_INIT(); // Initialize uart if DEBUG != 0
	DEBUG_PRINT_CHAR( 0x01 );

	// Input/Output Ports initialization
    PORTB=0x00;
     d24:	18 ba       	out	0x18, r1	; 24
    DDRB=0x00;
     d26:	17 ba       	out	0x17, r1	; 23

    PORTC=0x00;
     d28:	15 ba       	out	0x15, r1	; 21
    DDRC=0x00;
     d2a:	14 ba       	out	0x14, r1	; 20

    PORTD= _BV(PD3); // pull up joystick center button
     d2c:	88 e0       	ldi	r24, 0x08	; 8
     d2e:	82 bb       	out	0x12, r24	; 18
    DDRD=0x00;
     d30:	11 ba       	out	0x11, r1	; 17


    JPORT = (uint8_t)(J_RU | J_LU | J_RD | J_LD);
     d32:	80 ef       	ldi	r24, 0xF0	; 240
     d34:	85 bb       	out	0x15, r24	; 21
    JDDR &= (uint8_t)~(J_RU | J_LU | J_RD | J_LD);
     d36:	84 b3       	in	r24, 0x14	; 20
     d38:	8f 70       	andi	r24, 0x0F	; 15
     d3a:	84 bb       	out	0x14, r24	; 20

    //TEST_PIN_DDR_INIT();

    ACSR = _BV(ACD); // turn off analog comparer, this is turns ON after RESET... delurium, but the fact ;)
     d3c:	80 e8       	ldi	r24, 0x80	; 128
     d3e:	88 b9       	out	0x08, r24	; 8

    // External Interrupt(s) initialization
    MCUCR= _BV(ISC11) | _BV(ISC01); // fall
     d40:	8a e0       	ldi	r24, 0x0A	; 10
     d42:	85 bf       	out	0x35, r24	; 53
    GICR = _BV(INT0) | _BV(INT1); // int1 int0 enable interrupts
     d44:	80 ec       	ldi	r24, 0xC0	; 192
     d46:	8b bf       	out	0x3b, r24	; 59
//    TCCR1A = 0x00;
//    TCCR1B = 0x00;
//    TCCR2 = 0x00;
//    TIMSK = 0x00;

	TIM2_INIT(); // see defines.h for details
     d48:	86 e0       	ldi	r24, 0x06	; 6
     d4a:	85 bd       	out	0x25, r24	; 37

    // Init ADC
	ADMUX = 0x00; //_BV(ADLAR); // ADC0, result in ADC
     d4c:	17 b8       	out	0x07, r1	; 7
	ADCSRA = _BV(ADEN) /*| _BV(ADIE)*/ | _BV(ADPS2)  | _BV(ADPS1) | _BV(ADPS0); // XTAL / 16;
     d4e:	87 e8       	ldi	r24, 0x87	; 135
     d50:	86 b9       	out	0x06, r24	; 6


	LedDriver_Init();
     d52:	0e 94 88 06 	call	0xd10	; 0xd10 <LedDriver_Init>
	Lcd3310_InitializeDisplay(DELAY_SHOW_SPLASH);
     d56:	88 ee       	ldi	r24, 0xE8	; 232
     d58:	93 e0       	ldi	r25, 0x03	; 3
     d5a:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <Lcd3310_InitializeDisplay>


	DEBUG_PRINT_CHAR( 0x02 );


	sei();
     d5e:	78 94       	sei

	DEBUG_PRINT_CHAR( 0x00 );

   	for(;;){

		IF_FLAG_ON( UPDATE_DISPLAY_FLAG ){
     d60:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     d62:	f8 94       	cli
     d64:	20 91 5f 03 	lds	r18, 0x035F
     d68:	30 91 60 03 	lds	r19, 0x0360
     d6c:	30 93 62 03 	sts	0x0362, r19
     d70:	20 93 61 03 	sts	0x0361, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     d74:	8f bf       	out	0x3f, r24	; 63
     d76:	80 91 61 03 	lds	r24, 0x0361
     d7a:	80 ff       	sbrs	r24, 0
     d7c:	1d c0       	rjmp	.+58     	; 0xdb8 <main+0x94>
			FLAGS_SWITCH_OFF( UPDATE_DISPLAY_FLAG );
     d7e:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     d80:	f8 94       	cli
     d82:	80 91 5f 03 	lds	r24, 0x035F
     d86:	90 91 60 03 	lds	r25, 0x0360
     d8a:	8e 7f       	andi	r24, 0xFE	; 254
     d8c:	90 93 60 03 	sts	0x0360, r25
     d90:	80 93 5f 03 	sts	0x035F, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     d94:	2f bf       	out	0x3f, r18	; 63
			IF_FLAG_OFF( SNAKE_PLAYING_NOW_FLAG ){
     d96:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     d98:	f8 94       	cli
     d9a:	80 91 5f 03 	lds	r24, 0x035F
     d9e:	90 91 60 03 	lds	r25, 0x0360
     da2:	90 93 62 03 	sts	0x0362, r25
     da6:	80 93 61 03 	sts	0x0361, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     daa:	2f bf       	out	0x3f, r18	; 63
     dac:	80 91 61 03 	lds	r24, 0x0361
     db0:	87 fd       	sbrc	r24, 7
     db2:	02 c0       	rjmp	.+4      	; 0xdb8 <main+0x94>
				Lcd3310_UpdateDisplayInfo();
     db4:	0e 94 17 0c 	call	0x182e	; 0x182e <Lcd3310_UpdateDisplayInfo>
			}
		}

		IF_FLAG_ON( JOYSTICK_CENTER_CLICK_FLAG ){
     db8:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     dba:	f8 94       	cli
     dbc:	20 91 5f 03 	lds	r18, 0x035F
     dc0:	30 91 60 03 	lds	r19, 0x0360
     dc4:	30 93 62 03 	sts	0x0362, r19
     dc8:	20 93 61 03 	sts	0x0361, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     dcc:	8f bf       	out	0x3f, r24	; 63
     dce:	80 91 61 03 	lds	r24, 0x0361
     dd2:	81 ff       	sbrs	r24, 1
     dd4:	1a c0       	rjmp	.+52     	; 0xe0a <main+0xe6>
			FLAGS_SWITCH_OFF( JOYSTICK_CENTER_CLICK_FLAG );
     dd6:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     dd8:	f8 94       	cli
     dda:	80 91 5f 03 	lds	r24, 0x035F
     dde:	90 91 60 03 	lds	r25, 0x0360
     de2:	8d 7f       	andi	r24, 0xFD	; 253
     de4:	90 93 60 03 	sts	0x0360, r25
     de8:	80 93 5f 03 	sts	0x035F, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     dec:	2f bf       	out	0x3f, r18	; 63

			Menu_EnterClick();
     dee:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <Menu_EnterClick>

			FLAGS_SWITCH_ON( UPDATE_DISPLAY_FLAG );
     df2:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     df4:	f8 94       	cli
     df6:	80 91 5f 03 	lds	r24, 0x035F
     dfa:	90 91 60 03 	lds	r25, 0x0360
     dfe:	81 60       	ori	r24, 0x01	; 1
     e00:	90 93 60 03 	sts	0x0360, r25
     e04:	80 93 5f 03 	sts	0x035F, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     e08:	2f bf       	out	0x3f, r18	; 63
		}



		IF_FLAG_ON( ADC_RESULT_FLAG ){ // in menu adc result
     e0a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     e0c:	f8 94       	cli
     e0e:	20 91 5f 03 	lds	r18, 0x035F
     e12:	30 91 60 03 	lds	r19, 0x0360
     e16:	30 93 62 03 	sts	0x0362, r19
     e1a:	20 93 61 03 	sts	0x0361, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     e1e:	8f bf       	out	0x3f, r24	; 63
     e20:	80 91 61 03 	lds	r24, 0x0361
     e24:	84 ff       	sbrs	r24, 4
     e26:	1c c0       	rjmp	.+56     	; 0xe60 <main+0x13c>

			ADC_LoadingAndEvalIt(SaveResultsAlgorithm);
     e28:	8f e6       	ldi	r24, 0x6F	; 111
     e2a:	95 e0       	ldi	r25, 0x05	; 5
     e2c:	0e 94 db 05 	call	0xbb6	; 0xbb6 <ADC_LoadingAndEvalIt>

			FLAGS_SWITCH_OFF( ADC_RESULT_FLAG );
     e30:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     e32:	f8 94       	cli
     e34:	80 91 5f 03 	lds	r24, 0x035F
     e38:	90 91 60 03 	lds	r25, 0x0360
     e3c:	8f 7e       	andi	r24, 0xEF	; 239
     e3e:	90 93 60 03 	sts	0x0360, r25
     e42:	80 93 5f 03 	sts	0x035F, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     e46:	2f bf       	out	0x3f, r18	; 63
			FLAGS_SWITCH_ON( UPDATE_DISPLAY_FLAG );
     e48:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     e4a:	f8 94       	cli
     e4c:	80 91 5f 03 	lds	r24, 0x035F
     e50:	90 91 60 03 	lds	r25, 0x0360
     e54:	81 60       	ori	r24, 0x01	; 1
     e56:	90 93 60 03 	sts	0x0360, r25
     e5a:	80 93 5f 03 	sts	0x035F, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     e5e:	2f bf       	out	0x3f, r18	; 63
		}

		IF_FLAG_ON( ADC_CALIBRATE_FLAG ){
     e60:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     e62:	f8 94       	cli
     e64:	20 91 5f 03 	lds	r18, 0x035F
     e68:	30 91 60 03 	lds	r19, 0x0360
     e6c:	30 93 62 03 	sts	0x0362, r19
     e70:	20 93 61 03 	sts	0x0361, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     e74:	8f bf       	out	0x3f, r24	; 63
     e76:	80 91 61 03 	lds	r24, 0x0361
     e7a:	85 ff       	sbrs	r24, 5
     e7c:	10 c0       	rjmp	.+32     	; 0xe9e <main+0x17a>

			ADC_LoadingAndEvalIt(CalibrationAlgorithm);
     e7e:	88 e1       	ldi	r24, 0x18	; 24
     e80:	95 e0       	ldi	r25, 0x05	; 5
     e82:	0e 94 db 05 	call	0xbb6	; 0xbb6 <ADC_LoadingAndEvalIt>

			FLAGS_SWITCH_OFF( ADC_CALIBRATE_FLAG );
     e86:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     e88:	f8 94       	cli
     e8a:	80 91 5f 03 	lds	r24, 0x035F
     e8e:	90 91 60 03 	lds	r25, 0x0360
     e92:	8f 7d       	andi	r24, 0xDF	; 223
     e94:	90 93 60 03 	sts	0x0360, r25
     e98:	80 93 5f 03 	sts	0x035F, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     e9c:	2f bf       	out	0x3f, r18	; 63
		}

		IF_FLAG_ON( ADC_SET_ZERO ){
     e9e:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     ea0:	f8 94       	cli
     ea2:	20 91 5f 03 	lds	r18, 0x035F
     ea6:	30 91 60 03 	lds	r19, 0x0360
     eaa:	30 93 62 03 	sts	0x0362, r19
     eae:	20 93 61 03 	sts	0x0361, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     eb2:	8f bf       	out	0x3f, r24	; 63
     eb4:	80 91 61 03 	lds	r24, 0x0361
     eb8:	86 ff       	sbrs	r24, 6
     eba:	10 c0       	rjmp	.+32     	; 0xedc <main+0x1b8>

			ADC_LoadingAndEvalIt(SetZeroAlgorithm);
     ebc:	88 e6       	ldi	r24, 0x68	; 104
     ebe:	95 e0       	ldi	r25, 0x05	; 5
     ec0:	0e 94 db 05 	call	0xbb6	; 0xbb6 <ADC_LoadingAndEvalIt>

			FLAGS_SWITCH_OFF( ADC_SET_ZERO );
     ec4:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     ec6:	f8 94       	cli
     ec8:	80 91 5f 03 	lds	r24, 0x035F
     ecc:	90 91 60 03 	lds	r25, 0x0360
     ed0:	8f 7b       	andi	r24, 0xBF	; 191
     ed2:	90 93 60 03 	sts	0x0360, r25
     ed6:	80 93 5f 03 	sts	0x035F, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     eda:	2f bf       	out	0x3f, r18	; 63
		}

	#ifdef ANIMATION_SWITCH_MENU_ITEMS
		IF_FLAG_ON( ANIMATION_NEXT_FLAG ){
     edc:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     ede:	f8 94       	cli
     ee0:	20 91 5f 03 	lds	r18, 0x035F
     ee4:	30 91 60 03 	lds	r19, 0x0360
     ee8:	30 93 62 03 	sts	0x0362, r19
     eec:	20 93 61 03 	sts	0x0361, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     ef0:	8f bf       	out	0x3f, r24	; 63
     ef2:	80 91 61 03 	lds	r24, 0x0361
     ef6:	82 ff       	sbrs	r24, 2
     ef8:	26 c0       	rjmp	.+76     	; 0xf46 <main+0x222>
			FLAGS_SWITCH_OFF( ANIMATION_NEXT_FLAG );
     efa:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     efc:	f8 94       	cli
     efe:	80 91 5f 03 	lds	r24, 0x035F
     f02:	90 91 60 03 	lds	r25, 0x0360
     f06:	8b 7f       	andi	r24, 0xFB	; 251
     f08:	90 93 60 03 	sts	0x0360, r25
     f0c:	80 93 5f 03 	sts	0x035F, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     f10:	2f bf       	out	0x3f, r18	; 63
			if(menu_now != &results && menu_now != &snake_results){
     f12:	80 91 73 03 	lds	r24, 0x0373
     f16:	90 91 74 03 	lds	r25, 0x0374
     f1a:	21 e0       	ldi	r18, 0x01	; 1
     f1c:	88 33       	cpi	r24, 0x38	; 56
     f1e:	92 07       	cpc	r25, r18
     f20:	31 f0       	breq	.+12     	; 0xf2e <main+0x20a>
     f22:	8c 56       	subi	r24, 0x6C	; 108
     f24:	91 40       	sbci	r25, 0x01	; 1
     f26:	19 f0       	breq	.+6      	; 0xf2e <main+0x20a>
				Lcd3310_AnimationSwitchMenuItems(1);
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <Lcd3310_AnimationSwitchMenuItems>
			}
			FLAGS_SWITCH_ON( UPDATE_DISPLAY_FLAG );
     f2e:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     f30:	f8 94       	cli
     f32:	80 91 5f 03 	lds	r24, 0x035F
     f36:	90 91 60 03 	lds	r25, 0x0360
     f3a:	81 60       	ori	r24, 0x01	; 1
     f3c:	90 93 60 03 	sts	0x0360, r25
     f40:	80 93 5f 03 	sts	0x035F, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     f44:	2f bf       	out	0x3f, r18	; 63
		}
		IF_FLAG_ON( ANIMATION_PREV_FLAG ){
     f46:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     f48:	f8 94       	cli
     f4a:	20 91 5f 03 	lds	r18, 0x035F
     f4e:	30 91 60 03 	lds	r19, 0x0360
     f52:	30 93 62 03 	sts	0x0362, r19
     f56:	20 93 61 03 	sts	0x0361, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     f5a:	8f bf       	out	0x3f, r24	; 63
     f5c:	80 91 61 03 	lds	r24, 0x0361
     f60:	83 ff       	sbrs	r24, 3
     f62:	26 c0       	rjmp	.+76     	; 0xfb0 <main+0x28c>
			FLAGS_SWITCH_OFF( ANIMATION_PREV_FLAG );
     f64:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     f66:	f8 94       	cli
     f68:	80 91 5f 03 	lds	r24, 0x035F
     f6c:	90 91 60 03 	lds	r25, 0x0360
     f70:	87 7f       	andi	r24, 0xF7	; 247
     f72:	90 93 60 03 	sts	0x0360, r25
     f76:	80 93 5f 03 	sts	0x035F, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     f7a:	2f bf       	out	0x3f, r18	; 63
			if(menu_now != &results && menu_now != &snake_results){
     f7c:	80 91 73 03 	lds	r24, 0x0373
     f80:	90 91 74 03 	lds	r25, 0x0374
     f84:	21 e0       	ldi	r18, 0x01	; 1
     f86:	88 33       	cpi	r24, 0x38	; 56
     f88:	92 07       	cpc	r25, r18
     f8a:	31 f0       	breq	.+12     	; 0xf98 <main+0x274>
     f8c:	8c 56       	subi	r24, 0x6C	; 108
     f8e:	91 40       	sbci	r25, 0x01	; 1
     f90:	19 f0       	breq	.+6      	; 0xf98 <main+0x274>
				Lcd3310_AnimationSwitchMenuItems(0);
     f92:	80 e0       	ldi	r24, 0x00	; 0
     f94:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <Lcd3310_AnimationSwitchMenuItems>
			}
			FLAGS_SWITCH_ON( UPDATE_DISPLAY_FLAG );
     f98:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     f9a:	f8 94       	cli
     f9c:	80 91 5f 03 	lds	r24, 0x035F
     fa0:	90 91 60 03 	lds	r25, 0x0360
     fa4:	81 60       	ori	r24, 0x01	; 1
     fa6:	90 93 60 03 	sts	0x0360, r25
     faa:	80 93 5f 03 	sts	0x035F, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     fae:	2f bf       	out	0x3f, r18	; 63
		}
	#endif

		IF_FLAG_ON( SNAKE_START_GAME_FLAG ){
     fb0:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     fb2:	f8 94       	cli
     fb4:	20 91 5f 03 	lds	r18, 0x035F
     fb8:	30 91 60 03 	lds	r19, 0x0360
     fbc:	30 93 62 03 	sts	0x0362, r19
     fc0:	20 93 61 03 	sts	0x0361, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     fc4:	8f bf       	out	0x3f, r24	; 63
     fc6:	80 91 61 03 	lds	r24, 0x0361
     fca:	90 91 62 03 	lds	r25, 0x0362
     fce:	90 ff       	sbrs	r25, 0
     fd0:	1e c0       	rjmp	.+60     	; 0x100e <main+0x2ea>
			FLAGS_SWITCH_OFF( SNAKE_START_GAME_FLAG );
     fd2:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     fd4:	f8 94       	cli
     fd6:	80 91 5f 03 	lds	r24, 0x035F
     fda:	90 91 60 03 	lds	r25, 0x0360
     fde:	9e 7f       	andi	r25, 0xFE	; 254
     fe0:	90 93 60 03 	sts	0x0360, r25
     fe4:	80 93 5f 03 	sts	0x035F, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     fe8:	2f bf       	out	0x3f, r18	; 63
			SnakeGame_Start();
     fea:	0e 94 70 03 	call	0x6e0	; 0x6e0 <SnakeGame_Start>
			TIM2_CLR_COUNTER_AND_OVF_ON();
     fee:	14 bc       	out	0x24, r1	; 36
     ff0:	89 b7       	in	r24, 0x39	; 57
     ff2:	80 64       	ori	r24, 0x40	; 64
     ff4:	89 bf       	out	0x39, r24	; 57
			FLAGS_SWITCH_ON( SNAKE_PLAYING_NOW_FLAG );
     ff6:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     ff8:	f8 94       	cli
     ffa:	80 91 5f 03 	lds	r24, 0x035F
     ffe:	90 91 60 03 	lds	r25, 0x0360
    1002:	80 68       	ori	r24, 0x80	; 128
    1004:	90 93 60 03 	sts	0x0360, r25
    1008:	80 93 5f 03 	sts	0x035F, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    100c:	2f bf       	out	0x3f, r18	; 63
		}
		IF_FLAG_ON( SNAKE_STOP_GAME_FLAG ){
    100e:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1010:	f8 94       	cli
    1012:	20 91 5f 03 	lds	r18, 0x035F
    1016:	30 91 60 03 	lds	r19, 0x0360
    101a:	30 93 62 03 	sts	0x0362, r19
    101e:	20 93 61 03 	sts	0x0361, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1022:	8f bf       	out	0x3f, r24	; 63
    1024:	80 91 61 03 	lds	r24, 0x0361
    1028:	90 91 62 03 	lds	r25, 0x0362
    102c:	91 ff       	sbrs	r25, 1
    102e:	98 ce       	rjmp	.-720    	; 0xd60 <main+0x3c>
			FLAGS_SWITCH_OFF( SNAKE_STOP_GAME_FLAG );
    1030:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1032:	f8 94       	cli
    1034:	80 91 5f 03 	lds	r24, 0x035F
    1038:	90 91 60 03 	lds	r25, 0x0360
    103c:	9d 7f       	andi	r25, 0xFD	; 253
    103e:	90 93 60 03 	sts	0x0360, r25
    1042:	80 93 5f 03 	sts	0x035F, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1046:	2f bf       	out	0x3f, r18	; 63
			TIM2_OVF_OFF();
    1048:	89 b7       	in	r24, 0x39	; 57
    104a:	8f 7b       	andi	r24, 0xBF	; 191
    104c:	89 bf       	out	0x39, r24	; 57
			SnakeGame_Stop();
    104e:	0e 94 43 02 	call	0x486	; 0x486 <SnakeGame_Stop>
			FLAGS_SWITCH_OFF( SNAKE_PLAYING_NOW_FLAG );
    1052:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1054:	f8 94       	cli
    1056:	80 91 5f 03 	lds	r24, 0x035F
    105a:	90 91 60 03 	lds	r25, 0x0360
    105e:	8f 77       	andi	r24, 0x7F	; 127
    1060:	90 93 60 03 	sts	0x0360, r25
    1064:	80 93 5f 03 	sts	0x035F, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1068:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    106a:	7a ce       	rjmp	.-780    	; 0xd60 <main+0x3c>

0000106c <__vector_5>:
}

//================================================//
//== 			Game timer ticks				==//
ISR(TIMER2_OVF_vect)
{
    106c:	1f 92       	push	r1
    106e:	0f 92       	push	r0
    1070:	0f b6       	in	r0, 0x3f	; 63
    1072:	0f 92       	push	r0
    1074:	11 24       	eor	r1, r1
    1076:	2f 93       	push	r18
    1078:	3f 93       	push	r19
    107a:	4f 93       	push	r20
    107c:	5f 93       	push	r21
    107e:	6f 93       	push	r22
    1080:	7f 93       	push	r23
    1082:	8f 93       	push	r24
    1084:	9f 93       	push	r25
    1086:	af 93       	push	r26
    1088:	bf 93       	push	r27
    108a:	ef 93       	push	r30
    108c:	ff 93       	push	r31
	if(!timer_delay--){
    108e:	80 91 66 03 	lds	r24, 0x0366
    1092:	81 50       	subi	r24, 0x01	; 1
    1094:	80 93 66 03 	sts	0x0366, r24
    1098:	8f 5f       	subi	r24, 0xFF	; 255
    109a:	91 f4       	brne	.+36     	; 0x10c0 <__vector_5+0x54>
		if(!timer_ticks_to_get_present--){
    109c:	80 91 fc 00 	lds	r24, 0x00FC
    10a0:	81 50       	subi	r24, 0x01	; 1
    10a2:	80 93 fc 00 	sts	0x00FC, r24
    10a6:	8f 5f       	subi	r24, 0xFF	; 255
    10a8:	29 f4       	brne	.+10     	; 0x10b4 <__vector_5+0x48>
			timer_ticks_to_get_present = SPEED_TICKS_TO_GET_PRESENT;
    10aa:	8c e3       	ldi	r24, 0x3C	; 60
    10ac:	80 93 fc 00 	sts	0x00FC, r24
			SnakeGame_AddmeUpdateXY();
    10b0:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <SnakeGame_AddmeUpdateXY>
		}
		SnakeGame_TakeNextStep();
    10b4:	0e 94 92 03 	call	0x724	; 0x724 <SnakeGame_TakeNextStep>
		timer_delay = step_speed;
    10b8:	80 91 a2 00 	lds	r24, 0x00A2
    10bc:	80 93 66 03 	sts	0x0366, r24
	}
}
    10c0:	ff 91       	pop	r31
    10c2:	ef 91       	pop	r30
    10c4:	bf 91       	pop	r27
    10c6:	af 91       	pop	r26
    10c8:	9f 91       	pop	r25
    10ca:	8f 91       	pop	r24
    10cc:	7f 91       	pop	r23
    10ce:	6f 91       	pop	r22
    10d0:	5f 91       	pop	r21
    10d2:	4f 91       	pop	r20
    10d4:	3f 91       	pop	r19
    10d6:	2f 91       	pop	r18
    10d8:	0f 90       	pop	r0
    10da:	0f be       	out	0x3f, r0	; 63
    10dc:	0f 90       	pop	r0
    10de:	1f 90       	pop	r1
    10e0:	18 95       	reti

000010e2 <__vector_2>:


//================================================//
//== 				Joystick click				==//
ISR(INT1_vect)
{
    10e2:	1f 92       	push	r1
    10e4:	0f 92       	push	r0
    10e6:	0f b6       	in	r0, 0x3f	; 63
    10e8:	0f 92       	push	r0
    10ea:	11 24       	eor	r1, r1
    10ec:	2f 93       	push	r18
    10ee:	3f 93       	push	r19
    10f0:	4f 93       	push	r20
    10f2:	5f 93       	push	r21
    10f4:	6f 93       	push	r22
    10f6:	7f 93       	push	r23
    10f8:	8f 93       	push	r24
    10fa:	9f 93       	push	r25
    10fc:	af 93       	push	r26
    10fe:	bf 93       	push	r27
    1100:	ef 93       	push	r30
    1102:	ff 93       	push	r31
    1104:	80 e4       	ldi	r24, 0x40	; 64
    1106:	9f e1       	ldi	r25, 0x1F	; 31
    1108:	01 97       	sbiw	r24, 0x01	; 1
    110a:	f1 f7       	brne	.-4      	; 0x1108 <__vector_2+0x26>
#ifndef ANIMATION_SWITCH_MENU_ITEMS
	menu_before_now = 0x80;
#endif
	_delay_ms(2);	// anti brrrrzzzzrr

	GIFR = _BV(INTF1); // kill int1 flag
    110c:	80 e8       	ldi	r24, 0x80	; 128
    110e:	8a bf       	out	0x3a, r24	; 58

//	Lcd3310_ClearCenter();
//	Lcd3310_GotoXY(0, 0);

	while(1){
		uint8_t jpin_h = (JPIN & 0xf0);
    1110:	83 b3       	in	r24, 0x13	; 19
    1112:	80 7f       	andi	r24, 0xF0	; 240

		if( jpin_h == (uint8_t)(J_LU | J_RU) ){
    1114:	80 39       	cpi	r24, 0x90	; 144
    1116:	11 f4       	brne	.+4      	; 0x111c <__vector_2+0x3a>
    1118:	82 e0       	ldi	r24, 0x02	; 2
    111a:	0f c0       	rjmp	.+30     	; 0x113a <__vector_2+0x58>
					break;
				}
			}
		}

		if( jpin_h == (uint8_t)(J_LD | J_RD) ){
    111c:	80 36       	cpi	r24, 0x60	; 96
    111e:	11 f4       	brne	.+4      	; 0x1124 <__vector_2+0x42>
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	0b c0       	rjmp	.+22     	; 0x113a <__vector_2+0x58>
					break;
				}
			}
		}

		if( jpin_h == (uint8_t)(J_LU | J_LD) ){
    1124:	80 3c       	cpi	r24, 0xC0	; 192
    1126:	11 f4       	brne	.+4      	; 0x112c <__vector_2+0x4a>
    1128:	84 e0       	ldi	r24, 0x04	; 4
    112a:	07 c0       	rjmp	.+14     	; 0x113a <__vector_2+0x58>
					break;
				}
			}

		}
		if( jpin_h == (uint8_t)(J_RU | J_RD) ){
    112c:	80 33       	cpi	r24, 0x30	; 48
    112e:	11 f4       	brne	.+4      	; 0x1134 <__vector_2+0x52>
    1130:	83 e0       	ldi	r24, 0x03	; 3
    1132:	03 c0       	rjmp	.+6      	; 0x113a <__vector_2+0x58>
					break;
				}
			}

		}
		if( jpin_h == (uint8_t)(J_RU | J_LU | J_RD | J_LD) ){
    1134:	80 3f       	cpi	r24, 0xF0	; 240
    1136:	61 f7       	brne	.-40     	; 0x1110 <__vector_2+0x2e>
    1138:	80 e0       	ldi	r24, 0x00	; 0
				}
			}
		}
	}

	if (JOYSTICK_INT_CHECK()) { return; } // interrupt on brrzzzz then pulling up joystick, so not need to do smth
    113a:	83 99       	sbic	0x10, 3	; 16
    113c:	58 c0       	rjmp	.+176    	; 0x11ee <__vector_2+0x10c>

	if (result == J_CENTER){
    113e:	88 23       	and	r24, r24
    1140:	41 f4       	brne	.+16     	; 0x1152 <__vector_2+0x70>
		FLAGS_SWITCH_ON(JOYSTICK_CENTER_CLICK_FLAG);
    1142:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1144:	f8 94       	cli
    1146:	80 91 5f 03 	lds	r24, 0x035F
    114a:	90 91 60 03 	lds	r25, 0x0360
    114e:	82 60       	ori	r24, 0x02	; 2
    1150:	13 c0       	rjmp	.+38     	; 0x1178 <__vector_2+0x96>
	}else if(result == J_UP){
    1152:	81 30       	cpi	r24, 0x01	; 1
    1154:	b9 f4       	brne	.+46     	; 0x1184 <__vector_2+0xa2>
		menu_now = menu_now->prev;
    1156:	e0 91 73 03 	lds	r30, 0x0373
    115a:	f0 91 74 03 	lds	r31, 0x0374
    115e:	87 81       	ldd	r24, Z+7	; 0x07
    1160:	90 85       	ldd	r25, Z+8	; 0x08
    1162:	90 93 74 03 	sts	0x0374, r25
    1166:	80 93 73 03 	sts	0x0373, r24

#ifdef ANIMATION_SWITCH_MENU_ITEMS
		FLAGS_SWITCH_ON( ANIMATION_PREV_FLAG );
    116a:	2f b7       	in	r18, 0x3f	; 63
    116c:	f8 94       	cli
    116e:	80 91 5f 03 	lds	r24, 0x035F
    1172:	90 91 60 03 	lds	r25, 0x0360
    1176:	88 60       	ori	r24, 0x08	; 8
    1178:	90 93 60 03 	sts	0x0360, r25
    117c:	80 93 5f 03 	sts	0x035F, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1180:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    1182:	35 c0       	rjmp	.+106    	; 0x11ee <__vector_2+0x10c>
#else
		menu_before_now--;
		FLAGS_SWITCH_ON( UPDATE_DISPLAY_FLAG );
#endif
	}else if(result == J_DOWN){
    1184:	82 30       	cpi	r24, 0x02	; 2
    1186:	91 f4       	brne	.+36     	; 0x11ac <__vector_2+0xca>
		menu_now = menu_now->next;
    1188:	e0 91 73 03 	lds	r30, 0x0373
    118c:	f0 91 74 03 	lds	r31, 0x0374
    1190:	85 81       	ldd	r24, Z+5	; 0x05
    1192:	96 81       	ldd	r25, Z+6	; 0x06
    1194:	90 93 74 03 	sts	0x0374, r25
    1198:	80 93 73 03 	sts	0x0373, r24

#ifdef ANIMATION_SWITCH_MENU_ITEMS
		FLAGS_SWITCH_ON( ANIMATION_NEXT_FLAG );
    119c:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    119e:	f8 94       	cli
    11a0:	80 91 5f 03 	lds	r24, 0x035F
    11a4:	90 91 60 03 	lds	r25, 0x0360
    11a8:	84 60       	ori	r24, 0x04	; 4
    11aa:	e6 cf       	rjmp	.-52     	; 0x1178 <__vector_2+0x96>
    11ac:	20 91 5f 03 	lds	r18, 0x035F
    11b0:	30 91 60 03 	lds	r19, 0x0360
#else
		menu_before_now++;
		FLAGS_SWITCH_ON( UPDATE_DISPLAY_FLAG );
#endif
	}else if(result == J_LEFT){
    11b4:	83 30       	cpi	r24, 0x03	; 3
    11b6:	71 f4       	brne	.+28     	; 0x11d4 <__vector_2+0xf2>
		IF_FLAG_ON( SNAKE_PLAYING_NOW_FLAG ){
    11b8:	8f b7       	in	r24, 0x3f	; 63
    11ba:	f8 94       	cli
    11bc:	30 93 62 03 	sts	0x0362, r19
    11c0:	20 93 61 03 	sts	0x0361, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    11c4:	8f bf       	out	0x3f, r24	; 63
    11c6:	80 91 61 03 	lds	r24, 0x0361
    11ca:	87 ff       	sbrs	r24, 7
    11cc:	10 c0       	rjmp	.+32     	; 0x11ee <__vector_2+0x10c>
			SnakeGame_TurnLeft();
    11ce:	0e 94 44 02 	call	0x488	; 0x488 <SnakeGame_TurnLeft>
    11d2:	0d c0       	rjmp	.+26     	; 0x11ee <__vector_2+0x10c>
		}
	}else if(result == J_RIGHT){
		IF_FLAG_ON( SNAKE_PLAYING_NOW_FLAG ){
    11d4:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    11d6:	f8 94       	cli
    11d8:	30 93 62 03 	sts	0x0362, r19
    11dc:	20 93 61 03 	sts	0x0361, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    11e0:	8f bf       	out	0x3f, r24	; 63
    11e2:	80 91 61 03 	lds	r24, 0x0361
    11e6:	87 ff       	sbrs	r24, 7
    11e8:	02 c0       	rjmp	.+4      	; 0x11ee <__vector_2+0x10c>
			SnakeGame_TurnRight();
    11ea:	0e 94 4f 02 	call	0x49e	; 0x49e <SnakeGame_TurnRight>
		}
	}

}
    11ee:	ff 91       	pop	r31
    11f0:	ef 91       	pop	r30
    11f2:	bf 91       	pop	r27
    11f4:	af 91       	pop	r26
    11f6:	9f 91       	pop	r25
    11f8:	8f 91       	pop	r24
    11fa:	7f 91       	pop	r23
    11fc:	6f 91       	pop	r22
    11fe:	5f 91       	pop	r21
    1200:	4f 91       	pop	r20
    1202:	3f 91       	pop	r19
    1204:	2f 91       	pop	r18
    1206:	0f 90       	pop	r0
    1208:	0f be       	out	0x3f, r0	; 63
    120a:	0f 90       	pop	r0
    120c:	1f 90       	pop	r1
    120e:	18 95       	reti

00001210 <HalfByteAsASCII>:
#include "uint8_16_to_string.h"

char to_string_result[] = {0, 0, 0, 0};

char HalfByteAsASCII(char c)
{
    1210:	98 2f       	mov	r25, r24
    if (c >= 0 && c <= 9){
    1212:	8a 30       	cpi	r24, 0x0A	; 10
    1214:	10 f4       	brcc	.+4      	; 0x121a <HalfByteAsASCII+0xa>
        c += 0x30;
    1216:	80 5d       	subi	r24, 0xD0	; 208
    1218:	08 95       	ret
    }else if (c >= 0xA && c <= 0x0F){
    121a:	8a 50       	subi	r24, 0x0A	; 10
    121c:	86 30       	cpi	r24, 0x06	; 6
    121e:	10 f0       	brcs	.+4      	; 0x1224 <HalfByteAsASCII+0x14>
    1220:	8f e3       	ldi	r24, 0x3F	; 63
    1222:	08 95       	ret
        c += 0x37;
    1224:	89 2f       	mov	r24, r25
    1226:	89 5c       	subi	r24, 0xC9	; 201
    }else{
        c = '?';
    }
    return c;
}
    1228:	08 95       	ret

0000122a <UInt8ToString>:

void UInt8ToString(uint8_t ch)
{
    122a:	28 2f       	mov	r18, r24
	to_string_result[0] = HalfByteAsASCII( (ch & 0xf0) >>4 );
    122c:	98 2f       	mov	r25, r24
    122e:	92 95       	swap	r25
    1230:	9f 70       	andi	r25, 0x0F	; 15

char to_string_result[] = {0, 0, 0, 0};

char HalfByteAsASCII(char c)
{
    if (c >= 0 && c <= 9){
    1232:	9a 30       	cpi	r25, 0x0A	; 10
    1234:	18 f4       	brcc	.+6      	; 0x123c <UInt8ToString+0x12>
        c += 0x30;
    1236:	89 2f       	mov	r24, r25
    1238:	80 5d       	subi	r24, 0xD0	; 208
    123a:	08 c0       	rjmp	.+16     	; 0x124c <UInt8ToString+0x22>
    }else if (c >= 0xA && c <= 0x0F){
    123c:	89 2f       	mov	r24, r25
    123e:	8a 50       	subi	r24, 0x0A	; 10
    1240:	86 30       	cpi	r24, 0x06	; 6
    1242:	10 f0       	brcs	.+4      	; 0x1248 <UInt8ToString+0x1e>
    1244:	8f e3       	ldi	r24, 0x3F	; 63
    1246:	02 c0       	rjmp	.+4      	; 0x124c <UInt8ToString+0x22>
        c += 0x37;
    1248:	89 2f       	mov	r24, r25
    124a:	89 5c       	subi	r24, 0xC9	; 201
    return c;
}

void UInt8ToString(uint8_t ch)
{
	to_string_result[0] = HalfByteAsASCII( (ch & 0xf0) >>4 );
    124c:	80 93 67 03 	sts	0x0367, r24
	to_string_result[1] = HalfByteAsASCII( ch & 0x0f );
    1250:	92 2f       	mov	r25, r18
    1252:	9f 70       	andi	r25, 0x0F	; 15

char to_string_result[] = {0, 0, 0, 0};

char HalfByteAsASCII(char c)
{
    if (c >= 0 && c <= 9){
    1254:	9a 30       	cpi	r25, 0x0A	; 10
    1256:	18 f4       	brcc	.+6      	; 0x125e <UInt8ToString+0x34>
        c += 0x30;
    1258:	89 2f       	mov	r24, r25
    125a:	80 5d       	subi	r24, 0xD0	; 208
    125c:	08 c0       	rjmp	.+16     	; 0x126e <UInt8ToString+0x44>
    }else if (c >= 0xA && c <= 0x0F){
    125e:	89 2f       	mov	r24, r25
    1260:	8a 50       	subi	r24, 0x0A	; 10
    1262:	86 30       	cpi	r24, 0x06	; 6
    1264:	10 f0       	brcs	.+4      	; 0x126a <UInt8ToString+0x40>
    1266:	8f e3       	ldi	r24, 0x3F	; 63
    1268:	02 c0       	rjmp	.+4      	; 0x126e <UInt8ToString+0x44>
        c += 0x37;
    126a:	89 2f       	mov	r24, r25
    126c:	89 5c       	subi	r24, 0xC9	; 201
}

void UInt8ToString(uint8_t ch)
{
	to_string_result[0] = HalfByteAsASCII( (ch & 0xf0) >>4 );
	to_string_result[1] = HalfByteAsASCII( ch & 0x0f );
    126e:	80 93 68 03 	sts	0x0368, r24
	//to_string_result[2] = 0x00; // end of result string here
	// result in result_str
}
    1272:	08 95       	ret

00001274 <UInt16ToString>:

void UInt16ToString(uint16_t i)
{
    1274:	9c 01       	movw	r18, r24
	//to_string_result[0] = HalfByteAsASCII( (i & 0xf000) >> 12 );
	to_string_result[1] = HalfByteAsASCII( (i & 0x0f00) >> 8  );
    1276:	80 70       	andi	r24, 0x00	; 0
    1278:	9f 70       	andi	r25, 0x0F	; 15

char to_string_result[] = {0, 0, 0, 0};

char HalfByteAsASCII(char c)
{
    if (c >= 0 && c <= 9){
    127a:	9a 30       	cpi	r25, 0x0A	; 10
    127c:	18 f4       	brcc	.+6      	; 0x1284 <UInt16ToString+0x10>
        c += 0x30;
    127e:	89 2f       	mov	r24, r25
    1280:	80 5d       	subi	r24, 0xD0	; 208
    1282:	08 c0       	rjmp	.+16     	; 0x1294 <UInt16ToString+0x20>
    }else if (c >= 0xA && c <= 0x0F){
    1284:	89 2f       	mov	r24, r25
    1286:	8a 50       	subi	r24, 0x0A	; 10
    1288:	86 30       	cpi	r24, 0x06	; 6
    128a:	10 f0       	brcs	.+4      	; 0x1290 <UInt16ToString+0x1c>
    128c:	8f e3       	ldi	r24, 0x3F	; 63
    128e:	02 c0       	rjmp	.+4      	; 0x1294 <UInt16ToString+0x20>
        c += 0x37;
    1290:	89 2f       	mov	r24, r25
    1292:	89 5c       	subi	r24, 0xC9	; 201
}

void UInt16ToString(uint16_t i)
{
	//to_string_result[0] = HalfByteAsASCII( (i & 0xf000) >> 12 );
	to_string_result[1] = HalfByteAsASCII( (i & 0x0f00) >> 8  );
    1294:	80 93 68 03 	sts	0x0368, r24
	to_string_result[2] = HalfByteAsASCII( (i & 0x00f0) >> 4  );
    1298:	c9 01       	movw	r24, r18
    129a:	80 7f       	andi	r24, 0xF0	; 240
    129c:	90 70       	andi	r25, 0x00	; 0
    129e:	34 e0       	ldi	r19, 0x04	; 4
    12a0:	96 95       	lsr	r25
    12a2:	87 95       	ror	r24
    12a4:	3a 95       	dec	r19
    12a6:	e1 f7       	brne	.-8      	; 0x12a0 <UInt16ToString+0x2c>
    12a8:	98 2f       	mov	r25, r24

char to_string_result[] = {0, 0, 0, 0};

char HalfByteAsASCII(char c)
{
    if (c >= 0 && c <= 9){
    12aa:	8a 30       	cpi	r24, 0x0A	; 10
    12ac:	10 f4       	brcc	.+4      	; 0x12b2 <UInt16ToString+0x3e>
        c += 0x30;
    12ae:	80 5d       	subi	r24, 0xD0	; 208
    12b0:	07 c0       	rjmp	.+14     	; 0x12c0 <UInt16ToString+0x4c>
    }else if (c >= 0xA && c <= 0x0F){
    12b2:	8a 50       	subi	r24, 0x0A	; 10
    12b4:	86 30       	cpi	r24, 0x06	; 6
    12b6:	10 f0       	brcs	.+4      	; 0x12bc <UInt16ToString+0x48>
    12b8:	8f e3       	ldi	r24, 0x3F	; 63
    12ba:	02 c0       	rjmp	.+4      	; 0x12c0 <UInt16ToString+0x4c>
        c += 0x37;
    12bc:	89 2f       	mov	r24, r25
    12be:	89 5c       	subi	r24, 0xC9	; 201

void UInt16ToString(uint16_t i)
{
	//to_string_result[0] = HalfByteAsASCII( (i & 0xf000) >> 12 );
	to_string_result[1] = HalfByteAsASCII( (i & 0x0f00) >> 8  );
	to_string_result[2] = HalfByteAsASCII( (i & 0x00f0) >> 4  );
    12c0:	80 93 69 03 	sts	0x0369, r24
	to_string_result[3] = HalfByteAsASCII(  i & 0x000f		);
    12c4:	92 2f       	mov	r25, r18
    12c6:	9f 70       	andi	r25, 0x0F	; 15

char to_string_result[] = {0, 0, 0, 0};

char HalfByteAsASCII(char c)
{
    if (c >= 0 && c <= 9){
    12c8:	9a 30       	cpi	r25, 0x0A	; 10
    12ca:	18 f4       	brcc	.+6      	; 0x12d2 <UInt16ToString+0x5e>
        c += 0x30;
    12cc:	89 2f       	mov	r24, r25
    12ce:	80 5d       	subi	r24, 0xD0	; 208
    12d0:	08 c0       	rjmp	.+16     	; 0x12e2 <UInt16ToString+0x6e>
    }else if (c >= 0xA && c <= 0x0F){
    12d2:	89 2f       	mov	r24, r25
    12d4:	8a 50       	subi	r24, 0x0A	; 10
    12d6:	86 30       	cpi	r24, 0x06	; 6
    12d8:	10 f0       	brcs	.+4      	; 0x12de <UInt16ToString+0x6a>
    12da:	8f e3       	ldi	r24, 0x3F	; 63
    12dc:	02 c0       	rjmp	.+4      	; 0x12e2 <UInt16ToString+0x6e>
        c += 0x37;
    12de:	89 2f       	mov	r24, r25
    12e0:	89 5c       	subi	r24, 0xC9	; 201
void UInt16ToString(uint16_t i)
{
	//to_string_result[0] = HalfByteAsASCII( (i & 0xf000) >> 12 );
	to_string_result[1] = HalfByteAsASCII( (i & 0x0f00) >> 8  );
	to_string_result[2] = HalfByteAsASCII( (i & 0x00f0) >> 4  );
	to_string_result[3] = HalfByteAsASCII(  i & 0x000f		);
    12e2:	80 93 6a 03 	sts	0x036A, r24
	// result in result_str
}
    12e6:	08 95       	ret

000012e8 <Lcd3310_Char>:

	_delay_ms(show_init_data_delay_ms); // show image from LcdCache initial value
}

void Lcd3310_Char(unsigned char ch, WhiteOrBlackText is_invert_colors)
{
    12e8:	cf 93       	push	r28
    12ea:	df 93       	push	r29
    12ec:	28 2f       	mov	r18, r24
    12ee:	36 2f       	mov	r19, r22
	//  Convert to a printable character.
    if ( (ch < 0x20) ){
    12f0:	80 32       	cpi	r24, 0x20	; 32
    12f2:	08 f4       	brcc	.+2      	; 0x12f6 <Lcd3310_Char+0xe>
    12f4:	2c e5       	ldi	r18, 0x5C	; 92
        ch = 92;
    }
	
	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    12f6:	c0 91 6b 03 	lds	r28, 0x036B
    12fa:	d0 91 6c 03 	lds	r29, 0x036C
    12fe:	ce 01       	movw	r24, r28
    1300:	64 e5       	ldi	r22, 0x54	; 84
    1302:	70 e0       	ldi	r23, 0x00	; 0
    1304:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <__udivmodhi4>
    1308:	80 68       	ori	r24, 0x80	; 128


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    130a:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    130c:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    130e:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1310:	77 9b       	sbis	0x0e, 7	; 14
    1312:	fe cf       	rjmp	.-4      	; 0x1310 <Lcd3310_Char+0x28>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1314:	c3 9a       	sbi	0x18, 3	; 24
    if ( (ch < 0x20) ){
        ch = 92;
    }
	
	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    Lcd3310_Send( 0x40 | (Lcd3310_Index / LCD_X_RES), LCD_CMD );
    1316:	ce 01       	movw	r24, r28
    1318:	64 e5       	ldi	r22, 0x54	; 84
    131a:	70 e0       	ldi	r23, 0x00	; 0
    131c:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <__udivmodhi4>
    1320:	60 64       	ori	r22, 0x40	; 64


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1322:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    1324:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    1326:	6f b9       	out	0x0f, r22	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1328:	77 9b       	sbis	0x0e, 7	; 14
    132a:	fe cf       	rjmp	.-4      	; 0x1328 <Lcd3310_Char+0x40>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    132c:	c3 9a       	sbi	0x18, 3	; 24
	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    Lcd3310_Send( 0x40 | (Lcd3310_Index / LCD_X_RES), LCD_CMD );
	
	for (char i = 0; i < 5; i++ ){		
		char temp;
		PGM_GET_BYTE_FROM_FONTLOOKUP(temp, ch, i );
    132e:	85 e0       	ldi	r24, 0x05	; 5
    1330:	28 9f       	mul	r18, r24
    1332:	c0 01       	movw	r24, r0
    1334:	11 24       	eor	r1, r1
    1336:	fc 01       	movw	r30, r24
    1338:	ec 54       	subi	r30, 0x4C	; 76
    133a:	f0 40       	sbci	r31, 0x00	; 0
    }
	
	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    Lcd3310_Send( 0x40 | (Lcd3310_Index / LCD_X_RES), LCD_CMD );
	
	for (char i = 0; i < 5; i++ ){		
    133c:	87 54       	subi	r24, 0x47	; 71
    133e:	90 40       	sbci	r25, 0x00	; 0
		char temp;
		PGM_GET_BYTE_FROM_FONTLOOKUP(temp, ch, i );
    1340:	24 91       	lpm	r18, Z+
    1342:	22 0f       	add	r18, r18
		if(is_invert_colors) temp = (unsigned char) ~temp;
    1344:	31 11       	cpse	r19, r1
    1346:	20 95       	com	r18


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1348:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    134a:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    134c:	2f b9       	out	0x0f, r18	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    134e:	77 9b       	sbis	0x0e, 7	; 14
    1350:	fe cf       	rjmp	.-4      	; 0x134e <Lcd3310_Char+0x66>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1352:	c3 9a       	sbi	0x18, 3	; 24
    1354:	31 96       	adiw	r30, 0x01	; 1
    }
	
	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    Lcd3310_Send( 0x40 | (Lcd3310_Index / LCD_X_RES), LCD_CMD );
	
	for (char i = 0; i < 5; i++ ){		
    1356:	e8 17       	cp	r30, r24
    1358:	f9 07       	cpc	r31, r25
    135a:	91 f7       	brne	.-28     	; 0x1340 <Lcd3310_Char+0x58>
		char temp;
		PGM_GET_BYTE_FROM_FONTLOOKUP(temp, ch, i );
		if(is_invert_colors) temp = (unsigned char) ~temp;
	    Lcd3310_Send( temp, LCD_DATA );
    }
	if(is_invert_colors) Lcd3310_Send( 0xff, LCD_DATA );
    135c:	33 23       	and	r19, r19
    135e:	39 f0       	breq	.+14     	; 0x136e <Lcd3310_Char+0x86>


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1360:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    1362:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    1364:	8f ef       	ldi	r24, 0xFF	; 255
    1366:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1368:	77 9b       	sbis	0x0e, 7	; 14
    136a:	fe cf       	rjmp	.-4      	; 0x1368 <Lcd3310_Char+0x80>
    136c:	05 c0       	rjmp	.+10     	; 0x1378 <Lcd3310_Char+0x90>


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    136e:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    1370:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    1372:	1f b8       	out	0x0f, r1	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1374:	77 9b       	sbis	0x0e, 7	; 14
    1376:	fe cf       	rjmp	.-4      	; 0x1374 <Lcd3310_Char+0x8c>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1378:	c3 9a       	sbi	0x18, 3	; 24
		if(is_invert_colors) temp = (unsigned char) ~temp;
	    Lcd3310_Send( temp, LCD_DATA );
    }
	if(is_invert_colors) Lcd3310_Send( 0xff, LCD_DATA );
	else Lcd3310_Send( 0x00, LCD_DATA );
	Lcd3310_Index += 6;
    137a:	26 96       	adiw	r28, 0x06	; 6
    137c:	d0 93 6c 03 	sts	0x036C, r29
    1380:	c0 93 6b 03 	sts	0x036B, r28
}
    1384:	df 91       	pop	r29
    1386:	cf 91       	pop	r28
    1388:	08 95       	ret

0000138a <Lcd3310_String_P>:

void Lcd3310_String_P(PGM_P str_ptr, WhiteOrBlackText is_invert_colors)
{
    138a:	0f 93       	push	r16
    138c:	1f 93       	push	r17
    138e:	cf 93       	push	r28
    1390:	df 93       	push	r29
    1392:	08 2f       	mov	r16, r24
    1394:	16 2f       	mov	r17, r22
    1396:	28 2f       	mov	r18, r24
    1398:	39 2f       	mov	r19, r25
    139a:	e9 01       	movw	r28, r18
    139c:	04 c0       	rjmp	.+8      	; 0x13a6 <Lcd3310_String_P+0x1c>
	char count = 0;
    while ( *str_ptr ){
		count++;
        Lcd3310_Char( *(str_ptr++), is_invert_colors );
    139e:	21 96       	adiw	r28, 0x01	; 1
    13a0:	61 2f       	mov	r22, r17
    13a2:	0e 94 74 09 	call	0x12e8	; 0x12e8 <Lcd3310_Char>
    13a6:	9e 01       	movw	r18, r28
    13a8:	20 1b       	sub	r18, r16
    13aa:	92 2f       	mov	r25, r18
}

void Lcd3310_String_P(PGM_P str_ptr, WhiteOrBlackText is_invert_colors)
{
	char count = 0;
    while ( *str_ptr ){
    13ac:	88 81       	ld	r24, Y
    13ae:	88 23       	and	r24, r24
    13b0:	b1 f7       	brne	.-20     	; 0x139e <Lcd3310_String_P+0x14>
		count++;
        Lcd3310_Char( *(str_ptr++), is_invert_colors );
    }
	if(is_invert_colors && count > 0 && count < 14){
    13b2:	11 23       	and	r17, r17
    13b4:	b9 f0       	breq	.+46     	; 0x13e4 <Lcd3310_String_P+0x5a>
    13b6:	22 23       	and	r18, r18
    13b8:	a9 f0       	breq	.+42     	; 0x13e4 <Lcd3310_String_P+0x5a>
    13ba:	2e 30       	cpi	r18, 0x0E	; 14
    13bc:	98 f4       	brcc	.+38     	; 0x13e4 <Lcd3310_String_P+0x5a>
		for(count = (14 - count) * 6; count > 0; count--){
    13be:	2e e0       	ldi	r18, 0x0E	; 14
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	29 1b       	sub	r18, r25
    13c4:	31 09       	sbc	r19, r1
    13c6:	c9 01       	movw	r24, r18
    13c8:	88 0f       	add	r24, r24
    13ca:	99 1f       	adc	r25, r25
    13cc:	82 0f       	add	r24, r18
    13ce:	93 1f       	adc	r25, r19
    13d0:	88 0f       	add	r24, r24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    13d2:	9f ef       	ldi	r25, 0xFF	; 255


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    13d4:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    13d6:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    13d8:	9f b9       	out	0x0f, r25	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    13da:	77 9b       	sbis	0x0e, 7	; 14
    13dc:	fe cf       	rjmp	.-4      	; 0x13da <Lcd3310_String_P+0x50>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    13de:	c3 9a       	sbi	0x18, 3	; 24
    while ( *str_ptr ){
		count++;
        Lcd3310_Char( *(str_ptr++), is_invert_colors );
    }
	if(is_invert_colors && count > 0 && count < 14){
		for(count = (14 - count) * 6; count > 0; count--){
    13e0:	81 50       	subi	r24, 0x01	; 1
    13e2:	c1 f7       	brne	.-16     	; 0x13d4 <Lcd3310_String_P+0x4a>
			Lcd3310_Send( 0xff, LCD_DATA );
		}
	}
}
    13e4:	df 91       	pop	r29
    13e6:	cf 91       	pop	r28
    13e8:	1f 91       	pop	r17
    13ea:	0f 91       	pop	r16
    13ec:	08 95       	ret

000013ee <Lcd3310_String_P_anime>:

#ifdef ANIMATION_SWITCH_MENU_ITEMS
void Lcd3310_String_P_anime(PGM_P str_ptr, PGM_P str_ptr_next, WhiteOrBlackText is_invert_colors, char num_of_cadr, char is_next)
{
    13ee:	5f 92       	push	r5
    13f0:	6f 92       	push	r6
    13f2:	7f 92       	push	r7
    13f4:	8f 92       	push	r8
    13f6:	9f 92       	push	r9
    13f8:	af 92       	push	r10
    13fa:	bf 92       	push	r11
    13fc:	cf 92       	push	r12
    13fe:	df 92       	push	r13
    1400:	ef 92       	push	r14
    1402:	ff 92       	push	r15
    1404:	0f 93       	push	r16
    1406:	1f 93       	push	r17
    1408:	cf 93       	push	r28
    140a:	df 93       	push	r29
    140c:	5c 01       	movw	r10, r24
    140e:	6b 01       	movw	r12, r22
    1410:	84 2e       	mov	r8, r20
    1412:	70 2e       	mov	r7, r16
	unsigned char ch1 = 1, ch2 = 1, display, temp1, temp2, count = 0;

	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    1414:	e0 91 6b 03 	lds	r30, 0x036B
    1418:	f0 91 6c 03 	lds	r31, 0x036C
    141c:	cf 01       	movw	r24, r30
    141e:	64 e5       	ldi	r22, 0x54	; 84
    1420:	70 e0       	ldi	r23, 0x00	; 0
    1422:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <__udivmodhi4>
    1426:	80 68       	ori	r24, 0x80	; 128


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1428:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    142a:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    142c:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    142e:	77 9b       	sbis	0x0e, 7	; 14
    1430:	fe cf       	rjmp	.-4      	; 0x142e <Lcd3310_String_P_anime+0x40>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1432:	c3 9a       	sbi	0x18, 3	; 24
void Lcd3310_String_P_anime(PGM_P str_ptr, PGM_P str_ptr_next, WhiteOrBlackText is_invert_colors, char num_of_cadr, char is_next)
{
	unsigned char ch1 = 1, ch2 = 1, display, temp1, temp2, count = 0;

	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    Lcd3310_Send( 0x40 | (Lcd3310_Index / LCD_X_RES), LCD_CMD );
    1434:	cf 01       	movw	r24, r30
    1436:	64 e5       	ldi	r22, 0x54	; 84
    1438:	70 e0       	ldi	r23, 0x00	; 0
    143a:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <__udivmodhi4>
    143e:	60 64       	ori	r22, 0x40	; 64


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1440:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    1442:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    1444:	6f b9       	out	0x0f, r22	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1446:	77 9b       	sbis	0x0e, 7	; 14
    1448:	fe cf       	rjmp	.-4      	; 0x1446 <Lcd3310_String_P_anime+0x58>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    144a:	c3 9a       	sbi	0x18, 3	; 24
    144c:	99 24       	eor	r9, r9

		for (char i = 0; i < 5; i++ ){		
			if(ch1) PGM_GET_BYTE_FROM_FONTLOOKUP(temp1, ch1, i )
			else temp1 = 0x00;

			if(ch2) PGM_GET_BYTE_FROM_FONTLOOKUP(temp2, ch2, i )
    144e:	65 e0       	ldi	r22, 0x05	; 5
    1450:	66 2e       	mov	r6, r22
    1452:	e2 2e       	mov	r14, r18
    1454:	ff 24       	eor	r15, r15
			else temp2 = 0x00;

			if(is_next) display = (temp1 >> num_of_cadr) | ( (temp2 << (8 - num_of_cadr)) );
			else 		display = (temp1 << num_of_cadr) | ( (temp2 >> (8 - num_of_cadr)) );
    1456:	08 e0       	ldi	r16, 0x08	; 8
    1458:	10 e0       	ldi	r17, 0x00	; 0
    145a:	0e 19       	sub	r16, r14
    145c:	1f 09       	sbc	r17, r15
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    145e:	55 24       	eor	r5, r5
    1460:	5a 94       	dec	r5

	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    Lcd3310_Send( 0x40 | (Lcd3310_Index / LCD_X_RES), LCD_CMD );
	
	while ( ch1 || ch2 ){
		count++;
    1462:	93 94       	inc	r9
		if(*str_ptr) ch1 = *(str_ptr++);
    1464:	f5 01       	movw	r30, r10
    1466:	40 81       	ld	r20, Z
    1468:	44 23       	and	r20, r20
    146a:	19 f0       	breq	.+6      	; 0x1472 <Lcd3310_String_P_anime+0x84>
    146c:	08 94       	sec
    146e:	a1 1c       	adc	r10, r1
    1470:	b1 1c       	adc	r11, r1
		else ch1 = 0x00;
		
		if(*str_ptr_next) ch2 = *(str_ptr_next++);
    1472:	f6 01       	movw	r30, r12
    1474:	20 81       	ld	r18, Z
    1476:	22 23       	and	r18, r18
    1478:	19 f0       	breq	.+6      	; 0x1480 <Lcd3310_String_P_anime+0x92>
    147a:	08 94       	sec
    147c:	c1 1c       	adc	r12, r1
    147e:	d1 1c       	adc	r13, r1

		for (char i = 0; i < 5; i++ ){		
			if(ch1) PGM_GET_BYTE_FROM_FONTLOOKUP(temp1, ch1, i )
			else temp1 = 0x00;

			if(ch2) PGM_GET_BYTE_FROM_FONTLOOKUP(temp2, ch2, i )
    1480:	26 9d       	mul	r18, r6
    1482:	c0 01       	movw	r24, r0
    1484:	11 24       	eor	r1, r1
    1486:	ec 01       	movw	r28, r24
    1488:	cc 54       	subi	r28, 0x4C	; 76
    148a:	d0 40       	sbci	r29, 0x00	; 0
    148c:	46 9d       	mul	r20, r6
    148e:	d0 01       	movw	r26, r0
    1490:	11 24       	eor	r1, r1
    1492:	ac 54       	subi	r26, 0x4C	; 76
    1494:	b0 40       	sbci	r27, 0x00	; 0
		else ch1 = 0x00;
		
		if(*str_ptr_next) ch2 = *(str_ptr_next++);
		else ch2 = 0x00;

		for (char i = 0; i < 5; i++ ){		
    1496:	87 54       	subi	r24, 0x47	; 71
    1498:	90 40       	sbci	r25, 0x00	; 0
			if(ch1) PGM_GET_BYTE_FROM_FONTLOOKUP(temp1, ch1, i )
    149a:	44 23       	and	r20, r20
    149c:	11 f4       	brne	.+4      	; 0x14a2 <Lcd3310_String_P_anime+0xb4>
    149e:	50 e0       	ldi	r21, 0x00	; 0
    14a0:	03 c0       	rjmp	.+6      	; 0x14a8 <Lcd3310_String_P_anime+0xba>
    14a2:	fd 01       	movw	r30, r26
    14a4:	54 91       	lpm	r21, Z+
    14a6:	55 0f       	add	r21, r21
			else temp1 = 0x00;

			if(ch2) PGM_GET_BYTE_FROM_FONTLOOKUP(temp2, ch2, i )
    14a8:	22 23       	and	r18, r18
    14aa:	11 f4       	brne	.+4      	; 0x14b0 <Lcd3310_String_P_anime+0xc2>
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	03 c0       	rjmp	.+6      	; 0x14b6 <Lcd3310_String_P_anime+0xc8>
    14b0:	fe 01       	movw	r30, r28
    14b2:	34 91       	lpm	r19, Z+
    14b4:	33 0f       	add	r19, r19
    14b6:	e3 2f       	mov	r30, r19
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	65 2f       	mov	r22, r21
    14bc:	70 e0       	ldi	r23, 0x00	; 0
			else temp2 = 0x00;

			if(is_next) display = (temp1 >> num_of_cadr) | ( (temp2 << (8 - num_of_cadr)) );
    14be:	77 20       	and	r7, r7
    14c0:	69 f0       	breq	.+26     	; 0x14dc <Lcd3310_String_P_anime+0xee>
    14c2:	00 2e       	mov	r0, r16
    14c4:	02 c0       	rjmp	.+4      	; 0x14ca <Lcd3310_String_P_anime+0xdc>
    14c6:	ee 0f       	add	r30, r30
    14c8:	ff 1f       	adc	r31, r31
    14ca:	0a 94       	dec	r0
    14cc:	e2 f7       	brpl	.-8      	; 0x14c6 <Lcd3310_String_P_anime+0xd8>
    14ce:	0e 2c       	mov	r0, r14
    14d0:	02 c0       	rjmp	.+4      	; 0x14d6 <Lcd3310_String_P_anime+0xe8>
    14d2:	75 95       	asr	r23
    14d4:	67 95       	ror	r22
    14d6:	0a 94       	dec	r0
    14d8:	e2 f7       	brpl	.-8      	; 0x14d2 <Lcd3310_String_P_anime+0xe4>
    14da:	0c c0       	rjmp	.+24     	; 0x14f4 <Lcd3310_String_P_anime+0x106>
			else 		display = (temp1 << num_of_cadr) | ( (temp2 >> (8 - num_of_cadr)) );
    14dc:	00 2e       	mov	r0, r16
    14de:	02 c0       	rjmp	.+4      	; 0x14e4 <Lcd3310_String_P_anime+0xf6>
    14e0:	f5 95       	asr	r31
    14e2:	e7 95       	ror	r30
    14e4:	0a 94       	dec	r0
    14e6:	e2 f7       	brpl	.-8      	; 0x14e0 <Lcd3310_String_P_anime+0xf2>
    14e8:	0e 2c       	mov	r0, r14
    14ea:	02 c0       	rjmp	.+4      	; 0x14f0 <Lcd3310_String_P_anime+0x102>
    14ec:	66 0f       	add	r22, r22
    14ee:	77 1f       	adc	r23, r23
    14f0:	0a 94       	dec	r0
    14f2:	e2 f7       	brpl	.-8      	; 0x14ec <Lcd3310_String_P_anime+0xfe>
    14f4:	3e 2f       	mov	r19, r30
    14f6:	36 2b       	or	r19, r22
			if(is_invert_colors) display = (unsigned char) ~display;
    14f8:	81 10       	cpse	r8, r1
    14fa:	30 95       	com	r19


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    14fc:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    14fe:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    1500:	3f b9       	out	0x0f, r19	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1502:	77 9b       	sbis	0x0e, 7	; 14
    1504:	fe cf       	rjmp	.-4      	; 0x1502 <Lcd3310_String_P_anime+0x114>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1506:	c3 9a       	sbi	0x18, 3	; 24
    1508:	21 96       	adiw	r28, 0x01	; 1
    150a:	11 96       	adiw	r26, 0x01	; 1
		else ch1 = 0x00;
		
		if(*str_ptr_next) ch2 = *(str_ptr_next++);
		else ch2 = 0x00;

		for (char i = 0; i < 5; i++ ){		
    150c:	c8 17       	cp	r28, r24
    150e:	d9 07       	cpc	r29, r25
    1510:	09 f0       	breq	.+2      	; 0x1514 <Lcd3310_String_P_anime+0x126>
    1512:	c3 cf       	rjmp	.-122    	; 0x149a <Lcd3310_String_P_anime+0xac>
			if(is_next) display = (temp1 >> num_of_cadr) | ( (temp2 << (8 - num_of_cadr)) );
			else 		display = (temp1 << num_of_cadr) | ( (temp2 >> (8 - num_of_cadr)) );
			if(is_invert_colors) display = (unsigned char) ~display;
		    Lcd3310_Send( display, LCD_DATA );
	    }
		if(is_invert_colors) Lcd3310_Send( 0xff, LCD_DATA );
    1514:	88 20       	and	r8, r8
    1516:	31 f0       	breq	.+12     	; 0x1524 <Lcd3310_String_P_anime+0x136>


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1518:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    151a:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    151c:	5f b8       	out	0x0f, r5	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    151e:	77 9b       	sbis	0x0e, 7	; 14
    1520:	fe cf       	rjmp	.-4      	; 0x151e <Lcd3310_String_P_anime+0x130>
    1522:	05 c0       	rjmp	.+10     	; 0x152e <Lcd3310_String_P_anime+0x140>


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1524:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    1526:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    1528:	1f b8       	out	0x0f, r1	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    152a:	77 9b       	sbis	0x0e, 7	; 14
    152c:	fe cf       	rjmp	.-4      	; 0x152a <Lcd3310_String_P_anime+0x13c>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    152e:	c3 9a       	sbi	0x18, 3	; 24
	unsigned char ch1 = 1, ch2 = 1, display, temp1, temp2, count = 0;

	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    Lcd3310_Send( 0x40 | (Lcd3310_Index / LCD_X_RES), LCD_CMD );
	
	while ( ch1 || ch2 ){
    1530:	44 23       	and	r20, r20
    1532:	09 f0       	breq	.+2      	; 0x1536 <Lcd3310_String_P_anime+0x148>
    1534:	96 cf       	rjmp	.-212    	; 0x1462 <Lcd3310_String_P_anime+0x74>
    1536:	22 23       	and	r18, r18
    1538:	09 f0       	breq	.+2      	; 0x153c <Lcd3310_String_P_anime+0x14e>
    153a:	93 cf       	rjmp	.-218    	; 0x1462 <Lcd3310_String_P_anime+0x74>
		    Lcd3310_Send( display, LCD_DATA );
	    }
		if(is_invert_colors) Lcd3310_Send( 0xff, LCD_DATA );
		else Lcd3310_Send( 0x00, LCD_DATA );
	}
	if(is_invert_colors && (count < 14)){
    153c:	88 20       	and	r8, r8
    153e:	b1 f0       	breq	.+44     	; 0x156c <Lcd3310_String_P_anime+0x17e>
    1540:	fd e0       	ldi	r31, 0x0D	; 13
    1542:	f9 15       	cp	r31, r9
    1544:	98 f0       	brcs	.+38     	; 0x156c <Lcd3310_String_P_anime+0x17e>
		for(count = (14 - count) * 6; count > 0; count--){
    1546:	2e e0       	ldi	r18, 0x0E	; 14
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	29 19       	sub	r18, r9
    154c:	31 09       	sbc	r19, r1
    154e:	c9 01       	movw	r24, r18
    1550:	88 0f       	add	r24, r24
    1552:	99 1f       	adc	r25, r25
    1554:	82 0f       	add	r24, r18
    1556:	93 1f       	adc	r25, r19
    1558:	88 0f       	add	r24, r24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    155a:	9f ef       	ldi	r25, 0xFF	; 255


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    155c:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    155e:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    1560:	9f b9       	out	0x0f, r25	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1562:	77 9b       	sbis	0x0e, 7	; 14
    1564:	fe cf       	rjmp	.-4      	; 0x1562 <Lcd3310_String_P_anime+0x174>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1566:	c3 9a       	sbi	0x18, 3	; 24
	    }
		if(is_invert_colors) Lcd3310_Send( 0xff, LCD_DATA );
		else Lcd3310_Send( 0x00, LCD_DATA );
	}
	if(is_invert_colors && (count < 14)){
		for(count = (14 - count) * 6; count > 0; count--){
    1568:	81 50       	subi	r24, 0x01	; 1
    156a:	c1 f7       	brne	.-16     	; 0x155c <Lcd3310_String_P_anime+0x16e>
			Lcd3310_Send( 0xff, LCD_DATA );
		}
	}
}
    156c:	df 91       	pop	r29
    156e:	cf 91       	pop	r28
    1570:	1f 91       	pop	r17
    1572:	0f 91       	pop	r16
    1574:	ff 90       	pop	r15
    1576:	ef 90       	pop	r14
    1578:	df 90       	pop	r13
    157a:	cf 90       	pop	r12
    157c:	bf 90       	pop	r11
    157e:	af 90       	pop	r10
    1580:	9f 90       	pop	r9
    1582:	8f 90       	pop	r8
    1584:	7f 90       	pop	r7
    1586:	6f 90       	pop	r6
    1588:	5f 90       	pop	r5
    158a:	08 95       	ret

0000158c <Lcd3310_GotoXY>:
#endif

void Lcd3310_GotoXY(uint16_t x, uint16_t y)
{
    Lcd3310_Index = (uint16_t)x * 6 + (uint16_t)y * 84;
    158c:	24 e5       	ldi	r18, 0x54	; 84
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	62 9f       	mul	r22, r18
    1592:	a0 01       	movw	r20, r0
    1594:	63 9f       	mul	r22, r19
    1596:	50 0d       	add	r21, r0
    1598:	72 9f       	mul	r23, r18
    159a:	50 0d       	add	r21, r0
    159c:	11 24       	eor	r1, r1
    159e:	9c 01       	movw	r18, r24
    15a0:	22 0f       	add	r18, r18
    15a2:	33 1f       	adc	r19, r19
    15a4:	28 0f       	add	r18, r24
    15a6:	39 1f       	adc	r19, r25
    15a8:	22 0f       	add	r18, r18
    15aa:	33 1f       	adc	r19, r19
    15ac:	42 0f       	add	r20, r18
    15ae:	53 1f       	adc	r21, r19
    15b0:	50 93 6c 03 	sts	0x036C, r21
    15b4:	40 93 6b 03 	sts	0x036B, r20
}
    15b8:	08 95       	ret

000015ba <Lcd3310_ClearCenter>:


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    15ba:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    15bc:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    15be:	80 e8       	ldi	r24, 0x80	; 128
    15c0:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    15c2:	77 9b       	sbis	0x0e, 7	; 14
    15c4:	fe cf       	rjmp	.-4      	; 0x15c2 <Lcd3310_ClearCenter+0x8>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    15c6:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    15c8:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    15ca:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    15cc:	81 e4       	ldi	r24, 0x41	; 65
    15ce:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    15d0:	77 9b       	sbis	0x0e, 7	; 14
    15d2:	fe cf       	rjmp	.-4      	; 0x15d0 <Lcd3310_ClearCenter+0x16>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    15d4:	c3 9a       	sbi	0x18, 3	; 24
    15d6:	80 e0       	ldi	r24, 0x00	; 0
    15d8:	90 e0       	ldi	r25, 0x00	; 0


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    15da:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    15dc:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    15de:	1f b8       	out	0x0f, r1	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    15e0:	77 9b       	sbis	0x0e, 7	; 14
    15e2:	fe cf       	rjmp	.-4      	; 0x15e0 <Lcd3310_ClearCenter+0x26>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    15e4:	c3 9a       	sbi	0x18, 3	; 24
void Lcd3310_ClearCenter(void)
{
#ifdef LCD_IMAGES //  clear only center lines
	Lcd3310_Send( 0x80 | (84 % LCD_X_RES), LCD_CMD );
    Lcd3310_Send( 0x40 | (84 / LCD_X_RES), LCD_CMD );
	for(uint16_t i=0; i < LCD_CENTER_RES; i++){
    15e6:	01 96       	adiw	r24, 0x01	; 1
    15e8:	21 e0       	ldi	r18, 0x01	; 1
    15ea:	84 3a       	cpi	r24, 0xA4	; 164
    15ec:	92 07       	cpc	r25, r18
    15ee:	a9 f7       	brne	.-22     	; 0x15da <Lcd3310_ClearCenter+0x20>
	Lcd3310_Send( 0x40, LCD_CMD );
	for(uint16_t i=0; i < LCD_XY_RES; i++){
		Lcd3310_Send( 0x00, LCD_DATA );
	}
#endif
}
    15f0:	08 95       	ret

000015f2 <Lcd3310_InitFill>:


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    15f2:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    15f4:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    15f6:	80 e8       	ldi	r24, 0x80	; 128
    15f8:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    15fa:	77 9b       	sbis	0x0e, 7	; 14
    15fc:	fe cf       	rjmp	.-4      	; 0x15fa <Lcd3310_InitFill+0x8>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    15fe:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1600:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    1602:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    1604:	80 e4       	ldi	r24, 0x40	; 64
    1606:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1608:	77 9b       	sbis	0x0e, 7	; 14
    160a:	fe cf       	rjmp	.-4      	; 0x1608 <Lcd3310_InitFill+0x16>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    160c:	c3 9a       	sbi	0x18, 3	; 24
    160e:	eb e1       	ldi	r30, 0x1B	; 27
    1610:	f2 e0       	ldi	r31, 0x02	; 2
	// Goto (0, 0) of display
	Lcd3310_Send( 0x80, LCD_CMD );
    Lcd3310_Send( 0x40, LCD_CMD );

	for (int i = 0; i < 84; i++ ){
        Lcd3310_Send( pgm_read_byte( LcdImage_Upper + i ), LCD_DATA );
    1612:	84 91       	lpm	r24, Z+


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1614:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    1616:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    1618:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    161a:	77 9b       	sbis	0x0e, 7	; 14
    161c:	fe cf       	rjmp	.-4      	; 0x161a <Lcd3310_InitFill+0x28>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    161e:	c3 9a       	sbi	0x18, 3	; 24
    1620:	31 96       	adiw	r30, 0x01	; 1
#ifdef LCD_IMAGES
	// Goto (0, 0) of display
	Lcd3310_Send( 0x80, LCD_CMD );
    Lcd3310_Send( 0x40, LCD_CMD );

	for (int i = 0; i < 84; i++ ){
    1622:	82 e0       	ldi	r24, 0x02	; 2
    1624:	ef 36       	cpi	r30, 0x6F	; 111
    1626:	f8 07       	cpc	r31, r24
    1628:	a1 f7       	brne	.-24     	; 0x1612 <Lcd3310_InitFill+0x20>
    162a:	ef e6       	ldi	r30, 0x6F	; 111
    162c:	f2 e0       	ldi	r31, 0x02	; 2
        Lcd3310_Send( pgm_read_byte( LcdImage_Upper + i ), LCD_DATA );
    }	
	for (uint16_t i=0; i < LCD_CENTER_RES; i++ ){
        Lcd3310_Send( pgm_read_byte( LcdImage_Center + i), LCD_DATA );
    162e:	84 91       	lpm	r24, Z+


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1630:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    1632:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    1634:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1636:	77 9b       	sbis	0x0e, 7	; 14
    1638:	fe cf       	rjmp	.-4      	; 0x1636 <Lcd3310_InitFill+0x44>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    163a:	c3 9a       	sbi	0x18, 3	; 24
    163c:	31 96       	adiw	r30, 0x01	; 1
    Lcd3310_Send( 0x40, LCD_CMD );

	for (int i = 0; i < 84; i++ ){
        Lcd3310_Send( pgm_read_byte( LcdImage_Upper + i ), LCD_DATA );
    }	
	for (uint16_t i=0; i < LCD_CENTER_RES; i++ ){
    163e:	84 e0       	ldi	r24, 0x04	; 4
    1640:	e3 31       	cpi	r30, 0x13	; 19
    1642:	f8 07       	cpc	r31, r24
    1644:	a1 f7       	brne	.-24     	; 0x162e <Lcd3310_InitFill+0x3c>
    1646:	ef eb       	ldi	r30, 0xBF	; 191
    1648:	f3 e0       	ldi	r31, 0x03	; 3
        Lcd3310_Send( pgm_read_byte( LcdImage_Center + i), LCD_DATA );
	}
    for (int i = 0; i < 84; i++ ){
        Lcd3310_Send( pgm_read_byte( LcdImage_brunql_gmail_com + i), LCD_DATA );
    164a:	84 91       	lpm	r24, Z+


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    164c:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    164e:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    1650:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1652:	77 9b       	sbis	0x0e, 7	; 14
    1654:	fe cf       	rjmp	.-4      	; 0x1652 <Lcd3310_InitFill+0x60>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1656:	c3 9a       	sbi	0x18, 3	; 24
    1658:	31 96       	adiw	r30, 0x01	; 1
        Lcd3310_Send( pgm_read_byte( LcdImage_Upper + i ), LCD_DATA );
    }	
	for (uint16_t i=0; i < LCD_CENTER_RES; i++ ){
        Lcd3310_Send( pgm_read_byte( LcdImage_Center + i), LCD_DATA );
	}
    for (int i = 0; i < 84; i++ ){
    165a:	84 e0       	ldi	r24, 0x04	; 4
    165c:	e3 31       	cpi	r30, 0x13	; 19
    165e:	f8 07       	cpc	r31, r24
    1660:	a1 f7       	brne	.-24     	; 0x164a <Lcd3310_InitFill+0x58>
        Lcd3310_Send( pgm_read_byte( LcdImage_brunql_gmail_com + i), LCD_DATA );
    }
#else
    Lcd3310_ClearCenter();
#endif
}
    1662:	08 95       	ret

00001664 <Lcd3310_Init>:
void Lcd3310_InitFill (void);



void Lcd3310_Init(uint16_t show_init_data_delay_ms)
{
    1664:	af 92       	push	r10
    1666:	bf 92       	push	r11
    1668:	cf 92       	push	r12
    166a:	df 92       	push	r13
    166c:	ef 92       	push	r14
    166e:	ff 92       	push	r15
    1670:	0f 93       	push	r16
    1672:	1f 93       	push	r17
    1674:	8c 01       	movw	r16, r24
	//  Pull-up on reset pin.
    PORTB |= LCD_RST_PIN;
    1676:	c2 9a       	sbi	0x18, 2	; 24

    //  Set output bits on port B.
    DDRB |= LCD_RST_PIN | LCD_DC_PIN | LCD_CE_PIN | SPI_MOSI_PIN | SPI_CLK_PIN;
    1678:	87 b3       	in	r24, 0x17	; 23
    167a:	8c 6b       	ori	r24, 0xBC	; 188
    167c:	87 bb       	out	0x17, r24	; 23
    167e:	84 ef       	ldi	r24, 0xF4	; 244
    1680:	91 e0       	ldi	r25, 0x01	; 1
    1682:	20 e9       	ldi	r18, 0x90	; 144
    1684:	31 e0       	ldi	r19, 0x01	; 1
    1686:	f9 01       	movw	r30, r18
    1688:	31 97       	sbiw	r30, 0x01	; 1
    168a:	f1 f7       	brne	.-4      	; 0x1688 <Lcd3310_Init+0x24>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    168c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    168e:	d9 f7       	brne	.-10     	; 0x1686 <Lcd3310_Init+0x22>

    _delay_ms(50);

    //  Toggle display reset pin.
    PORTB &= (unsigned char)~LCD_RST_PIN;
    1690:	c2 98       	cbi	0x18, 2	; 24
    1692:	80 ea       	ldi	r24, 0xA0	; 160
    1694:	9f e0       	ldi	r25, 0x0F	; 15
    1696:	01 97       	sbiw	r24, 0x01	; 1
    1698:	f1 f7       	brne	.-4      	; 0x1696 <Lcd3310_Init+0x32>
    _delay_ms(1);
    PORTB |= LCD_RST_PIN;
    169a:	c2 9a       	sbi	0x18, 2	; 24

    //  Enable SPI port: No interrupt, MSBit first, Master mode, CPOL->0, CPHA->0, Clk/4
    SPCR = 0x50;
    169c:	80 e5       	ldi	r24, 0x50	; 80
    169e:	8d b9       	out	0x0d, r24	; 13

    //  Disable LCD controller
    PORTB |= LCD_CE_PIN;
    16a0:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    16a2:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    16a4:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    16a6:	81 e2       	ldi	r24, 0x21	; 33
    16a8:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    16aa:	77 9b       	sbis	0x0e, 7	; 14
    16ac:	fe cf       	rjmp	.-4      	; 0x16aa <Lcd3310_Init+0x46>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    16ae:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    16b0:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    16b2:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    16b4:	88 ec       	ldi	r24, 0xC8	; 200
    16b6:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    16b8:	77 9b       	sbis	0x0e, 7	; 14
    16ba:	fe cf       	rjmp	.-4      	; 0x16b8 <Lcd3310_Init+0x54>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    16bc:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    16be:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    16c0:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    16c2:	86 e0       	ldi	r24, 0x06	; 6
    16c4:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    16c6:	77 9b       	sbis	0x0e, 7	; 14
    16c8:	fe cf       	rjmp	.-4      	; 0x16c6 <Lcd3310_Init+0x62>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    16ca:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    16cc:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    16ce:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    16d0:	83 e1       	ldi	r24, 0x13	; 19
    16d2:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    16d4:	77 9b       	sbis	0x0e, 7	; 14
    16d6:	fe cf       	rjmp	.-4      	; 0x16d4 <Lcd3310_Init+0x70>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    16d8:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    16da:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    16dc:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    16de:	80 e2       	ldi	r24, 0x20	; 32
    16e0:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    16e2:	77 9b       	sbis	0x0e, 7	; 14
    16e4:	fe cf       	rjmp	.-4      	; 0x16e2 <Lcd3310_Init+0x7e>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    16e6:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    16e8:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    16ea:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    16ec:	8c e0       	ldi	r24, 0x0C	; 12
    16ee:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    16f0:	77 9b       	sbis	0x0e, 7	; 14
    16f2:	fe cf       	rjmp	.-4      	; 0x16f0 <Lcd3310_Init+0x8c>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    16f4:	c3 9a       	sbi	0x18, 3	; 24
    Lcd3310_Send( 0x06, LCD_CMD );  // Set Temp coefficent.
    Lcd3310_Send( 0x13, LCD_CMD );  // LCD bias mode 1:48.
    Lcd3310_Send( 0x20, LCD_CMD );  // LCD Standard Commands, Horizontal addressing mode.
    Lcd3310_Send( 0x0C, LCD_CMD );  // LCD in normal mode.

	Lcd3310_InitFill();
    16f6:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <Lcd3310_InitFill>


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    16fa:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    16fc:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    16fe:	81 e2       	ldi	r24, 0x21	; 33
    1700:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1702:	77 9b       	sbis	0x0e, 7	; 14
    1704:	fe cf       	rjmp	.-4      	; 0x1702 <Lcd3310_Init+0x9e>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1706:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1708:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    170a:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    170c:	8e e9       	ldi	r24, 0x9E	; 158
    170e:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1710:	77 9b       	sbis	0x0e, 7	; 14
    1712:	fe cf       	rjmp	.-4      	; 0x1710 <Lcd3310_Init+0xac>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1714:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1716:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    1718:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    171a:	80 e2       	ldi	r24, 0x20	; 32
    171c:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    171e:	77 9b       	sbis	0x0e, 7	; 14
    1720:	fe cf       	rjmp	.-4      	; 0x171e <Lcd3310_Init+0xba>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1722:	c3 9a       	sbi	0x18, 3	; 24
    Lcd3310_Send( 0x80 | LCD_CONTRAST, LCD_CMD );

    //  LCD Standard Commands, horizontal addressing mode.
    Lcd3310_Send( 0x20, LCD_CMD );

	_delay_ms(show_init_data_delay_ms); // show image from LcdCache initial value
    1724:	b8 01       	movw	r22, r16
    1726:	80 e0       	ldi	r24, 0x00	; 0
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <__floatunsisf>
    172e:	5b 01       	movw	r10, r22
    1730:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1732:	20 e0       	ldi	r18, 0x00	; 0
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	4a e7       	ldi	r20, 0x7A	; 122
    1738:	55 e4       	ldi	r21, 0x45	; 69
    173a:	0e 94 03 10 	call	0x2006	; 0x2006 <__mulsf3>
    173e:	7b 01       	movw	r14, r22
    1740:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    1742:	20 e0       	ldi	r18, 0x00	; 0
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	40 e8       	ldi	r20, 0x80	; 128
    1748:	5f e3       	ldi	r21, 0x3F	; 63
    174a:	0e 94 09 12 	call	0x2412	; 0x2412 <__ltsf2>
    174e:	88 23       	and	r24, r24
    1750:	1c f4       	brge	.+6      	; 0x1758 <Lcd3310_Init+0xf4>
    1752:	61 e0       	ldi	r22, 0x01	; 1
    1754:	70 e0       	ldi	r23, 0x00	; 0
    1756:	24 c0       	rjmp	.+72     	; 0x17a0 <Lcd3310_Init+0x13c>
		__ticks = 1;
	else if (__tmp > 65535)
    1758:	c8 01       	movw	r24, r16
    175a:	b7 01       	movw	r22, r14
    175c:	20 e0       	ldi	r18, 0x00	; 0
    175e:	3f ef       	ldi	r19, 0xFF	; 255
    1760:	4f e7       	ldi	r20, 0x7F	; 127
    1762:	57 e4       	ldi	r21, 0x47	; 71
    1764:	0e 94 a9 11 	call	0x2352	; 0x2352 <__gtsf2>
    1768:	18 16       	cp	r1, r24
    176a:	b4 f4       	brge	.+44     	; 0x1798 <Lcd3310_Init+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    176c:	c6 01       	movw	r24, r12
    176e:	b5 01       	movw	r22, r10
    1770:	20 e0       	ldi	r18, 0x00	; 0
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	40 e2       	ldi	r20, 0x20	; 32
    1776:	51 e4       	ldi	r21, 0x41	; 65
    1778:	0e 94 03 10 	call	0x2006	; 0x2006 <__mulsf3>
    177c:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <__fixunssfsi>
    1780:	80 e9       	ldi	r24, 0x90	; 144
    1782:	91 e0       	ldi	r25, 0x01	; 1
    1784:	05 c0       	rjmp	.+10     	; 0x1790 <Lcd3310_Init+0x12c>
    1786:	fc 01       	movw	r30, r24
    1788:	31 97       	sbiw	r30, 0x01	; 1
    178a:	f1 f7       	brne	.-4      	; 0x1788 <Lcd3310_Init+0x124>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    178c:	61 50       	subi	r22, 0x01	; 1
    178e:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1790:	61 15       	cp	r22, r1
    1792:	71 05       	cpc	r23, r1
    1794:	c1 f7       	brne	.-16     	; 0x1786 <Lcd3310_Init+0x122>
    1796:	07 c0       	rjmp	.+14     	; 0x17a6 <Lcd3310_Init+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1798:	c8 01       	movw	r24, r16
    179a:	b7 01       	movw	r22, r14
    179c:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <__fixunssfsi>
    17a0:	cb 01       	movw	r24, r22
    17a2:	01 97       	sbiw	r24, 0x01	; 1
    17a4:	f1 f7       	brne	.-4      	; 0x17a2 <Lcd3310_Init+0x13e>
}
    17a6:	1f 91       	pop	r17
    17a8:	0f 91       	pop	r16
    17aa:	ff 90       	pop	r15
    17ac:	ef 90       	pop	r14
    17ae:	df 90       	pop	r13
    17b0:	cf 90       	pop	r12
    17b2:	bf 90       	pop	r11
    17b4:	af 90       	pop	r10
    17b6:	08 95       	ret

000017b8 <Lcd3310_Send>:


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    17b8:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    17ba:	61 30       	cpi	r22, 0x01	; 1
    17bc:	11 f4       	brne	.+4      	; 0x17c2 <Lcd3310_Send+0xa>
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    17be:	c4 9a       	sbi	0x18, 4	; 24
    17c0:	01 c0       	rjmp	.+2      	; 0x17c4 <Lcd3310_Send+0xc>
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    17c2:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    17c4:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    17c6:	77 9b       	sbis	0x0e, 7	; 14
    17c8:	fe cf       	rjmp	.-4      	; 0x17c6 <Lcd3310_Send+0xe>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    17ca:	c3 9a       	sbi	0x18, 3	; 24
}
    17cc:	08 95       	ret

000017ce <Lcd3310_UInt16AsText>:
		Lcd3310_Char( to_string_result[count], is_invert_colors );
	}
}

void Lcd3310_UInt16AsText(uint16_t i, WhiteOrBlackText is_invert_colors)
{
    17ce:	1f 93       	push	r17
    17d0:	16 2f       	mov	r17, r22
	UInt16ToString( i );
    17d2:	0e 94 3a 09 	call	0x1274	; 0x1274 <UInt16ToString>
	// show three numbers and space
	for(uint8_t count=1; count < 4; count++){ // 0x03ff - max value, show only '3ff'
			Lcd3310_Char( to_string_result[count], is_invert_colors );
    17d6:	80 91 68 03 	lds	r24, 0x0368
    17da:	61 2f       	mov	r22, r17
    17dc:	0e 94 74 09 	call	0x12e8	; 0x12e8 <Lcd3310_Char>
    17e0:	80 91 69 03 	lds	r24, 0x0369
    17e4:	61 2f       	mov	r22, r17
    17e6:	0e 94 74 09 	call	0x12e8	; 0x12e8 <Lcd3310_Char>
    17ea:	80 91 6a 03 	lds	r24, 0x036A
    17ee:	61 2f       	mov	r22, r17
    17f0:	0e 94 74 09 	call	0x12e8	; 0x12e8 <Lcd3310_Char>
	}
	Lcd3310_Char( ' ', is_invert_colors );
    17f4:	80 e2       	ldi	r24, 0x20	; 32
    17f6:	61 2f       	mov	r22, r17
    17f8:	0e 94 74 09 	call	0x12e8	; 0x12e8 <Lcd3310_Char>
}
    17fc:	1f 91       	pop	r17
    17fe:	08 95       	ret

00001800 <Lcd3310_UInt8AsText>:




void Lcd3310_UInt8AsText(uint8_t ch, WhiteOrBlackText is_invert_colors)
{
    1800:	1f 93       	push	r17
    1802:	16 2f       	mov	r17, r22
	UInt8ToString( ch );
    1804:	0e 94 15 09 	call	0x122a	; 0x122a <UInt8ToString>
	for(uint8_t count=0; count < 2; count++){
		Lcd3310_Char( to_string_result[count], is_invert_colors );
    1808:	80 91 67 03 	lds	r24, 0x0367
    180c:	61 2f       	mov	r22, r17
    180e:	0e 94 74 09 	call	0x12e8	; 0x12e8 <Lcd3310_Char>
    1812:	80 91 68 03 	lds	r24, 0x0368
    1816:	61 2f       	mov	r22, r17
    1818:	0e 94 74 09 	call	0x12e8	; 0x12e8 <Lcd3310_Char>
	}
}
    181c:	1f 91       	pop	r17
    181e:	08 95       	ret

00001820 <init_menu_now>:



void init_menu_now(void)
{
	menu_now = &go;
    1820:	8e e1       	ldi	r24, 0x1E	; 30
    1822:	91 e0       	ldi	r25, 0x01	; 1
    1824:	90 93 74 03 	sts	0x0374, r25
    1828:	80 93 73 03 	sts	0x0373, r24
}
    182c:	08 95       	ret

0000182e <Lcd3310_UpdateDisplayInfo>:
}
#endif


void Lcd3310_UpdateDisplayInfo(void)
{
    182e:	ef 92       	push	r14
    1830:	ff 92       	push	r15
    1832:	0f 93       	push	r16
    1834:	1f 93       	push	r17
    1836:	cf 93       	push	r28
    1838:	df 93       	push	r29
    uint8_t number_of_elements_in_menu_now = 1;
    
	Lcd3310_ClearCenter();
    183a:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <Lcd3310_ClearCenter>
	
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { menu_now_atomic = menu_now; }
    183e:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1840:	f8 94       	cli
    1842:	80 91 73 03 	lds	r24, 0x0373
    1846:	90 91 74 03 	lds	r25, 0x0374
    184a:	90 93 72 03 	sts	0x0372, r25
    184e:	80 93 71 03 	sts	0x0371, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1852:	2f bf       	out	0x3f, r18	; 63

	struct menu_item *menu_temp = menu_now_atomic->next;
    1854:	e0 91 71 03 	lds	r30, 0x0371
    1858:	f0 91 72 03 	lds	r31, 0x0372
    185c:	c5 81       	ldd	r28, Z+5	; 0x05
    185e:	d6 81       	ldd	r29, Z+6	; 0x06
    1860:	ff 24       	eor	r15, r15
    1862:	f3 94       	inc	r15
    1864:	04 c0       	rjmp	.+8      	; 0x186e <Lcd3310_UpdateDisplayInfo+0x40>
	while( menu_temp != menu_now_atomic ){
		number_of_elements_in_menu_now++;
    1866:	f3 94       	inc	r15
		menu_temp = menu_temp->next;
    1868:	0d 80       	ldd	r0, Y+5	; 0x05
    186a:	de 81       	ldd	r29, Y+6	; 0x06
    186c:	c0 2d       	mov	r28, r0
	Lcd3310_ClearCenter();
	
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { menu_now_atomic = menu_now; }

	struct menu_item *menu_temp = menu_now_atomic->next;
	while( menu_temp != menu_now_atomic ){
    186e:	ce 17       	cp	r28, r30
    1870:	df 07       	cpc	r29, r31
    1872:	c9 f7       	brne	.-14     	; 0x1866 <Lcd3310_UpdateDisplayInfo+0x38>
		number_of_elements_in_menu_now++;
		menu_temp = menu_temp->next;
	}
	if(number_of_elements_in_menu_now > 4){
    1874:	24 e0       	ldi	r18, 0x04	; 4
    1876:	2f 15       	cp	r18, r15
    1878:	18 f4       	brcc	.+6      	; 0x1880 <Lcd3310_UpdateDisplayInfo+0x52>
    187a:	84 e0       	ldi	r24, 0x04	; 4
    187c:	f8 2e       	mov	r15, r24
    187e:	03 c0       	rjmp	.+6      	; 0x1886 <Lcd3310_UpdateDisplayInfo+0x58>
		number_of_elements_in_menu_now = 4;
	}
	 
#ifdef ANIMATION_SWITCH_MENU_ITEMS
	if(number_of_elements_in_menu_now < 3){
    1880:	82 e0       	ldi	r24, 0x02	; 2
    1882:	8f 15       	cp	r24, r15
    1884:	10 f4       	brcc	.+4      	; 0x188a <Lcd3310_UpdateDisplayInfo+0x5c>
		menu_temp = menu_now_atomic;
	}else{
		menu_temp = menu_now_atomic->prev;
    1886:	c7 81       	ldd	r28, Z+7	; 0x07
    1888:	d0 85       	ldd	r29, Z+8	; 0x08
		menu_temp = menu_temp->prev;
	}
#endif

#	ifdef LCD_FIRST_STR
	Lcd3310_GotoXY(0, 0);
    188a:	80 e0       	ldi	r24, 0x00	; 0
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	60 e0       	ldi	r22, 0x00	; 0
    1890:	70 e0       	ldi	r23, 0x00	; 0
    1892:	0e 94 c6 0a 	call	0x158c	; 0x158c <Lcd3310_GotoXY>
	Lcd3310_String_P(lcd_first_str, WHITE_TEXT_ON_BLACK);
    1896:	80 91 0d 01 	lds	r24, 0x010D
    189a:	90 91 0e 01 	lds	r25, 0x010E
    189e:	61 e0       	ldi	r22, 0x01	; 1
    18a0:	0e 94 c5 09 	call	0x138a	; 0x138a <Lcd3310_String_P>
    18a4:	ee 24       	eor	r14, r14
    18a6:	01 e0       	ldi	r16, 0x01	; 1
    18a8:	10 e0       	ldi	r17, 0x00	; 0
    18aa:	27 c0       	rjmp	.+78     	; 0x18fa <Lcd3310_UpdateDisplayInfo+0xcc>
#	endif

	for(uint8_t i=0; i < number_of_elements_in_menu_now; i++){
#		ifdef LCD_IMAGES
			Lcd3310_GotoXY(0, i + 1);
    18ac:	80 e0       	ldi	r24, 0x00	; 0
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	b8 01       	movw	r22, r16
    18b2:	0e 94 c6 0a 	call	0x158c	; 0x158c <Lcd3310_GotoXY>
				Lcd3310_GotoXY(0, i + 2);// show menu from (i+1) line because first line filled with '_COLORS_'
#			else
				Lcd3310_GotoXY(0, i); // no images at top
#			endif
#		endif
		if(menu_temp->str == results.str){
    18b6:	29 85       	ldd	r18, Y+9	; 0x09
    18b8:	3a 85       	ldd	r19, Y+10	; 0x0a
    18ba:	80 91 41 01 	lds	r24, 0x0141
    18be:	90 91 42 01 	lds	r25, 0x0142
    18c2:	28 17       	cp	r18, r24
    18c4:	39 07       	cpc	r19, r25
    18c6:	29 f4       	brne	.+10     	; 0x18d2 <Lcd3310_UpdateDisplayInfo+0xa4>
			Lcd3310_GotoXY(0, i + 1);
    18c8:	80 e0       	ldi	r24, 0x00	; 0
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	b8 01       	movw	r22, r16
    18ce:	0e 94 c6 0a 	call	0x158c	; 0x158c <Lcd3310_GotoXY>
		}
		Lcd3310_String_P(menu_temp->str, (menu_now_atomic == menu_temp));
    18d2:	29 85       	ldd	r18, Y+9	; 0x09
    18d4:	3a 85       	ldd	r19, Y+10	; 0x0a
    18d6:	60 e0       	ldi	r22, 0x00	; 0
    18d8:	80 91 71 03 	lds	r24, 0x0371
    18dc:	90 91 72 03 	lds	r25, 0x0372
    18e0:	8c 17       	cp	r24, r28
    18e2:	9d 07       	cpc	r25, r29
    18e4:	09 f4       	brne	.+2      	; 0x18e8 <Lcd3310_UpdateDisplayInfo+0xba>
    18e6:	61 e0       	ldi	r22, 0x01	; 1
    18e8:	c9 01       	movw	r24, r18
    18ea:	0e 94 c5 09 	call	0x138a	; 0x138a <Lcd3310_String_P>
		menu_temp = menu_temp->next;
    18ee:	0d 80       	ldd	r0, Y+5	; 0x05
    18f0:	de 81       	ldd	r29, Y+6	; 0x06
    18f2:	c0 2d       	mov	r28, r0
#	ifdef LCD_FIRST_STR
	Lcd3310_GotoXY(0, 0);
	Lcd3310_String_P(lcd_first_str, WHITE_TEXT_ON_BLACK);
#	endif

	for(uint8_t i=0; i < number_of_elements_in_menu_now; i++){
    18f4:	e3 94       	inc	r14
    18f6:	0f 5f       	subi	r16, 0xFF	; 255
    18f8:	1f 4f       	sbci	r17, 0xFF	; 255
    18fa:	ef 14       	cp	r14, r15
    18fc:	b8 f2       	brcs	.-82     	; 0x18ac <Lcd3310_UpdateDisplayInfo+0x7e>
		Lcd3310_String_P(menu_temp->str, (menu_now_atomic == menu_temp));
		menu_temp = menu_temp->next;
	}


	if( menu_now_atomic == &results ){
    18fe:	80 91 71 03 	lds	r24, 0x0371
    1902:	90 91 72 03 	lds	r25, 0x0372
    1906:	88 53       	subi	r24, 0x38	; 56
    1908:	91 40       	sbci	r25, 0x01	; 1
    190a:	09 f0       	breq	.+2      	; 0x190e <Lcd3310_UpdateDisplayInfo+0xe0>
    190c:	8d c0       	rjmp	.+282    	; 0x1a28 <Lcd3310_UpdateDisplayInfo+0x1fa>
		 * |  xxxxxxxxxxx |
		 *
		 */

		// |   R   G   B  |
		Lcd3310_GotoXY(3, 2);
    190e:	83 e0       	ldi	r24, 0x03	; 3
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	62 e0       	ldi	r22, 0x02	; 2
    1914:	70 e0       	ldi	r23, 0x00	; 0
    1916:	0e 94 c6 0a 	call	0x158c	; 0x158c <Lcd3310_GotoXY>
		Lcd3310_Char('R', BLACK_TEXT_ON_WHITE);
    191a:	82 e5       	ldi	r24, 0x52	; 82
    191c:	60 e0       	ldi	r22, 0x00	; 0
    191e:	0e 94 74 09 	call	0x12e8	; 0x12e8 <Lcd3310_Char>
		Lcd3310_GotoXY(7, 2);
    1922:	87 e0       	ldi	r24, 0x07	; 7
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	62 e0       	ldi	r22, 0x02	; 2
    1928:	70 e0       	ldi	r23, 0x00	; 0
    192a:	0e 94 c6 0a 	call	0x158c	; 0x158c <Lcd3310_GotoXY>
		Lcd3310_Char('G', BLACK_TEXT_ON_WHITE);
    192e:	87 e4       	ldi	r24, 0x47	; 71
    1930:	60 e0       	ldi	r22, 0x00	; 0
    1932:	0e 94 74 09 	call	0x12e8	; 0x12e8 <Lcd3310_Char>
		Lcd3310_GotoXY(11, 2);
    1936:	8b e0       	ldi	r24, 0x0B	; 11
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	62 e0       	ldi	r22, 0x02	; 2
    193c:	70 e0       	ldi	r23, 0x00	; 0
    193e:	0e 94 c6 0a 	call	0x158c	; 0x158c <Lcd3310_GotoXY>
		Lcd3310_Char('B', BLACK_TEXT_ON_WHITE);
    1942:	82 e4       	ldi	r24, 0x42	; 66
    1944:	60 e0       	ldi	r22, 0x00	; 0
    1946:	0e 94 74 09 	call	0x12e8	; 0x12e8 <Lcd3310_Char>

		// |1 *** *** *** |
		Lcd3310_GotoXY(0, 3);
    194a:	80 e0       	ldi	r24, 0x00	; 0
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	63 e0       	ldi	r22, 0x03	; 3
    1950:	70 e0       	ldi	r23, 0x00	; 0
    1952:	0e 94 c6 0a 	call	0x158c	; 0x158c <Lcd3310_GotoXY>
		Lcd3310_Char('1', BLACK_TEXT_ON_WHITE);
    1956:	81 e3       	ldi	r24, 0x31	; 49
    1958:	60 e0       	ldi	r22, 0x00	; 0
    195a:	0e 94 74 09 	call	0x12e8	; 0x12e8 <Lcd3310_Char>
		Lcd3310_GotoXY(2, 3);
    195e:	82 e0       	ldi	r24, 0x02	; 2
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	63 e0       	ldi	r22, 0x03	; 3
    1964:	70 e0       	ldi	r23, 0x00	; 0
    1966:	0e 94 c6 0a 	call	0x158c	; 0x158c <Lcd3310_GotoXY>
		Lcd3310_UInt16AsText(result[FIRST][RED], BLACK_TEXT_ON_WHITE);
    196a:	80 91 49 03 	lds	r24, 0x0349
    196e:	90 91 4a 03 	lds	r25, 0x034A
    1972:	60 e0       	ldi	r22, 0x00	; 0
    1974:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <Lcd3310_UInt16AsText>
		Lcd3310_UInt16AsText(result[FIRST][GREEN], BLACK_TEXT_ON_WHITE);
    1978:	80 91 4b 03 	lds	r24, 0x034B
    197c:	90 91 4c 03 	lds	r25, 0x034C
    1980:	60 e0       	ldi	r22, 0x00	; 0
    1982:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <Lcd3310_UInt16AsText>
		Lcd3310_UInt16AsText(result[FIRST][BLUE], BLACK_TEXT_ON_WHITE);
    1986:	80 91 4d 03 	lds	r24, 0x034D
    198a:	90 91 4e 03 	lds	r25, 0x034E
    198e:	60 e0       	ldi	r22, 0x00	; 0
    1990:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <Lcd3310_UInt16AsText>

		// |2 *** *** *** |
		Lcd3310_GotoXY(0, 4);
    1994:	80 e0       	ldi	r24, 0x00	; 0
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	64 e0       	ldi	r22, 0x04	; 4
    199a:	70 e0       	ldi	r23, 0x00	; 0
    199c:	0e 94 c6 0a 	call	0x158c	; 0x158c <Lcd3310_GotoXY>
		Lcd3310_Char('2', BLACK_TEXT_ON_WHITE);
    19a0:	82 e3       	ldi	r24, 0x32	; 50
    19a2:	60 e0       	ldi	r22, 0x00	; 0
    19a4:	0e 94 74 09 	call	0x12e8	; 0x12e8 <Lcd3310_Char>
		Lcd3310_GotoXY(2, 4);
    19a8:	82 e0       	ldi	r24, 0x02	; 2
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	64 e0       	ldi	r22, 0x04	; 4
    19ae:	70 e0       	ldi	r23, 0x00	; 0
    19b0:	0e 94 c6 0a 	call	0x158c	; 0x158c <Lcd3310_GotoXY>
		Lcd3310_UInt16AsText(result[SECOND][RED], BLACK_TEXT_ON_WHITE);
    19b4:	80 91 4f 03 	lds	r24, 0x034F
    19b8:	90 91 50 03 	lds	r25, 0x0350
    19bc:	60 e0       	ldi	r22, 0x00	; 0
    19be:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <Lcd3310_UInt16AsText>
		Lcd3310_UInt16AsText(result[SECOND][GREEN], BLACK_TEXT_ON_WHITE);
    19c2:	80 91 51 03 	lds	r24, 0x0351
    19c6:	90 91 52 03 	lds	r25, 0x0352
    19ca:	60 e0       	ldi	r22, 0x00	; 0
    19cc:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <Lcd3310_UInt16AsText>
		Lcd3310_UInt16AsText(result[SECOND][BLUE], BLACK_TEXT_ON_WHITE);
    19d0:	80 91 53 03 	lds	r24, 0x0353
    19d4:	90 91 54 03 	lds	r25, 0x0354
    19d8:	60 e0       	ldi	r22, 0x00	; 0
    19da:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <Lcd3310_UInt16AsText>

		// |% **% **% **% |
		Lcd3310_GotoXY(0, 5);
    19de:	80 e0       	ldi	r24, 0x00	; 0
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	65 e0       	ldi	r22, 0x05	; 5
    19e4:	70 e0       	ldi	r23, 0x00	; 0
    19e6:	0e 94 c6 0a 	call	0x158c	; 0x158c <Lcd3310_GotoXY>
		Lcd3310_Char('%', BLACK_TEXT_ON_WHITE);
    19ea:	85 e2       	ldi	r24, 0x25	; 37
    19ec:	60 e0       	ldi	r22, 0x00	; 0
    19ee:	0e 94 74 09 	call	0x12e8	; 0x12e8 <Lcd3310_Char>
		Lcd3310_GotoXY(2, 5);
    19f2:	82 e0       	ldi	r24, 0x02	; 2
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	65 e0       	ldi	r22, 0x05	; 5
    19f8:	70 e0       	ldi	r23, 0x00	; 0
    19fa:	0e 94 c6 0a 	call	0x158c	; 0x158c <Lcd3310_GotoXY>
		Lcd3310_UInt16AsText(result[PERCENT][RED], BLACK_TEXT_ON_WHITE);
    19fe:	80 91 55 03 	lds	r24, 0x0355
    1a02:	90 91 56 03 	lds	r25, 0x0356
    1a06:	60 e0       	ldi	r22, 0x00	; 0
    1a08:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <Lcd3310_UInt16AsText>
		Lcd3310_UInt16AsText(result[PERCENT][GREEN], BLACK_TEXT_ON_WHITE);
    1a0c:	80 91 57 03 	lds	r24, 0x0357
    1a10:	90 91 58 03 	lds	r25, 0x0358
    1a14:	60 e0       	ldi	r22, 0x00	; 0
    1a16:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <Lcd3310_UInt16AsText>
		Lcd3310_UInt16AsText(result[PERCENT][BLUE], BLACK_TEXT_ON_WHITE);
    1a1a:	80 91 59 03 	lds	r24, 0x0359
    1a1e:	90 91 5a 03 	lds	r25, 0x035A
    1a22:	60 e0       	ldi	r22, 0x00	; 0
    1a24:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <Lcd3310_UInt16AsText>
	}
}
    1a28:	df 91       	pop	r29
    1a2a:	cf 91       	pop	r28
    1a2c:	1f 91       	pop	r17
    1a2e:	0f 91       	pop	r16
    1a30:	ff 90       	pop	r15
    1a32:	ef 90       	pop	r14
    1a34:	08 95       	ret

00001a36 <Lcd3310_AnimationSwitchMenuItems>:
}
//==============================================//

#ifdef ANIMATION_SWITCH_MENU_ITEMS
void Lcd3310_AnimationSwitchMenuItems(char is_turn_left)
{
    1a36:	9f 92       	push	r9
    1a38:	af 92       	push	r10
    1a3a:	bf 92       	push	r11
    1a3c:	cf 92       	push	r12
    1a3e:	df 92       	push	r13
    1a40:	ef 92       	push	r14
    1a42:	ff 92       	push	r15
    1a44:	0f 93       	push	r16
    1a46:	1f 93       	push	r17
    1a48:	cf 93       	push	r28
    1a4a:	df 93       	push	r29
    1a4c:	98 2e       	mov	r9, r24
	uint8_t number_of_elements_in_menu_now = 1;
	struct menu_item *menu_temp;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { 
    1a4e:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1a50:	f8 94       	cli
		menu_now_atomic = menu_now; 
    1a52:	20 91 73 03 	lds	r18, 0x0373
    1a56:	30 91 74 03 	lds	r19, 0x0374
    1a5a:	30 93 72 03 	sts	0x0372, r19
    1a5e:	20 93 71 03 	sts	0x0371, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1a62:	8f bf       	out	0x3f, r24	; 63
	}
	
	menu_temp = menu_now_atomic->next;
    1a64:	e0 91 71 03 	lds	r30, 0x0371
    1a68:	f0 91 72 03 	lds	r31, 0x0372
    1a6c:	a5 81       	ldd	r26, Z+5	; 0x05
    1a6e:	b6 81       	ldd	r27, Z+6	; 0x06
	while( menu_temp->str != menu_now_atomic->str ){
    1a70:	21 85       	ldd	r18, Z+9	; 0x09
    1a72:	32 85       	ldd	r19, Z+10	; 0x0a
    1a74:	11 e0       	ldi	r17, 0x01	; 1
    1a76:	05 c0       	rjmp	.+10     	; 0x1a82 <Lcd3310_AnimationSwitchMenuItems+0x4c>
		number_of_elements_in_menu_now++;
    1a78:	1f 5f       	subi	r17, 0xFF	; 255
		menu_temp = menu_temp->next;
    1a7a:	15 96       	adiw	r26, 0x05	; 5
    1a7c:	0d 90       	ld	r0, X+
    1a7e:	bc 91       	ld	r27, X
    1a80:	a0 2d       	mov	r26, r0
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { 
		menu_now_atomic = menu_now; 
	}
	
	menu_temp = menu_now_atomic->next;
	while( menu_temp->str != menu_now_atomic->str ){
    1a82:	19 96       	adiw	r26, 0x09	; 9
    1a84:	8d 91       	ld	r24, X+
    1a86:	9c 91       	ld	r25, X
    1a88:	1a 97       	sbiw	r26, 0x0a	; 10
    1a8a:	82 17       	cp	r24, r18
    1a8c:	93 07       	cpc	r25, r19
    1a8e:	a1 f7       	brne	.-24     	; 0x1a78 <Lcd3310_AnimationSwitchMenuItems+0x42>
		number_of_elements_in_menu_now++;
		menu_temp = menu_temp->next;
	}
	if(number_of_elements_in_menu_now > 4){
    1a90:	15 30       	cpi	r17, 0x05	; 5
    1a92:	08 f0       	brcs	.+2      	; 0x1a96 <Lcd3310_AnimationSwitchMenuItems+0x60>
    1a94:	14 e0       	ldi	r17, 0x04	; 4
		number_of_elements_in_menu_now = 4;
	}

	Lcd3310_ClearCenter();
    1a96:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <Lcd3310_ClearCenter>
    1a9a:	e0 91 71 03 	lds	r30, 0x0371
    1a9e:	f0 91 72 03 	lds	r31, 0x0372
	if(number_of_elements_in_menu_now < 3){
    1aa2:	13 30       	cpi	r17, 0x03	; 3
    1aa4:	38 f4       	brcc	.+14     	; 0x1ab4 <Lcd3310_AnimationSwitchMenuItems+0x7e>
		menu_temp = menu_now_atomic;
    1aa6:	ef 01       	movw	r28, r30
    1aa8:	cc 24       	eor	r12, r12
    1aaa:	20 e9       	ldi	r18, 0x90	; 144
    1aac:	a2 2e       	mov	r10, r18
    1aae:	21 e0       	ldi	r18, 0x01	; 1
    1ab0:	b2 2e       	mov	r11, r18
    1ab2:	3f c0       	rjmp	.+126    	; 0x1b32 <Lcd3310_AnimationSwitchMenuItems+0xfc>
	}else{
		menu_temp = menu_now_atomic->prev;
    1ab4:	c7 81       	ldd	r28, Z+7	; 0x07
    1ab6:	d0 85       	ldd	r29, Z+8	; 0x08
    1ab8:	f7 cf       	rjmp	.-18     	; 0x1aa8 <Lcd3310_AnimationSwitchMenuItems+0x72>
	}

	for(uint8_t j=0; j<8; j++){
		for(uint8_t i=0; i < number_of_elements_in_menu_now; i++){
#			ifdef LCD_IMAGES
				Lcd3310_GotoXY(0, i + 1);// show menu from (i+1) line because first line filled with '_COLORS_'
    1aba:	80 e0       	ldi	r24, 0x00	; 0
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	b7 01       	movw	r22, r14
    1ac0:	0e 94 c6 0a 	call	0x158c	; 0x158c <Lcd3310_GotoXY>
#			else
				Lcd3310_GotoXY(0, i); // no images at top
#			endif
			Lcd3310_String_P_anime(
    1ac4:	99 20       	and	r9, r9
    1ac6:	19 f0       	breq	.+6      	; 0x1ace <Lcd3310_AnimationSwitchMenuItems+0x98>
    1ac8:	ef 81       	ldd	r30, Y+7	; 0x07
    1aca:	f8 85       	ldd	r31, Y+8	; 0x08
    1acc:	02 c0       	rjmp	.+4      	; 0x1ad2 <Lcd3310_AnimationSwitchMenuItems+0x9c>
    1ace:	ed 81       	ldd	r30, Y+5	; 0x05
    1ad0:	fe 81       	ldd	r31, Y+6	; 0x06
    1ad2:	21 85       	ldd	r18, Z+9	; 0x09
    1ad4:	32 85       	ldd	r19, Z+10	; 0x0a
    1ad6:	69 85       	ldd	r22, Y+9	; 0x09
    1ad8:	7a 85       	ldd	r23, Y+10	; 0x0a
    1ada:	40 e0       	ldi	r20, 0x00	; 0
    1adc:	80 91 71 03 	lds	r24, 0x0371
    1ae0:	90 91 72 03 	lds	r25, 0x0372
    1ae4:	8c 17       	cp	r24, r28
    1ae6:	9d 07       	cpc	r25, r29
    1ae8:	09 f4       	brne	.+2      	; 0x1aec <Lcd3310_AnimationSwitchMenuItems+0xb6>
    1aea:	41 e0       	ldi	r20, 0x01	; 1
    1aec:	c9 01       	movw	r24, r18
    1aee:	2c 2d       	mov	r18, r12
    1af0:	09 2d       	mov	r16, r9
    1af2:	0e 94 f7 09 	call	0x13ee	; 0x13ee <Lcd3310_String_P_anime>
							menu_temp->str,
							(menu_now_atomic == menu_temp), // WhiteOrBlackText
							j, // num_of_cadr
							is_turn_left // is_next
							);
			menu_temp = menu_temp->next;
    1af6:	0d 80       	ldd	r0, Y+5	; 0x05
    1af8:	de 81       	ldd	r29, Y+6	; 0x06
    1afa:	c0 2d       	mov	r28, r0
	}else{
		menu_temp = menu_now_atomic->prev;
	}

	for(uint8_t j=0; j<8; j++){
		for(uint8_t i=0; i < number_of_elements_in_menu_now; i++){
    1afc:	d3 94       	inc	r13
    1afe:	08 94       	sec
    1b00:	e1 1c       	adc	r14, r1
    1b02:	f1 1c       	adc	r15, r1
    1b04:	d1 16       	cp	r13, r17
    1b06:	c8 f2       	brcs	.-78     	; 0x1aba <Lcd3310_AnimationSwitchMenuItems+0x84>
    1b08:	e0 91 71 03 	lds	r30, 0x0371
    1b0c:	f0 91 72 03 	lds	r31, 0x0372
							j, // num_of_cadr
							is_turn_left // is_next
							);
			menu_temp = menu_temp->next;
		}
		if(number_of_elements_in_menu_now < 3){
    1b10:	13 30       	cpi	r17, 0x03	; 3
    1b12:	10 f4       	brcc	.+4      	; 0x1b18 <Lcd3310_AnimationSwitchMenuItems+0xe2>
			menu_temp = menu_now_atomic;
    1b14:	ef 01       	movw	r28, r30
    1b16:	02 c0       	rjmp	.+4      	; 0x1b1c <Lcd3310_AnimationSwitchMenuItems+0xe6>
		}else{
			menu_temp = menu_now_atomic->prev;
    1b18:	c7 81       	ldd	r28, Z+7	; 0x07
    1b1a:	d0 85       	ldd	r29, Z+8	; 0x08
    1b1c:	84 ef       	ldi	r24, 0xF4	; 244
    1b1e:	91 e0       	ldi	r25, 0x01	; 1
    1b20:	f5 01       	movw	r30, r10
    1b22:	31 97       	sbiw	r30, 0x01	; 1
    1b24:	f1 f7       	brne	.-4      	; 0x1b22 <Lcd3310_AnimationSwitchMenuItems+0xec>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b26:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b28:	d9 f7       	brne	.-10     	; 0x1b20 <Lcd3310_AnimationSwitchMenuItems+0xea>
		menu_temp = menu_now_atomic;
	}else{
		menu_temp = menu_now_atomic->prev;
	}

	for(uint8_t j=0; j<8; j++){
    1b2a:	c3 94       	inc	r12
    1b2c:	88 e0       	ldi	r24, 0x08	; 8
    1b2e:	c8 16       	cp	r12, r24
    1b30:	29 f0       	breq	.+10     	; 0x1b3c <Lcd3310_AnimationSwitchMenuItems+0x106>
    1b32:	dd 24       	eor	r13, r13
    1b34:	91 e0       	ldi	r25, 0x01	; 1
    1b36:	e9 2e       	mov	r14, r25
    1b38:	f1 2c       	mov	r15, r1
    1b3a:	e4 cf       	rjmp	.-56     	; 0x1b04 <Lcd3310_AnimationSwitchMenuItems+0xce>
		}else{
			menu_temp = menu_now_atomic->prev;
		}
		_delay_ms(50);
	}
}
    1b3c:	df 91       	pop	r29
    1b3e:	cf 91       	pop	r28
    1b40:	1f 91       	pop	r17
    1b42:	0f 91       	pop	r16
    1b44:	ff 90       	pop	r15
    1b46:	ef 90       	pop	r14
    1b48:	df 90       	pop	r13
    1b4a:	cf 90       	pop	r12
    1b4c:	bf 90       	pop	r11
    1b4e:	af 90       	pop	r10
    1b50:	9f 90       	pop	r9
    1b52:	08 95       	ret

00001b54 <Lcd3310_InitializeDisplay>:



void init_menu_now(void)
{
	menu_now = &go;
    1b54:	2e e1       	ldi	r18, 0x1E	; 30
    1b56:	31 e0       	ldi	r19, 0x01	; 1
    1b58:	30 93 74 03 	sts	0x0374, r19
    1b5c:	20 93 73 03 	sts	0x0373, r18
//==============================================//
void Lcd3310_InitializeDisplay(uint16_t show_image_delay_ms)
{
	init_menu_now();

    Lcd3310_Init(show_image_delay_ms);
    1b60:	0e 94 32 0b 	call	0x1664	; 0x1664 <Lcd3310_Init>
	//Lcd3310_LcdImageUpperBottom_Fill();
    Lcd3310_UpdateDisplayInfo();
    1b64:	0e 94 17 0c 	call	0x182e	; 0x182e <Lcd3310_UpdateDisplayInfo>
}
    1b68:	08 95       	ret

00001b6a <Menu_EnterClick>:
struct menu_item readme = {ENTER_MENU_CMD, NULL, &text, &go, &setup, 								"// Readme   //"};
	struct menu_item text = {BACK_CMD, &readme, NULL, &text, &text, "[ Programmer:][   brunql   ][    (at)    ][  gmail.com ]"};

void Menu_EnterClick(void)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { menu_now_atomic = menu_now; }
    1b6a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1b6c:	f8 94       	cli
    1b6e:	20 91 73 03 	lds	r18, 0x0373
    1b72:	30 91 74 03 	lds	r19, 0x0374
    1b76:	30 93 72 03 	sts	0x0372, r19
    1b7a:	20 93 71 03 	sts	0x0371, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1b7e:	8f bf       	out	0x3f, r24	; 63
	switch(menu_now_atomic->cmd){
    1b80:	e0 91 71 03 	lds	r30, 0x0371
    1b84:	f0 91 72 03 	lds	r31, 0x0372
    1b88:	e0 81       	ld	r30, Z
    1b8a:	e3 30       	cpi	r30, 0x03	; 3
    1b8c:	49 f1       	breq	.+82     	; 0x1be0 <Menu_EnterClick+0x76>
    1b8e:	e4 30       	cpi	r30, 0x04	; 4
    1b90:	28 f4       	brcc	.+10     	; 0x1b9c <Menu_EnterClick+0x32>
    1b92:	e1 30       	cpi	r30, 0x01	; 1
    1b94:	71 f0       	breq	.+28     	; 0x1bb2 <Menu_EnterClick+0x48>
    1b96:	e2 30       	cpi	r30, 0x02	; 2
    1b98:	40 f5       	brcc	.+80     	; 0x1bea <Menu_EnterClick+0x80>
    1b9a:	14 c0       	rjmp	.+40     	; 0x1bc4 <Menu_EnterClick+0x5a>
    1b9c:	e5 30       	cpi	r30, 0x05	; 5
    1b9e:	a9 f1       	breq	.+106    	; 0x1c0a <Menu_EnterClick+0xa0>
    1ba0:	e5 30       	cpi	r30, 0x05	; 5
    1ba2:	58 f1       	brcs	.+86     	; 0x1bfa <Menu_EnterClick+0x90>
    1ba4:	e6 30       	cpi	r30, 0x06	; 6
    1ba6:	09 f4       	brne	.+2      	; 0x1baa <Menu_EnterClick+0x40>
    1ba8:	3d c0       	rjmp	.+122    	; 0x1c24 <Menu_EnterClick+0xba>
    1baa:	e7 30       	cpi	r30, 0x07	; 7
    1bac:	09 f0       	breq	.+2      	; 0x1bb0 <Menu_EnterClick+0x46>
    1bae:	54 c0       	rjmp	.+168    	; 0x1c58 <Menu_EnterClick+0xee>
    1bb0:	46 c0       	rjmp	.+140    	; 0x1c3e <Menu_EnterClick+0xd4>
		default:
			break;
		case ENTER_MENU_CMD:
		enter_menu_label:
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { menu_now = menu_now->sub_menu; }
    1bb2:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1bb4:	f8 94       	cli
    1bb6:	e0 91 73 03 	lds	r30, 0x0373
    1bba:	f0 91 74 03 	lds	r31, 0x0374
    1bbe:	23 81       	ldd	r18, Z+3	; 0x03
    1bc0:	34 81       	ldd	r19, Z+4	; 0x04
    1bc2:	08 c0       	rjmp	.+16     	; 0x1bd4 <Menu_EnterClick+0x6a>
			break;

		case BACK_CMD:
		back_menu_label:
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { menu_now = menu_now->main_menu; }
    1bc4:	8f b7       	in	r24, 0x3f	; 63
    1bc6:	f8 94       	cli
    1bc8:	e0 91 73 03 	lds	r30, 0x0373
    1bcc:	f0 91 74 03 	lds	r31, 0x0374
    1bd0:	21 81       	ldd	r18, Z+1	; 0x01
    1bd2:	32 81       	ldd	r19, Z+2	; 0x02
    1bd4:	30 93 74 03 	sts	0x0374, r19
    1bd8:	20 93 73 03 	sts	0x0373, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1bdc:	8f bf       	out	0x3f, r24	; 63
    1bde:	21 c0       	rjmp	.+66     	; 0x1c22 <Menu_EnterClick+0xb8>
			break;
		
		case results_cmd:
			LedDriver_SwitchLeds( 0x0000 );
    1be0:	80 e0       	ldi	r24, 0x00	; 0
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <LedDriver_SwitchLeds>
    1be8:	ed cf       	rjmp	.-38     	; 0x1bc4 <Menu_EnterClick+0x5a>
			goto back_menu_label;
	
		case go_cmd:
			FLAGS_SWITCH_ON( ADC_RESULT_FLAG );
    1bea:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1bec:	f8 94       	cli
    1bee:	80 91 5f 03 	lds	r24, 0x035F
    1bf2:	90 91 60 03 	lds	r25, 0x0360
    1bf6:	80 61       	ori	r24, 0x10	; 16
    1bf8:	1c c0       	rjmp	.+56     	; 0x1c32 <Menu_EnterClick+0xc8>
			goto enter_menu_label;
		
		case calibration_cmd:
			FLAGS_SWITCH_ON( ADC_CALIBRATE_FLAG );
    1bfa:	2f b7       	in	r18, 0x3f	; 63
    1bfc:	f8 94       	cli
    1bfe:	80 91 5f 03 	lds	r24, 0x035F
    1c02:	90 91 60 03 	lds	r25, 0x0360
    1c06:	80 62       	ori	r24, 0x20	; 32
    1c08:	07 c0       	rjmp	.+14     	; 0x1c18 <Menu_EnterClick+0xae>
			break;
		case set_zero_cmd:
			FLAGS_SWITCH_ON( ADC_SET_ZERO );
    1c0a:	2f b7       	in	r18, 0x3f	; 63
    1c0c:	f8 94       	cli
    1c0e:	80 91 5f 03 	lds	r24, 0x035F
    1c12:	90 91 60 03 	lds	r25, 0x0360
    1c16:	80 64       	ori	r24, 0x40	; 64
    1c18:	90 93 60 03 	sts	0x0360, r25
    1c1c:	80 93 5f 03 	sts	0x035F, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1c20:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    1c22:	08 95       	ret
			break;

		case snake_start_cmd:
			FLAGS_SWITCH_ON( SNAKE_START_GAME_FLAG );
    1c24:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1c26:	f8 94       	cli
    1c28:	80 91 5f 03 	lds	r24, 0x035F
    1c2c:	90 91 60 03 	lds	r25, 0x0360
    1c30:	91 60       	ori	r25, 0x01	; 1
    1c32:	90 93 60 03 	sts	0x0360, r25
    1c36:	80 93 5f 03 	sts	0x035F, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1c3a:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    1c3c:	ba cf       	rjmp	.-140    	; 0x1bb2 <Menu_EnterClick+0x48>
			goto enter_menu_label;

		case snake_results_cmd:
			FLAGS_SWITCH_ON( SNAKE_STOP_GAME_FLAG );
    1c3e:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1c40:	f8 94       	cli
    1c42:	80 91 5f 03 	lds	r24, 0x035F
    1c46:	90 91 60 03 	lds	r25, 0x0360
    1c4a:	92 60       	ori	r25, 0x02	; 2
    1c4c:	90 93 60 03 	sts	0x0360, r25
    1c50:	80 93 5f 03 	sts	0x035F, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1c54:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    1c56:	b6 cf       	rjmp	.-148    	; 0x1bc4 <Menu_EnterClick+0x5a>
    1c58:	08 95       	ret

00001c5a <__fixunssfsi>:
    1c5a:	ef 92       	push	r14
    1c5c:	ff 92       	push	r15
    1c5e:	0f 93       	push	r16
    1c60:	1f 93       	push	r17
    1c62:	7b 01       	movw	r14, r22
    1c64:	8c 01       	movw	r16, r24
    1c66:	20 e0       	ldi	r18, 0x00	; 0
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	40 e0       	ldi	r20, 0x00	; 0
    1c6c:	5f e4       	ldi	r21, 0x4F	; 79
    1c6e:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <__gesf2>
    1c72:	88 23       	and	r24, r24
    1c74:	8c f0       	brlt	.+34     	; 0x1c98 <__fixunssfsi+0x3e>
    1c76:	c8 01       	movw	r24, r16
    1c78:	b7 01       	movw	r22, r14
    1c7a:	20 e0       	ldi	r18, 0x00	; 0
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	40 e0       	ldi	r20, 0x00	; 0
    1c80:	5f e4       	ldi	r21, 0x4F	; 79
    1c82:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__subsf3>
    1c86:	0e 94 97 12 	call	0x252e	; 0x252e <__fixsfsi>
    1c8a:	9b 01       	movw	r18, r22
    1c8c:	ac 01       	movw	r20, r24
    1c8e:	20 50       	subi	r18, 0x00	; 0
    1c90:	30 40       	sbci	r19, 0x00	; 0
    1c92:	40 40       	sbci	r20, 0x00	; 0
    1c94:	50 48       	sbci	r21, 0x80	; 128
    1c96:	06 c0       	rjmp	.+12     	; 0x1ca4 <__fixunssfsi+0x4a>
    1c98:	c8 01       	movw	r24, r16
    1c9a:	b7 01       	movw	r22, r14
    1c9c:	0e 94 97 12 	call	0x252e	; 0x252e <__fixsfsi>
    1ca0:	9b 01       	movw	r18, r22
    1ca2:	ac 01       	movw	r20, r24
    1ca4:	b9 01       	movw	r22, r18
    1ca6:	ca 01       	movw	r24, r20
    1ca8:	1f 91       	pop	r17
    1caa:	0f 91       	pop	r16
    1cac:	ff 90       	pop	r15
    1cae:	ef 90       	pop	r14
    1cb0:	08 95       	ret

00001cb2 <_fpadd_parts>:
    1cb2:	a0 e0       	ldi	r26, 0x00	; 0
    1cb4:	b0 e0       	ldi	r27, 0x00	; 0
    1cb6:	ef e5       	ldi	r30, 0x5F	; 95
    1cb8:	fe e0       	ldi	r31, 0x0E	; 14
    1cba:	0c 94 6d 15 	jmp	0x2ada	; 0x2ada <__prologue_saves__>
    1cbe:	dc 01       	movw	r26, r24
    1cc0:	2b 01       	movw	r4, r22
    1cc2:	fa 01       	movw	r30, r20
    1cc4:	9c 91       	ld	r25, X
    1cc6:	92 30       	cpi	r25, 0x02	; 2
    1cc8:	08 f4       	brcc	.+2      	; 0x1ccc <_fpadd_parts+0x1a>
    1cca:	39 c1       	rjmp	.+626    	; 0x1f3e <_fpadd_parts+0x28c>
    1ccc:	eb 01       	movw	r28, r22
    1cce:	88 81       	ld	r24, Y
    1cd0:	82 30       	cpi	r24, 0x02	; 2
    1cd2:	08 f4       	brcc	.+2      	; 0x1cd6 <_fpadd_parts+0x24>
    1cd4:	33 c1       	rjmp	.+614    	; 0x1f3c <_fpadd_parts+0x28a>
    1cd6:	94 30       	cpi	r25, 0x04	; 4
    1cd8:	69 f4       	brne	.+26     	; 0x1cf4 <_fpadd_parts+0x42>
    1cda:	84 30       	cpi	r24, 0x04	; 4
    1cdc:	09 f0       	breq	.+2      	; 0x1ce0 <_fpadd_parts+0x2e>
    1cde:	2f c1       	rjmp	.+606    	; 0x1f3e <_fpadd_parts+0x28c>
    1ce0:	11 96       	adiw	r26, 0x01	; 1
    1ce2:	9c 91       	ld	r25, X
    1ce4:	11 97       	sbiw	r26, 0x01	; 1
    1ce6:	89 81       	ldd	r24, Y+1	; 0x01
    1ce8:	98 17       	cp	r25, r24
    1cea:	09 f4       	brne	.+2      	; 0x1cee <_fpadd_parts+0x3c>
    1cec:	28 c1       	rjmp	.+592    	; 0x1f3e <_fpadd_parts+0x28c>
    1cee:	ad e3       	ldi	r26, 0x3D	; 61
    1cf0:	b2 e0       	ldi	r27, 0x02	; 2
    1cf2:	25 c1       	rjmp	.+586    	; 0x1f3e <_fpadd_parts+0x28c>
    1cf4:	84 30       	cpi	r24, 0x04	; 4
    1cf6:	09 f4       	brne	.+2      	; 0x1cfa <_fpadd_parts+0x48>
    1cf8:	21 c1       	rjmp	.+578    	; 0x1f3c <_fpadd_parts+0x28a>
    1cfa:	82 30       	cpi	r24, 0x02	; 2
    1cfc:	a9 f4       	brne	.+42     	; 0x1d28 <_fpadd_parts+0x76>
    1cfe:	92 30       	cpi	r25, 0x02	; 2
    1d00:	09 f0       	breq	.+2      	; 0x1d04 <_fpadd_parts+0x52>
    1d02:	1d c1       	rjmp	.+570    	; 0x1f3e <_fpadd_parts+0x28c>
    1d04:	9a 01       	movw	r18, r20
    1d06:	ad 01       	movw	r20, r26
    1d08:	88 e0       	ldi	r24, 0x08	; 8
    1d0a:	ea 01       	movw	r28, r20
    1d0c:	09 90       	ld	r0, Y+
    1d0e:	ae 01       	movw	r20, r28
    1d10:	e9 01       	movw	r28, r18
    1d12:	09 92       	st	Y+, r0
    1d14:	9e 01       	movw	r18, r28
    1d16:	81 50       	subi	r24, 0x01	; 1
    1d18:	c1 f7       	brne	.-16     	; 0x1d0a <_fpadd_parts+0x58>
    1d1a:	e2 01       	movw	r28, r4
    1d1c:	89 81       	ldd	r24, Y+1	; 0x01
    1d1e:	11 96       	adiw	r26, 0x01	; 1
    1d20:	9c 91       	ld	r25, X
    1d22:	89 23       	and	r24, r25
    1d24:	81 83       	std	Z+1, r24	; 0x01
    1d26:	08 c1       	rjmp	.+528    	; 0x1f38 <_fpadd_parts+0x286>
    1d28:	92 30       	cpi	r25, 0x02	; 2
    1d2a:	09 f4       	brne	.+2      	; 0x1d2e <_fpadd_parts+0x7c>
    1d2c:	07 c1       	rjmp	.+526    	; 0x1f3c <_fpadd_parts+0x28a>
    1d2e:	12 96       	adiw	r26, 0x02	; 2
    1d30:	2d 90       	ld	r2, X+
    1d32:	3c 90       	ld	r3, X
    1d34:	13 97       	sbiw	r26, 0x03	; 3
    1d36:	eb 01       	movw	r28, r22
    1d38:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d3c:	14 96       	adiw	r26, 0x04	; 4
    1d3e:	ad 90       	ld	r10, X+
    1d40:	bd 90       	ld	r11, X+
    1d42:	cd 90       	ld	r12, X+
    1d44:	dc 90       	ld	r13, X
    1d46:	17 97       	sbiw	r26, 0x07	; 7
    1d48:	ec 80       	ldd	r14, Y+4	; 0x04
    1d4a:	fd 80       	ldd	r15, Y+5	; 0x05
    1d4c:	0e 81       	ldd	r16, Y+6	; 0x06
    1d4e:	1f 81       	ldd	r17, Y+7	; 0x07
    1d50:	91 01       	movw	r18, r2
    1d52:	28 1b       	sub	r18, r24
    1d54:	39 0b       	sbc	r19, r25
    1d56:	b9 01       	movw	r22, r18
    1d58:	37 ff       	sbrs	r19, 7
    1d5a:	04 c0       	rjmp	.+8      	; 0x1d64 <_fpadd_parts+0xb2>
    1d5c:	66 27       	eor	r22, r22
    1d5e:	77 27       	eor	r23, r23
    1d60:	62 1b       	sub	r22, r18
    1d62:	73 0b       	sbc	r23, r19
    1d64:	60 32       	cpi	r22, 0x20	; 32
    1d66:	71 05       	cpc	r23, r1
    1d68:	0c f0       	brlt	.+2      	; 0x1d6c <_fpadd_parts+0xba>
    1d6a:	61 c0       	rjmp	.+194    	; 0x1e2e <_fpadd_parts+0x17c>
    1d6c:	12 16       	cp	r1, r18
    1d6e:	13 06       	cpc	r1, r19
    1d70:	6c f5       	brge	.+90     	; 0x1dcc <_fpadd_parts+0x11a>
    1d72:	37 01       	movw	r6, r14
    1d74:	48 01       	movw	r8, r16
    1d76:	06 2e       	mov	r0, r22
    1d78:	04 c0       	rjmp	.+8      	; 0x1d82 <_fpadd_parts+0xd0>
    1d7a:	96 94       	lsr	r9
    1d7c:	87 94       	ror	r8
    1d7e:	77 94       	ror	r7
    1d80:	67 94       	ror	r6
    1d82:	0a 94       	dec	r0
    1d84:	d2 f7       	brpl	.-12     	; 0x1d7a <_fpadd_parts+0xc8>
    1d86:	21 e0       	ldi	r18, 0x01	; 1
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	40 e0       	ldi	r20, 0x00	; 0
    1d8c:	50 e0       	ldi	r21, 0x00	; 0
    1d8e:	04 c0       	rjmp	.+8      	; 0x1d98 <_fpadd_parts+0xe6>
    1d90:	22 0f       	add	r18, r18
    1d92:	33 1f       	adc	r19, r19
    1d94:	44 1f       	adc	r20, r20
    1d96:	55 1f       	adc	r21, r21
    1d98:	6a 95       	dec	r22
    1d9a:	d2 f7       	brpl	.-12     	; 0x1d90 <_fpadd_parts+0xde>
    1d9c:	21 50       	subi	r18, 0x01	; 1
    1d9e:	30 40       	sbci	r19, 0x00	; 0
    1da0:	40 40       	sbci	r20, 0x00	; 0
    1da2:	50 40       	sbci	r21, 0x00	; 0
    1da4:	2e 21       	and	r18, r14
    1da6:	3f 21       	and	r19, r15
    1da8:	40 23       	and	r20, r16
    1daa:	51 23       	and	r21, r17
    1dac:	21 15       	cp	r18, r1
    1dae:	31 05       	cpc	r19, r1
    1db0:	41 05       	cpc	r20, r1
    1db2:	51 05       	cpc	r21, r1
    1db4:	21 f0       	breq	.+8      	; 0x1dbe <_fpadd_parts+0x10c>
    1db6:	21 e0       	ldi	r18, 0x01	; 1
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	40 e0       	ldi	r20, 0x00	; 0
    1dbc:	50 e0       	ldi	r21, 0x00	; 0
    1dbe:	79 01       	movw	r14, r18
    1dc0:	8a 01       	movw	r16, r20
    1dc2:	e6 28       	or	r14, r6
    1dc4:	f7 28       	or	r15, r7
    1dc6:	08 29       	or	r16, r8
    1dc8:	19 29       	or	r17, r9
    1dca:	3c c0       	rjmp	.+120    	; 0x1e44 <_fpadd_parts+0x192>
    1dcc:	23 2b       	or	r18, r19
    1dce:	d1 f1       	breq	.+116    	; 0x1e44 <_fpadd_parts+0x192>
    1dd0:	26 0e       	add	r2, r22
    1dd2:	37 1e       	adc	r3, r23
    1dd4:	35 01       	movw	r6, r10
    1dd6:	46 01       	movw	r8, r12
    1dd8:	06 2e       	mov	r0, r22
    1dda:	04 c0       	rjmp	.+8      	; 0x1de4 <_fpadd_parts+0x132>
    1ddc:	96 94       	lsr	r9
    1dde:	87 94       	ror	r8
    1de0:	77 94       	ror	r7
    1de2:	67 94       	ror	r6
    1de4:	0a 94       	dec	r0
    1de6:	d2 f7       	brpl	.-12     	; 0x1ddc <_fpadd_parts+0x12a>
    1de8:	21 e0       	ldi	r18, 0x01	; 1
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	40 e0       	ldi	r20, 0x00	; 0
    1dee:	50 e0       	ldi	r21, 0x00	; 0
    1df0:	04 c0       	rjmp	.+8      	; 0x1dfa <_fpadd_parts+0x148>
    1df2:	22 0f       	add	r18, r18
    1df4:	33 1f       	adc	r19, r19
    1df6:	44 1f       	adc	r20, r20
    1df8:	55 1f       	adc	r21, r21
    1dfa:	6a 95       	dec	r22
    1dfc:	d2 f7       	brpl	.-12     	; 0x1df2 <_fpadd_parts+0x140>
    1dfe:	21 50       	subi	r18, 0x01	; 1
    1e00:	30 40       	sbci	r19, 0x00	; 0
    1e02:	40 40       	sbci	r20, 0x00	; 0
    1e04:	50 40       	sbci	r21, 0x00	; 0
    1e06:	2a 21       	and	r18, r10
    1e08:	3b 21       	and	r19, r11
    1e0a:	4c 21       	and	r20, r12
    1e0c:	5d 21       	and	r21, r13
    1e0e:	21 15       	cp	r18, r1
    1e10:	31 05       	cpc	r19, r1
    1e12:	41 05       	cpc	r20, r1
    1e14:	51 05       	cpc	r21, r1
    1e16:	21 f0       	breq	.+8      	; 0x1e20 <_fpadd_parts+0x16e>
    1e18:	21 e0       	ldi	r18, 0x01	; 1
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	40 e0       	ldi	r20, 0x00	; 0
    1e1e:	50 e0       	ldi	r21, 0x00	; 0
    1e20:	59 01       	movw	r10, r18
    1e22:	6a 01       	movw	r12, r20
    1e24:	a6 28       	or	r10, r6
    1e26:	b7 28       	or	r11, r7
    1e28:	c8 28       	or	r12, r8
    1e2a:	d9 28       	or	r13, r9
    1e2c:	0b c0       	rjmp	.+22     	; 0x1e44 <_fpadd_parts+0x192>
    1e2e:	82 15       	cp	r24, r2
    1e30:	93 05       	cpc	r25, r3
    1e32:	2c f0       	brlt	.+10     	; 0x1e3e <_fpadd_parts+0x18c>
    1e34:	1c 01       	movw	r2, r24
    1e36:	aa 24       	eor	r10, r10
    1e38:	bb 24       	eor	r11, r11
    1e3a:	65 01       	movw	r12, r10
    1e3c:	03 c0       	rjmp	.+6      	; 0x1e44 <_fpadd_parts+0x192>
    1e3e:	ee 24       	eor	r14, r14
    1e40:	ff 24       	eor	r15, r15
    1e42:	87 01       	movw	r16, r14
    1e44:	11 96       	adiw	r26, 0x01	; 1
    1e46:	9c 91       	ld	r25, X
    1e48:	d2 01       	movw	r26, r4
    1e4a:	11 96       	adiw	r26, 0x01	; 1
    1e4c:	8c 91       	ld	r24, X
    1e4e:	98 17       	cp	r25, r24
    1e50:	09 f4       	brne	.+2      	; 0x1e54 <_fpadd_parts+0x1a2>
    1e52:	45 c0       	rjmp	.+138    	; 0x1ede <_fpadd_parts+0x22c>
    1e54:	99 23       	and	r25, r25
    1e56:	39 f0       	breq	.+14     	; 0x1e66 <_fpadd_parts+0x1b4>
    1e58:	a8 01       	movw	r20, r16
    1e5a:	97 01       	movw	r18, r14
    1e5c:	2a 19       	sub	r18, r10
    1e5e:	3b 09       	sbc	r19, r11
    1e60:	4c 09       	sbc	r20, r12
    1e62:	5d 09       	sbc	r21, r13
    1e64:	06 c0       	rjmp	.+12     	; 0x1e72 <_fpadd_parts+0x1c0>
    1e66:	a6 01       	movw	r20, r12
    1e68:	95 01       	movw	r18, r10
    1e6a:	2e 19       	sub	r18, r14
    1e6c:	3f 09       	sbc	r19, r15
    1e6e:	40 0b       	sbc	r20, r16
    1e70:	51 0b       	sbc	r21, r17
    1e72:	57 fd       	sbrc	r21, 7
    1e74:	08 c0       	rjmp	.+16     	; 0x1e86 <_fpadd_parts+0x1d4>
    1e76:	11 82       	std	Z+1, r1	; 0x01
    1e78:	33 82       	std	Z+3, r3	; 0x03
    1e7a:	22 82       	std	Z+2, r2	; 0x02
    1e7c:	24 83       	std	Z+4, r18	; 0x04
    1e7e:	35 83       	std	Z+5, r19	; 0x05
    1e80:	46 83       	std	Z+6, r20	; 0x06
    1e82:	57 83       	std	Z+7, r21	; 0x07
    1e84:	1d c0       	rjmp	.+58     	; 0x1ec0 <_fpadd_parts+0x20e>
    1e86:	81 e0       	ldi	r24, 0x01	; 1
    1e88:	81 83       	std	Z+1, r24	; 0x01
    1e8a:	33 82       	std	Z+3, r3	; 0x03
    1e8c:	22 82       	std	Z+2, r2	; 0x02
    1e8e:	88 27       	eor	r24, r24
    1e90:	99 27       	eor	r25, r25
    1e92:	dc 01       	movw	r26, r24
    1e94:	82 1b       	sub	r24, r18
    1e96:	93 0b       	sbc	r25, r19
    1e98:	a4 0b       	sbc	r26, r20
    1e9a:	b5 0b       	sbc	r27, r21
    1e9c:	84 83       	std	Z+4, r24	; 0x04
    1e9e:	95 83       	std	Z+5, r25	; 0x05
    1ea0:	a6 83       	std	Z+6, r26	; 0x06
    1ea2:	b7 83       	std	Z+7, r27	; 0x07
    1ea4:	0d c0       	rjmp	.+26     	; 0x1ec0 <_fpadd_parts+0x20e>
    1ea6:	22 0f       	add	r18, r18
    1ea8:	33 1f       	adc	r19, r19
    1eaa:	44 1f       	adc	r20, r20
    1eac:	55 1f       	adc	r21, r21
    1eae:	24 83       	std	Z+4, r18	; 0x04
    1eb0:	35 83       	std	Z+5, r19	; 0x05
    1eb2:	46 83       	std	Z+6, r20	; 0x06
    1eb4:	57 83       	std	Z+7, r21	; 0x07
    1eb6:	82 81       	ldd	r24, Z+2	; 0x02
    1eb8:	93 81       	ldd	r25, Z+3	; 0x03
    1eba:	01 97       	sbiw	r24, 0x01	; 1
    1ebc:	93 83       	std	Z+3, r25	; 0x03
    1ebe:	82 83       	std	Z+2, r24	; 0x02
    1ec0:	24 81       	ldd	r18, Z+4	; 0x04
    1ec2:	35 81       	ldd	r19, Z+5	; 0x05
    1ec4:	46 81       	ldd	r20, Z+6	; 0x06
    1ec6:	57 81       	ldd	r21, Z+7	; 0x07
    1ec8:	da 01       	movw	r26, r20
    1eca:	c9 01       	movw	r24, r18
    1ecc:	01 97       	sbiw	r24, 0x01	; 1
    1ece:	a1 09       	sbc	r26, r1
    1ed0:	b1 09       	sbc	r27, r1
    1ed2:	8f 5f       	subi	r24, 0xFF	; 255
    1ed4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ed6:	af 4f       	sbci	r26, 0xFF	; 255
    1ed8:	bf 43       	sbci	r27, 0x3F	; 63
    1eda:	28 f3       	brcs	.-54     	; 0x1ea6 <_fpadd_parts+0x1f4>
    1edc:	0b c0       	rjmp	.+22     	; 0x1ef4 <_fpadd_parts+0x242>
    1ede:	91 83       	std	Z+1, r25	; 0x01
    1ee0:	33 82       	std	Z+3, r3	; 0x03
    1ee2:	22 82       	std	Z+2, r2	; 0x02
    1ee4:	ea 0c       	add	r14, r10
    1ee6:	fb 1c       	adc	r15, r11
    1ee8:	0c 1d       	adc	r16, r12
    1eea:	1d 1d       	adc	r17, r13
    1eec:	e4 82       	std	Z+4, r14	; 0x04
    1eee:	f5 82       	std	Z+5, r15	; 0x05
    1ef0:	06 83       	std	Z+6, r16	; 0x06
    1ef2:	17 83       	std	Z+7, r17	; 0x07
    1ef4:	83 e0       	ldi	r24, 0x03	; 3
    1ef6:	80 83       	st	Z, r24
    1ef8:	24 81       	ldd	r18, Z+4	; 0x04
    1efa:	35 81       	ldd	r19, Z+5	; 0x05
    1efc:	46 81       	ldd	r20, Z+6	; 0x06
    1efe:	57 81       	ldd	r21, Z+7	; 0x07
    1f00:	57 ff       	sbrs	r21, 7
    1f02:	1a c0       	rjmp	.+52     	; 0x1f38 <_fpadd_parts+0x286>
    1f04:	c9 01       	movw	r24, r18
    1f06:	aa 27       	eor	r26, r26
    1f08:	97 fd       	sbrc	r25, 7
    1f0a:	a0 95       	com	r26
    1f0c:	ba 2f       	mov	r27, r26
    1f0e:	81 70       	andi	r24, 0x01	; 1
    1f10:	90 70       	andi	r25, 0x00	; 0
    1f12:	a0 70       	andi	r26, 0x00	; 0
    1f14:	b0 70       	andi	r27, 0x00	; 0
    1f16:	56 95       	lsr	r21
    1f18:	47 95       	ror	r20
    1f1a:	37 95       	ror	r19
    1f1c:	27 95       	ror	r18
    1f1e:	82 2b       	or	r24, r18
    1f20:	93 2b       	or	r25, r19
    1f22:	a4 2b       	or	r26, r20
    1f24:	b5 2b       	or	r27, r21
    1f26:	84 83       	std	Z+4, r24	; 0x04
    1f28:	95 83       	std	Z+5, r25	; 0x05
    1f2a:	a6 83       	std	Z+6, r26	; 0x06
    1f2c:	b7 83       	std	Z+7, r27	; 0x07
    1f2e:	82 81       	ldd	r24, Z+2	; 0x02
    1f30:	93 81       	ldd	r25, Z+3	; 0x03
    1f32:	01 96       	adiw	r24, 0x01	; 1
    1f34:	93 83       	std	Z+3, r25	; 0x03
    1f36:	82 83       	std	Z+2, r24	; 0x02
    1f38:	df 01       	movw	r26, r30
    1f3a:	01 c0       	rjmp	.+2      	; 0x1f3e <_fpadd_parts+0x28c>
    1f3c:	d2 01       	movw	r26, r4
    1f3e:	cd 01       	movw	r24, r26
    1f40:	cd b7       	in	r28, 0x3d	; 61
    1f42:	de b7       	in	r29, 0x3e	; 62
    1f44:	e2 e1       	ldi	r30, 0x12	; 18
    1f46:	0c 94 89 15 	jmp	0x2b12	; 0x2b12 <__epilogue_restores__>

00001f4a <__subsf3>:
    1f4a:	a0 e2       	ldi	r26, 0x20	; 32
    1f4c:	b0 e0       	ldi	r27, 0x00	; 0
    1f4e:	eb ea       	ldi	r30, 0xAB	; 171
    1f50:	ff e0       	ldi	r31, 0x0F	; 15
    1f52:	0c 94 79 15 	jmp	0x2af2	; 0x2af2 <__prologue_saves__+0x18>
    1f56:	69 83       	std	Y+1, r22	; 0x01
    1f58:	7a 83       	std	Y+2, r23	; 0x02
    1f5a:	8b 83       	std	Y+3, r24	; 0x03
    1f5c:	9c 83       	std	Y+4, r25	; 0x04
    1f5e:	2d 83       	std	Y+5, r18	; 0x05
    1f60:	3e 83       	std	Y+6, r19	; 0x06
    1f62:	4f 83       	std	Y+7, r20	; 0x07
    1f64:	58 87       	std	Y+8, r21	; 0x08
    1f66:	e9 e0       	ldi	r30, 0x09	; 9
    1f68:	ee 2e       	mov	r14, r30
    1f6a:	f1 2c       	mov	r15, r1
    1f6c:	ec 0e       	add	r14, r28
    1f6e:	fd 1e       	adc	r15, r29
    1f70:	ce 01       	movw	r24, r28
    1f72:	01 96       	adiw	r24, 0x01	; 1
    1f74:	b7 01       	movw	r22, r14
    1f76:	0e 94 88 14 	call	0x2910	; 0x2910 <__unpack_f>
    1f7a:	8e 01       	movw	r16, r28
    1f7c:	0f 5e       	subi	r16, 0xEF	; 239
    1f7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f80:	ce 01       	movw	r24, r28
    1f82:	05 96       	adiw	r24, 0x05	; 5
    1f84:	b8 01       	movw	r22, r16
    1f86:	0e 94 88 14 	call	0x2910	; 0x2910 <__unpack_f>
    1f8a:	8a 89       	ldd	r24, Y+18	; 0x12
    1f8c:	91 e0       	ldi	r25, 0x01	; 1
    1f8e:	89 27       	eor	r24, r25
    1f90:	8a 8b       	std	Y+18, r24	; 0x12
    1f92:	c7 01       	movw	r24, r14
    1f94:	b8 01       	movw	r22, r16
    1f96:	ae 01       	movw	r20, r28
    1f98:	47 5e       	subi	r20, 0xE7	; 231
    1f9a:	5f 4f       	sbci	r21, 0xFF	; 255
    1f9c:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <_fpadd_parts>
    1fa0:	0e 94 b3 13 	call	0x2766	; 0x2766 <__pack_f>
    1fa4:	a0 96       	adiw	r28, 0x20	; 32
    1fa6:	e6 e0       	ldi	r30, 0x06	; 6
    1fa8:	0c 94 95 15 	jmp	0x2b2a	; 0x2b2a <__epilogue_restores__+0x18>

00001fac <__addsf3>:
    1fac:	a0 e2       	ldi	r26, 0x20	; 32
    1fae:	b0 e0       	ldi	r27, 0x00	; 0
    1fb0:	ec ed       	ldi	r30, 0xDC	; 220
    1fb2:	ff e0       	ldi	r31, 0x0F	; 15
    1fb4:	0c 94 79 15 	jmp	0x2af2	; 0x2af2 <__prologue_saves__+0x18>
    1fb8:	69 83       	std	Y+1, r22	; 0x01
    1fba:	7a 83       	std	Y+2, r23	; 0x02
    1fbc:	8b 83       	std	Y+3, r24	; 0x03
    1fbe:	9c 83       	std	Y+4, r25	; 0x04
    1fc0:	2d 83       	std	Y+5, r18	; 0x05
    1fc2:	3e 83       	std	Y+6, r19	; 0x06
    1fc4:	4f 83       	std	Y+7, r20	; 0x07
    1fc6:	58 87       	std	Y+8, r21	; 0x08
    1fc8:	f9 e0       	ldi	r31, 0x09	; 9
    1fca:	ef 2e       	mov	r14, r31
    1fcc:	f1 2c       	mov	r15, r1
    1fce:	ec 0e       	add	r14, r28
    1fd0:	fd 1e       	adc	r15, r29
    1fd2:	ce 01       	movw	r24, r28
    1fd4:	01 96       	adiw	r24, 0x01	; 1
    1fd6:	b7 01       	movw	r22, r14
    1fd8:	0e 94 88 14 	call	0x2910	; 0x2910 <__unpack_f>
    1fdc:	8e 01       	movw	r16, r28
    1fde:	0f 5e       	subi	r16, 0xEF	; 239
    1fe0:	1f 4f       	sbci	r17, 0xFF	; 255
    1fe2:	ce 01       	movw	r24, r28
    1fe4:	05 96       	adiw	r24, 0x05	; 5
    1fe6:	b8 01       	movw	r22, r16
    1fe8:	0e 94 88 14 	call	0x2910	; 0x2910 <__unpack_f>
    1fec:	c7 01       	movw	r24, r14
    1fee:	b8 01       	movw	r22, r16
    1ff0:	ae 01       	movw	r20, r28
    1ff2:	47 5e       	subi	r20, 0xE7	; 231
    1ff4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ff6:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <_fpadd_parts>
    1ffa:	0e 94 b3 13 	call	0x2766	; 0x2766 <__pack_f>
    1ffe:	a0 96       	adiw	r28, 0x20	; 32
    2000:	e6 e0       	ldi	r30, 0x06	; 6
    2002:	0c 94 95 15 	jmp	0x2b2a	; 0x2b2a <__epilogue_restores__+0x18>

00002006 <__mulsf3>:
    2006:	a0 e2       	ldi	r26, 0x20	; 32
    2008:	b0 e0       	ldi	r27, 0x00	; 0
    200a:	e9 e0       	ldi	r30, 0x09	; 9
    200c:	f0 e1       	ldi	r31, 0x10	; 16
    200e:	0c 94 6d 15 	jmp	0x2ada	; 0x2ada <__prologue_saves__>
    2012:	69 83       	std	Y+1, r22	; 0x01
    2014:	7a 83       	std	Y+2, r23	; 0x02
    2016:	8b 83       	std	Y+3, r24	; 0x03
    2018:	9c 83       	std	Y+4, r25	; 0x04
    201a:	2d 83       	std	Y+5, r18	; 0x05
    201c:	3e 83       	std	Y+6, r19	; 0x06
    201e:	4f 83       	std	Y+7, r20	; 0x07
    2020:	58 87       	std	Y+8, r21	; 0x08
    2022:	ce 01       	movw	r24, r28
    2024:	01 96       	adiw	r24, 0x01	; 1
    2026:	be 01       	movw	r22, r28
    2028:	67 5f       	subi	r22, 0xF7	; 247
    202a:	7f 4f       	sbci	r23, 0xFF	; 255
    202c:	0e 94 88 14 	call	0x2910	; 0x2910 <__unpack_f>
    2030:	ce 01       	movw	r24, r28
    2032:	05 96       	adiw	r24, 0x05	; 5
    2034:	be 01       	movw	r22, r28
    2036:	6f 5e       	subi	r22, 0xEF	; 239
    2038:	7f 4f       	sbci	r23, 0xFF	; 255
    203a:	0e 94 88 14 	call	0x2910	; 0x2910 <__unpack_f>
    203e:	99 85       	ldd	r25, Y+9	; 0x09
    2040:	92 30       	cpi	r25, 0x02	; 2
    2042:	88 f0       	brcs	.+34     	; 0x2066 <__mulsf3+0x60>
    2044:	89 89       	ldd	r24, Y+17	; 0x11
    2046:	82 30       	cpi	r24, 0x02	; 2
    2048:	c8 f0       	brcs	.+50     	; 0x207c <__mulsf3+0x76>
    204a:	94 30       	cpi	r25, 0x04	; 4
    204c:	19 f4       	brne	.+6      	; 0x2054 <__mulsf3+0x4e>
    204e:	82 30       	cpi	r24, 0x02	; 2
    2050:	51 f4       	brne	.+20     	; 0x2066 <__mulsf3+0x60>
    2052:	04 c0       	rjmp	.+8      	; 0x205c <__mulsf3+0x56>
    2054:	84 30       	cpi	r24, 0x04	; 4
    2056:	29 f4       	brne	.+10     	; 0x2062 <__mulsf3+0x5c>
    2058:	92 30       	cpi	r25, 0x02	; 2
    205a:	81 f4       	brne	.+32     	; 0x207c <__mulsf3+0x76>
    205c:	8d e3       	ldi	r24, 0x3D	; 61
    205e:	92 e0       	ldi	r25, 0x02	; 2
    2060:	c6 c0       	rjmp	.+396    	; 0x21ee <__mulsf3+0x1e8>
    2062:	92 30       	cpi	r25, 0x02	; 2
    2064:	49 f4       	brne	.+18     	; 0x2078 <__mulsf3+0x72>
    2066:	20 e0       	ldi	r18, 0x00	; 0
    2068:	9a 85       	ldd	r25, Y+10	; 0x0a
    206a:	8a 89       	ldd	r24, Y+18	; 0x12
    206c:	98 13       	cpse	r25, r24
    206e:	21 e0       	ldi	r18, 0x01	; 1
    2070:	2a 87       	std	Y+10, r18	; 0x0a
    2072:	ce 01       	movw	r24, r28
    2074:	09 96       	adiw	r24, 0x09	; 9
    2076:	bb c0       	rjmp	.+374    	; 0x21ee <__mulsf3+0x1e8>
    2078:	82 30       	cpi	r24, 0x02	; 2
    207a:	49 f4       	brne	.+18     	; 0x208e <__mulsf3+0x88>
    207c:	20 e0       	ldi	r18, 0x00	; 0
    207e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2080:	8a 89       	ldd	r24, Y+18	; 0x12
    2082:	98 13       	cpse	r25, r24
    2084:	21 e0       	ldi	r18, 0x01	; 1
    2086:	2a 8b       	std	Y+18, r18	; 0x12
    2088:	ce 01       	movw	r24, r28
    208a:	41 96       	adiw	r24, 0x11	; 17
    208c:	b0 c0       	rjmp	.+352    	; 0x21ee <__mulsf3+0x1e8>
    208e:	2d 84       	ldd	r2, Y+13	; 0x0d
    2090:	3e 84       	ldd	r3, Y+14	; 0x0e
    2092:	4f 84       	ldd	r4, Y+15	; 0x0f
    2094:	58 88       	ldd	r5, Y+16	; 0x10
    2096:	6d 88       	ldd	r6, Y+21	; 0x15
    2098:	7e 88       	ldd	r7, Y+22	; 0x16
    209a:	8f 88       	ldd	r8, Y+23	; 0x17
    209c:	98 8c       	ldd	r9, Y+24	; 0x18
    209e:	ee 24       	eor	r14, r14
    20a0:	ff 24       	eor	r15, r15
    20a2:	87 01       	movw	r16, r14
    20a4:	aa 24       	eor	r10, r10
    20a6:	bb 24       	eor	r11, r11
    20a8:	65 01       	movw	r12, r10
    20aa:	40 e0       	ldi	r20, 0x00	; 0
    20ac:	50 e0       	ldi	r21, 0x00	; 0
    20ae:	60 e0       	ldi	r22, 0x00	; 0
    20b0:	70 e0       	ldi	r23, 0x00	; 0
    20b2:	e0 e0       	ldi	r30, 0x00	; 0
    20b4:	f0 e0       	ldi	r31, 0x00	; 0
    20b6:	c1 01       	movw	r24, r2
    20b8:	81 70       	andi	r24, 0x01	; 1
    20ba:	90 70       	andi	r25, 0x00	; 0
    20bc:	89 2b       	or	r24, r25
    20be:	e9 f0       	breq	.+58     	; 0x20fa <__mulsf3+0xf4>
    20c0:	e6 0c       	add	r14, r6
    20c2:	f7 1c       	adc	r15, r7
    20c4:	08 1d       	adc	r16, r8
    20c6:	19 1d       	adc	r17, r9
    20c8:	9a 01       	movw	r18, r20
    20ca:	ab 01       	movw	r20, r22
    20cc:	2a 0d       	add	r18, r10
    20ce:	3b 1d       	adc	r19, r11
    20d0:	4c 1d       	adc	r20, r12
    20d2:	5d 1d       	adc	r21, r13
    20d4:	80 e0       	ldi	r24, 0x00	; 0
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	a0 e0       	ldi	r26, 0x00	; 0
    20da:	b0 e0       	ldi	r27, 0x00	; 0
    20dc:	e6 14       	cp	r14, r6
    20de:	f7 04       	cpc	r15, r7
    20e0:	08 05       	cpc	r16, r8
    20e2:	19 05       	cpc	r17, r9
    20e4:	20 f4       	brcc	.+8      	; 0x20ee <__mulsf3+0xe8>
    20e6:	81 e0       	ldi	r24, 0x01	; 1
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	a0 e0       	ldi	r26, 0x00	; 0
    20ec:	b0 e0       	ldi	r27, 0x00	; 0
    20ee:	ba 01       	movw	r22, r20
    20f0:	a9 01       	movw	r20, r18
    20f2:	48 0f       	add	r20, r24
    20f4:	59 1f       	adc	r21, r25
    20f6:	6a 1f       	adc	r22, r26
    20f8:	7b 1f       	adc	r23, r27
    20fa:	aa 0c       	add	r10, r10
    20fc:	bb 1c       	adc	r11, r11
    20fe:	cc 1c       	adc	r12, r12
    2100:	dd 1c       	adc	r13, r13
    2102:	97 fe       	sbrs	r9, 7
    2104:	08 c0       	rjmp	.+16     	; 0x2116 <__mulsf3+0x110>
    2106:	81 e0       	ldi	r24, 0x01	; 1
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	a0 e0       	ldi	r26, 0x00	; 0
    210c:	b0 e0       	ldi	r27, 0x00	; 0
    210e:	a8 2a       	or	r10, r24
    2110:	b9 2a       	or	r11, r25
    2112:	ca 2a       	or	r12, r26
    2114:	db 2a       	or	r13, r27
    2116:	31 96       	adiw	r30, 0x01	; 1
    2118:	e0 32       	cpi	r30, 0x20	; 32
    211a:	f1 05       	cpc	r31, r1
    211c:	49 f0       	breq	.+18     	; 0x2130 <__mulsf3+0x12a>
    211e:	66 0c       	add	r6, r6
    2120:	77 1c       	adc	r7, r7
    2122:	88 1c       	adc	r8, r8
    2124:	99 1c       	adc	r9, r9
    2126:	56 94       	lsr	r5
    2128:	47 94       	ror	r4
    212a:	37 94       	ror	r3
    212c:	27 94       	ror	r2
    212e:	c3 cf       	rjmp	.-122    	; 0x20b6 <__mulsf3+0xb0>
    2130:	fa 85       	ldd	r31, Y+10	; 0x0a
    2132:	ea 89       	ldd	r30, Y+18	; 0x12
    2134:	2b 89       	ldd	r18, Y+19	; 0x13
    2136:	3c 89       	ldd	r19, Y+20	; 0x14
    2138:	8b 85       	ldd	r24, Y+11	; 0x0b
    213a:	9c 85       	ldd	r25, Y+12	; 0x0c
    213c:	28 0f       	add	r18, r24
    213e:	39 1f       	adc	r19, r25
    2140:	2e 5f       	subi	r18, 0xFE	; 254
    2142:	3f 4f       	sbci	r19, 0xFF	; 255
    2144:	17 c0       	rjmp	.+46     	; 0x2174 <__mulsf3+0x16e>
    2146:	ca 01       	movw	r24, r20
    2148:	81 70       	andi	r24, 0x01	; 1
    214a:	90 70       	andi	r25, 0x00	; 0
    214c:	89 2b       	or	r24, r25
    214e:	61 f0       	breq	.+24     	; 0x2168 <__mulsf3+0x162>
    2150:	16 95       	lsr	r17
    2152:	07 95       	ror	r16
    2154:	f7 94       	ror	r15
    2156:	e7 94       	ror	r14
    2158:	80 e0       	ldi	r24, 0x00	; 0
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	a0 e0       	ldi	r26, 0x00	; 0
    215e:	b0 e8       	ldi	r27, 0x80	; 128
    2160:	e8 2a       	or	r14, r24
    2162:	f9 2a       	or	r15, r25
    2164:	0a 2b       	or	r16, r26
    2166:	1b 2b       	or	r17, r27
    2168:	76 95       	lsr	r23
    216a:	67 95       	ror	r22
    216c:	57 95       	ror	r21
    216e:	47 95       	ror	r20
    2170:	2f 5f       	subi	r18, 0xFF	; 255
    2172:	3f 4f       	sbci	r19, 0xFF	; 255
    2174:	77 fd       	sbrc	r23, 7
    2176:	e7 cf       	rjmp	.-50     	; 0x2146 <__mulsf3+0x140>
    2178:	0c c0       	rjmp	.+24     	; 0x2192 <__mulsf3+0x18c>
    217a:	44 0f       	add	r20, r20
    217c:	55 1f       	adc	r21, r21
    217e:	66 1f       	adc	r22, r22
    2180:	77 1f       	adc	r23, r23
    2182:	17 fd       	sbrc	r17, 7
    2184:	41 60       	ori	r20, 0x01	; 1
    2186:	ee 0c       	add	r14, r14
    2188:	ff 1c       	adc	r15, r15
    218a:	00 1f       	adc	r16, r16
    218c:	11 1f       	adc	r17, r17
    218e:	21 50       	subi	r18, 0x01	; 1
    2190:	30 40       	sbci	r19, 0x00	; 0
    2192:	40 30       	cpi	r20, 0x00	; 0
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	59 07       	cpc	r21, r25
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	69 07       	cpc	r22, r25
    219c:	90 e4       	ldi	r25, 0x40	; 64
    219e:	79 07       	cpc	r23, r25
    21a0:	60 f3       	brcs	.-40     	; 0x217a <__mulsf3+0x174>
    21a2:	2b 8f       	std	Y+27, r18	; 0x1b
    21a4:	3c 8f       	std	Y+28, r19	; 0x1c
    21a6:	db 01       	movw	r26, r22
    21a8:	ca 01       	movw	r24, r20
    21aa:	8f 77       	andi	r24, 0x7F	; 127
    21ac:	90 70       	andi	r25, 0x00	; 0
    21ae:	a0 70       	andi	r26, 0x00	; 0
    21b0:	b0 70       	andi	r27, 0x00	; 0
    21b2:	80 34       	cpi	r24, 0x40	; 64
    21b4:	91 05       	cpc	r25, r1
    21b6:	a1 05       	cpc	r26, r1
    21b8:	b1 05       	cpc	r27, r1
    21ba:	61 f4       	brne	.+24     	; 0x21d4 <__mulsf3+0x1ce>
    21bc:	47 fd       	sbrc	r20, 7
    21be:	0a c0       	rjmp	.+20     	; 0x21d4 <__mulsf3+0x1ce>
    21c0:	e1 14       	cp	r14, r1
    21c2:	f1 04       	cpc	r15, r1
    21c4:	01 05       	cpc	r16, r1
    21c6:	11 05       	cpc	r17, r1
    21c8:	29 f0       	breq	.+10     	; 0x21d4 <__mulsf3+0x1ce>
    21ca:	40 5c       	subi	r20, 0xC0	; 192
    21cc:	5f 4f       	sbci	r21, 0xFF	; 255
    21ce:	6f 4f       	sbci	r22, 0xFF	; 255
    21d0:	7f 4f       	sbci	r23, 0xFF	; 255
    21d2:	40 78       	andi	r20, 0x80	; 128
    21d4:	1a 8e       	std	Y+26, r1	; 0x1a
    21d6:	fe 17       	cp	r31, r30
    21d8:	11 f0       	breq	.+4      	; 0x21de <__mulsf3+0x1d8>
    21da:	81 e0       	ldi	r24, 0x01	; 1
    21dc:	8a 8f       	std	Y+26, r24	; 0x1a
    21de:	4d 8f       	std	Y+29, r20	; 0x1d
    21e0:	5e 8f       	std	Y+30, r21	; 0x1e
    21e2:	6f 8f       	std	Y+31, r22	; 0x1f
    21e4:	78 a3       	std	Y+32, r23	; 0x20
    21e6:	83 e0       	ldi	r24, 0x03	; 3
    21e8:	89 8f       	std	Y+25, r24	; 0x19
    21ea:	ce 01       	movw	r24, r28
    21ec:	49 96       	adiw	r24, 0x19	; 25
    21ee:	0e 94 b3 13 	call	0x2766	; 0x2766 <__pack_f>
    21f2:	a0 96       	adiw	r28, 0x20	; 32
    21f4:	e2 e1       	ldi	r30, 0x12	; 18
    21f6:	0c 94 89 15 	jmp	0x2b12	; 0x2b12 <__epilogue_restores__>

000021fa <__divsf3>:
    21fa:	a8 e1       	ldi	r26, 0x18	; 24
    21fc:	b0 e0       	ldi	r27, 0x00	; 0
    21fe:	e3 e0       	ldi	r30, 0x03	; 3
    2200:	f1 e1       	ldi	r31, 0x11	; 17
    2202:	0c 94 75 15 	jmp	0x2aea	; 0x2aea <__prologue_saves__+0x10>
    2206:	69 83       	std	Y+1, r22	; 0x01
    2208:	7a 83       	std	Y+2, r23	; 0x02
    220a:	8b 83       	std	Y+3, r24	; 0x03
    220c:	9c 83       	std	Y+4, r25	; 0x04
    220e:	2d 83       	std	Y+5, r18	; 0x05
    2210:	3e 83       	std	Y+6, r19	; 0x06
    2212:	4f 83       	std	Y+7, r20	; 0x07
    2214:	58 87       	std	Y+8, r21	; 0x08
    2216:	b9 e0       	ldi	r27, 0x09	; 9
    2218:	eb 2e       	mov	r14, r27
    221a:	f1 2c       	mov	r15, r1
    221c:	ec 0e       	add	r14, r28
    221e:	fd 1e       	adc	r15, r29
    2220:	ce 01       	movw	r24, r28
    2222:	01 96       	adiw	r24, 0x01	; 1
    2224:	b7 01       	movw	r22, r14
    2226:	0e 94 88 14 	call	0x2910	; 0x2910 <__unpack_f>
    222a:	8e 01       	movw	r16, r28
    222c:	0f 5e       	subi	r16, 0xEF	; 239
    222e:	1f 4f       	sbci	r17, 0xFF	; 255
    2230:	ce 01       	movw	r24, r28
    2232:	05 96       	adiw	r24, 0x05	; 5
    2234:	b8 01       	movw	r22, r16
    2236:	0e 94 88 14 	call	0x2910	; 0x2910 <__unpack_f>
    223a:	29 85       	ldd	r18, Y+9	; 0x09
    223c:	22 30       	cpi	r18, 0x02	; 2
    223e:	08 f4       	brcc	.+2      	; 0x2242 <__divsf3+0x48>
    2240:	7e c0       	rjmp	.+252    	; 0x233e <__divsf3+0x144>
    2242:	39 89       	ldd	r19, Y+17	; 0x11
    2244:	32 30       	cpi	r19, 0x02	; 2
    2246:	10 f4       	brcc	.+4      	; 0x224c <__divsf3+0x52>
    2248:	b8 01       	movw	r22, r16
    224a:	7c c0       	rjmp	.+248    	; 0x2344 <__divsf3+0x14a>
    224c:	8a 85       	ldd	r24, Y+10	; 0x0a
    224e:	9a 89       	ldd	r25, Y+18	; 0x12
    2250:	89 27       	eor	r24, r25
    2252:	8a 87       	std	Y+10, r24	; 0x0a
    2254:	24 30       	cpi	r18, 0x04	; 4
    2256:	11 f0       	breq	.+4      	; 0x225c <__divsf3+0x62>
    2258:	22 30       	cpi	r18, 0x02	; 2
    225a:	31 f4       	brne	.+12     	; 0x2268 <__divsf3+0x6e>
    225c:	23 17       	cp	r18, r19
    225e:	09 f0       	breq	.+2      	; 0x2262 <__divsf3+0x68>
    2260:	6e c0       	rjmp	.+220    	; 0x233e <__divsf3+0x144>
    2262:	6d e3       	ldi	r22, 0x3D	; 61
    2264:	72 e0       	ldi	r23, 0x02	; 2
    2266:	6e c0       	rjmp	.+220    	; 0x2344 <__divsf3+0x14a>
    2268:	34 30       	cpi	r19, 0x04	; 4
    226a:	39 f4       	brne	.+14     	; 0x227a <__divsf3+0x80>
    226c:	1d 86       	std	Y+13, r1	; 0x0d
    226e:	1e 86       	std	Y+14, r1	; 0x0e
    2270:	1f 86       	std	Y+15, r1	; 0x0f
    2272:	18 8a       	std	Y+16, r1	; 0x10
    2274:	1c 86       	std	Y+12, r1	; 0x0c
    2276:	1b 86       	std	Y+11, r1	; 0x0b
    2278:	04 c0       	rjmp	.+8      	; 0x2282 <__divsf3+0x88>
    227a:	32 30       	cpi	r19, 0x02	; 2
    227c:	21 f4       	brne	.+8      	; 0x2286 <__divsf3+0x8c>
    227e:	84 e0       	ldi	r24, 0x04	; 4
    2280:	89 87       	std	Y+9, r24	; 0x09
    2282:	b7 01       	movw	r22, r14
    2284:	5f c0       	rjmp	.+190    	; 0x2344 <__divsf3+0x14a>
    2286:	2b 85       	ldd	r18, Y+11	; 0x0b
    2288:	3c 85       	ldd	r19, Y+12	; 0x0c
    228a:	8b 89       	ldd	r24, Y+19	; 0x13
    228c:	9c 89       	ldd	r25, Y+20	; 0x14
    228e:	28 1b       	sub	r18, r24
    2290:	39 0b       	sbc	r19, r25
    2292:	3c 87       	std	Y+12, r19	; 0x0c
    2294:	2b 87       	std	Y+11, r18	; 0x0b
    2296:	ed 84       	ldd	r14, Y+13	; 0x0d
    2298:	fe 84       	ldd	r15, Y+14	; 0x0e
    229a:	0f 85       	ldd	r16, Y+15	; 0x0f
    229c:	18 89       	ldd	r17, Y+16	; 0x10
    229e:	ad 88       	ldd	r10, Y+21	; 0x15
    22a0:	be 88       	ldd	r11, Y+22	; 0x16
    22a2:	cf 88       	ldd	r12, Y+23	; 0x17
    22a4:	d8 8c       	ldd	r13, Y+24	; 0x18
    22a6:	ea 14       	cp	r14, r10
    22a8:	fb 04       	cpc	r15, r11
    22aa:	0c 05       	cpc	r16, r12
    22ac:	1d 05       	cpc	r17, r13
    22ae:	40 f4       	brcc	.+16     	; 0x22c0 <__divsf3+0xc6>
    22b0:	ee 0c       	add	r14, r14
    22b2:	ff 1c       	adc	r15, r15
    22b4:	00 1f       	adc	r16, r16
    22b6:	11 1f       	adc	r17, r17
    22b8:	21 50       	subi	r18, 0x01	; 1
    22ba:	30 40       	sbci	r19, 0x00	; 0
    22bc:	3c 87       	std	Y+12, r19	; 0x0c
    22be:	2b 87       	std	Y+11, r18	; 0x0b
    22c0:	20 e0       	ldi	r18, 0x00	; 0
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	40 e0       	ldi	r20, 0x00	; 0
    22c6:	50 e0       	ldi	r21, 0x00	; 0
    22c8:	80 e0       	ldi	r24, 0x00	; 0
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	a0 e0       	ldi	r26, 0x00	; 0
    22ce:	b0 e4       	ldi	r27, 0x40	; 64
    22d0:	60 e0       	ldi	r22, 0x00	; 0
    22d2:	70 e0       	ldi	r23, 0x00	; 0
    22d4:	ea 14       	cp	r14, r10
    22d6:	fb 04       	cpc	r15, r11
    22d8:	0c 05       	cpc	r16, r12
    22da:	1d 05       	cpc	r17, r13
    22dc:	40 f0       	brcs	.+16     	; 0x22ee <__divsf3+0xf4>
    22de:	28 2b       	or	r18, r24
    22e0:	39 2b       	or	r19, r25
    22e2:	4a 2b       	or	r20, r26
    22e4:	5b 2b       	or	r21, r27
    22e6:	ea 18       	sub	r14, r10
    22e8:	fb 08       	sbc	r15, r11
    22ea:	0c 09       	sbc	r16, r12
    22ec:	1d 09       	sbc	r17, r13
    22ee:	b6 95       	lsr	r27
    22f0:	a7 95       	ror	r26
    22f2:	97 95       	ror	r25
    22f4:	87 95       	ror	r24
    22f6:	ee 0c       	add	r14, r14
    22f8:	ff 1c       	adc	r15, r15
    22fa:	00 1f       	adc	r16, r16
    22fc:	11 1f       	adc	r17, r17
    22fe:	6f 5f       	subi	r22, 0xFF	; 255
    2300:	7f 4f       	sbci	r23, 0xFF	; 255
    2302:	6f 31       	cpi	r22, 0x1F	; 31
    2304:	71 05       	cpc	r23, r1
    2306:	31 f7       	brne	.-52     	; 0x22d4 <__divsf3+0xda>
    2308:	da 01       	movw	r26, r20
    230a:	c9 01       	movw	r24, r18
    230c:	8f 77       	andi	r24, 0x7F	; 127
    230e:	90 70       	andi	r25, 0x00	; 0
    2310:	a0 70       	andi	r26, 0x00	; 0
    2312:	b0 70       	andi	r27, 0x00	; 0
    2314:	80 34       	cpi	r24, 0x40	; 64
    2316:	91 05       	cpc	r25, r1
    2318:	a1 05       	cpc	r26, r1
    231a:	b1 05       	cpc	r27, r1
    231c:	61 f4       	brne	.+24     	; 0x2336 <__divsf3+0x13c>
    231e:	27 fd       	sbrc	r18, 7
    2320:	0a c0       	rjmp	.+20     	; 0x2336 <__divsf3+0x13c>
    2322:	e1 14       	cp	r14, r1
    2324:	f1 04       	cpc	r15, r1
    2326:	01 05       	cpc	r16, r1
    2328:	11 05       	cpc	r17, r1
    232a:	29 f0       	breq	.+10     	; 0x2336 <__divsf3+0x13c>
    232c:	20 5c       	subi	r18, 0xC0	; 192
    232e:	3f 4f       	sbci	r19, 0xFF	; 255
    2330:	4f 4f       	sbci	r20, 0xFF	; 255
    2332:	5f 4f       	sbci	r21, 0xFF	; 255
    2334:	20 78       	andi	r18, 0x80	; 128
    2336:	2d 87       	std	Y+13, r18	; 0x0d
    2338:	3e 87       	std	Y+14, r19	; 0x0e
    233a:	4f 87       	std	Y+15, r20	; 0x0f
    233c:	58 8b       	std	Y+16, r21	; 0x10
    233e:	be 01       	movw	r22, r28
    2340:	67 5f       	subi	r22, 0xF7	; 247
    2342:	7f 4f       	sbci	r23, 0xFF	; 255
    2344:	cb 01       	movw	r24, r22
    2346:	0e 94 b3 13 	call	0x2766	; 0x2766 <__pack_f>
    234a:	68 96       	adiw	r28, 0x18	; 24
    234c:	ea e0       	ldi	r30, 0x0A	; 10
    234e:	0c 94 91 15 	jmp	0x2b22	; 0x2b22 <__epilogue_restores__+0x10>

00002352 <__gtsf2>:
    2352:	a8 e1       	ldi	r26, 0x18	; 24
    2354:	b0 e0       	ldi	r27, 0x00	; 0
    2356:	ef ea       	ldi	r30, 0xAF	; 175
    2358:	f1 e1       	ldi	r31, 0x11	; 17
    235a:	0c 94 79 15 	jmp	0x2af2	; 0x2af2 <__prologue_saves__+0x18>
    235e:	69 83       	std	Y+1, r22	; 0x01
    2360:	7a 83       	std	Y+2, r23	; 0x02
    2362:	8b 83       	std	Y+3, r24	; 0x03
    2364:	9c 83       	std	Y+4, r25	; 0x04
    2366:	2d 83       	std	Y+5, r18	; 0x05
    2368:	3e 83       	std	Y+6, r19	; 0x06
    236a:	4f 83       	std	Y+7, r20	; 0x07
    236c:	58 87       	std	Y+8, r21	; 0x08
    236e:	89 e0       	ldi	r24, 0x09	; 9
    2370:	e8 2e       	mov	r14, r24
    2372:	f1 2c       	mov	r15, r1
    2374:	ec 0e       	add	r14, r28
    2376:	fd 1e       	adc	r15, r29
    2378:	ce 01       	movw	r24, r28
    237a:	01 96       	adiw	r24, 0x01	; 1
    237c:	b7 01       	movw	r22, r14
    237e:	0e 94 88 14 	call	0x2910	; 0x2910 <__unpack_f>
    2382:	8e 01       	movw	r16, r28
    2384:	0f 5e       	subi	r16, 0xEF	; 239
    2386:	1f 4f       	sbci	r17, 0xFF	; 255
    2388:	ce 01       	movw	r24, r28
    238a:	05 96       	adiw	r24, 0x05	; 5
    238c:	b8 01       	movw	r22, r16
    238e:	0e 94 88 14 	call	0x2910	; 0x2910 <__unpack_f>
    2392:	89 85       	ldd	r24, Y+9	; 0x09
    2394:	82 30       	cpi	r24, 0x02	; 2
    2396:	40 f0       	brcs	.+16     	; 0x23a8 <__gtsf2+0x56>
    2398:	89 89       	ldd	r24, Y+17	; 0x11
    239a:	82 30       	cpi	r24, 0x02	; 2
    239c:	28 f0       	brcs	.+10     	; 0x23a8 <__gtsf2+0x56>
    239e:	c7 01       	movw	r24, r14
    23a0:	b8 01       	movw	r22, r16
    23a2:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__fpcmp_parts_f>
    23a6:	01 c0       	rjmp	.+2      	; 0x23aa <__gtsf2+0x58>
    23a8:	8f ef       	ldi	r24, 0xFF	; 255
    23aa:	68 96       	adiw	r28, 0x18	; 24
    23ac:	e6 e0       	ldi	r30, 0x06	; 6
    23ae:	0c 94 95 15 	jmp	0x2b2a	; 0x2b2a <__epilogue_restores__+0x18>

000023b2 <__gesf2>:
    23b2:	a8 e1       	ldi	r26, 0x18	; 24
    23b4:	b0 e0       	ldi	r27, 0x00	; 0
    23b6:	ef ed       	ldi	r30, 0xDF	; 223
    23b8:	f1 e1       	ldi	r31, 0x11	; 17
    23ba:	0c 94 79 15 	jmp	0x2af2	; 0x2af2 <__prologue_saves__+0x18>
    23be:	69 83       	std	Y+1, r22	; 0x01
    23c0:	7a 83       	std	Y+2, r23	; 0x02
    23c2:	8b 83       	std	Y+3, r24	; 0x03
    23c4:	9c 83       	std	Y+4, r25	; 0x04
    23c6:	2d 83       	std	Y+5, r18	; 0x05
    23c8:	3e 83       	std	Y+6, r19	; 0x06
    23ca:	4f 83       	std	Y+7, r20	; 0x07
    23cc:	58 87       	std	Y+8, r21	; 0x08
    23ce:	89 e0       	ldi	r24, 0x09	; 9
    23d0:	e8 2e       	mov	r14, r24
    23d2:	f1 2c       	mov	r15, r1
    23d4:	ec 0e       	add	r14, r28
    23d6:	fd 1e       	adc	r15, r29
    23d8:	ce 01       	movw	r24, r28
    23da:	01 96       	adiw	r24, 0x01	; 1
    23dc:	b7 01       	movw	r22, r14
    23de:	0e 94 88 14 	call	0x2910	; 0x2910 <__unpack_f>
    23e2:	8e 01       	movw	r16, r28
    23e4:	0f 5e       	subi	r16, 0xEF	; 239
    23e6:	1f 4f       	sbci	r17, 0xFF	; 255
    23e8:	ce 01       	movw	r24, r28
    23ea:	05 96       	adiw	r24, 0x05	; 5
    23ec:	b8 01       	movw	r22, r16
    23ee:	0e 94 88 14 	call	0x2910	; 0x2910 <__unpack_f>
    23f2:	89 85       	ldd	r24, Y+9	; 0x09
    23f4:	82 30       	cpi	r24, 0x02	; 2
    23f6:	40 f0       	brcs	.+16     	; 0x2408 <__gesf2+0x56>
    23f8:	89 89       	ldd	r24, Y+17	; 0x11
    23fa:	82 30       	cpi	r24, 0x02	; 2
    23fc:	28 f0       	brcs	.+10     	; 0x2408 <__gesf2+0x56>
    23fe:	c7 01       	movw	r24, r14
    2400:	b8 01       	movw	r22, r16
    2402:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__fpcmp_parts_f>
    2406:	01 c0       	rjmp	.+2      	; 0x240a <__gesf2+0x58>
    2408:	8f ef       	ldi	r24, 0xFF	; 255
    240a:	68 96       	adiw	r28, 0x18	; 24
    240c:	e6 e0       	ldi	r30, 0x06	; 6
    240e:	0c 94 95 15 	jmp	0x2b2a	; 0x2b2a <__epilogue_restores__+0x18>

00002412 <__ltsf2>:
    2412:	a8 e1       	ldi	r26, 0x18	; 24
    2414:	b0 e0       	ldi	r27, 0x00	; 0
    2416:	ef e0       	ldi	r30, 0x0F	; 15
    2418:	f2 e1       	ldi	r31, 0x12	; 18
    241a:	0c 94 79 15 	jmp	0x2af2	; 0x2af2 <__prologue_saves__+0x18>
    241e:	69 83       	std	Y+1, r22	; 0x01
    2420:	7a 83       	std	Y+2, r23	; 0x02
    2422:	8b 83       	std	Y+3, r24	; 0x03
    2424:	9c 83       	std	Y+4, r25	; 0x04
    2426:	2d 83       	std	Y+5, r18	; 0x05
    2428:	3e 83       	std	Y+6, r19	; 0x06
    242a:	4f 83       	std	Y+7, r20	; 0x07
    242c:	58 87       	std	Y+8, r21	; 0x08
    242e:	89 e0       	ldi	r24, 0x09	; 9
    2430:	e8 2e       	mov	r14, r24
    2432:	f1 2c       	mov	r15, r1
    2434:	ec 0e       	add	r14, r28
    2436:	fd 1e       	adc	r15, r29
    2438:	ce 01       	movw	r24, r28
    243a:	01 96       	adiw	r24, 0x01	; 1
    243c:	b7 01       	movw	r22, r14
    243e:	0e 94 88 14 	call	0x2910	; 0x2910 <__unpack_f>
    2442:	8e 01       	movw	r16, r28
    2444:	0f 5e       	subi	r16, 0xEF	; 239
    2446:	1f 4f       	sbci	r17, 0xFF	; 255
    2448:	ce 01       	movw	r24, r28
    244a:	05 96       	adiw	r24, 0x05	; 5
    244c:	b8 01       	movw	r22, r16
    244e:	0e 94 88 14 	call	0x2910	; 0x2910 <__unpack_f>
    2452:	89 85       	ldd	r24, Y+9	; 0x09
    2454:	82 30       	cpi	r24, 0x02	; 2
    2456:	40 f0       	brcs	.+16     	; 0x2468 <__ltsf2+0x56>
    2458:	89 89       	ldd	r24, Y+17	; 0x11
    245a:	82 30       	cpi	r24, 0x02	; 2
    245c:	28 f0       	brcs	.+10     	; 0x2468 <__ltsf2+0x56>
    245e:	c7 01       	movw	r24, r14
    2460:	b8 01       	movw	r22, r16
    2462:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__fpcmp_parts_f>
    2466:	01 c0       	rjmp	.+2      	; 0x246a <__ltsf2+0x58>
    2468:	81 e0       	ldi	r24, 0x01	; 1
    246a:	68 96       	adiw	r28, 0x18	; 24
    246c:	e6 e0       	ldi	r30, 0x06	; 6
    246e:	0c 94 95 15 	jmp	0x2b2a	; 0x2b2a <__epilogue_restores__+0x18>

00002472 <__floatsisf>:
    2472:	a8 e0       	ldi	r26, 0x08	; 8
    2474:	b0 e0       	ldi	r27, 0x00	; 0
    2476:	ef e3       	ldi	r30, 0x3F	; 63
    2478:	f2 e1       	ldi	r31, 0x12	; 18
    247a:	0c 94 76 15 	jmp	0x2aec	; 0x2aec <__prologue_saves__+0x12>
    247e:	9b 01       	movw	r18, r22
    2480:	ac 01       	movw	r20, r24
    2482:	83 e0       	ldi	r24, 0x03	; 3
    2484:	89 83       	std	Y+1, r24	; 0x01
    2486:	da 01       	movw	r26, r20
    2488:	c9 01       	movw	r24, r18
    248a:	88 27       	eor	r24, r24
    248c:	b7 fd       	sbrc	r27, 7
    248e:	83 95       	inc	r24
    2490:	99 27       	eor	r25, r25
    2492:	aa 27       	eor	r26, r26
    2494:	bb 27       	eor	r27, r27
    2496:	b8 2e       	mov	r11, r24
    2498:	21 15       	cp	r18, r1
    249a:	31 05       	cpc	r19, r1
    249c:	41 05       	cpc	r20, r1
    249e:	51 05       	cpc	r21, r1
    24a0:	19 f4       	brne	.+6      	; 0x24a8 <__floatsisf+0x36>
    24a2:	82 e0       	ldi	r24, 0x02	; 2
    24a4:	89 83       	std	Y+1, r24	; 0x01
    24a6:	3a c0       	rjmp	.+116    	; 0x251c <__floatsisf+0xaa>
    24a8:	88 23       	and	r24, r24
    24aa:	a9 f0       	breq	.+42     	; 0x24d6 <__floatsisf+0x64>
    24ac:	20 30       	cpi	r18, 0x00	; 0
    24ae:	80 e0       	ldi	r24, 0x00	; 0
    24b0:	38 07       	cpc	r19, r24
    24b2:	80 e0       	ldi	r24, 0x00	; 0
    24b4:	48 07       	cpc	r20, r24
    24b6:	80 e8       	ldi	r24, 0x80	; 128
    24b8:	58 07       	cpc	r21, r24
    24ba:	29 f4       	brne	.+10     	; 0x24c6 <__floatsisf+0x54>
    24bc:	60 e0       	ldi	r22, 0x00	; 0
    24be:	70 e0       	ldi	r23, 0x00	; 0
    24c0:	80 e0       	ldi	r24, 0x00	; 0
    24c2:	9f ec       	ldi	r25, 0xCF	; 207
    24c4:	30 c0       	rjmp	.+96     	; 0x2526 <__floatsisf+0xb4>
    24c6:	ee 24       	eor	r14, r14
    24c8:	ff 24       	eor	r15, r15
    24ca:	87 01       	movw	r16, r14
    24cc:	e2 1a       	sub	r14, r18
    24ce:	f3 0a       	sbc	r15, r19
    24d0:	04 0b       	sbc	r16, r20
    24d2:	15 0b       	sbc	r17, r21
    24d4:	02 c0       	rjmp	.+4      	; 0x24da <__floatsisf+0x68>
    24d6:	79 01       	movw	r14, r18
    24d8:	8a 01       	movw	r16, r20
    24da:	8e e1       	ldi	r24, 0x1E	; 30
    24dc:	c8 2e       	mov	r12, r24
    24de:	d1 2c       	mov	r13, r1
    24e0:	dc 82       	std	Y+4, r13	; 0x04
    24e2:	cb 82       	std	Y+3, r12	; 0x03
    24e4:	ed 82       	std	Y+5, r14	; 0x05
    24e6:	fe 82       	std	Y+6, r15	; 0x06
    24e8:	0f 83       	std	Y+7, r16	; 0x07
    24ea:	18 87       	std	Y+8, r17	; 0x08
    24ec:	c8 01       	movw	r24, r16
    24ee:	b7 01       	movw	r22, r14
    24f0:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__clzsi2>
    24f4:	01 97       	sbiw	r24, 0x01	; 1
    24f6:	18 16       	cp	r1, r24
    24f8:	19 06       	cpc	r1, r25
    24fa:	84 f4       	brge	.+32     	; 0x251c <__floatsisf+0xaa>
    24fc:	08 2e       	mov	r0, r24
    24fe:	04 c0       	rjmp	.+8      	; 0x2508 <__floatsisf+0x96>
    2500:	ee 0c       	add	r14, r14
    2502:	ff 1c       	adc	r15, r15
    2504:	00 1f       	adc	r16, r16
    2506:	11 1f       	adc	r17, r17
    2508:	0a 94       	dec	r0
    250a:	d2 f7       	brpl	.-12     	; 0x2500 <__floatsisf+0x8e>
    250c:	ed 82       	std	Y+5, r14	; 0x05
    250e:	fe 82       	std	Y+6, r15	; 0x06
    2510:	0f 83       	std	Y+7, r16	; 0x07
    2512:	18 87       	std	Y+8, r17	; 0x08
    2514:	c8 1a       	sub	r12, r24
    2516:	d9 0a       	sbc	r13, r25
    2518:	dc 82       	std	Y+4, r13	; 0x04
    251a:	cb 82       	std	Y+3, r12	; 0x03
    251c:	ba 82       	std	Y+2, r11	; 0x02
    251e:	ce 01       	movw	r24, r28
    2520:	01 96       	adiw	r24, 0x01	; 1
    2522:	0e 94 b3 13 	call	0x2766	; 0x2766 <__pack_f>
    2526:	28 96       	adiw	r28, 0x08	; 8
    2528:	e9 e0       	ldi	r30, 0x09	; 9
    252a:	0c 94 92 15 	jmp	0x2b24	; 0x2b24 <__epilogue_restores__+0x12>

0000252e <__fixsfsi>:
    252e:	ac e0       	ldi	r26, 0x0C	; 12
    2530:	b0 e0       	ldi	r27, 0x00	; 0
    2532:	ed e9       	ldi	r30, 0x9D	; 157
    2534:	f2 e1       	ldi	r31, 0x12	; 18
    2536:	0c 94 7d 15 	jmp	0x2afa	; 0x2afa <__prologue_saves__+0x20>
    253a:	69 83       	std	Y+1, r22	; 0x01
    253c:	7a 83       	std	Y+2, r23	; 0x02
    253e:	8b 83       	std	Y+3, r24	; 0x03
    2540:	9c 83       	std	Y+4, r25	; 0x04
    2542:	ce 01       	movw	r24, r28
    2544:	01 96       	adiw	r24, 0x01	; 1
    2546:	be 01       	movw	r22, r28
    2548:	6b 5f       	subi	r22, 0xFB	; 251
    254a:	7f 4f       	sbci	r23, 0xFF	; 255
    254c:	0e 94 88 14 	call	0x2910	; 0x2910 <__unpack_f>
    2550:	8d 81       	ldd	r24, Y+5	; 0x05
    2552:	82 30       	cpi	r24, 0x02	; 2
    2554:	61 f1       	breq	.+88     	; 0x25ae <__fixsfsi+0x80>
    2556:	82 30       	cpi	r24, 0x02	; 2
    2558:	50 f1       	brcs	.+84     	; 0x25ae <__fixsfsi+0x80>
    255a:	84 30       	cpi	r24, 0x04	; 4
    255c:	21 f4       	brne	.+8      	; 0x2566 <__fixsfsi+0x38>
    255e:	8e 81       	ldd	r24, Y+6	; 0x06
    2560:	88 23       	and	r24, r24
    2562:	51 f1       	breq	.+84     	; 0x25b8 <__fixsfsi+0x8a>
    2564:	2e c0       	rjmp	.+92     	; 0x25c2 <__fixsfsi+0x94>
    2566:	2f 81       	ldd	r18, Y+7	; 0x07
    2568:	38 85       	ldd	r19, Y+8	; 0x08
    256a:	37 fd       	sbrc	r19, 7
    256c:	20 c0       	rjmp	.+64     	; 0x25ae <__fixsfsi+0x80>
    256e:	6e 81       	ldd	r22, Y+6	; 0x06
    2570:	2f 31       	cpi	r18, 0x1F	; 31
    2572:	31 05       	cpc	r19, r1
    2574:	1c f0       	brlt	.+6      	; 0x257c <__fixsfsi+0x4e>
    2576:	66 23       	and	r22, r22
    2578:	f9 f0       	breq	.+62     	; 0x25b8 <__fixsfsi+0x8a>
    257a:	23 c0       	rjmp	.+70     	; 0x25c2 <__fixsfsi+0x94>
    257c:	8e e1       	ldi	r24, 0x1E	; 30
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	82 1b       	sub	r24, r18
    2582:	93 0b       	sbc	r25, r19
    2584:	29 85       	ldd	r18, Y+9	; 0x09
    2586:	3a 85       	ldd	r19, Y+10	; 0x0a
    2588:	4b 85       	ldd	r20, Y+11	; 0x0b
    258a:	5c 85       	ldd	r21, Y+12	; 0x0c
    258c:	04 c0       	rjmp	.+8      	; 0x2596 <__fixsfsi+0x68>
    258e:	56 95       	lsr	r21
    2590:	47 95       	ror	r20
    2592:	37 95       	ror	r19
    2594:	27 95       	ror	r18
    2596:	8a 95       	dec	r24
    2598:	d2 f7       	brpl	.-12     	; 0x258e <__fixsfsi+0x60>
    259a:	66 23       	and	r22, r22
    259c:	b1 f0       	breq	.+44     	; 0x25ca <__fixsfsi+0x9c>
    259e:	50 95       	com	r21
    25a0:	40 95       	com	r20
    25a2:	30 95       	com	r19
    25a4:	21 95       	neg	r18
    25a6:	3f 4f       	sbci	r19, 0xFF	; 255
    25a8:	4f 4f       	sbci	r20, 0xFF	; 255
    25aa:	5f 4f       	sbci	r21, 0xFF	; 255
    25ac:	0e c0       	rjmp	.+28     	; 0x25ca <__fixsfsi+0x9c>
    25ae:	20 e0       	ldi	r18, 0x00	; 0
    25b0:	30 e0       	ldi	r19, 0x00	; 0
    25b2:	40 e0       	ldi	r20, 0x00	; 0
    25b4:	50 e0       	ldi	r21, 0x00	; 0
    25b6:	09 c0       	rjmp	.+18     	; 0x25ca <__fixsfsi+0x9c>
    25b8:	2f ef       	ldi	r18, 0xFF	; 255
    25ba:	3f ef       	ldi	r19, 0xFF	; 255
    25bc:	4f ef       	ldi	r20, 0xFF	; 255
    25be:	5f e7       	ldi	r21, 0x7F	; 127
    25c0:	04 c0       	rjmp	.+8      	; 0x25ca <__fixsfsi+0x9c>
    25c2:	20 e0       	ldi	r18, 0x00	; 0
    25c4:	30 e0       	ldi	r19, 0x00	; 0
    25c6:	40 e0       	ldi	r20, 0x00	; 0
    25c8:	50 e8       	ldi	r21, 0x80	; 128
    25ca:	b9 01       	movw	r22, r18
    25cc:	ca 01       	movw	r24, r20
    25ce:	2c 96       	adiw	r28, 0x0c	; 12
    25d0:	e2 e0       	ldi	r30, 0x02	; 2
    25d2:	0c 94 99 15 	jmp	0x2b32	; 0x2b32 <__epilogue_restores__+0x20>

000025d6 <__floatunsisf>:
    25d6:	a8 e0       	ldi	r26, 0x08	; 8
    25d8:	b0 e0       	ldi	r27, 0x00	; 0
    25da:	e1 ef       	ldi	r30, 0xF1	; 241
    25dc:	f2 e1       	ldi	r31, 0x12	; 18
    25de:	0c 94 75 15 	jmp	0x2aea	; 0x2aea <__prologue_saves__+0x10>
    25e2:	7b 01       	movw	r14, r22
    25e4:	8c 01       	movw	r16, r24
    25e6:	61 15       	cp	r22, r1
    25e8:	71 05       	cpc	r23, r1
    25ea:	81 05       	cpc	r24, r1
    25ec:	91 05       	cpc	r25, r1
    25ee:	19 f4       	brne	.+6      	; 0x25f6 <__floatunsisf+0x20>
    25f0:	82 e0       	ldi	r24, 0x02	; 2
    25f2:	89 83       	std	Y+1, r24	; 0x01
    25f4:	60 c0       	rjmp	.+192    	; 0x26b6 <__floatunsisf+0xe0>
    25f6:	83 e0       	ldi	r24, 0x03	; 3
    25f8:	89 83       	std	Y+1, r24	; 0x01
    25fa:	8e e1       	ldi	r24, 0x1E	; 30
    25fc:	c8 2e       	mov	r12, r24
    25fe:	d1 2c       	mov	r13, r1
    2600:	dc 82       	std	Y+4, r13	; 0x04
    2602:	cb 82       	std	Y+3, r12	; 0x03
    2604:	ed 82       	std	Y+5, r14	; 0x05
    2606:	fe 82       	std	Y+6, r15	; 0x06
    2608:	0f 83       	std	Y+7, r16	; 0x07
    260a:	18 87       	std	Y+8, r17	; 0x08
    260c:	c8 01       	movw	r24, r16
    260e:	b7 01       	movw	r22, r14
    2610:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__clzsi2>
    2614:	fc 01       	movw	r30, r24
    2616:	31 97       	sbiw	r30, 0x01	; 1
    2618:	f7 ff       	sbrs	r31, 7
    261a:	3b c0       	rjmp	.+118    	; 0x2692 <__floatunsisf+0xbc>
    261c:	22 27       	eor	r18, r18
    261e:	33 27       	eor	r19, r19
    2620:	2e 1b       	sub	r18, r30
    2622:	3f 0b       	sbc	r19, r31
    2624:	57 01       	movw	r10, r14
    2626:	68 01       	movw	r12, r16
    2628:	02 2e       	mov	r0, r18
    262a:	04 c0       	rjmp	.+8      	; 0x2634 <__floatunsisf+0x5e>
    262c:	d6 94       	lsr	r13
    262e:	c7 94       	ror	r12
    2630:	b7 94       	ror	r11
    2632:	a7 94       	ror	r10
    2634:	0a 94       	dec	r0
    2636:	d2 f7       	brpl	.-12     	; 0x262c <__floatunsisf+0x56>
    2638:	40 e0       	ldi	r20, 0x00	; 0
    263a:	50 e0       	ldi	r21, 0x00	; 0
    263c:	60 e0       	ldi	r22, 0x00	; 0
    263e:	70 e0       	ldi	r23, 0x00	; 0
    2640:	81 e0       	ldi	r24, 0x01	; 1
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	a0 e0       	ldi	r26, 0x00	; 0
    2646:	b0 e0       	ldi	r27, 0x00	; 0
    2648:	04 c0       	rjmp	.+8      	; 0x2652 <__floatunsisf+0x7c>
    264a:	88 0f       	add	r24, r24
    264c:	99 1f       	adc	r25, r25
    264e:	aa 1f       	adc	r26, r26
    2650:	bb 1f       	adc	r27, r27
    2652:	2a 95       	dec	r18
    2654:	d2 f7       	brpl	.-12     	; 0x264a <__floatunsisf+0x74>
    2656:	01 97       	sbiw	r24, 0x01	; 1
    2658:	a1 09       	sbc	r26, r1
    265a:	b1 09       	sbc	r27, r1
    265c:	8e 21       	and	r24, r14
    265e:	9f 21       	and	r25, r15
    2660:	a0 23       	and	r26, r16
    2662:	b1 23       	and	r27, r17
    2664:	00 97       	sbiw	r24, 0x00	; 0
    2666:	a1 05       	cpc	r26, r1
    2668:	b1 05       	cpc	r27, r1
    266a:	21 f0       	breq	.+8      	; 0x2674 <__floatunsisf+0x9e>
    266c:	41 e0       	ldi	r20, 0x01	; 1
    266e:	50 e0       	ldi	r21, 0x00	; 0
    2670:	60 e0       	ldi	r22, 0x00	; 0
    2672:	70 e0       	ldi	r23, 0x00	; 0
    2674:	4a 29       	or	r20, r10
    2676:	5b 29       	or	r21, r11
    2678:	6c 29       	or	r22, r12
    267a:	7d 29       	or	r23, r13
    267c:	4d 83       	std	Y+5, r20	; 0x05
    267e:	5e 83       	std	Y+6, r21	; 0x06
    2680:	6f 83       	std	Y+7, r22	; 0x07
    2682:	78 87       	std	Y+8, r23	; 0x08
    2684:	8e e1       	ldi	r24, 0x1E	; 30
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	8e 1b       	sub	r24, r30
    268a:	9f 0b       	sbc	r25, r31
    268c:	9c 83       	std	Y+4, r25	; 0x04
    268e:	8b 83       	std	Y+3, r24	; 0x03
    2690:	12 c0       	rjmp	.+36     	; 0x26b6 <__floatunsisf+0xe0>
    2692:	30 97       	sbiw	r30, 0x00	; 0
    2694:	81 f0       	breq	.+32     	; 0x26b6 <__floatunsisf+0xe0>
    2696:	0e 2e       	mov	r0, r30
    2698:	04 c0       	rjmp	.+8      	; 0x26a2 <__floatunsisf+0xcc>
    269a:	ee 0c       	add	r14, r14
    269c:	ff 1c       	adc	r15, r15
    269e:	00 1f       	adc	r16, r16
    26a0:	11 1f       	adc	r17, r17
    26a2:	0a 94       	dec	r0
    26a4:	d2 f7       	brpl	.-12     	; 0x269a <__floatunsisf+0xc4>
    26a6:	ed 82       	std	Y+5, r14	; 0x05
    26a8:	fe 82       	std	Y+6, r15	; 0x06
    26aa:	0f 83       	std	Y+7, r16	; 0x07
    26ac:	18 87       	std	Y+8, r17	; 0x08
    26ae:	ce 1a       	sub	r12, r30
    26b0:	df 0a       	sbc	r13, r31
    26b2:	dc 82       	std	Y+4, r13	; 0x04
    26b4:	cb 82       	std	Y+3, r12	; 0x03
    26b6:	1a 82       	std	Y+2, r1	; 0x02
    26b8:	ce 01       	movw	r24, r28
    26ba:	01 96       	adiw	r24, 0x01	; 1
    26bc:	0e 94 b3 13 	call	0x2766	; 0x2766 <__pack_f>
    26c0:	28 96       	adiw	r28, 0x08	; 8
    26c2:	ea e0       	ldi	r30, 0x0A	; 10
    26c4:	0c 94 91 15 	jmp	0x2b22	; 0x2b22 <__epilogue_restores__+0x10>

000026c8 <__clzsi2>:
    26c8:	ef 92       	push	r14
    26ca:	ff 92       	push	r15
    26cc:	0f 93       	push	r16
    26ce:	1f 93       	push	r17
    26d0:	7b 01       	movw	r14, r22
    26d2:	8c 01       	movw	r16, r24
    26d4:	80 e0       	ldi	r24, 0x00	; 0
    26d6:	e8 16       	cp	r14, r24
    26d8:	80 e0       	ldi	r24, 0x00	; 0
    26da:	f8 06       	cpc	r15, r24
    26dc:	81 e0       	ldi	r24, 0x01	; 1
    26de:	08 07       	cpc	r16, r24
    26e0:	80 e0       	ldi	r24, 0x00	; 0
    26e2:	18 07       	cpc	r17, r24
    26e4:	88 f4       	brcc	.+34     	; 0x2708 <__clzsi2+0x40>
    26e6:	8f ef       	ldi	r24, 0xFF	; 255
    26e8:	e8 16       	cp	r14, r24
    26ea:	f1 04       	cpc	r15, r1
    26ec:	01 05       	cpc	r16, r1
    26ee:	11 05       	cpc	r17, r1
    26f0:	31 f0       	breq	.+12     	; 0x26fe <__clzsi2+0x36>
    26f2:	28 f0       	brcs	.+10     	; 0x26fe <__clzsi2+0x36>
    26f4:	88 e0       	ldi	r24, 0x08	; 8
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	a0 e0       	ldi	r26, 0x00	; 0
    26fa:	b0 e0       	ldi	r27, 0x00	; 0
    26fc:	17 c0       	rjmp	.+46     	; 0x272c <__clzsi2+0x64>
    26fe:	80 e0       	ldi	r24, 0x00	; 0
    2700:	90 e0       	ldi	r25, 0x00	; 0
    2702:	a0 e0       	ldi	r26, 0x00	; 0
    2704:	b0 e0       	ldi	r27, 0x00	; 0
    2706:	12 c0       	rjmp	.+36     	; 0x272c <__clzsi2+0x64>
    2708:	80 e0       	ldi	r24, 0x00	; 0
    270a:	e8 16       	cp	r14, r24
    270c:	80 e0       	ldi	r24, 0x00	; 0
    270e:	f8 06       	cpc	r15, r24
    2710:	80 e0       	ldi	r24, 0x00	; 0
    2712:	08 07       	cpc	r16, r24
    2714:	81 e0       	ldi	r24, 0x01	; 1
    2716:	18 07       	cpc	r17, r24
    2718:	28 f0       	brcs	.+10     	; 0x2724 <__clzsi2+0x5c>
    271a:	88 e1       	ldi	r24, 0x18	; 24
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	a0 e0       	ldi	r26, 0x00	; 0
    2720:	b0 e0       	ldi	r27, 0x00	; 0
    2722:	04 c0       	rjmp	.+8      	; 0x272c <__clzsi2+0x64>
    2724:	80 e1       	ldi	r24, 0x10	; 16
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	a0 e0       	ldi	r26, 0x00	; 0
    272a:	b0 e0       	ldi	r27, 0x00	; 0
    272c:	20 e2       	ldi	r18, 0x20	; 32
    272e:	30 e0       	ldi	r19, 0x00	; 0
    2730:	40 e0       	ldi	r20, 0x00	; 0
    2732:	50 e0       	ldi	r21, 0x00	; 0
    2734:	28 1b       	sub	r18, r24
    2736:	39 0b       	sbc	r19, r25
    2738:	4a 0b       	sbc	r20, r26
    273a:	5b 0b       	sbc	r21, r27
    273c:	04 c0       	rjmp	.+8      	; 0x2746 <__clzsi2+0x7e>
    273e:	16 95       	lsr	r17
    2740:	07 95       	ror	r16
    2742:	f7 94       	ror	r15
    2744:	e7 94       	ror	r14
    2746:	8a 95       	dec	r24
    2748:	d2 f7       	brpl	.-12     	; 0x273e <__clzsi2+0x76>
    274a:	f7 01       	movw	r30, r14
    274c:	eb 5b       	subi	r30, 0xBB	; 187
    274e:	fd 4f       	sbci	r31, 0xFD	; 253
    2750:	80 81       	ld	r24, Z
    2752:	28 1b       	sub	r18, r24
    2754:	31 09       	sbc	r19, r1
    2756:	41 09       	sbc	r20, r1
    2758:	51 09       	sbc	r21, r1
    275a:	c9 01       	movw	r24, r18
    275c:	1f 91       	pop	r17
    275e:	0f 91       	pop	r16
    2760:	ff 90       	pop	r15
    2762:	ef 90       	pop	r14
    2764:	08 95       	ret

00002766 <__pack_f>:
    2766:	df 92       	push	r13
    2768:	ef 92       	push	r14
    276a:	ff 92       	push	r15
    276c:	0f 93       	push	r16
    276e:	1f 93       	push	r17
    2770:	fc 01       	movw	r30, r24
    2772:	e4 80       	ldd	r14, Z+4	; 0x04
    2774:	f5 80       	ldd	r15, Z+5	; 0x05
    2776:	06 81       	ldd	r16, Z+6	; 0x06
    2778:	17 81       	ldd	r17, Z+7	; 0x07
    277a:	d1 80       	ldd	r13, Z+1	; 0x01
    277c:	80 81       	ld	r24, Z
    277e:	82 30       	cpi	r24, 0x02	; 2
    2780:	48 f4       	brcc	.+18     	; 0x2794 <__pack_f+0x2e>
    2782:	80 e0       	ldi	r24, 0x00	; 0
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	a0 e1       	ldi	r26, 0x10	; 16
    2788:	b0 e0       	ldi	r27, 0x00	; 0
    278a:	e8 2a       	or	r14, r24
    278c:	f9 2a       	or	r15, r25
    278e:	0a 2b       	or	r16, r26
    2790:	1b 2b       	or	r17, r27
    2792:	a5 c0       	rjmp	.+330    	; 0x28de <__pack_f+0x178>
    2794:	84 30       	cpi	r24, 0x04	; 4
    2796:	09 f4       	brne	.+2      	; 0x279a <__pack_f+0x34>
    2798:	9f c0       	rjmp	.+318    	; 0x28d8 <__pack_f+0x172>
    279a:	82 30       	cpi	r24, 0x02	; 2
    279c:	21 f4       	brne	.+8      	; 0x27a6 <__pack_f+0x40>
    279e:	ee 24       	eor	r14, r14
    27a0:	ff 24       	eor	r15, r15
    27a2:	87 01       	movw	r16, r14
    27a4:	05 c0       	rjmp	.+10     	; 0x27b0 <__pack_f+0x4a>
    27a6:	e1 14       	cp	r14, r1
    27a8:	f1 04       	cpc	r15, r1
    27aa:	01 05       	cpc	r16, r1
    27ac:	11 05       	cpc	r17, r1
    27ae:	19 f4       	brne	.+6      	; 0x27b6 <__pack_f+0x50>
    27b0:	e0 e0       	ldi	r30, 0x00	; 0
    27b2:	f0 e0       	ldi	r31, 0x00	; 0
    27b4:	96 c0       	rjmp	.+300    	; 0x28e2 <__pack_f+0x17c>
    27b6:	62 81       	ldd	r22, Z+2	; 0x02
    27b8:	73 81       	ldd	r23, Z+3	; 0x03
    27ba:	9f ef       	ldi	r25, 0xFF	; 255
    27bc:	62 38       	cpi	r22, 0x82	; 130
    27be:	79 07       	cpc	r23, r25
    27c0:	0c f0       	brlt	.+2      	; 0x27c4 <__pack_f+0x5e>
    27c2:	5b c0       	rjmp	.+182    	; 0x287a <__pack_f+0x114>
    27c4:	22 e8       	ldi	r18, 0x82	; 130
    27c6:	3f ef       	ldi	r19, 0xFF	; 255
    27c8:	26 1b       	sub	r18, r22
    27ca:	37 0b       	sbc	r19, r23
    27cc:	2a 31       	cpi	r18, 0x1A	; 26
    27ce:	31 05       	cpc	r19, r1
    27d0:	2c f0       	brlt	.+10     	; 0x27dc <__pack_f+0x76>
    27d2:	20 e0       	ldi	r18, 0x00	; 0
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	40 e0       	ldi	r20, 0x00	; 0
    27d8:	50 e0       	ldi	r21, 0x00	; 0
    27da:	2a c0       	rjmp	.+84     	; 0x2830 <__pack_f+0xca>
    27dc:	b8 01       	movw	r22, r16
    27de:	a7 01       	movw	r20, r14
    27e0:	02 2e       	mov	r0, r18
    27e2:	04 c0       	rjmp	.+8      	; 0x27ec <__pack_f+0x86>
    27e4:	76 95       	lsr	r23
    27e6:	67 95       	ror	r22
    27e8:	57 95       	ror	r21
    27ea:	47 95       	ror	r20
    27ec:	0a 94       	dec	r0
    27ee:	d2 f7       	brpl	.-12     	; 0x27e4 <__pack_f+0x7e>
    27f0:	81 e0       	ldi	r24, 0x01	; 1
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	a0 e0       	ldi	r26, 0x00	; 0
    27f6:	b0 e0       	ldi	r27, 0x00	; 0
    27f8:	04 c0       	rjmp	.+8      	; 0x2802 <__pack_f+0x9c>
    27fa:	88 0f       	add	r24, r24
    27fc:	99 1f       	adc	r25, r25
    27fe:	aa 1f       	adc	r26, r26
    2800:	bb 1f       	adc	r27, r27
    2802:	2a 95       	dec	r18
    2804:	d2 f7       	brpl	.-12     	; 0x27fa <__pack_f+0x94>
    2806:	01 97       	sbiw	r24, 0x01	; 1
    2808:	a1 09       	sbc	r26, r1
    280a:	b1 09       	sbc	r27, r1
    280c:	8e 21       	and	r24, r14
    280e:	9f 21       	and	r25, r15
    2810:	a0 23       	and	r26, r16
    2812:	b1 23       	and	r27, r17
    2814:	00 97       	sbiw	r24, 0x00	; 0
    2816:	a1 05       	cpc	r26, r1
    2818:	b1 05       	cpc	r27, r1
    281a:	21 f0       	breq	.+8      	; 0x2824 <__pack_f+0xbe>
    281c:	81 e0       	ldi	r24, 0x01	; 1
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	a0 e0       	ldi	r26, 0x00	; 0
    2822:	b0 e0       	ldi	r27, 0x00	; 0
    2824:	9a 01       	movw	r18, r20
    2826:	ab 01       	movw	r20, r22
    2828:	28 2b       	or	r18, r24
    282a:	39 2b       	or	r19, r25
    282c:	4a 2b       	or	r20, r26
    282e:	5b 2b       	or	r21, r27
    2830:	da 01       	movw	r26, r20
    2832:	c9 01       	movw	r24, r18
    2834:	8f 77       	andi	r24, 0x7F	; 127
    2836:	90 70       	andi	r25, 0x00	; 0
    2838:	a0 70       	andi	r26, 0x00	; 0
    283a:	b0 70       	andi	r27, 0x00	; 0
    283c:	80 34       	cpi	r24, 0x40	; 64
    283e:	91 05       	cpc	r25, r1
    2840:	a1 05       	cpc	r26, r1
    2842:	b1 05       	cpc	r27, r1
    2844:	39 f4       	brne	.+14     	; 0x2854 <__pack_f+0xee>
    2846:	27 ff       	sbrs	r18, 7
    2848:	09 c0       	rjmp	.+18     	; 0x285c <__pack_f+0xf6>
    284a:	20 5c       	subi	r18, 0xC0	; 192
    284c:	3f 4f       	sbci	r19, 0xFF	; 255
    284e:	4f 4f       	sbci	r20, 0xFF	; 255
    2850:	5f 4f       	sbci	r21, 0xFF	; 255
    2852:	04 c0       	rjmp	.+8      	; 0x285c <__pack_f+0xf6>
    2854:	21 5c       	subi	r18, 0xC1	; 193
    2856:	3f 4f       	sbci	r19, 0xFF	; 255
    2858:	4f 4f       	sbci	r20, 0xFF	; 255
    285a:	5f 4f       	sbci	r21, 0xFF	; 255
    285c:	e0 e0       	ldi	r30, 0x00	; 0
    285e:	f0 e0       	ldi	r31, 0x00	; 0
    2860:	20 30       	cpi	r18, 0x00	; 0
    2862:	a0 e0       	ldi	r26, 0x00	; 0
    2864:	3a 07       	cpc	r19, r26
    2866:	a0 e0       	ldi	r26, 0x00	; 0
    2868:	4a 07       	cpc	r20, r26
    286a:	a0 e4       	ldi	r26, 0x40	; 64
    286c:	5a 07       	cpc	r21, r26
    286e:	10 f0       	brcs	.+4      	; 0x2874 <__pack_f+0x10e>
    2870:	e1 e0       	ldi	r30, 0x01	; 1
    2872:	f0 e0       	ldi	r31, 0x00	; 0
    2874:	79 01       	movw	r14, r18
    2876:	8a 01       	movw	r16, r20
    2878:	27 c0       	rjmp	.+78     	; 0x28c8 <__pack_f+0x162>
    287a:	60 38       	cpi	r22, 0x80	; 128
    287c:	71 05       	cpc	r23, r1
    287e:	64 f5       	brge	.+88     	; 0x28d8 <__pack_f+0x172>
    2880:	fb 01       	movw	r30, r22
    2882:	e1 58       	subi	r30, 0x81	; 129
    2884:	ff 4f       	sbci	r31, 0xFF	; 255
    2886:	d8 01       	movw	r26, r16
    2888:	c7 01       	movw	r24, r14
    288a:	8f 77       	andi	r24, 0x7F	; 127
    288c:	90 70       	andi	r25, 0x00	; 0
    288e:	a0 70       	andi	r26, 0x00	; 0
    2890:	b0 70       	andi	r27, 0x00	; 0
    2892:	80 34       	cpi	r24, 0x40	; 64
    2894:	91 05       	cpc	r25, r1
    2896:	a1 05       	cpc	r26, r1
    2898:	b1 05       	cpc	r27, r1
    289a:	39 f4       	brne	.+14     	; 0x28aa <__pack_f+0x144>
    289c:	e7 fe       	sbrs	r14, 7
    289e:	0d c0       	rjmp	.+26     	; 0x28ba <__pack_f+0x154>
    28a0:	80 e4       	ldi	r24, 0x40	; 64
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	a0 e0       	ldi	r26, 0x00	; 0
    28a6:	b0 e0       	ldi	r27, 0x00	; 0
    28a8:	04 c0       	rjmp	.+8      	; 0x28b2 <__pack_f+0x14c>
    28aa:	8f e3       	ldi	r24, 0x3F	; 63
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	a0 e0       	ldi	r26, 0x00	; 0
    28b0:	b0 e0       	ldi	r27, 0x00	; 0
    28b2:	e8 0e       	add	r14, r24
    28b4:	f9 1e       	adc	r15, r25
    28b6:	0a 1f       	adc	r16, r26
    28b8:	1b 1f       	adc	r17, r27
    28ba:	17 ff       	sbrs	r17, 7
    28bc:	05 c0       	rjmp	.+10     	; 0x28c8 <__pack_f+0x162>
    28be:	16 95       	lsr	r17
    28c0:	07 95       	ror	r16
    28c2:	f7 94       	ror	r15
    28c4:	e7 94       	ror	r14
    28c6:	31 96       	adiw	r30, 0x01	; 1
    28c8:	87 e0       	ldi	r24, 0x07	; 7
    28ca:	16 95       	lsr	r17
    28cc:	07 95       	ror	r16
    28ce:	f7 94       	ror	r15
    28d0:	e7 94       	ror	r14
    28d2:	8a 95       	dec	r24
    28d4:	d1 f7       	brne	.-12     	; 0x28ca <__pack_f+0x164>
    28d6:	05 c0       	rjmp	.+10     	; 0x28e2 <__pack_f+0x17c>
    28d8:	ee 24       	eor	r14, r14
    28da:	ff 24       	eor	r15, r15
    28dc:	87 01       	movw	r16, r14
    28de:	ef ef       	ldi	r30, 0xFF	; 255
    28e0:	f0 e0       	ldi	r31, 0x00	; 0
    28e2:	6e 2f       	mov	r22, r30
    28e4:	67 95       	ror	r22
    28e6:	66 27       	eor	r22, r22
    28e8:	67 95       	ror	r22
    28ea:	90 2f       	mov	r25, r16
    28ec:	9f 77       	andi	r25, 0x7F	; 127
    28ee:	d7 94       	ror	r13
    28f0:	dd 24       	eor	r13, r13
    28f2:	d7 94       	ror	r13
    28f4:	8e 2f       	mov	r24, r30
    28f6:	86 95       	lsr	r24
    28f8:	49 2f       	mov	r20, r25
    28fa:	46 2b       	or	r20, r22
    28fc:	58 2f       	mov	r21, r24
    28fe:	5d 29       	or	r21, r13
    2900:	b7 01       	movw	r22, r14
    2902:	ca 01       	movw	r24, r20
    2904:	1f 91       	pop	r17
    2906:	0f 91       	pop	r16
    2908:	ff 90       	pop	r15
    290a:	ef 90       	pop	r14
    290c:	df 90       	pop	r13
    290e:	08 95       	ret

00002910 <__unpack_f>:
    2910:	fc 01       	movw	r30, r24
    2912:	db 01       	movw	r26, r22
    2914:	40 81       	ld	r20, Z
    2916:	51 81       	ldd	r21, Z+1	; 0x01
    2918:	22 81       	ldd	r18, Z+2	; 0x02
    291a:	62 2f       	mov	r22, r18
    291c:	6f 77       	andi	r22, 0x7F	; 127
    291e:	70 e0       	ldi	r23, 0x00	; 0
    2920:	22 1f       	adc	r18, r18
    2922:	22 27       	eor	r18, r18
    2924:	22 1f       	adc	r18, r18
    2926:	93 81       	ldd	r25, Z+3	; 0x03
    2928:	89 2f       	mov	r24, r25
    292a:	88 0f       	add	r24, r24
    292c:	82 2b       	or	r24, r18
    292e:	28 2f       	mov	r18, r24
    2930:	30 e0       	ldi	r19, 0x00	; 0
    2932:	99 1f       	adc	r25, r25
    2934:	99 27       	eor	r25, r25
    2936:	99 1f       	adc	r25, r25
    2938:	11 96       	adiw	r26, 0x01	; 1
    293a:	9c 93       	st	X, r25
    293c:	11 97       	sbiw	r26, 0x01	; 1
    293e:	21 15       	cp	r18, r1
    2940:	31 05       	cpc	r19, r1
    2942:	a9 f5       	brne	.+106    	; 0x29ae <__unpack_f+0x9e>
    2944:	41 15       	cp	r20, r1
    2946:	51 05       	cpc	r21, r1
    2948:	61 05       	cpc	r22, r1
    294a:	71 05       	cpc	r23, r1
    294c:	11 f4       	brne	.+4      	; 0x2952 <__unpack_f+0x42>
    294e:	82 e0       	ldi	r24, 0x02	; 2
    2950:	37 c0       	rjmp	.+110    	; 0x29c0 <__unpack_f+0xb0>
    2952:	82 e8       	ldi	r24, 0x82	; 130
    2954:	9f ef       	ldi	r25, 0xFF	; 255
    2956:	13 96       	adiw	r26, 0x03	; 3
    2958:	9c 93       	st	X, r25
    295a:	8e 93       	st	-X, r24
    295c:	12 97       	sbiw	r26, 0x02	; 2
    295e:	9a 01       	movw	r18, r20
    2960:	ab 01       	movw	r20, r22
    2962:	67 e0       	ldi	r22, 0x07	; 7
    2964:	22 0f       	add	r18, r18
    2966:	33 1f       	adc	r19, r19
    2968:	44 1f       	adc	r20, r20
    296a:	55 1f       	adc	r21, r21
    296c:	6a 95       	dec	r22
    296e:	d1 f7       	brne	.-12     	; 0x2964 <__unpack_f+0x54>
    2970:	83 e0       	ldi	r24, 0x03	; 3
    2972:	8c 93       	st	X, r24
    2974:	0d c0       	rjmp	.+26     	; 0x2990 <__unpack_f+0x80>
    2976:	22 0f       	add	r18, r18
    2978:	33 1f       	adc	r19, r19
    297a:	44 1f       	adc	r20, r20
    297c:	55 1f       	adc	r21, r21
    297e:	12 96       	adiw	r26, 0x02	; 2
    2980:	8d 91       	ld	r24, X+
    2982:	9c 91       	ld	r25, X
    2984:	13 97       	sbiw	r26, 0x03	; 3
    2986:	01 97       	sbiw	r24, 0x01	; 1
    2988:	13 96       	adiw	r26, 0x03	; 3
    298a:	9c 93       	st	X, r25
    298c:	8e 93       	st	-X, r24
    298e:	12 97       	sbiw	r26, 0x02	; 2
    2990:	20 30       	cpi	r18, 0x00	; 0
    2992:	80 e0       	ldi	r24, 0x00	; 0
    2994:	38 07       	cpc	r19, r24
    2996:	80 e0       	ldi	r24, 0x00	; 0
    2998:	48 07       	cpc	r20, r24
    299a:	80 e4       	ldi	r24, 0x40	; 64
    299c:	58 07       	cpc	r21, r24
    299e:	58 f3       	brcs	.-42     	; 0x2976 <__unpack_f+0x66>
    29a0:	14 96       	adiw	r26, 0x04	; 4
    29a2:	2d 93       	st	X+, r18
    29a4:	3d 93       	st	X+, r19
    29a6:	4d 93       	st	X+, r20
    29a8:	5c 93       	st	X, r21
    29aa:	17 97       	sbiw	r26, 0x07	; 7
    29ac:	08 95       	ret
    29ae:	2f 3f       	cpi	r18, 0xFF	; 255
    29b0:	31 05       	cpc	r19, r1
    29b2:	79 f4       	brne	.+30     	; 0x29d2 <__unpack_f+0xc2>
    29b4:	41 15       	cp	r20, r1
    29b6:	51 05       	cpc	r21, r1
    29b8:	61 05       	cpc	r22, r1
    29ba:	71 05       	cpc	r23, r1
    29bc:	19 f4       	brne	.+6      	; 0x29c4 <__unpack_f+0xb4>
    29be:	84 e0       	ldi	r24, 0x04	; 4
    29c0:	8c 93       	st	X, r24
    29c2:	08 95       	ret
    29c4:	64 ff       	sbrs	r22, 4
    29c6:	03 c0       	rjmp	.+6      	; 0x29ce <__unpack_f+0xbe>
    29c8:	81 e0       	ldi	r24, 0x01	; 1
    29ca:	8c 93       	st	X, r24
    29cc:	12 c0       	rjmp	.+36     	; 0x29f2 <__unpack_f+0xe2>
    29ce:	1c 92       	st	X, r1
    29d0:	10 c0       	rjmp	.+32     	; 0x29f2 <__unpack_f+0xe2>
    29d2:	2f 57       	subi	r18, 0x7F	; 127
    29d4:	30 40       	sbci	r19, 0x00	; 0
    29d6:	13 96       	adiw	r26, 0x03	; 3
    29d8:	3c 93       	st	X, r19
    29da:	2e 93       	st	-X, r18
    29dc:	12 97       	sbiw	r26, 0x02	; 2
    29de:	83 e0       	ldi	r24, 0x03	; 3
    29e0:	8c 93       	st	X, r24
    29e2:	87 e0       	ldi	r24, 0x07	; 7
    29e4:	44 0f       	add	r20, r20
    29e6:	55 1f       	adc	r21, r21
    29e8:	66 1f       	adc	r22, r22
    29ea:	77 1f       	adc	r23, r23
    29ec:	8a 95       	dec	r24
    29ee:	d1 f7       	brne	.-12     	; 0x29e4 <__unpack_f+0xd4>
    29f0:	70 64       	ori	r23, 0x40	; 64
    29f2:	14 96       	adiw	r26, 0x04	; 4
    29f4:	4d 93       	st	X+, r20
    29f6:	5d 93       	st	X+, r21
    29f8:	6d 93       	st	X+, r22
    29fa:	7c 93       	st	X, r23
    29fc:	17 97       	sbiw	r26, 0x07	; 7
    29fe:	08 95       	ret

00002a00 <__fpcmp_parts_f>:
    2a00:	1f 93       	push	r17
    2a02:	dc 01       	movw	r26, r24
    2a04:	fb 01       	movw	r30, r22
    2a06:	9c 91       	ld	r25, X
    2a08:	92 30       	cpi	r25, 0x02	; 2
    2a0a:	08 f4       	brcc	.+2      	; 0x2a0e <__fpcmp_parts_f+0xe>
    2a0c:	47 c0       	rjmp	.+142    	; 0x2a9c <__fpcmp_parts_f+0x9c>
    2a0e:	80 81       	ld	r24, Z
    2a10:	82 30       	cpi	r24, 0x02	; 2
    2a12:	08 f4       	brcc	.+2      	; 0x2a16 <__fpcmp_parts_f+0x16>
    2a14:	43 c0       	rjmp	.+134    	; 0x2a9c <__fpcmp_parts_f+0x9c>
    2a16:	94 30       	cpi	r25, 0x04	; 4
    2a18:	51 f4       	brne	.+20     	; 0x2a2e <__fpcmp_parts_f+0x2e>
    2a1a:	11 96       	adiw	r26, 0x01	; 1
    2a1c:	1c 91       	ld	r17, X
    2a1e:	84 30       	cpi	r24, 0x04	; 4
    2a20:	99 f5       	brne	.+102    	; 0x2a88 <__fpcmp_parts_f+0x88>
    2a22:	81 81       	ldd	r24, Z+1	; 0x01
    2a24:	68 2f       	mov	r22, r24
    2a26:	70 e0       	ldi	r23, 0x00	; 0
    2a28:	61 1b       	sub	r22, r17
    2a2a:	71 09       	sbc	r23, r1
    2a2c:	3f c0       	rjmp	.+126    	; 0x2aac <__fpcmp_parts_f+0xac>
    2a2e:	84 30       	cpi	r24, 0x04	; 4
    2a30:	21 f0       	breq	.+8      	; 0x2a3a <__fpcmp_parts_f+0x3a>
    2a32:	92 30       	cpi	r25, 0x02	; 2
    2a34:	31 f4       	brne	.+12     	; 0x2a42 <__fpcmp_parts_f+0x42>
    2a36:	82 30       	cpi	r24, 0x02	; 2
    2a38:	b9 f1       	breq	.+110    	; 0x2aa8 <__fpcmp_parts_f+0xa8>
    2a3a:	81 81       	ldd	r24, Z+1	; 0x01
    2a3c:	88 23       	and	r24, r24
    2a3e:	89 f1       	breq	.+98     	; 0x2aa2 <__fpcmp_parts_f+0xa2>
    2a40:	2d c0       	rjmp	.+90     	; 0x2a9c <__fpcmp_parts_f+0x9c>
    2a42:	11 96       	adiw	r26, 0x01	; 1
    2a44:	1c 91       	ld	r17, X
    2a46:	11 97       	sbiw	r26, 0x01	; 1
    2a48:	82 30       	cpi	r24, 0x02	; 2
    2a4a:	f1 f0       	breq	.+60     	; 0x2a88 <__fpcmp_parts_f+0x88>
    2a4c:	81 81       	ldd	r24, Z+1	; 0x01
    2a4e:	18 17       	cp	r17, r24
    2a50:	d9 f4       	brne	.+54     	; 0x2a88 <__fpcmp_parts_f+0x88>
    2a52:	12 96       	adiw	r26, 0x02	; 2
    2a54:	2d 91       	ld	r18, X+
    2a56:	3c 91       	ld	r19, X
    2a58:	13 97       	sbiw	r26, 0x03	; 3
    2a5a:	82 81       	ldd	r24, Z+2	; 0x02
    2a5c:	93 81       	ldd	r25, Z+3	; 0x03
    2a5e:	82 17       	cp	r24, r18
    2a60:	93 07       	cpc	r25, r19
    2a62:	94 f0       	brlt	.+36     	; 0x2a88 <__fpcmp_parts_f+0x88>
    2a64:	28 17       	cp	r18, r24
    2a66:	39 07       	cpc	r19, r25
    2a68:	bc f0       	brlt	.+46     	; 0x2a98 <__fpcmp_parts_f+0x98>
    2a6a:	14 96       	adiw	r26, 0x04	; 4
    2a6c:	8d 91       	ld	r24, X+
    2a6e:	9d 91       	ld	r25, X+
    2a70:	0d 90       	ld	r0, X+
    2a72:	bc 91       	ld	r27, X
    2a74:	a0 2d       	mov	r26, r0
    2a76:	24 81       	ldd	r18, Z+4	; 0x04
    2a78:	35 81       	ldd	r19, Z+5	; 0x05
    2a7a:	46 81       	ldd	r20, Z+6	; 0x06
    2a7c:	57 81       	ldd	r21, Z+7	; 0x07
    2a7e:	28 17       	cp	r18, r24
    2a80:	39 07       	cpc	r19, r25
    2a82:	4a 07       	cpc	r20, r26
    2a84:	5b 07       	cpc	r21, r27
    2a86:	18 f4       	brcc	.+6      	; 0x2a8e <__fpcmp_parts_f+0x8e>
    2a88:	11 23       	and	r17, r17
    2a8a:	41 f0       	breq	.+16     	; 0x2a9c <__fpcmp_parts_f+0x9c>
    2a8c:	0a c0       	rjmp	.+20     	; 0x2aa2 <__fpcmp_parts_f+0xa2>
    2a8e:	82 17       	cp	r24, r18
    2a90:	93 07       	cpc	r25, r19
    2a92:	a4 07       	cpc	r26, r20
    2a94:	b5 07       	cpc	r27, r21
    2a96:	40 f4       	brcc	.+16     	; 0x2aa8 <__fpcmp_parts_f+0xa8>
    2a98:	11 23       	and	r17, r17
    2a9a:	19 f0       	breq	.+6      	; 0x2aa2 <__fpcmp_parts_f+0xa2>
    2a9c:	61 e0       	ldi	r22, 0x01	; 1
    2a9e:	70 e0       	ldi	r23, 0x00	; 0
    2aa0:	05 c0       	rjmp	.+10     	; 0x2aac <__fpcmp_parts_f+0xac>
    2aa2:	6f ef       	ldi	r22, 0xFF	; 255
    2aa4:	7f ef       	ldi	r23, 0xFF	; 255
    2aa6:	02 c0       	rjmp	.+4      	; 0x2aac <__fpcmp_parts_f+0xac>
    2aa8:	60 e0       	ldi	r22, 0x00	; 0
    2aaa:	70 e0       	ldi	r23, 0x00	; 0
    2aac:	cb 01       	movw	r24, r22
    2aae:	1f 91       	pop	r17
    2ab0:	08 95       	ret

00002ab2 <__udivmodhi4>:
    2ab2:	aa 1b       	sub	r26, r26
    2ab4:	bb 1b       	sub	r27, r27
    2ab6:	51 e1       	ldi	r21, 0x11	; 17
    2ab8:	07 c0       	rjmp	.+14     	; 0x2ac8 <__udivmodhi4_ep>

00002aba <__udivmodhi4_loop>:
    2aba:	aa 1f       	adc	r26, r26
    2abc:	bb 1f       	adc	r27, r27
    2abe:	a6 17       	cp	r26, r22
    2ac0:	b7 07       	cpc	r27, r23
    2ac2:	10 f0       	brcs	.+4      	; 0x2ac8 <__udivmodhi4_ep>
    2ac4:	a6 1b       	sub	r26, r22
    2ac6:	b7 0b       	sbc	r27, r23

00002ac8 <__udivmodhi4_ep>:
    2ac8:	88 1f       	adc	r24, r24
    2aca:	99 1f       	adc	r25, r25
    2acc:	5a 95       	dec	r21
    2ace:	a9 f7       	brne	.-22     	; 0x2aba <__udivmodhi4_loop>
    2ad0:	80 95       	com	r24
    2ad2:	90 95       	com	r25
    2ad4:	bc 01       	movw	r22, r24
    2ad6:	cd 01       	movw	r24, r26
    2ad8:	08 95       	ret

00002ada <__prologue_saves__>:
    2ada:	2f 92       	push	r2
    2adc:	3f 92       	push	r3
    2ade:	4f 92       	push	r4
    2ae0:	5f 92       	push	r5
    2ae2:	6f 92       	push	r6
    2ae4:	7f 92       	push	r7
    2ae6:	8f 92       	push	r8
    2ae8:	9f 92       	push	r9
    2aea:	af 92       	push	r10
    2aec:	bf 92       	push	r11
    2aee:	cf 92       	push	r12
    2af0:	df 92       	push	r13
    2af2:	ef 92       	push	r14
    2af4:	ff 92       	push	r15
    2af6:	0f 93       	push	r16
    2af8:	1f 93       	push	r17
    2afa:	cf 93       	push	r28
    2afc:	df 93       	push	r29
    2afe:	cd b7       	in	r28, 0x3d	; 61
    2b00:	de b7       	in	r29, 0x3e	; 62
    2b02:	ca 1b       	sub	r28, r26
    2b04:	db 0b       	sbc	r29, r27
    2b06:	0f b6       	in	r0, 0x3f	; 63
    2b08:	f8 94       	cli
    2b0a:	de bf       	out	0x3e, r29	; 62
    2b0c:	0f be       	out	0x3f, r0	; 63
    2b0e:	cd bf       	out	0x3d, r28	; 61
    2b10:	09 94       	ijmp

00002b12 <__epilogue_restores__>:
    2b12:	2a 88       	ldd	r2, Y+18	; 0x12
    2b14:	39 88       	ldd	r3, Y+17	; 0x11
    2b16:	48 88       	ldd	r4, Y+16	; 0x10
    2b18:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b1a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2b1c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b1e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2b20:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b22:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b24:	b9 84       	ldd	r11, Y+9	; 0x09
    2b26:	c8 84       	ldd	r12, Y+8	; 0x08
    2b28:	df 80       	ldd	r13, Y+7	; 0x07
    2b2a:	ee 80       	ldd	r14, Y+6	; 0x06
    2b2c:	fd 80       	ldd	r15, Y+5	; 0x05
    2b2e:	0c 81       	ldd	r16, Y+4	; 0x04
    2b30:	1b 81       	ldd	r17, Y+3	; 0x03
    2b32:	aa 81       	ldd	r26, Y+2	; 0x02
    2b34:	b9 81       	ldd	r27, Y+1	; 0x01
    2b36:	ce 0f       	add	r28, r30
    2b38:	d1 1d       	adc	r29, r1
    2b3a:	0f b6       	in	r0, 0x3f	; 63
    2b3c:	f8 94       	cli
    2b3e:	de bf       	out	0x3e, r29	; 62
    2b40:	0f be       	out	0x3f, r0	; 63
    2b42:	cd bf       	out	0x3d, r28	; 61
    2b44:	ed 01       	movw	r28, r26
    2b46:	08 95       	ret

00002b48 <_exit>:
    2b48:	f8 94       	cli

00002b4a <__stop_program>:
    2b4a:	ff cf       	rjmp	.-2      	; 0x2b4a <__stop_program>
