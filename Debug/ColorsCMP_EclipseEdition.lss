
ColorsCMP_EclipseEdition.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003126  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002f4  00800060  00003126  0000319a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000027  00800354  0000341a  0000348e  2**0
                  ALLOC
  3 .stab         00005bb0  00000000  00000000  00003490  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001f01  00000000  00000000  00009040  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 0a 02 	jmp	0x414	; 0x414 <__ctors_end>
       4:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
       8:	0c 94 64 07 	jmp	0xec8	; 0xec8 <__vector_2>
       c:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      10:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      14:	0c 94 28 07 	jmp	0xe50	; 0xe50 <__vector_5>
      18:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      1c:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      20:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      24:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      28:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      2c:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      30:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      34:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      38:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      3c:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      40:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      44:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      48:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      4c:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      50:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>

00000054 <FontLookup>:
      54:	00 00 00 00 00 00 00 2f 00 00 00 07 00 07 00 14     ......./........
      64:	7f 14 7f 14 24 2a 7f 2a 12 c4 c8 10 26 46 36 49     ....$*.*....&F6I
      74:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
      84:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 00 50 30     ....>....>....P0
      94:	00 10 10 10 10 10 00 60 60 00 00 20 10 08 04 02     .......``.. ....
      a4:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
      b4:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
      c4:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
      d4:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
      e4:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
      f4:	3e 59 65 65 5e 7e 11 11 11 7e 7f 49 49 49 36 3e     >Yee^~...~.III6>
     104:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     114:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     124:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     134:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     144:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     154:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     164:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     174:	08 07 61 51 49 45 43 00 7f 41 41 00 55 2a 55 2a     ..aQIEC..AA.U*U*
     184:	55 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40     U.AA.......@@@@@
     194:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     1a4:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     1b4:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
     1c4:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     1d4:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     1e4:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     1f4:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     204:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     214:	50 3c 44 64 54 4c 44                                P<DdTLD

0000021b <LcdImage_Upper>:
     21b:	ff ff 7f 7f 45 5d 5d 5d 5d 5d 5d 5d 5d 5d 5d 7f     ....E]]]]]]]]]].
     22b:	7f 41 5f 5d 5d 5d 5d 5d 5d 5d 5d 5d 41 7f 7f 41     .A_]]]]]]]]]A..A
     23b:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 7f 7f 41 5f 5d 5d     __________..A_]]
     24b:	5d 5d 5d 5d 5d 5d 5d 41 7f 7f 43 7d 7d 7d 7d 7d     ]]]]]]]A..C}}}}}
     25b:	7d 7d 7d 7d 7f 7f 51 55 55 55 55 55 55 55 55 45     }}}}..QUUUUUUUUE
     26b:	7f 7f ff ff                                         ....

0000026f <LcdImage_Center>:
     26f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     27f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     28f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     29f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     2af:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     2bf:	ff ff ff ff ff ff ff 0c 0c fc fc fc fc fc fc fc     ................
     2cf:	fc fc fc fc fc fc fc fc fc fc fc fc fc fc ff ff     ................
     2df:	ff 0c 0c fc fc fc fc f0 f0 f3 f3 f3 c3 cf cf cf     ................
     2ef:	cf c3 f3 f3 f3 f0 f0 fc fc fc fc 00 00 ff ff ff     ................
     2ff:	00 00 9f 9f 9c 9c 9c 9c 9c 9c 9c 9c 9c 9c 9c 9c     ................
     30f:	9c 9c 9c 9c 80 80 ff ff ff ff ff e0 e0 e7 e7 e7     ................
     31f:	e7 e7 e7 e7 e7 e7 e7 e7 e7 e7 e7 e7 e7 e7 e7 e7     ................
     32f:	e7 e7 ff ff ff e0 e0 ff ff ff ff ff ff ff ff ff     ................
     33f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff e0     ................
     34f:	e0 ff ff ff e0 e0 ff ff ff ff ff ff ff ff ff ff     ................
     35f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     36f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     37f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     38f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     39f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     3af:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................

000003bf <LcdImage_brunql_gmail_com>:
     3bf:	ff ff ff c8 db db c3 ff cb fb fb fb ff cb df df     ................
     3cf:	c3 ff cb fb fb c3 ff cb db db df 03 7f ff c0 ff     ................
     3df:	ff 01 7e 66 5a 5a 42 5a 5e 62 7f ff c7 bb ab ab     ..~fZZBZ^b......
     3ef:	cf ff cb fb c3 fb c3 ff cb db db c3 db ff c2 ff     ................
     3ff:	c0 ff df ff cb db db ff cb db db c3 ff cb fb c3     ................
     40f:	fb c3 ff ff 00                                      .....

00000414 <__ctors_end>:
     414:	11 24       	eor	r1, r1
     416:	1f be       	out	0x3f, r1	; 63
     418:	cf e5       	ldi	r28, 0x5F	; 95
     41a:	d8 e0       	ldi	r29, 0x08	; 8
     41c:	de bf       	out	0x3e, r29	; 62
     41e:	cd bf       	out	0x3d, r28	; 61

00000420 <__do_copy_data>:
     420:	13 e0       	ldi	r17, 0x03	; 3
     422:	a0 e6       	ldi	r26, 0x60	; 96
     424:	b0 e0       	ldi	r27, 0x00	; 0
     426:	e6 e2       	ldi	r30, 0x26	; 38
     428:	f1 e3       	ldi	r31, 0x31	; 49
     42a:	02 c0       	rjmp	.+4      	; 0x430 <.do_copy_data_start>

0000042c <.do_copy_data_loop>:
     42c:	05 90       	lpm	r0, Z+
     42e:	0d 92       	st	X+, r0

00000430 <.do_copy_data_start>:
     430:	a4 35       	cpi	r26, 0x54	; 84
     432:	b1 07       	cpc	r27, r17
     434:	d9 f7       	brne	.-10     	; 0x42c <.do_copy_data_loop>

00000436 <__do_clear_bss>:
     436:	13 e0       	ldi	r17, 0x03	; 3
     438:	a4 e5       	ldi	r26, 0x54	; 84
     43a:	b3 e0       	ldi	r27, 0x03	; 3
     43c:	01 c0       	rjmp	.+2      	; 0x440 <.do_clear_bss_start>

0000043e <.do_clear_bss_loop>:
     43e:	1d 92       	st	X+, r1

00000440 <.do_clear_bss_start>:
     440:	ab 37       	cpi	r26, 0x7B	; 123
     442:	b1 07       	cpc	r27, r17
     444:	e1 f7       	brne	.-8      	; 0x43e <.do_clear_bss_loop>
     446:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <main>
     44a:	0c 94 91 18 	jmp	0x3122	; 0x3122 <_exit>

0000044e <__bad_interrupt>:
     44e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000452 <snakegame_InitSnake>:
//================================================//


void snakegame_InitSnake(void)
{
	snake_add_index = SNAKE_START_LEN; // start length of snake
     452:	86 e0       	ldi	r24, 0x06	; 6
     454:	80 93 56 03 	sts	0x0356, r24
	score = (uwin_times<<4) | (snake_add_index - SNAKE_START_LEN);
     458:	80 91 54 03 	lds	r24, 0x0354
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	24 e0       	ldi	r18, 0x04	; 4
     460:	88 0f       	add	r24, r24
     462:	99 1f       	adc	r25, r25
     464:	2a 95       	dec	r18
     466:	e1 f7       	brne	.-8      	; 0x460 <snakegame_InitSnake+0xe>
     468:	80 93 55 03 	sts	0x0355, r24
     46c:	e7 eb       	ldi	r30, 0xB7	; 183
     46e:	f0 e0       	ldi	r31, 0x00	; 0
     470:	88 e2       	ldi	r24, 0x28	; 40
	for(uint8_t i=0; i<SNAKE_LEN; i++){
		snake[i].y = 20;
     472:	24 e1       	ldi	r18, 0x14	; 20
		snake[i].x = 40 - i;
		snake[i].direction = RIGHT;
     474:	92 e0       	ldi	r25, 0x02	; 2
void snakegame_InitSnake(void)
{
	snake_add_index = SNAKE_START_LEN; // start length of snake
	score = (uwin_times<<4) | (snake_add_index - SNAKE_START_LEN);
	for(uint8_t i=0; i<SNAKE_LEN; i++){
		snake[i].y = 20;
     476:	21 83       	std	Z+1, r18	; 0x01
		snake[i].x = 40 - i;
     478:	80 83       	st	Z, r24
		snake[i].direction = RIGHT;
     47a:	92 83       	std	Z+2, r25	; 0x02
     47c:	33 96       	adiw	r30, 0x03	; 3
     47e:	81 50       	subi	r24, 0x01	; 1

void snakegame_InitSnake(void)
{
	snake_add_index = SNAKE_START_LEN; // start length of snake
	score = (uwin_times<<4) | (snake_add_index - SNAKE_START_LEN);
	for(uint8_t i=0; i<SNAKE_LEN; i++){
     480:	8e 31       	cpi	r24, 0x1E	; 30
     482:	c9 f7       	brne	.-14     	; 0x476 <snakegame_InitSnake+0x24>
		snake[i].y = 20;
		snake[i].x = 40 - i;
		snake[i].direction = RIGHT;
	}
}
     484:	08 95       	ret

00000486 <SnakeGame_Stop>:
}

void SnakeGame_Stop(void)
{
	// show results and go to main menu
}
     486:	08 95       	ret

00000488 <SnakeGame_TurnLeft>:


void SnakeGame_TurnLeft(void)
{
	// directions mb: UP = 1, RIGHT = 2, DOWN = 3, LEFT = 4
	if( --snake[0].direction == 0){
     488:	80 91 b9 00 	lds	r24, 0x00B9
     48c:	81 50       	subi	r24, 0x01	; 1
     48e:	80 93 b9 00 	sts	0x00B9, r24
     492:	88 23       	and	r24, r24
     494:	19 f4       	brne	.+6      	; 0x49c <SnakeGame_TurnLeft+0x14>
		snake[0].direction = LEFT;
     496:	84 e0       	ldi	r24, 0x04	; 4
     498:	80 93 b9 00 	sts	0x00B9, r24
     49c:	08 95       	ret

0000049e <SnakeGame_TurnRight>:
	}
}

void SnakeGame_TurnRight(void)
{
	if( ++snake[0].direction == 5){
     49e:	80 91 b9 00 	lds	r24, 0x00B9
     4a2:	8f 5f       	subi	r24, 0xFF	; 255
     4a4:	80 93 b9 00 	sts	0x00B9, r24
     4a8:	85 30       	cpi	r24, 0x05	; 5
     4aa:	19 f4       	brne	.+6      	; 0x4b2 <SnakeGame_TurnRight+0x14>
		snake[0].direction = UP;
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	80 93 b9 00 	sts	0x00B9, r24
     4b2:	08 95       	ret

000004b4 <snakegame_DirectionStep>:
//
//	snake_add_index++; // don't forget to update index
//}

void snakegame_DirectionStep(point *p_snake)
{
     4b4:	fc 01       	movw	r30, r24
	switch(p_snake->direction)
     4b6:	92 81       	ldd	r25, Z+2	; 0x02
     4b8:	92 30       	cpi	r25, 0x02	; 2
     4ba:	09 f1       	breq	.+66     	; 0x4fe <snakegame_DirectionStep+0x4a>
     4bc:	93 30       	cpi	r25, 0x03	; 3
     4be:	18 f4       	brcc	.+6      	; 0x4c6 <snakegame_DirectionStep+0x12>
     4c0:	91 30       	cpi	r25, 0x01	; 1
     4c2:	21 f5       	brne	.+72     	; 0x50c <snakegame_DirectionStep+0x58>
     4c4:	05 c0       	rjmp	.+10     	; 0x4d0 <snakegame_DirectionStep+0x1c>
     4c6:	93 30       	cpi	r25, 0x03	; 3
     4c8:	51 f0       	breq	.+20     	; 0x4de <snakegame_DirectionStep+0x2a>
     4ca:	94 30       	cpi	r25, 0x04	; 4
     4cc:	f9 f4       	brne	.+62     	; 0x50c <snakegame_DirectionStep+0x58>
     4ce:	0f c0       	rjmp	.+30     	; 0x4ee <snakegame_DirectionStep+0x3a>
	{
		case UP:
			if(--p_snake->y < 9) 	p_snake->y = 38;
     4d0:	81 81       	ldd	r24, Z+1	; 0x01
     4d2:	81 50       	subi	r24, 0x01	; 1
     4d4:	81 83       	std	Z+1, r24	; 0x01
     4d6:	89 30       	cpi	r24, 0x09	; 9
     4d8:	f0 f4       	brcc	.+60     	; 0x516 <snakegame_DirectionStep+0x62>
     4da:	86 e2       	ldi	r24, 0x26	; 38
     4dc:	06 c0       	rjmp	.+12     	; 0x4ea <snakegame_DirectionStep+0x36>
			break;
		case DOWN:
			if(++p_snake->y > 38) 	p_snake->y = 9;
     4de:	81 81       	ldd	r24, Z+1	; 0x01
     4e0:	8f 5f       	subi	r24, 0xFF	; 255
     4e2:	81 83       	std	Z+1, r24	; 0x01
     4e4:	87 32       	cpi	r24, 0x27	; 39
     4e6:	b8 f0       	brcs	.+46     	; 0x516 <snakegame_DirectionStep+0x62>
     4e8:	89 e0       	ldi	r24, 0x09	; 9
     4ea:	81 83       	std	Z+1, r24	; 0x01
     4ec:	08 95       	ret
			break;
		case LEFT:
			if(--p_snake->x < 2) 	p_snake->x = 82;
     4ee:	80 81       	ld	r24, Z
     4f0:	81 50       	subi	r24, 0x01	; 1
     4f2:	80 83       	st	Z, r24
     4f4:	82 30       	cpi	r24, 0x02	; 2
     4f6:	78 f4       	brcc	.+30     	; 0x516 <snakegame_DirectionStep+0x62>
     4f8:	82 e5       	ldi	r24, 0x52	; 82
     4fa:	80 83       	st	Z, r24
     4fc:	08 95       	ret
			break;
		case RIGHT:
			if(++p_snake->x > 81) 	p_snake->x = 2;
     4fe:	80 81       	ld	r24, Z
     500:	8f 5f       	subi	r24, 0xFF	; 255
     502:	80 83       	st	Z, r24
     504:	82 35       	cpi	r24, 0x52	; 82
     506:	38 f0       	brcs	.+14     	; 0x516 <snakegame_DirectionStep+0x62>
     508:	90 83       	st	Z, r25
     50a:	08 95       	ret
			break;
		default: // error
			p_snake->x = 0;
     50c:	10 82       	st	Z, r1
			p_snake->y = 17;
     50e:	81 e1       	ldi	r24, 0x11	; 17
     510:	81 83       	std	Z+1, r24	; 0x01
			p_snake->direction = RIGHT;
     512:	82 e0       	ldi	r24, 0x02	; 2
     514:	82 83       	std	Z+2, r24	; 0x02
     516:	08 95       	ret

00000518 <snakegame_UpdateDisplay>:




void snakegame_UpdateDisplay(void)
{
     518:	2f 92       	push	r2
     51a:	3f 92       	push	r3
     51c:	4f 92       	push	r4
     51e:	5f 92       	push	r5
     520:	6f 92       	push	r6
     522:	7f 92       	push	r7
     524:	8f 92       	push	r8
     526:	9f 92       	push	r9
     528:	af 92       	push	r10
     52a:	bf 92       	push	r11
     52c:	cf 92       	push	r12
     52e:	df 92       	push	r13
     530:	ef 92       	push	r14
     532:	ff 92       	push	r15
     534:	0f 93       	push	r16
     536:	1f 93       	push	r17
     538:	cf 93       	push	r28
     53a:	df 93       	push	r29
	Lcd3310_ClearCenter();
     53c:	0e 94 c1 0c 	call	0x1982	; 0x1982 <Lcd3310_ClearCenter>

	Lcd3310_GotoXY(0, 5);
     540:	80 e0       	ldi	r24, 0x00	; 0
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	65 e0       	ldi	r22, 0x05	; 5
     546:	70 e0       	ldi	r23, 0x00	; 0
     548:	0e 94 aa 0c 	call	0x1954	; 0x1954 <Lcd3310_GotoXY>
	Lcd3310_String_P(score_str, WHITE_TEXT_ON_BLACK);
     54c:	80 91 86 00 	lds	r24, 0x0086
     550:	90 91 87 00 	lds	r25, 0x0087
     554:	61 e0       	ldi	r22, 0x01	; 1
     556:	0e 94 8d 0b 	call	0x171a	; 0x171a <Lcd3310_String_P>
	Lcd3310_UInt8AsText(score, WHITE_TEXT_ON_BLACK);
     55a:	80 91 55 03 	lds	r24, 0x0355
     55e:	61 e0       	ldi	r22, 0x01	; 1
     560:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <Lcd3310_UInt8AsText>
	//Lcd3310_UInt8AsText(snake[0].y, WHITE_TEXT_ON_BLACK);

	uint16_t lcd_index = 0x00;

	// eval values for addme pixel show
	uint8_t addme_line = (uint8_t)addme_y / 8;
     564:	20 91 b6 00 	lds	r18, 0x00B6
     568:	82 2e       	mov	r8, r18
     56a:	86 94       	lsr	r8
     56c:	86 94       	lsr	r8
     56e:	86 94       	lsr	r8
	uint8_t addme_display_byte = 1 << ((uint8_t)addme_y % 8);
     570:	27 70       	andi	r18, 0x07	; 7
     572:	81 e0       	ldi	r24, 0x01	; 1
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	98 2e       	mov	r9, r24
     578:	01 c0       	rjmp	.+2      	; 0x57c <snakegame_UpdateDisplay+0x64>
     57a:	99 0c       	add	r9, r9
     57c:	2a 95       	dec	r18
     57e:	ea f7       	brpl	.-6      	; 0x57a <snakegame_UpdateDisplay+0x62>
     580:	aa 24       	eor	r10, r10
	for(uint8_t i=0; i < snake_add_index; i++)
	{
		// GotoXY
		// Eval number of line (mb: 1..5) in display for display_byte
		uint8_t line = (uint8_t) (snake[i].y) / 8;
		lcd_index = (uint16_t) (snake[i].x) + (uint16_t)line * 84;
     582:	64 e5       	ldi	r22, 0x54	; 84
     584:	46 2e       	mov	r4, r22
		Lcd3310_Send( 0x80 | ((uint16_t)lcd_index % LCD_X_RES), LCD_CMD );
		Lcd3310_Send( 0x40 | ((uint16_t)lcd_index / LCD_X_RES), LCD_CMD );

		// Make sendme byte with all point in this display byte
		// Init with snake[i] point
		uint8_t display_byte = 1 << ((uint8_t)snake[i].y % 8);
     586:	51 e0       	ldi	r21, 0x01	; 1
     588:	65 2e       	mov	r6, r21
     58a:	71 2c       	mov	r7, r1
		// Find all point near here (in this display byte)
		for(uint8_t j=0; j<snake_add_index; j++)
     58c:	43 e0       	ldi	r20, 0x03	; 3
     58e:	54 2e       	mov	r5, r20
     590:	6a c0       	rjmp	.+212    	; 0x666 <snakegame_UpdateDisplay+0x14e>
	// Lets draw each point in snake to our lcd.
	for(uint8_t i=0; i < snake_add_index; i++)
	{
		// GotoXY
		// Eval number of line (mb: 1..5) in display for display_byte
		uint8_t line = (uint8_t) (snake[i].y) / 8;
     592:	2a 2c       	mov	r2, r10
     594:	33 24       	eor	r3, r3
     596:	61 01       	movw	r12, r2
     598:	cc 0c       	add	r12, r12
     59a:	dd 1c       	adc	r13, r13
     59c:	76 01       	movw	r14, r12
     59e:	e2 0c       	add	r14, r2
     5a0:	f3 1c       	adc	r15, r3
     5a2:	87 eb       	ldi	r24, 0xB7	; 183
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	e8 0e       	add	r14, r24
     5a8:	f9 1e       	adc	r15, r25
     5aa:	e7 01       	movw	r28, r14
     5ac:	b9 80       	ldd	r11, Y+1	; 0x01
     5ae:	b6 94       	lsr	r11
     5b0:	b6 94       	lsr	r11
     5b2:	b6 94       	lsr	r11
		lcd_index = (uint16_t) (snake[i].x) + (uint16_t)line * 84;
     5b4:	b4 9c       	mul	r11, r4
     5b6:	80 01       	movw	r16, r0
     5b8:	11 24       	eor	r1, r1
     5ba:	88 81       	ld	r24, Y
     5bc:	08 0f       	add	r16, r24
     5be:	11 1d       	adc	r17, r1
		Lcd3310_Send( 0x80 | ((uint16_t)lcd_index % LCD_X_RES), LCD_CMD );
     5c0:	c8 01       	movw	r24, r16
     5c2:	64 e5       	ldi	r22, 0x54	; 84
     5c4:	70 e0       	ldi	r23, 0x00	; 0
     5c6:	0e 94 d7 17 	call	0x2fae	; 0x2fae <__udivmodhi4>
     5ca:	80 68       	ori	r24, 0x80	; 128
     5cc:	60 e0       	ldi	r22, 0x00	; 0
     5ce:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <Lcd3310_Send>
		Lcd3310_Send( 0x40 | ((uint16_t)lcd_index / LCD_X_RES), LCD_CMD );
     5d2:	c8 01       	movw	r24, r16
     5d4:	64 e5       	ldi	r22, 0x54	; 84
     5d6:	70 e0       	ldi	r23, 0x00	; 0
     5d8:	0e 94 d7 17 	call	0x2fae	; 0x2fae <__udivmodhi4>
     5dc:	86 2f       	mov	r24, r22
     5de:	80 64       	ori	r24, 0x40	; 64
     5e0:	60 e0       	ldi	r22, 0x00	; 0
     5e2:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <Lcd3310_Send>

		// Make sendme byte with all point in this display byte
		// Init with snake[i] point
		uint8_t display_byte = 1 << ((uint8_t)snake[i].y % 8);
     5e6:	89 81       	ldd	r24, Y+1	; 0x01
     5e8:	87 70       	andi	r24, 0x07	; 7
     5ea:	36 2d       	mov	r19, r6
     5ec:	01 c0       	rjmp	.+2      	; 0x5f0 <snakegame_UpdateDisplay+0xd8>
     5ee:	33 0f       	add	r19, r19
     5f0:	8a 95       	dec	r24
     5f2:	ea f7       	brpl	.-6      	; 0x5ee <snakegame_UpdateDisplay+0xd6>
		// Find all point near here (in this display byte)
		for(uint8_t j=0; j<snake_add_index; j++)
     5f4:	80 91 56 03 	lds	r24, 0x0356
     5f8:	e7 eb       	ldi	r30, 0xB7	; 183
     5fa:	f0 e0       	ldi	r31, 0x00	; 0
     5fc:	85 9d       	mul	r24, r5
     5fe:	a0 01       	movw	r20, r0
     600:	11 24       	eor	r1, r1
     602:	4e 0f       	add	r20, r30
     604:	5f 1f       	adc	r21, r31
     606:	d6 01       	movw	r26, r12
		{
			uint8_t line_find = (uint8_t)snake[j].y / 8;
			if(snake[i].x == snake[j].x && line == line_find){
     608:	b7 01       	movw	r22, r14
     60a:	15 c0       	rjmp	.+42     	; 0x636 <snakegame_UpdateDisplay+0x11e>
		// Init with snake[i] point
		uint8_t display_byte = 1 << ((uint8_t)snake[i].y % 8);
		// Find all point near here (in this display byte)
		for(uint8_t j=0; j<snake_add_index; j++)
		{
			uint8_t line_find = (uint8_t)snake[j].y / 8;
     60c:	21 81       	ldd	r18, Z+1	; 0x01
			if(snake[i].x == snake[j].x && line == line_find){
     60e:	eb 01       	movw	r28, r22
     610:	98 81       	ld	r25, Y
     612:	80 81       	ld	r24, Z
     614:	98 17       	cp	r25, r24
     616:	71 f4       	brne	.+28     	; 0x634 <snakegame_UpdateDisplay+0x11c>
     618:	82 2f       	mov	r24, r18
     61a:	86 95       	lsr	r24
     61c:	86 95       	lsr	r24
     61e:	86 95       	lsr	r24
     620:	b8 16       	cp	r11, r24
     622:	41 f4       	brne	.+16     	; 0x634 <snakegame_UpdateDisplay+0x11c>
				display_byte |= 1 << ((uint8_t)snake[j].y % 8);
     624:	27 70       	andi	r18, 0x07	; 7
     626:	c3 01       	movw	r24, r6
     628:	02 c0       	rjmp	.+4      	; 0x62e <snakegame_UpdateDisplay+0x116>
     62a:	88 0f       	add	r24, r24
     62c:	99 1f       	adc	r25, r25
     62e:	2a 95       	dec	r18
     630:	e2 f7       	brpl	.-8      	; 0x62a <snakegame_UpdateDisplay+0x112>
     632:	38 2b       	or	r19, r24
     634:	33 96       	adiw	r30, 0x03	; 3

		// Make sendme byte with all point in this display byte
		// Init with snake[i] point
		uint8_t display_byte = 1 << ((uint8_t)snake[i].y % 8);
		// Find all point near here (in this display byte)
		for(uint8_t j=0; j<snake_add_index; j++)
     636:	e4 17       	cp	r30, r20
     638:	f5 07       	cpc	r31, r21
     63a:	41 f7       	brne	.-48     	; 0x60c <snakegame_UpdateDisplay+0xf4>
				display_byte |= 1 << ((uint8_t)snake[j].y % 8);
			}
		}

		// check that snake[i] and addme points are in same display_byte
		if(addme_x == snake[i].x && addme_line == line){
     63c:	a2 0d       	add	r26, r2
     63e:	b3 1d       	adc	r27, r3
     640:	a9 54       	subi	r26, 0x49	; 73
     642:	bf 4f       	sbci	r27, 0xFF	; 255
     644:	90 91 b5 00 	lds	r25, 0x00B5
     648:	8c 91       	ld	r24, X
     64a:	98 17       	cp	r25, r24
     64c:	39 f4       	brne	.+14     	; 0x65c <snakegame_UpdateDisplay+0x144>
     64e:	8b 14       	cp	r8, r11
     650:	29 f4       	brne	.+10     	; 0x65c <snakegame_UpdateDisplay+0x144>
			display_byte |= (addme_display_byte & 0x7f);
     652:	89 2d       	mov	r24, r9
     654:	8f 77       	andi	r24, 0x7F	; 127
     656:	38 2b       	or	r19, r24
			addme_display_byte |= 0x80; // say that we already draw this point
     658:	e0 e8       	ldi	r30, 0x80	; 128
     65a:	9e 2a       	or	r9, r30
		}

		Lcd3310_Send( display_byte, LCD_DATA );
     65c:	83 2f       	mov	r24, r19
     65e:	61 e0       	ldi	r22, 0x01	; 1
     660:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <Lcd3310_Send>
	// eval values for addme pixel show
	uint8_t addme_line = (uint8_t)addme_y / 8;
	uint8_t addme_display_byte = 1 << ((uint8_t)addme_y % 8);

	// Lets draw each point in snake to our lcd.
	for(uint8_t i=0; i < snake_add_index; i++)
     664:	a3 94       	inc	r10
     666:	80 91 56 03 	lds	r24, 0x0356
     66a:	a8 16       	cp	r10, r24
     66c:	08 f4       	brcc	.+2      	; 0x670 <snakegame_UpdateDisplay+0x158>
     66e:	91 cf       	rjmp	.-222    	; 0x592 <snakegame_UpdateDisplay+0x7a>
		Lcd3310_Send( display_byte, LCD_DATA );
	}


	// if we didn't draw it before lets do it now
	if(!(addme_display_byte & 0x80)){
     670:	97 fc       	sbrc	r9, 7
     672:	1f c0       	rjmp	.+62     	; 0x6b2 <snakegame_UpdateDisplay+0x19a>
		lcd_index = (uint16_t)addme_x + (uint16_t)addme_line * 84;
     674:	04 e5       	ldi	r16, 0x54	; 84
     676:	80 9e       	mul	r8, r16
     678:	80 01       	movw	r16, r0
     67a:	11 24       	eor	r1, r1
     67c:	80 91 b5 00 	lds	r24, 0x00B5
     680:	08 0f       	add	r16, r24
     682:	11 1d       	adc	r17, r1
		Lcd3310_Send( 0x80 | (lcd_index % LCD_X_RES), LCD_CMD );
     684:	c8 01       	movw	r24, r16
     686:	64 e5       	ldi	r22, 0x54	; 84
     688:	70 e0       	ldi	r23, 0x00	; 0
     68a:	0e 94 d7 17 	call	0x2fae	; 0x2fae <__udivmodhi4>
     68e:	80 68       	ori	r24, 0x80	; 128
     690:	60 e0       	ldi	r22, 0x00	; 0
     692:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <Lcd3310_Send>
		Lcd3310_Send( 0x40 | (lcd_index / LCD_X_RES), LCD_CMD );
     696:	c8 01       	movw	r24, r16
     698:	64 e5       	ldi	r22, 0x54	; 84
     69a:	70 e0       	ldi	r23, 0x00	; 0
     69c:	0e 94 d7 17 	call	0x2fae	; 0x2fae <__udivmodhi4>
     6a0:	86 2f       	mov	r24, r22
     6a2:	80 64       	ori	r24, 0x40	; 64
     6a4:	60 e0       	ldi	r22, 0x00	; 0
     6a6:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <Lcd3310_Send>
		Lcd3310_Send( addme_display_byte, LCD_DATA );
     6aa:	89 2d       	mov	r24, r9
     6ac:	61 e0       	ldi	r22, 0x01	; 1
     6ae:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <Lcd3310_Send>
	}
}
     6b2:	df 91       	pop	r29
     6b4:	cf 91       	pop	r28
     6b6:	1f 91       	pop	r17
     6b8:	0f 91       	pop	r16
     6ba:	ff 90       	pop	r15
     6bc:	ef 90       	pop	r14
     6be:	df 90       	pop	r13
     6c0:	cf 90       	pop	r12
     6c2:	bf 90       	pop	r11
     6c4:	af 90       	pop	r10
     6c6:	9f 90       	pop	r9
     6c8:	8f 90       	pop	r8
     6ca:	7f 90       	pop	r7
     6cc:	6f 90       	pop	r6
     6ce:	5f 90       	pop	r5
     6d0:	4f 90       	pop	r4
     6d2:	3f 90       	pop	r3
     6d4:	2f 90       	pop	r2
     6d6:	08 95       	ret

000006d8 <SnakeGame_AddmeUpdateXY>:
}


void SnakeGame_AddmeUpdateXY(void)
{
	addme_x = (rand() % 79) + 2; 	// 2..81
     6d8:	0e 94 c7 17 	call	0x2f8e	; 0x2f8e <rand>
     6dc:	6f e4       	ldi	r22, 0x4F	; 79
     6de:	70 e0       	ldi	r23, 0x00	; 0
     6e0:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <__divmodhi4>
     6e4:	8e 5f       	subi	r24, 0xFE	; 254
     6e6:	80 93 b5 00 	sts	0x00B5, r24
	addme_y = (rand() % 28) + 10; // 10..38
     6ea:	0e 94 c7 17 	call	0x2f8e	; 0x2f8e <rand>
     6ee:	6c e1       	ldi	r22, 0x1C	; 28
     6f0:	70 e0       	ldi	r23, 0x00	; 0
     6f2:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <__divmodhi4>
     6f6:	86 5f       	subi	r24, 0xF6	; 246
     6f8:	80 93 b6 00 	sts	0x00B6, r24
}
     6fc:	08 95       	ret

000006fe <SnakeGame_Start>:
}


void SnakeGame_Start(void)
{
	SnakeGame_AddmeUpdateXY();
     6fe:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <SnakeGame_AddmeUpdateXY>
//================================================//


void snakegame_InitSnake(void)
{
	snake_add_index = SNAKE_START_LEN; // start length of snake
     702:	86 e0       	ldi	r24, 0x06	; 6
     704:	80 93 56 03 	sts	0x0356, r24
	score = (uwin_times<<4) | (snake_add_index - SNAKE_START_LEN);
     708:	80 91 54 03 	lds	r24, 0x0354
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	74 e0       	ldi	r23, 0x04	; 4
     710:	88 0f       	add	r24, r24
     712:	99 1f       	adc	r25, r25
     714:	7a 95       	dec	r23
     716:	e1 f7       	brne	.-8      	; 0x710 <SnakeGame_Start+0x12>
     718:	80 93 55 03 	sts	0x0355, r24
     71c:	e7 eb       	ldi	r30, 0xB7	; 183
     71e:	f0 e0       	ldi	r31, 0x00	; 0
     720:	88 e2       	ldi	r24, 0x28	; 40
	for(uint8_t i=0; i<SNAKE_LEN; i++){
		snake[i].y = 20;
     722:	24 e1       	ldi	r18, 0x14	; 20
		snake[i].x = 40 - i;
		snake[i].direction = RIGHT;
     724:	92 e0       	ldi	r25, 0x02	; 2
void snakegame_InitSnake(void)
{
	snake_add_index = SNAKE_START_LEN; // start length of snake
	score = (uwin_times<<4) | (snake_add_index - SNAKE_START_LEN);
	for(uint8_t i=0; i<SNAKE_LEN; i++){
		snake[i].y = 20;
     726:	21 83       	std	Z+1, r18	; 0x01
		snake[i].x = 40 - i;
     728:	80 83       	st	Z, r24
		snake[i].direction = RIGHT;
     72a:	92 83       	std	Z+2, r25	; 0x02
     72c:	33 96       	adiw	r30, 0x03	; 3
     72e:	81 50       	subi	r24, 0x01	; 1

void snakegame_InitSnake(void)
{
	snake_add_index = SNAKE_START_LEN; // start length of snake
	score = (uwin_times<<4) | (snake_add_index - SNAKE_START_LEN);
	for(uint8_t i=0; i<SNAKE_LEN; i++){
     730:	8e 31       	cpi	r24, 0x1E	; 30
     732:	c9 f7       	brne	.-14     	; 0x726 <SnakeGame_Start+0x28>
void SnakeGame_Start(void)
{
	SnakeGame_AddmeUpdateXY();
	snakegame_InitSnake();

	Lcd3310_GotoXY(0, 0);
     734:	80 e0       	ldi	r24, 0x00	; 0
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	60 e0       	ldi	r22, 0x00	; 0
     73a:	70 e0       	ldi	r23, 0x00	; 0
     73c:	0e 94 aa 0c 	call	0x1954	; 0x1954 <Lcd3310_GotoXY>
	Lcd3310_String_P(snake_str, WHITE_TEXT_ON_BLACK);
     740:	80 91 6f 00 	lds	r24, 0x006F
     744:	90 91 70 00 	lds	r25, 0x0070
     748:	61 e0       	ldi	r22, 0x01	; 1
     74a:	0e 94 8d 0b 	call	0x171a	; 0x171a <Lcd3310_String_P>
	snakegame_UpdateDisplay();
     74e:	0e 94 8c 02 	call	0x518	; 0x518 <snakegame_UpdateDisplay>
}
     752:	08 95       	ret

00000754 <SnakeGame_TakeNextStep>:
{
	// show results and go to main menu
}

void SnakeGame_TakeNextStep(void)
{
     754:	cf 93       	push	r28
     756:	df 93       	push	r29
     758:	c7 eb       	ldi	r28, 0xB7	; 183
     75a:	d0 e0       	ldi	r29, 0x00	; 0

	// Lets go somethere:
	for(uint8_t i=0; i < SNAKE_LEN; i++)
	{
		snakegame_DirectionStep(&snake[i]);
     75c:	ce 01       	movw	r24, r28
     75e:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <snakegame_DirectionStep>
     762:	23 96       	adiw	r28, 0x03	; 3

void SnakeGame_TakeNextStep(void)
{

	// Lets go somethere:
	for(uint8_t i=0; i < SNAKE_LEN; i++)
     764:	80 e0       	ldi	r24, 0x00	; 0
     766:	c5 3d       	cpi	r28, 0xD5	; 213
     768:	d8 07       	cpc	r29, r24
     76a:	c1 f7       	brne	.-16     	; 0x75c <SnakeGame_TakeNextStep+0x8>
     76c:	89 e0       	ldi	r24, 0x09	; 9
     76e:	14 c0       	rjmp	.+40     	; 0x798 <SnakeGame_TakeNextStep+0x44>
	}

	// Update direction of each point from last to first
	for(uint8_t i = SNAKE_LEN-1; i != 0 && i < SNAKE_LEN; i--)
	{
		snake[i].direction = snake[i-1].direction;
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	dc 01       	movw	r26, r24
     774:	aa 0f       	add	r26, r26
     776:	bb 1f       	adc	r27, r27
     778:	a8 0f       	add	r26, r24
     77a:	b9 1f       	adc	r27, r25
     77c:	a9 54       	subi	r26, 0x49	; 73
     77e:	bf 4f       	sbci	r27, 0xFF	; 255
     780:	01 97       	sbiw	r24, 0x01	; 1
     782:	fc 01       	movw	r30, r24
     784:	ee 0f       	add	r30, r30
     786:	ff 1f       	adc	r31, r31
     788:	e8 0f       	add	r30, r24
     78a:	f9 1f       	adc	r31, r25
     78c:	e9 54       	subi	r30, 0x49	; 73
     78e:	ff 4f       	sbci	r31, 0xFF	; 255
     790:	82 81       	ldd	r24, Z+2	; 0x02
     792:	12 96       	adiw	r26, 0x02	; 2
     794:	8c 93       	st	X, r24
     796:	82 2f       	mov	r24, r18
	{
		snakegame_DirectionStep(&snake[i]);
	}

	// Update direction of each point from last to first
	for(uint8_t i = SNAKE_LEN-1; i != 0 && i < SNAKE_LEN; i--)
     798:	28 2f       	mov	r18, r24
     79a:	21 50       	subi	r18, 0x01	; 1
     79c:	48 f7       	brcc	.-46     	; 0x770 <SnakeGame_TakeNextStep+0x1c>
	{
		snake[i].direction = snake[i-1].direction;
	}

	// Check if we come to addme point
	if(snake[0].x == addme_x && snake[0].y == addme_y){
     79e:	90 91 b7 00 	lds	r25, 0x00B7
     7a2:	80 91 b5 00 	lds	r24, 0x00B5
     7a6:	98 17       	cp	r25, r24
     7a8:	09 f0       	breq	.+2      	; 0x7ac <SnakeGame_TakeNextStep+0x58>
     7aa:	ca c0       	rjmp	.+404    	; 0x940 <__stack+0xe1>
     7ac:	90 91 b8 00 	lds	r25, 0x00B8
     7b0:	80 91 b6 00 	lds	r24, 0x00B6
     7b4:	98 17       	cp	r25, r24
     7b6:	09 f0       	breq	.+2      	; 0x7ba <SnakeGame_TakeNextStep+0x66>
     7b8:	c3 c0       	rjmp	.+390    	; 0x940 <__stack+0xe1>
		SnakeGame_AddmeUpdateXY();
     7ba:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <SnakeGame_AddmeUpdateXY>
		snake_add_index++; // add snake point
     7be:	80 91 56 03 	lds	r24, 0x0356
     7c2:	28 2f       	mov	r18, r24
     7c4:	2f 5f       	subi	r18, 0xFF	; 255
     7c6:	20 93 56 03 	sts	0x0356, r18
		score = (uwin_times<<4) | (snake_add_index - SNAKE_START_LEN);
     7ca:	85 50       	subi	r24, 0x05	; 5
     7cc:	90 91 54 03 	lds	r25, 0x0354
     7d0:	92 95       	swap	r25
     7d2:	90 7f       	andi	r25, 0xF0	; 240
     7d4:	98 2b       	or	r25, r24
     7d6:	90 93 55 03 	sts	0x0355, r25
		if(snake_add_index >= SNAKE_LEN){
     7da:	2a 30       	cpi	r18, 0x0A	; 10
     7dc:	08 f4       	brcc	.+2      	; 0x7e0 <SnakeGame_TakeNextStep+0x8c>
     7de:	b0 c0       	rjmp	.+352    	; 0x940 <__stack+0xe1>
			Lcd3310_ClearCenter();
     7e0:	0e 94 c1 0c 	call	0x1982	; 0x1982 <Lcd3310_ClearCenter>
			uwin_times++;
     7e4:	80 91 54 03 	lds	r24, 0x0354
     7e8:	8f 5f       	subi	r24, 0xFF	; 255
     7ea:	80 93 54 03 	sts	0x0354, r24
			if(uwin_times >= 3){
     7ee:	83 30       	cpi	r24, 0x03	; 3
     7f0:	d0 f1       	brcs	.+116    	; 0x866 <__stack+0x7>
				uwin_times = 0x00;
     7f2:	10 92 54 03 	sts	0x0354, r1
				Lcd3310_GotoXY(3, 2);
     7f6:	83 e0       	ldi	r24, 0x03	; 3
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	62 e0       	ldi	r22, 0x02	; 2
     7fc:	70 e0       	ldi	r23, 0x00	; 0
     7fe:	0e 94 aa 0c 	call	0x1954	; 0x1954 <Lcd3310_GotoXY>
				Lcd3310_String_P(got_fun_str, BLACK_TEXT_ON_WHITE);
     802:	80 91 9c 00 	lds	r24, 0x009C
     806:	90 91 9d 00 	lds	r25, 0x009D
     80a:	60 e0       	ldi	r22, 0x00	; 0
     80c:	0e 94 8d 0b 	call	0x171a	; 0x171a <Lcd3310_String_P>
				Lcd3310_GotoXY(3, 3);
     810:	83 e0       	ldi	r24, 0x03	; 3
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	63 e0       	ldi	r22, 0x03	; 3
     816:	70 e0       	ldi	r23, 0x00	; 0
     818:	0e 94 aa 0c 	call	0x1954	; 0x1954 <Lcd3310_GotoXY>
				Lcd3310_String_P(go_work_str, BLACK_TEXT_ON_WHITE);
     81c:	80 91 a7 00 	lds	r24, 0x00A7
     820:	90 91 a8 00 	lds	r25, 0x00A8
     824:	60 e0       	ldi	r22, 0x00	; 0
     826:	0e 94 8d 0b 	call	0x171a	; 0x171a <Lcd3310_String_P>
				Lcd3310_GotoXY(0, 5);
     82a:	80 e0       	ldi	r24, 0x00	; 0
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	65 e0       	ldi	r22, 0x05	; 5
     830:	70 e0       	ldi	r23, 0x00	; 0
     832:	0e 94 aa 0c 	call	0x1954	; 0x1954 <Lcd3310_GotoXY>
				Lcd3310_String_P(brunql_str, WHITE_TEXT_ON_BLACK);
     836:	80 91 b1 00 	lds	r24, 0x00B1
     83a:	90 91 b2 00 	lds	r25, 0x00B2
     83e:	61 e0       	ldi	r22, 0x01	; 1
     840:	0e 94 8d 0b 	call	0x171a	; 0x171a <Lcd3310_String_P>
				FLAGS_SWITCH_ON( JOYSTICK_CENTER_CLICK_FLAG ); // stop game! go to main menu.
     844:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     846:	f8 94       	cli
     848:	80 91 6b 03 	lds	r24, 0x036B
     84c:	90 91 6c 03 	lds	r25, 0x036C
     850:	82 60       	ori	r24, 0x02	; 2
     852:	90 93 6c 03 	sts	0x036C, r25
     856:	80 93 6b 03 	sts	0x036B, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     85a:	2f bf       	out	0x3f, r18	; 63

				get_present_speed = SPEED_TICKS_TO_GET_PRESENT;
     85c:	88 ec       	ldi	r24, 0xC8	; 200
     85e:	80 93 b4 00 	sts	0x00B4, r24
				step_speed = SPEED_STEP;
     862:	8e e1       	ldi	r24, 0x1E	; 30
     864:	53 c0       	rjmp	.+166    	; 0x90c <__stack+0xad>
			}else{
				Lcd3310_GotoXY(3, 2);
     866:	83 e0       	ldi	r24, 0x03	; 3
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	62 e0       	ldi	r22, 0x02	; 2
     86c:	70 e0       	ldi	r23, 0x00	; 0
     86e:	0e 94 aa 0c 	call	0x1954	; 0x1954 <Lcd3310_GotoXY>
				Lcd3310_String_P(uwin_str, BLACK_TEXT_ON_WHITE);
     872:	80 91 7a 00 	lds	r24, 0x007A
     876:	90 91 7b 00 	lds	r25, 0x007B
     87a:	60 e0       	ldi	r22, 0x00	; 0
     87c:	0e 94 8d 0b 	call	0x171a	; 0x171a <Lcd3310_String_P>
				Lcd3310_GotoXY(2, 3);
     880:	82 e0       	ldi	r24, 0x02	; 2
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	63 e0       	ldi	r22, 0x03	; 3
     886:	70 e0       	ldi	r23, 0x00	; 0
     888:	0e 94 aa 0c 	call	0x1954	; 0x1954 <Lcd3310_GotoXY>
				Lcd3310_String_P(level_str, BLACK_TEXT_ON_WHITE);
     88c:	80 91 91 00 	lds	r24, 0x0091
     890:	90 91 92 00 	lds	r25, 0x0092
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	0e 94 8d 0b 	call	0x171a	; 0x171a <Lcd3310_String_P>
				Lcd3310_UInt8AsText(uwin_times, BLACK_TEXT_ON_WHITE);
     89a:	80 91 54 03 	lds	r24, 0x0354
     89e:	60 e0       	ldi	r22, 0x00	; 0
     8a0:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <Lcd3310_UInt8AsText>
				Lcd3310_GotoXY(0, 5);
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	65 e0       	ldi	r22, 0x05	; 5
     8aa:	70 e0       	ldi	r23, 0x00	; 0
     8ac:	0e 94 aa 0c 	call	0x1954	; 0x1954 <Lcd3310_GotoXY>
				Lcd3310_String_P(score_str, WHITE_TEXT_ON_BLACK);
     8b0:	80 91 86 00 	lds	r24, 0x0086
     8b4:	90 91 87 00 	lds	r25, 0x0087
     8b8:	61 e0       	ldi	r22, 0x01	; 1
     8ba:	0e 94 8d 0b 	call	0x171a	; 0x171a <Lcd3310_String_P>
				Lcd3310_UInt8AsText(score, WHITE_TEXT_ON_BLACK);
     8be:	80 91 55 03 	lds	r24, 0x0355
     8c2:	61 e0       	ldi	r22, 0x01	; 1
     8c4:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <Lcd3310_UInt8AsText>
				Lcd3310_Char(' ', WHITE_TEXT_ON_BLACK);
     8c8:	80 e2       	ldi	r24, 0x20	; 32
     8ca:	61 e0       	ldi	r22, 0x01	; 1
     8cc:	0e 94 3c 0b 	call	0x1678	; 0x1678 <Lcd3310_Char>

				get_present_speed /= 1.5;
     8d0:	60 91 b4 00 	lds	r22, 0x00B4
     8d4:	70 e0       	ldi	r23, 0x00	; 0
     8d6:	88 27       	eor	r24, r24
     8d8:	77 fd       	sbrc	r23, 7
     8da:	80 95       	com	r24
     8dc:	98 2f       	mov	r25, r24
     8de:	0e 94 56 14 	call	0x28ac	; 0x28ac <__floatsisf>
     8e2:	20 e0       	ldi	r18, 0x00	; 0
     8e4:	30 e0       	ldi	r19, 0x00	; 0
     8e6:	40 ec       	ldi	r20, 0xC0	; 192
     8e8:	5f e3       	ldi	r21, 0x3F	; 63
     8ea:	0e 94 1a 13 	call	0x2634	; 0x2634 <__divsf3>
     8ee:	0e 94 4a 10 	call	0x2094	; 0x2094 <__fixunssfsi>
     8f2:	60 93 b4 00 	sts	0x00B4, r22
				step_speed -= 3 * uwin_times;
     8f6:	80 91 54 03 	lds	r24, 0x0354
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	9c 01       	movw	r18, r24
     8fe:	22 0f       	add	r18, r18
     900:	33 1f       	adc	r19, r19
     902:	28 0f       	add	r18, r24
     904:	39 1f       	adc	r19, r25
     906:	80 91 b3 00 	lds	r24, 0x00B3
     90a:	82 1b       	sub	r24, r18
     90c:	80 93 b3 00 	sts	0x00B3, r24
			}
			while(JOYSTICK_INT_CHECK());
     910:	83 99       	sbic	0x10, 3	; 16
     912:	fe cf       	rjmp	.-4      	; 0x910 <__stack+0xb1>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     914:	80 e4       	ldi	r24, 0x40	; 64
     916:	9f e1       	ldi	r25, 0x1F	; 31
     918:	01 97       	sbiw	r24, 0x01	; 1
     91a:	f1 f7       	brne	.-4      	; 0x918 <__stack+0xb9>
			_delay_ms(2);
			GIFR = _BV(INTF1);
     91c:	80 e8       	ldi	r24, 0x80	; 128
     91e:	8a bf       	out	0x3a, r24	; 58


			timer_ticks_to_get_present = get_present_speed;
     920:	80 91 b4 00 	lds	r24, 0x00B4
     924:	80 93 07 01 	sts	0x0107, r24
			timer_delay = step_speed;
     928:	80 91 b3 00 	lds	r24, 0x00B3
     92c:	80 93 70 03 	sts	0x0370, r24

			score = (uwin_times<<4);
     930:	80 91 54 03 	lds	r24, 0x0354
     934:	82 95       	swap	r24
     936:	80 7f       	andi	r24, 0xF0	; 240
     938:	80 93 55 03 	sts	0x0355, r24
			SnakeGame_Start();
     93c:	0e 94 7f 03 	call	0x6fe	; 0x6fe <SnakeGame_Start>
		}
	}

	snakegame_UpdateDisplay();
     940:	0e 94 8c 02 	call	0x518	; 0x518 <snakegame_UpdateDisplay>
}
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	08 95       	ret

0000094a <hex2dec_result>:
PGM_P pstr_please_wait = "Please wait...";

uint8_t measure_delay = MEASURE_DELAY_BEFORE_START_ADC;

uint16_t hex2dec_result(uint16_t hex)
{
     94a:	1f 93       	push	r17
     94c:	9c 01       	movw	r18, r24
	uint8_t res2, res1, res0;
	res0 =  hex % 10;
	hex /= 10;
     94e:	6a e0       	ldi	r22, 0x0A	; 10
     950:	70 e0       	ldi	r23, 0x00	; 0
     952:	0e 94 d7 17 	call	0x2fae	; 0x2fae <__udivmodhi4>
     956:	46 2f       	mov	r20, r22
     958:	17 2f       	mov	r17, r23
     95a:	86 2f       	mov	r24, r22
     95c:	97 2f       	mov	r25, r23
     95e:	6a e0       	ldi	r22, 0x0A	; 10
     960:	70 e0       	ldi	r23, 0x00	; 0
     962:	0e 94 d7 17 	call	0x2fae	; 0x2fae <__udivmodhi4>
     966:	e8 2f       	mov	r30, r24
     968:	f0 e0       	ldi	r31, 0x00	; 0
     96a:	84 e0       	ldi	r24, 0x04	; 4
     96c:	ee 0f       	add	r30, r30
     96e:	ff 1f       	adc	r31, r31
     970:	8a 95       	dec	r24
     972:	e1 f7       	brne	.-8      	; 0x96c <hex2dec_result+0x22>
     974:	c9 01       	movw	r24, r18
     976:	6a e0       	ldi	r22, 0x0A	; 10
     978:	70 e0       	ldi	r23, 0x00	; 0
     97a:	0e 94 d7 17 	call	0x2fae	; 0x2fae <__udivmodhi4>
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	e8 2b       	or	r30, r24
     982:	f9 2b       	or	r31, r25
     984:	84 2f       	mov	r24, r20
     986:	91 2f       	mov	r25, r17
     988:	6a e0       	ldi	r22, 0x0A	; 10
     98a:	70 e0       	ldi	r23, 0x00	; 0
     98c:	0e 94 d7 17 	call	0x2fae	; 0x2fae <__udivmodhi4>
     990:	cb 01       	movw	r24, r22
     992:	6a e0       	ldi	r22, 0x0A	; 10
     994:	70 e0       	ldi	r23, 0x00	; 0
     996:	0e 94 d7 17 	call	0x2fae	; 0x2fae <__udivmodhi4>
     99a:	38 2f       	mov	r19, r24
     99c:	20 e0       	ldi	r18, 0x00	; 0
     99e:	e2 2b       	or	r30, r18
     9a0:	f3 2b       	or	r31, r19
	res1 = hex % 10;
	hex /= 10;
	res2 = hex % 10;

	return (res2 << 8) | (res1 << 4)| res0;
}
     9a2:	cf 01       	movw	r24, r30
     9a4:	1f 91       	pop	r17
     9a6:	08 95       	ret

000009a8 <ADC_N_Times>:


void ADC_N_Times(void)
{
	uint32_t adc_256_times = 0x00000000;
	adc_data = 0x0000;
     9a8:	10 92 6a 03 	sts	0x036A, r1
     9ac:	10 92 69 03 	sts	0x0369, r1

	PORTC |= _BV(PC3);
     9b0:	ab 9a       	sbi	0x15, 3	; 21
	DDRC  |= _BV(PC3);	// test pin up
     9b2:	a3 9a       	sbi	0x14, 3	; 20
     9b4:	20 e0       	ldi	r18, 0x00	; 0
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	40 e0       	ldi	r20, 0x00	; 0
     9ba:	50 e0       	ldi	r21, 0x00	; 0
     9bc:	60 e0       	ldi	r22, 0x00	; 0
	do{
		ADCSRA |= _BV( ADSC ); // start conversation
		while( ADC_CONVERT_IN_PROGRESS() ) {  };
		adc_data = ADC;
		if((uint16_t)adc_data & (uint16_t)0x0200){
			adc_data = (uint16_t)0x03ff - adc_data + 1;
     9be:	e0 e0       	ldi	r30, 0x00	; 0
     9c0:	f4 e0       	ldi	r31, 0x04	; 4
	PORTC |= _BV(PC3);
	DDRC  |= _BV(PC3);	// test pin up

	uint8_t i=0;
	do{
		ADCSRA |= _BV( ADSC ); // start conversation
     9c2:	36 9a       	sbi	0x06, 6	; 6
		while( ADC_CONVERT_IN_PROGRESS() ) {  };
     9c4:	36 99       	sbic	0x06, 6	; 6
     9c6:	fe cf       	rjmp	.-4      	; 0x9c4 <ADC_N_Times+0x1c>
		adc_data = ADC;
     9c8:	84 b1       	in	r24, 0x04	; 4
     9ca:	95 b1       	in	r25, 0x05	; 5
     9cc:	90 93 6a 03 	sts	0x036A, r25
     9d0:	80 93 69 03 	sts	0x0369, r24
		if((uint16_t)adc_data & (uint16_t)0x0200){
     9d4:	80 91 69 03 	lds	r24, 0x0369
     9d8:	90 91 6a 03 	lds	r25, 0x036A
     9dc:	91 ff       	sbrs	r25, 1
     9de:	0b c0       	rjmp	.+22     	; 0x9f6 <ADC_N_Times+0x4e>
			adc_data = (uint16_t)0x03ff - adc_data + 1;
     9e0:	80 91 69 03 	lds	r24, 0x0369
     9e4:	90 91 6a 03 	lds	r25, 0x036A
     9e8:	df 01       	movw	r26, r30
     9ea:	a8 1b       	sub	r26, r24
     9ec:	b9 0b       	sbc	r27, r25
     9ee:	b0 93 6a 03 	sts	0x036A, r27
     9f2:	a0 93 69 03 	sts	0x0369, r26
		}

		adc_256_times += (uint32_t) adc_data;
     9f6:	80 91 69 03 	lds	r24, 0x0369
     9fa:	90 91 6a 03 	lds	r25, 0x036A
     9fe:	a0 e0       	ldi	r26, 0x00	; 0
     a00:	b0 e0       	ldi	r27, 0x00	; 0
     a02:	28 0f       	add	r18, r24
     a04:	39 1f       	adc	r19, r25
     a06:	4a 1f       	adc	r20, r26
     a08:	5b 1f       	adc	r21, r27
	} while( ++i != 245 ); // loop 245 times, 7 brrrzzzzzzzzzzz
     a0a:	6f 5f       	subi	r22, 0xFF	; 255
     a0c:	65 3f       	cpi	r22, 0xF5	; 245
     a0e:	c9 f6       	brne	.-78     	; 0x9c2 <ADC_N_Times+0x1a>

	PORTC &= (uint8_t)~_BV(PC3); // test pin down
     a10:	ab 98       	cbi	0x15, 3	; 21

	adc_256_times >>= 8; // divide 256
	adc_data = (uint16_t) adc_256_times;
     a12:	bb 27       	eor	r27, r27
     a14:	a5 2f       	mov	r26, r21
     a16:	94 2f       	mov	r25, r20
     a18:	83 2f       	mov	r24, r19
     a1a:	90 93 6a 03 	sts	0x036A, r25
     a1e:	80 93 69 03 	sts	0x0369, r24
	//===================================//
}
     a22:	08 95       	ret

00000a24 <MeasureAllAlgorithm>:
	_delay_ms(500);
}

void MeasureAllAlgorithm(uint8_t color)
{
	result[MEASURE_INDX][color] = adc_data;
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	20 91 69 03 	lds	r18, 0x0369
     a2a:	30 91 6a 03 	lds	r19, 0x036A
     a2e:	fc 01       	movw	r30, r24
     a30:	ee 0f       	add	r30, r30
     a32:	ff 1f       	adc	r31, r31
     a34:	e3 5a       	subi	r30, 0xA3	; 163
     a36:	fc 4f       	sbci	r31, 0xFC	; 252
     a38:	31 83       	std	Z+1, r19	; 0x01
     a3a:	20 83       	st	Z, r18
	int16_t diff = result[CALIBRATE_INDX][color] - result[MEASURE_INDX][color];
     a3c:	88 0f       	add	r24, r24
     a3e:	99 1f       	adc	r25, r25
     a40:	fc 01       	movw	r30, r24
     a42:	e9 5a       	subi	r30, 0xA9	; 169
     a44:	fc 4f       	sbci	r31, 0xFC	; 252
     a46:	01 90       	ld	r0, Z+
     a48:	f0 81       	ld	r31, Z
     a4a:	e0 2d       	mov	r30, r0
     a4c:	e2 1b       	sub	r30, r18
     a4e:	f3 0b       	sbc	r31, r19
	if( diff < 0 ) diff *= -1;
	result[DIFF_INDX][color] = diff;
     a50:	dc 01       	movw	r26, r24
     a52:	ad 59       	subi	r26, 0x9D	; 157
     a54:	bc 4f       	sbci	r27, 0xFC	; 252
     a56:	11 96       	adiw	r26, 0x01	; 1
     a58:	fc 93       	st	X, r31
     a5a:	ee 93       	st	-X, r30
     a5c:	f7 ff       	sbrs	r31, 7
     a5e:	06 c0       	rjmp	.+12     	; 0xa6c <MeasureAllAlgorithm+0x48>
     a60:	88 27       	eor	r24, r24
     a62:	99 27       	eor	r25, r25
     a64:	8e 1b       	sub	r24, r30
     a66:	9f 0b       	sbc	r25, r31
     a68:	8d 93       	st	X+, r24
     a6a:	9c 93       	st	X, r25
     a6c:	08 95       	ret

00000a6e <CalibrationAlgorithm>:
}

void CalibrationAlgorithm(uint8_t color)
{
	result[CALIBRATE_INDX][color] = adc_data;
     a6e:	20 91 69 03 	lds	r18, 0x0369
     a72:	30 91 6a 03 	lds	r19, 0x036A
     a76:	e8 2f       	mov	r30, r24
     a78:	f0 e0       	ldi	r31, 0x00	; 0
     a7a:	ee 0f       	add	r30, r30
     a7c:	ff 1f       	adc	r31, r31
     a7e:	e9 5a       	subi	r30, 0xA9	; 169
     a80:	fc 4f       	sbci	r31, 0xFC	; 252
     a82:	31 83       	std	Z+1, r19	; 0x01
     a84:	20 83       	st	Z, r18
}
     a86:	08 95       	ret

00000a88 <SaveMeasureResultsToCalibrate>:
	//===================================//
}

void SaveMeasureResultsToCalibrate(void)
{
	result[CALIBRATE_INDX][RED] = result[MEASURE_INDX][RED];
     a88:	80 91 5d 03 	lds	r24, 0x035D
     a8c:	90 91 5e 03 	lds	r25, 0x035E
     a90:	90 93 58 03 	sts	0x0358, r25
     a94:	80 93 57 03 	sts	0x0357, r24
	result[CALIBRATE_INDX][GREEN] = result[MEASURE_INDX][GREEN];
     a98:	80 91 5f 03 	lds	r24, 0x035F
     a9c:	90 91 60 03 	lds	r25, 0x0360
     aa0:	90 93 5a 03 	sts	0x035A, r25
     aa4:	80 93 59 03 	sts	0x0359, r24
	result[CALIBRATE_INDX][BLUE] = result[MEASURE_INDX][BLUE];
     aa8:	80 91 61 03 	lds	r24, 0x0361
     aac:	90 91 62 03 	lds	r25, 0x0362
     ab0:	90 93 5c 03 	sts	0x035C, r25
     ab4:	80 93 5b 03 	sts	0x035B, r24

	result[DIFF_INDX][RED] = 0;
     ab8:	10 92 64 03 	sts	0x0364, r1
     abc:	10 92 63 03 	sts	0x0363, r1
	result[DIFF_INDX][GREEN] = 0;
     ac0:	10 92 66 03 	sts	0x0366, r1
     ac4:	10 92 65 03 	sts	0x0365, r1
	result[DIFF_INDX][BLUE] = 0;
     ac8:	10 92 68 03 	sts	0x0368, r1
     acc:	10 92 67 03 	sts	0x0367, r1

	Lcd3310_ClearCenter();
     ad0:	0e 94 c1 0c 	call	0x1982	; 0x1982 <Lcd3310_ClearCenter>
	Lcd3310_GotoXY(5,3);
     ad4:	85 e0       	ldi	r24, 0x05	; 5
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	63 e0       	ldi	r22, 0x03	; 3
     ada:	70 e0       	ldi	r23, 0x00	; 0
     adc:	0e 94 aa 0c 	call	0x1954	; 0x1954 <Lcd3310_GotoXY>
	Lcd3310_Char('S', BLACK_TEXT_ON_WHITE);
     ae0:	83 e5       	ldi	r24, 0x53	; 83
     ae2:	60 e0       	ldi	r22, 0x00	; 0
     ae4:	0e 94 3c 0b 	call	0x1678	; 0x1678 <Lcd3310_Char>
	Lcd3310_Char('a', BLACK_TEXT_ON_WHITE);
     ae8:	81 e6       	ldi	r24, 0x61	; 97
     aea:	60 e0       	ldi	r22, 0x00	; 0
     aec:	0e 94 3c 0b 	call	0x1678	; 0x1678 <Lcd3310_Char>
	Lcd3310_Char('v', BLACK_TEXT_ON_WHITE);
     af0:	86 e7       	ldi	r24, 0x76	; 118
     af2:	60 e0       	ldi	r22, 0x00	; 0
     af4:	0e 94 3c 0b 	call	0x1678	; 0x1678 <Lcd3310_Char>
	Lcd3310_Char('e', BLACK_TEXT_ON_WHITE);
     af8:	85 e6       	ldi	r24, 0x65	; 101
     afa:	60 e0       	ldi	r22, 0x00	; 0
     afc:	0e 94 3c 0b 	call	0x1678	; 0x1678 <Lcd3310_Char>
	Lcd3310_Char('d', BLACK_TEXT_ON_WHITE);
     b00:	84 e6       	ldi	r24, 0x64	; 100
     b02:	60 e0       	ldi	r22, 0x00	; 0
     b04:	0e 94 3c 0b 	call	0x1678	; 0x1678 <Lcd3310_Char>
     b08:	88 e8       	ldi	r24, 0x88	; 136
     b0a:	93 e1       	ldi	r25, 0x13	; 19
     b0c:	20 e9       	ldi	r18, 0x90	; 144
     b0e:	31 e0       	ldi	r19, 0x01	; 1
     b10:	f9 01       	movw	r30, r18
     b12:	31 97       	sbiw	r30, 0x01	; 1
     b14:	f1 f7       	brne	.-4      	; 0xb12 <SaveMeasureResultsToCalibrate+0x8a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b16:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b18:	d9 f7       	brne	.-10     	; 0xb10 <SaveMeasureResultsToCalibrate+0x88>
	_delay_ms(500);
}
     b1a:	08 95       	ret

00000b1c <ADC_LoadingAndEvalIt>:
	result[CALIBRATE_INDX][color] = adc_data;
}


void ADC_LoadingAndEvalIt(ptrEvalMe evalMe)
{
     b1c:	4f 92       	push	r4
     b1e:	5f 92       	push	r5
     b20:	6f 92       	push	r6
     b22:	7f 92       	push	r7
     b24:	9f 92       	push	r9
     b26:	af 92       	push	r10
     b28:	bf 92       	push	r11
     b2a:	cf 92       	push	r12
     b2c:	df 92       	push	r13
     b2e:	ef 92       	push	r14
     b30:	ff 92       	push	r15
     b32:	0f 93       	push	r16
     b34:	1f 93       	push	r17
     b36:	cf 93       	push	r28
     b38:	df 93       	push	r29
     b3a:	3c 01       	movw	r6, r24
	 *
	 * [############]
	 *
	 * 	 Complete!
	 */
	JOYSTICK_INT_DISABLE();
     b3c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     b3e:	f8 94       	cli
     b40:	8b b7       	in	r24, 0x3b	; 59
     b42:	8f 77       	andi	r24, 0x7F	; 127
     b44:	8b bf       	out	0x3b, r24	; 59
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     b46:	9f bf       	out	0x3f, r25	; 63

	Lcd3310_ClearCenter();
     b48:	0e 94 c1 0c 	call	0x1982	; 0x1982 <Lcd3310_ClearCenter>
	Lcd3310_GotoXY(0, 1);
     b4c:	80 e0       	ldi	r24, 0x00	; 0
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	61 e0       	ldi	r22, 0x01	; 1
     b52:	70 e0       	ldi	r23, 0x00	; 0
     b54:	0e 94 aa 0c 	call	0x1954	; 0x1954 <Lcd3310_GotoXY>
	Lcd3310_String_P( pstr_please_wait, BLACK_TEXT_ON_WHITE );
     b58:	80 91 04 01 	lds	r24, 0x0104
     b5c:	90 91 05 01 	lds	r25, 0x0105
     b60:	60 e0       	ldi	r22, 0x00	; 0
     b62:	0e 94 8d 0b 	call	0x171a	; 0x171a <Lcd3310_String_P>

	Lcd3310_GotoXY(1, 3);
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	63 e0       	ldi	r22, 0x03	; 3
     b6c:	70 e0       	ldi	r23, 0x00	; 0
     b6e:	0e 94 aa 0c 	call	0x1954	; 0x1954 <Lcd3310_GotoXY>
	Lcd3310_Char('[', BLACK_TEXT_ON_WHITE);
     b72:	8b e5       	ldi	r24, 0x5B	; 91
     b74:	60 e0       	ldi	r22, 0x00	; 0
     b76:	0e 94 3c 0b 	call	0x1678	; 0x1678 <Lcd3310_Char>
     b7a:	c3 ee       	ldi	r28, 0xE3	; 227
     b7c:	d0 e0       	ldi	r29, 0x00	; 0
     b7e:	99 24       	eor	r9, r9
     b80:	70 e9       	ldi	r23, 0x90	; 144
     b82:	47 2e       	mov	r4, r23
     b84:	71 e0       	ldi	r23, 0x01	; 1
     b86:	57 2e       	mov	r5, r23

	for(uint8_t color=0; color < 3; color++){
		LedDriver_SwitchLeds( RED_LEDS | GREEN_LEDS | BLUE_LEDS );
     b88:	8c ef       	ldi	r24, 0xFC	; 252
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	0e 94 ca 06 	call	0xd94	; 0xd94 <LedDriver_SwitchLeds>
		_delay_ms((double) measure_delay * 1000 );
     b90:	60 91 06 01 	lds	r22, 0x0106
     b94:	70 e0       	ldi	r23, 0x00	; 0
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	0e 94 08 15 	call	0x2a10	; 0x2a10 <__floatunsisf>
     b9e:	20 e0       	ldi	r18, 0x00	; 0
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	4a e7       	ldi	r20, 0x7A	; 122
     ba4:	54 e4       	ldi	r21, 0x44	; 68
     ba6:	0e 94 20 12 	call	0x2440	; 0x2440 <__mulsf3>
     baa:	5b 01       	movw	r10, r22
     bac:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	4a e7       	ldi	r20, 0x7A	; 122
     bb4:	55 e4       	ldi	r21, 0x45	; 69
     bb6:	0e 94 20 12 	call	0x2440	; 0x2440 <__mulsf3>
     bba:	7b 01       	movw	r14, r22
     bbc:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     bbe:	20 e0       	ldi	r18, 0x00	; 0
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	40 e8       	ldi	r20, 0x80	; 128
     bc4:	5f e3       	ldi	r21, 0x3F	; 63
     bc6:	0e 94 26 14 	call	0x284c	; 0x284c <__ltsf2>
     bca:	88 23       	and	r24, r24
     bcc:	1c f4       	brge	.+6      	; 0xbd4 <ADC_LoadingAndEvalIt+0xb8>
     bce:	61 e0       	ldi	r22, 0x01	; 1
     bd0:	70 e0       	ldi	r23, 0x00	; 0
     bd2:	22 c0       	rjmp	.+68     	; 0xc18 <ADC_LoadingAndEvalIt+0xfc>
		__ticks = 1;
	else if (__tmp > 65535)
     bd4:	c8 01       	movw	r24, r16
     bd6:	b7 01       	movw	r22, r14
     bd8:	20 e0       	ldi	r18, 0x00	; 0
     bda:	3f ef       	ldi	r19, 0xFF	; 255
     bdc:	4f e7       	ldi	r20, 0x7F	; 127
     bde:	57 e4       	ldi	r21, 0x47	; 71
     be0:	0e 94 c6 13 	call	0x278c	; 0x278c <__gtsf2>
     be4:	18 16       	cp	r1, r24
     be6:	a4 f4       	brge	.+40     	; 0xc10 <ADC_LoadingAndEvalIt+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     be8:	c6 01       	movw	r24, r12
     bea:	b5 01       	movw	r22, r10
     bec:	20 e0       	ldi	r18, 0x00	; 0
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	40 e2       	ldi	r20, 0x20	; 32
     bf2:	51 e4       	ldi	r21, 0x41	; 65
     bf4:	0e 94 20 12 	call	0x2440	; 0x2440 <__mulsf3>
     bf8:	0e 94 4a 10 	call	0x2094	; 0x2094 <__fixunssfsi>
     bfc:	05 c0       	rjmp	.+10     	; 0xc08 <ADC_LoadingAndEvalIt+0xec>
     bfe:	c2 01       	movw	r24, r4
     c00:	01 97       	sbiw	r24, 0x01	; 1
     c02:	f1 f7       	brne	.-4      	; 0xc00 <ADC_LoadingAndEvalIt+0xe4>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c04:	61 50       	subi	r22, 0x01	; 1
     c06:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c08:	61 15       	cp	r22, r1
     c0a:	71 05       	cpc	r23, r1
     c0c:	c1 f7       	brne	.-16     	; 0xbfe <ADC_LoadingAndEvalIt+0xe2>
     c0e:	07 c0       	rjmp	.+14     	; 0xc1e <ADC_LoadingAndEvalIt+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c10:	c8 01       	movw	r24, r16
     c12:	b7 01       	movw	r22, r14
     c14:	0e 94 4a 10 	call	0x2094	; 0x2094 <__fixunssfsi>
     c18:	cb 01       	movw	r24, r22
     c1a:	01 97       	sbiw	r24, 0x01	; 1
     c1c:	f1 f7       	brne	.-4      	; 0xc1a <ADC_LoadingAndEvalIt+0xfe>
		Lcd3310_Char('#', BLACK_TEXT_ON_WHITE);
     c1e:	83 e2       	ldi	r24, 0x23	; 35
     c20:	60 e0       	ldi	r22, 0x00	; 0
     c22:	0e 94 3c 0b 	call	0x1678	; 0x1678 <Lcd3310_Char>

		LedDriver_SwitchLeds( led_show_codes[color] );
     c26:	88 81       	ld	r24, Y
     c28:	99 81       	ldd	r25, Y+1	; 0x01
     c2a:	0e 94 ca 06 	call	0xd94	; 0xd94 <LedDriver_SwitchLeds>
		_delay_ms((double) measure_delay * 1000 );
     c2e:	60 91 06 01 	lds	r22, 0x0106
     c32:	70 e0       	ldi	r23, 0x00	; 0
     c34:	80 e0       	ldi	r24, 0x00	; 0
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	0e 94 08 15 	call	0x2a10	; 0x2a10 <__floatunsisf>
     c3c:	20 e0       	ldi	r18, 0x00	; 0
     c3e:	30 e0       	ldi	r19, 0x00	; 0
     c40:	4a e7       	ldi	r20, 0x7A	; 122
     c42:	54 e4       	ldi	r21, 0x44	; 68
     c44:	0e 94 20 12 	call	0x2440	; 0x2440 <__mulsf3>
     c48:	5b 01       	movw	r10, r22
     c4a:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c4c:	20 e0       	ldi	r18, 0x00	; 0
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	4a e7       	ldi	r20, 0x7A	; 122
     c52:	55 e4       	ldi	r21, 0x45	; 69
     c54:	0e 94 20 12 	call	0x2440	; 0x2440 <__mulsf3>
     c58:	7b 01       	movw	r14, r22
     c5a:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     c5c:	20 e0       	ldi	r18, 0x00	; 0
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	40 e8       	ldi	r20, 0x80	; 128
     c62:	5f e3       	ldi	r21, 0x3F	; 63
     c64:	0e 94 26 14 	call	0x284c	; 0x284c <__ltsf2>
     c68:	88 23       	and	r24, r24
     c6a:	1c f4       	brge	.+6      	; 0xc72 <ADC_LoadingAndEvalIt+0x156>
     c6c:	61 e0       	ldi	r22, 0x01	; 1
     c6e:	70 e0       	ldi	r23, 0x00	; 0
     c70:	22 c0       	rjmp	.+68     	; 0xcb6 <ADC_LoadingAndEvalIt+0x19a>
		__ticks = 1;
	else if (__tmp > 65535)
     c72:	c8 01       	movw	r24, r16
     c74:	b7 01       	movw	r22, r14
     c76:	20 e0       	ldi	r18, 0x00	; 0
     c78:	3f ef       	ldi	r19, 0xFF	; 255
     c7a:	4f e7       	ldi	r20, 0x7F	; 127
     c7c:	57 e4       	ldi	r21, 0x47	; 71
     c7e:	0e 94 c6 13 	call	0x278c	; 0x278c <__gtsf2>
     c82:	18 16       	cp	r1, r24
     c84:	a4 f4       	brge	.+40     	; 0xcae <ADC_LoadingAndEvalIt+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c86:	c6 01       	movw	r24, r12
     c88:	b5 01       	movw	r22, r10
     c8a:	20 e0       	ldi	r18, 0x00	; 0
     c8c:	30 e0       	ldi	r19, 0x00	; 0
     c8e:	40 e2       	ldi	r20, 0x20	; 32
     c90:	51 e4       	ldi	r21, 0x41	; 65
     c92:	0e 94 20 12 	call	0x2440	; 0x2440 <__mulsf3>
     c96:	0e 94 4a 10 	call	0x2094	; 0x2094 <__fixunssfsi>
     c9a:	05 c0       	rjmp	.+10     	; 0xca6 <ADC_LoadingAndEvalIt+0x18a>
     c9c:	c2 01       	movw	r24, r4
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	f1 f7       	brne	.-4      	; 0xc9e <ADC_LoadingAndEvalIt+0x182>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ca2:	61 50       	subi	r22, 0x01	; 1
     ca4:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ca6:	61 15       	cp	r22, r1
     ca8:	71 05       	cpc	r23, r1
     caa:	c1 f7       	brne	.-16     	; 0xc9c <ADC_LoadingAndEvalIt+0x180>
     cac:	07 c0       	rjmp	.+14     	; 0xcbc <ADC_LoadingAndEvalIt+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cae:	c8 01       	movw	r24, r16
     cb0:	b7 01       	movw	r22, r14
     cb2:	0e 94 4a 10 	call	0x2094	; 0x2094 <__fixunssfsi>
     cb6:	cb 01       	movw	r24, r22
     cb8:	01 97       	sbiw	r24, 0x01	; 1
     cba:	f1 f7       	brne	.-4      	; 0xcb8 <ADC_LoadingAndEvalIt+0x19c>

		Lcd3310_Char('#', BLACK_TEXT_ON_WHITE);
     cbc:	83 e2       	ldi	r24, 0x23	; 35
     cbe:	60 e0       	ldi	r22, 0x00	; 0
     cc0:	0e 94 3c 0b 	call	0x1678	; 0x1678 <Lcd3310_Char>

		ADC_N_Times();
     cc4:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <ADC_N_Times>
		Lcd3310_Char('#', BLACK_TEXT_ON_WHITE);
     cc8:	83 e2       	ldi	r24, 0x23	; 35
     cca:	60 e0       	ldi	r22, 0x00	; 0
     ccc:	0e 94 3c 0b 	call	0x1678	; 0x1678 <Lcd3310_Char>

		// Start Algorithm
		(evalMe)(color);
     cd0:	89 2d       	mov	r24, r9
     cd2:	f3 01       	movw	r30, r6
     cd4:	09 95       	icall
	Lcd3310_String_P( pstr_please_wait, BLACK_TEXT_ON_WHITE );

	Lcd3310_GotoXY(1, 3);
	Lcd3310_Char('[', BLACK_TEXT_ON_WHITE);

	for(uint8_t color=0; color < 3; color++){
     cd6:	93 94       	inc	r9
     cd8:	22 96       	adiw	r28, 0x02	; 2
     cda:	83 e0       	ldi	r24, 0x03	; 3
     cdc:	98 16       	cp	r9, r24
     cde:	09 f0       	breq	.+2      	; 0xce2 <ADC_LoadingAndEvalIt+0x1c6>
     ce0:	53 cf       	rjmp	.-346    	; 0xb88 <ADC_LoadingAndEvalIt+0x6c>

		// Start Algorithm
		(evalMe)(color);
	}
//	LedDriver_SwitchLeds( 0x00 );
	LedDriver_SwitchLeds( RED_LEDS | GREEN_LEDS | BLUE_LEDS );
     ce2:	8c ef       	ldi	r24, 0xFC	; 252
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	0e 94 ca 06 	call	0xd94	; 0xd94 <LedDriver_SwitchLeds>
	Lcd3310_Char(']', BLACK_TEXT_ON_WHITE);
     cea:	8d e5       	ldi	r24, 0x5D	; 93
     cec:	60 e0       	ldi	r22, 0x00	; 0
     cee:	0e 94 3c 0b 	call	0x1678	; 0x1678 <Lcd3310_Char>
	Lcd3310_GotoXY(2, 5);
     cf2:	82 e0       	ldi	r24, 0x02	; 2
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	65 e0       	ldi	r22, 0x05	; 5
     cf8:	70 e0       	ldi	r23, 0x00	; 0
     cfa:	0e 94 aa 0c 	call	0x1954	; 0x1954 <Lcd3310_GotoXY>
	Lcd3310_String_P( pstr_complete, BLACK_TEXT_ON_WHITE );
     cfe:	80 91 f3 00 	lds	r24, 0x00F3
     d02:	90 91 f4 00 	lds	r25, 0x00F4
     d06:	60 e0       	ldi	r22, 0x00	; 0
     d08:	0e 94 8d 0b 	call	0x171a	; 0x171a <Lcd3310_String_P>
     d0c:	88 e8       	ldi	r24, 0x88	; 136
     d0e:	93 e1       	ldi	r25, 0x13	; 19
     d10:	20 e9       	ldi	r18, 0x90	; 144
     d12:	31 e0       	ldi	r19, 0x01	; 1
     d14:	f9 01       	movw	r30, r18
     d16:	31 97       	sbiw	r30, 0x01	; 1
     d18:	f1 f7       	brne	.-4      	; 0xd16 <ADC_LoadingAndEvalIt+0x1fa>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d1a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d1c:	d9 f7       	brne	.-10     	; 0xd14 <ADC_LoadingAndEvalIt+0x1f8>
	_delay_ms(500); // show complete and wait 0.5 sec

	JOYSTICK_INT_ENABLE();
     d1e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     d20:	f8 94       	cli
     d22:	80 e4       	ldi	r24, 0x40	; 64
     d24:	8a bf       	out	0x3a, r24	; 58
     d26:	8b b7       	in	r24, 0x3b	; 59
     d28:	80 68       	ori	r24, 0x80	; 128
     d2a:	8b bf       	out	0x3b, r24	; 59
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     d2c:	9f bf       	out	0x3f, r25	; 63
}
     d2e:	df 91       	pop	r29
     d30:	cf 91       	pop	r28
     d32:	1f 91       	pop	r17
     d34:	0f 91       	pop	r16
     d36:	ff 90       	pop	r15
     d38:	ef 90       	pop	r14
     d3a:	df 90       	pop	r13
     d3c:	cf 90       	pop	r12
     d3e:	bf 90       	pop	r11
     d40:	af 90       	pop	r10
     d42:	9f 90       	pop	r9
     d44:	7f 90       	pop	r7
     d46:	6f 90       	pop	r6
     d48:	5f 90       	pop	r5
     d4a:	4f 90       	pop	r4
     d4c:	08 95       	ret

00000d4e <uart_initialize>:

#if DEBUG > 0

void uart_initialize(void)
{
	UCSRA = UCSRA_VALUE;
     d4e:	1b b8       	out	0x0b, r1	; 11
    UCSRB = UCSRB_VALUE;
     d50:	88 e0       	ldi	r24, 0x08	; 8
     d52:	8a b9       	out	0x0a, r24	; 10
    UCSRC = UCSRC_VALUE;
     d54:	8e e8       	ldi	r24, 0x8E	; 142
     d56:	80 bd       	out	0x20, r24	; 32
	UBRRH = UBRRH_VALUE;
     d58:	10 bc       	out	0x20, r1	; 32
	UBRRL = UBRRL_VALUE;
     d5a:	87 e6       	ldi	r24, 0x67	; 103
     d5c:	89 b9       	out	0x09, r24	; 9
}
     d5e:	08 95       	ret

00000d60 <uart_putchar>:


void uart_putchar(uint8_t c)
{
     d60:	1f 93       	push	r17
     d62:	18 2f       	mov	r17, r24
	if(c == '\n'){
     d64:	8a 30       	cpi	r24, 0x0A	; 10
     d66:	19 f4       	brne	.+6      	; 0xd6e <uart_putchar+0xe>
		uart_putchar('\r');
     d68:	8d e0       	ldi	r24, 0x0D	; 13
     d6a:	0e 94 b0 06 	call	0xd60	; 0xd60 <uart_putchar>
	}
	loop_until_bit_is_set( UCSRA, UDRE );
     d6e:	5d 9b       	sbis	0x0b, 5	; 11
     d70:	fe cf       	rjmp	.-4      	; 0xd6e <uart_putchar+0xe>
	UDR = c;
     d72:	1c b9       	out	0x0c, r17	; 12
} 
     d74:	1f 91       	pop	r17
     d76:	08 95       	ret

00000d78 <uart_putstring_P>:

void uart_putstring_P(const char *strPtr)
{
     d78:	cf 93       	push	r28
     d7a:	df 93       	push	r29
     d7c:	ec 01       	movw	r28, r24
     d7e:	02 c0       	rjmp	.+4      	; 0xd84 <uart_putstring_P+0xc>
	uint8_t temp;
	while ( (temp = pgm_read_byte ( strPtr++ )) ){
		uart_putchar( temp );
     d80:	0e 94 b0 06 	call	0xd60	; 0xd60 <uart_putchar>
     d84:	fe 01       	movw	r30, r28
} 

void uart_putstring_P(const char *strPtr)
{
	uint8_t temp;
	while ( (temp = pgm_read_byte ( strPtr++ )) ){
     d86:	21 96       	adiw	r28, 0x01	; 1
     d88:	84 91       	lpm	r24, Z+
     d8a:	88 23       	and	r24, r24
     d8c:	c9 f7       	brne	.-14     	; 0xd80 <uart_putstring_P+0x8>
		uart_putchar( temp );
	}
}
     d8e:	df 91       	pop	r29
     d90:	cf 91       	pop	r28
     d92:	08 95       	ret

00000d94 <LedDriver_SwitchLeds>:

#include "led_driver.h"


void LedDriver_SwitchLeds(uint16_t data)
{
     d94:	ac 01       	movw	r20, r24
     d96:	20 e0       	ldi	r18, 0x00	; 0
     d98:	30 e0       	ldi	r19, 0x00	; 0
	char i;
	for(i=0; i<16; i++){
		CLK_DOWN;
		if(data & _BV(i)){
     d9a:	61 e0       	ldi	r22, 0x01	; 1
     d9c:	70 e0       	ldi	r23, 0x00	; 0

void LedDriver_SwitchLeds(uint16_t data)
{
	char i;
	for(i=0; i<16; i++){
		CLK_DOWN;
     d9e:	db 98       	cbi	0x1b, 3	; 27
		if(data & _BV(i)){
     da0:	cb 01       	movw	r24, r22
     da2:	02 2e       	mov	r0, r18
     da4:	02 c0       	rjmp	.+4      	; 0xdaa <LedDriver_SwitchLeds+0x16>
     da6:	88 0f       	add	r24, r24
     da8:	99 1f       	adc	r25, r25
     daa:	0a 94       	dec	r0
     dac:	e2 f7       	brpl	.-8      	; 0xda6 <LedDriver_SwitchLeds+0x12>
     dae:	84 23       	and	r24, r20
     db0:	95 23       	and	r25, r21
     db2:	89 2b       	or	r24, r25
     db4:	11 f0       	breq	.+4      	; 0xdba <LedDriver_SwitchLeds+0x26>
			LED_DR_PORT |= DATA_PIN;
     db6:	da 9a       	sbi	0x1b, 2	; 27
     db8:	01 c0       	rjmp	.+2      	; 0xdbc <LedDriver_SwitchLeds+0x28>
		}else{
			LED_DR_PORT &= (unsigned char)~DATA_PIN;
     dba:	da 98       	cbi	0x1b, 2	; 27
		}
		CLK_UP;
     dbc:	db 9a       	sbi	0x1b, 3	; 27
     dbe:	2f 5f       	subi	r18, 0xFF	; 255
     dc0:	3f 4f       	sbci	r19, 0xFF	; 255


void LedDriver_SwitchLeds(uint16_t data)
{
	char i;
	for(i=0; i<16; i++){
     dc2:	20 31       	cpi	r18, 0x10	; 16
     dc4:	31 05       	cpc	r19, r1
     dc6:	59 f7       	brne	.-42     	; 0xd9e <LedDriver_SwitchLeds+0xa>
		}else{
			LED_DR_PORT &= (unsigned char)~DATA_PIN;
		}
		CLK_UP;
	}
	LATCH_PULSE;
     dc8:	dc 9a       	sbi	0x1b, 4	; 27
     dca:	00 00       	nop
     dcc:	dc 98       	cbi	0x1b, 4	; 27
}
     dce:	08 95       	ret

00000dd0 <LedDriver_PWM>:

void LedDriver_PWM(uint8_t pwm, uint16_t leds)
{
     dd0:	1f 93       	push	r17
     dd2:	18 2f       	mov	r17, r24
     dd4:	cb 01       	movw	r24, r22
	uint8_t temp = pwm;
	LedDriver_SwitchLeds(leds); // switch on leds
     dd6:	0e 94 ca 06 	call	0xd94	; 0xd94 <LedDriver_SwitchLeds>
     dda:	81 2f       	mov	r24, r17
     ddc:	02 c0       	rjmp	.+4      	; 0xde2 <LedDriver_PWM+0x12>
	while(temp--){__asm__ __volatile__("nop");}
     dde:	00 00       	nop
     de0:	81 50       	subi	r24, 0x01	; 1
     de2:	88 23       	and	r24, r24
     de4:	e1 f7       	brne	.-8      	; 0xdde <LedDriver_PWM+0xe>
	temp = (uint8_t)~pwm;
     de6:	10 95       	com	r17
	LedDriver_SwitchLeds(0x00); // switch off all leds
     de8:	80 e0       	ldi	r24, 0x00	; 0
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	0e 94 ca 06 	call	0xd94	; 0xd94 <LedDriver_SwitchLeds>
     df0:	02 c0       	rjmp	.+4      	; 0xdf6 <LedDriver_PWM+0x26>
	while(temp--){__asm__ __volatile__("nop");}
     df2:	00 00       	nop
     df4:	11 50       	subi	r17, 0x01	; 1
     df6:	11 23       	and	r17, r17
     df8:	e1 f7       	brne	.-8      	; 0xdf2 <LedDriver_PWM+0x22>
	LedDriver_SwitchLeds(0x00);
     dfa:	80 e0       	ldi	r24, 0x00	; 0
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	0e 94 ca 06 	call	0xd94	; 0xd94 <LedDriver_SwitchLeds>
}
     e02:	1f 91       	pop	r17
     e04:	08 95       	ret

00000e06 <LedDriver_Init>:

void LedDriver_Init(void)
{
	LATCH_DOWN;
     e06:	dc 98       	cbi	0x1b, 4	; 27
	CLK_DOWN;
     e08:	db 98       	cbi	0x1b, 3	; 27
	LED_DR_DDR |= DATA_PIN | CLK_PIN | LATCH_PIN;
     e0a:	8a b3       	in	r24, 0x1a	; 26
     e0c:	8c 61       	ori	r24, 0x1C	; 28
     e0e:	8a bb       	out	0x1a, r24	; 26
	LedDriver_SwitchLeds(0x00);
     e10:	80 e0       	ldi	r24, 0x00	; 0
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	0e 94 ca 06 	call	0xd94	; 0xd94 <LedDriver_SwitchLeds>
}
     e18:	08 95       	ret

00000e1a <LedDriver_Switch_3_Leds>:

void LedDriver_Switch_3_Leds(uint8_t data)
{
     e1a:	20 e0       	ldi	r18, 0x00	; 0
     e1c:	30 e0       	ldi	r19, 0x00	; 0
	// data mb: RED_LS, GREEN_LS, BLUE_LS

	for(uint8_t i=0; i < 3; i++){
		CLK_DOWN;
		if(data & _BV(i)){
     e1e:	48 2f       	mov	r20, r24
     e20:	50 e0       	ldi	r21, 0x00	; 0
void LedDriver_Switch_3_Leds(uint8_t data)
{
	// data mb: RED_LS, GREEN_LS, BLUE_LS

	for(uint8_t i=0; i < 3; i++){
		CLK_DOWN;
     e22:	db 98       	cbi	0x1b, 3	; 27
		if(data & _BV(i)){
     e24:	ca 01       	movw	r24, r20
     e26:	02 2e       	mov	r0, r18
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <LedDriver_Switch_3_Leds+0x14>
     e2a:	95 95       	asr	r25
     e2c:	87 95       	ror	r24
     e2e:	0a 94       	dec	r0
     e30:	e2 f7       	brpl	.-8      	; 0xe2a <LedDriver_Switch_3_Leds+0x10>
     e32:	80 ff       	sbrs	r24, 0
     e34:	02 c0       	rjmp	.+4      	; 0xe3a <LedDriver_Switch_3_Leds+0x20>
			LED_DR_PORT |= DATA_PIN;
     e36:	da 9a       	sbi	0x1b, 2	; 27
     e38:	01 c0       	rjmp	.+2      	; 0xe3c <LedDriver_Switch_3_Leds+0x22>
		}else{
			LED_DR_PORT &= (uint8_t)~DATA_PIN;
     e3a:	da 98       	cbi	0x1b, 2	; 27
		}
		CLK_UP;
     e3c:	db 9a       	sbi	0x1b, 3	; 27
     e3e:	2f 5f       	subi	r18, 0xFF	; 255
     e40:	3f 4f       	sbci	r19, 0xFF	; 255

void LedDriver_Switch_3_Leds(uint8_t data)
{
	// data mb: RED_LS, GREEN_LS, BLUE_LS

	for(uint8_t i=0; i < 3; i++){
     e42:	23 30       	cpi	r18, 0x03	; 3
     e44:	31 05       	cpc	r19, r1
     e46:	69 f7       	brne	.-38     	; 0xe22 <LedDriver_Switch_3_Leds+0x8>
		}else{
			LED_DR_PORT &= (uint8_t)~DATA_PIN;
		}
		CLK_UP;
	}
	LATCH_PULSE;
     e48:	dc 9a       	sbi	0x1b, 4	; 27
     e4a:	00 00       	nop
     e4c:	dc 98       	cbi	0x1b, 4	; 27
}
     e4e:	08 95       	ret

00000e50 <__vector_5>:
}

//================================================//
//== 			Game timer ticks				==//
ISR(TIMER2_OVF_vect)
{
     e50:	1f 92       	push	r1
     e52:	0f 92       	push	r0
     e54:	0f b6       	in	r0, 0x3f	; 63
     e56:	0f 92       	push	r0
     e58:	11 24       	eor	r1, r1
     e5a:	2f 93       	push	r18
     e5c:	3f 93       	push	r19
     e5e:	4f 93       	push	r20
     e60:	5f 93       	push	r21
     e62:	6f 93       	push	r22
     e64:	7f 93       	push	r23
     e66:	8f 93       	push	r24
     e68:	9f 93       	push	r25
     e6a:	af 93       	push	r26
     e6c:	bf 93       	push	r27
     e6e:	ef 93       	push	r30
     e70:	ff 93       	push	r31
	if(!timer_delay--){
     e72:	80 91 70 03 	lds	r24, 0x0370
     e76:	81 50       	subi	r24, 0x01	; 1
     e78:	80 93 70 03 	sts	0x0370, r24
     e7c:	8f 5f       	subi	r24, 0xFF	; 255
     e7e:	99 f4       	brne	.+38     	; 0xea6 <__vector_5+0x56>
		if(!timer_ticks_to_get_present--){
     e80:	80 91 07 01 	lds	r24, 0x0107
     e84:	81 50       	subi	r24, 0x01	; 1
     e86:	80 93 07 01 	sts	0x0107, r24
     e8a:	8f 5f       	subi	r24, 0xFF	; 255
     e8c:	31 f4       	brne	.+12     	; 0xe9a <__vector_5+0x4a>
			timer_ticks_to_get_present = get_present_speed;
     e8e:	80 91 b4 00 	lds	r24, 0x00B4
     e92:	80 93 07 01 	sts	0x0107, r24
			SnakeGame_AddmeUpdateXY();
     e96:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <SnakeGame_AddmeUpdateXY>
		}
		SnakeGame_TakeNextStep();
     e9a:	0e 94 aa 03 	call	0x754	; 0x754 <SnakeGame_TakeNextStep>
		timer_delay = step_speed;
     e9e:	80 91 b3 00 	lds	r24, 0x00B3
     ea2:	80 93 70 03 	sts	0x0370, r24
	}
}
     ea6:	ff 91       	pop	r31
     ea8:	ef 91       	pop	r30
     eaa:	bf 91       	pop	r27
     eac:	af 91       	pop	r26
     eae:	9f 91       	pop	r25
     eb0:	8f 91       	pop	r24
     eb2:	7f 91       	pop	r23
     eb4:	6f 91       	pop	r22
     eb6:	5f 91       	pop	r21
     eb8:	4f 91       	pop	r20
     eba:	3f 91       	pop	r19
     ebc:	2f 91       	pop	r18
     ebe:	0f 90       	pop	r0
     ec0:	0f be       	out	0x3f, r0	; 63
     ec2:	0f 90       	pop	r0
     ec4:	1f 90       	pop	r1
     ec6:	18 95       	reti

00000ec8 <__vector_2>:


//================================================//
//== 				Joystick click				==//
ISR(INT1_vect)
{
     ec8:	1f 92       	push	r1
     eca:	0f 92       	push	r0
     ecc:	0f b6       	in	r0, 0x3f	; 63
     ece:	0f 92       	push	r0
     ed0:	11 24       	eor	r1, r1
     ed2:	2f 93       	push	r18
     ed4:	3f 93       	push	r19
     ed6:	4f 93       	push	r20
     ed8:	5f 93       	push	r21
     eda:	6f 93       	push	r22
     edc:	7f 93       	push	r23
     ede:	8f 93       	push	r24
     ee0:	9f 93       	push	r25
     ee2:	af 93       	push	r26
     ee4:	bf 93       	push	r27
     ee6:	ef 93       	push	r30
     ee8:	ff 93       	push	r31
     eea:	80 e4       	ldi	r24, 0x40	; 64
     eec:	9f e1       	ldi	r25, 0x1F	; 31
     eee:	01 97       	sbiw	r24, 0x01	; 1
     ef0:	f1 f7       	brne	.-4      	; 0xeee <__vector_2+0x26>
#ifndef ANIMATION_SWITCH_MENU_ITEMS
	menu_before_now = 0x80;
#endif
	_delay_ms(2);	// anti brrrrzzzzrr

	GIFR = _BV(INTF1); // kill int1 flag
     ef2:	80 e8       	ldi	r24, 0x80	; 128
     ef4:	8a bf       	out	0x3a, r24	; 58

	uint8_t button_clicked = J_CENTER;

	while(1){
		uint8_t jpin_h = (JPIN & 0xf0);
     ef6:	83 b3       	in	r24, 0x13	; 19
     ef8:	80 7f       	andi	r24, 0xF0	; 240

		if( jpin_h == (uint8_t)(J_LU | J_RU) ){
     efa:	80 39       	cpi	r24, 0x90	; 144
     efc:	11 f4       	brne	.+4      	; 0xf02 <__vector_2+0x3a>
     efe:	82 e0       	ldi	r24, 0x02	; 2
     f00:	0f c0       	rjmp	.+30     	; 0xf20 <__vector_2+0x58>
					break;
				}
			}
		}

		if( jpin_h == (uint8_t)(J_LD | J_RD) ){
     f02:	80 36       	cpi	r24, 0x60	; 96
     f04:	11 f4       	brne	.+4      	; 0xf0a <__vector_2+0x42>
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	0b c0       	rjmp	.+22     	; 0xf20 <__vector_2+0x58>
					break;
				}
			}
		}

		if( jpin_h == (uint8_t)(J_LU | J_LD) ){
     f0a:	80 3c       	cpi	r24, 0xC0	; 192
     f0c:	11 f4       	brne	.+4      	; 0xf12 <__vector_2+0x4a>
     f0e:	84 e0       	ldi	r24, 0x04	; 4
     f10:	07 c0       	rjmp	.+14     	; 0xf20 <__vector_2+0x58>
					break;
				}
			}

		}
		if( jpin_h == (uint8_t)(J_RU | J_RD) ){
     f12:	80 33       	cpi	r24, 0x30	; 48
     f14:	11 f4       	brne	.+4      	; 0xf1a <__vector_2+0x52>
     f16:	83 e0       	ldi	r24, 0x03	; 3
     f18:	03 c0       	rjmp	.+6      	; 0xf20 <__vector_2+0x58>
					break;
				}
			}

		}
		if( jpin_h == (uint8_t)(J_RU | J_LU | J_RD | J_LD) ){
     f1a:	80 3f       	cpi	r24, 0xF0	; 240
     f1c:	61 f7       	brne	.-40     	; 0xef6 <__vector_2+0x2e>
     f1e:	80 e0       	ldi	r24, 0x00	; 0
				}
			}
		}
	}

	if (JOYSTICK_INT_CHECK()) { return; } // interrupt on brrzzzz then pulling up joystick, so not need to do smth
     f20:	83 99       	sbic	0x10, 3	; 16
     f22:	9e c0       	rjmp	.+316    	; 0x1060 <__vector_2+0x198>

	if (button_clicked == J_CENTER){
     f24:	88 23       	and	r24, r24
     f26:	41 f4       	brne	.+16     	; 0xf38 <__vector_2+0x70>
		FLAGS_SWITCH_ON(JOYSTICK_CENTER_CLICK_FLAG);
     f28:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     f2a:	f8 94       	cli
     f2c:	80 91 6b 03 	lds	r24, 0x036B
     f30:	90 91 6c 03 	lds	r25, 0x036C
     f34:	82 60       	ori	r24, 0x02	; 2
     f36:	8f c0       	rjmp	.+286    	; 0x1056 <__vector_2+0x18e>

	}else if(button_clicked == J_UP){
     f38:	81 30       	cpi	r24, 0x01	; 1
     f3a:	91 f4       	brne	.+36     	; 0xf60 <__vector_2+0x98>
		menu_now = menu_now->prev;
     f3c:	e0 91 79 03 	lds	r30, 0x0379
     f40:	f0 91 7a 03 	lds	r31, 0x037A
     f44:	87 81       	ldd	r24, Z+7	; 0x07
     f46:	90 85       	ldd	r25, Z+8	; 0x08
     f48:	90 93 7a 03 	sts	0x037A, r25
     f4c:	80 93 79 03 	sts	0x0379, r24

#		ifdef ANIMATION_SWITCH_MENU_ITEMS
		FLAGS_SWITCH_ON( ANIMATION_PREV_FLAG );
     f50:	2f b7       	in	r18, 0x3f	; 63
     f52:	f8 94       	cli
     f54:	80 91 6b 03 	lds	r24, 0x036B
     f58:	90 91 6c 03 	lds	r25, 0x036C
     f5c:	88 60       	ori	r24, 0x08	; 8
     f5e:	7b c0       	rjmp	.+246    	; 0x1056 <__vector_2+0x18e>
#		else
		menu_before_now--;
		FLAGS_SWITCH_ON( UPDATE_DISPLAY_FLAG );
#		endif
	}else if(button_clicked == J_DOWN){
     f60:	82 30       	cpi	r24, 0x02	; 2
     f62:	91 f4       	brne	.+36     	; 0xf88 <__vector_2+0xc0>
		menu_now = menu_now->next;
     f64:	e0 91 79 03 	lds	r30, 0x0379
     f68:	f0 91 7a 03 	lds	r31, 0x037A
     f6c:	85 81       	ldd	r24, Z+5	; 0x05
     f6e:	96 81       	ldd	r25, Z+6	; 0x06
     f70:	90 93 7a 03 	sts	0x037A, r25
     f74:	80 93 79 03 	sts	0x0379, r24

#		ifdef ANIMATION_SWITCH_MENU_ITEMS
		FLAGS_SWITCH_ON( ANIMATION_NEXT_FLAG );
     f78:	2f b7       	in	r18, 0x3f	; 63
     f7a:	f8 94       	cli
     f7c:	80 91 6b 03 	lds	r24, 0x036B
     f80:	90 91 6c 03 	lds	r25, 0x036C
     f84:	84 60       	ori	r24, 0x04	; 4
     f86:	67 c0       	rjmp	.+206    	; 0x1056 <__vector_2+0x18e>
     f88:	20 91 6b 03 	lds	r18, 0x036B
     f8c:	30 91 6c 03 	lds	r19, 0x036C
#		else
		menu_before_now++;
		FLAGS_SWITCH_ON( UPDATE_DISPLAY_FLAG );
#		endif
	}else if(button_clicked == J_LEFT){
     f90:	83 30       	cpi	r24, 0x03	; 3
     f92:	51 f5       	brne	.+84     	; 0xfe8 <__vector_2+0x120>
		IF_FLAG_ON( SNAKE_PLAYING_NOW_FLAG ){
     f94:	8f b7       	in	r24, 0x3f	; 63
     f96:	f8 94       	cli
     f98:	30 93 6e 03 	sts	0x036E, r19
     f9c:	20 93 6d 03 	sts	0x036D, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     fa0:	8f bf       	out	0x3f, r24	; 63
     fa2:	80 91 6d 03 	lds	r24, 0x036D
     fa6:	86 ff       	sbrs	r24, 6
     fa8:	02 c0       	rjmp	.+4      	; 0xfae <__vector_2+0xe6>
			SnakeGame_TurnLeft();
     faa:	0e 94 44 02 	call	0x488	; 0x488 <SnakeGame_TurnLeft>
		}

		if(menu_now == &results){
     fae:	80 91 79 03 	lds	r24, 0x0379
     fb2:	90 91 7a 03 	lds	r25, 0x037A
     fb6:	21 e0       	ldi	r18, 0x01	; 1
     fb8:	83 34       	cpi	r24, 0x43	; 67
     fba:	92 07       	cpc	r25, r18
     fbc:	41 f4       	brne	.+16     	; 0xfce <__vector_2+0x106>
			FLAGS_SWITCH_ON( SAVE_MEASURED_AS_CALIBRATE_FLAG );
     fbe:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     fc0:	f8 94       	cli
     fc2:	80 91 6b 03 	lds	r24, 0x036B
     fc6:	90 91 6c 03 	lds	r25, 0x036C
     fca:	92 60       	ori	r25, 0x02	; 2
     fcc:	44 c0       	rjmp	.+136    	; 0x1056 <__vector_2+0x18e>
		}else if(menu_now == &set_measure_delay){
     fce:	8b 5a       	subi	r24, 0xAB	; 171
     fd0:	91 40       	sbci	r25, 0x01	; 1
     fd2:	09 f0       	breq	.+2      	; 0xfd6 <__vector_2+0x10e>
     fd4:	45 c0       	rjmp	.+138    	; 0x1060 <__vector_2+0x198>
			if(--measure_delay == 0){
     fd6:	80 91 06 01 	lds	r24, 0x0106
     fda:	81 50       	subi	r24, 0x01	; 1
     fdc:	80 93 06 01 	sts	0x0106, r24
     fe0:	88 23       	and	r24, r24
     fe2:	91 f5       	brne	.+100    	; 0x1048 <__vector_2+0x180>
				measure_delay = 9;
     fe4:	89 e0       	ldi	r24, 0x09	; 9
     fe6:	2e c0       	rjmp	.+92     	; 0x1044 <__vector_2+0x17c>
			}
			FLAGS_SWITCH_ON( UPDATE_DISPLAY_FLAG );
		}

	}else if(button_clicked == J_RIGHT){
		IF_FLAG_ON( SNAKE_PLAYING_NOW_FLAG ){
     fe8:	8f b7       	in	r24, 0x3f	; 63
     fea:	f8 94       	cli
     fec:	30 93 6e 03 	sts	0x036E, r19
     ff0:	20 93 6d 03 	sts	0x036D, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     ff4:	8f bf       	out	0x3f, r24	; 63
     ff6:	80 91 6d 03 	lds	r24, 0x036D
     ffa:	86 ff       	sbrs	r24, 6
     ffc:	02 c0       	rjmp	.+4      	; 0x1002 <__vector_2+0x13a>
			SnakeGame_TurnRight();
     ffe:	0e 94 4f 02 	call	0x49e	; 0x49e <SnakeGame_TurnRight>
		}

		if(menu_now == &calibration){
    1002:	80 91 79 03 	lds	r24, 0x0379
    1006:	90 91 7a 03 	lds	r25, 0x037A
    100a:	21 e0       	ldi	r18, 0x01	; 1
    100c:	85 3c       	cpi	r24, 0xC5	; 197
    100e:	92 07       	cpc	r25, r18
    1010:	19 f4       	brne	.+6      	; 0x1018 <__vector_2+0x150>
			menu_now = &go;
    1012:	89 e2       	ldi	r24, 0x29	; 41
    1014:	91 e0       	ldi	r25, 0x01	; 1
    1016:	06 c0       	rjmp	.+12     	; 0x1024 <__vector_2+0x15c>
		}else if(menu_now == &go){
    1018:	21 e0       	ldi	r18, 0x01	; 1
    101a:	89 32       	cpi	r24, 0x29	; 41
    101c:	92 07       	cpc	r25, r18
    101e:	39 f4       	brne	.+14     	; 0x102e <__vector_2+0x166>
			menu_now = &calibration;
    1020:	85 ec       	ldi	r24, 0xC5	; 197
    1022:	91 e0       	ldi	r25, 0x01	; 1
    1024:	90 93 7a 03 	sts	0x037A, r25
    1028:	80 93 79 03 	sts	0x0379, r24
    102c:	0d c0       	rjmp	.+26     	; 0x1048 <__vector_2+0x180>
		}else if(menu_now == &set_measure_delay){
    102e:	8b 5a       	subi	r24, 0xAB	; 171
    1030:	91 40       	sbci	r25, 0x01	; 1
    1032:	51 f4       	brne	.+20     	; 0x1048 <__vector_2+0x180>
			if(++measure_delay == 10){
    1034:	80 91 06 01 	lds	r24, 0x0106
    1038:	8f 5f       	subi	r24, 0xFF	; 255
    103a:	80 93 06 01 	sts	0x0106, r24
    103e:	8a 30       	cpi	r24, 0x0A	; 10
    1040:	19 f4       	brne	.+6      	; 0x1048 <__vector_2+0x180>
				measure_delay = 1;
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	80 93 06 01 	sts	0x0106, r24
			}
		}
		FLAGS_SWITCH_ON( UPDATE_DISPLAY_FLAG );
    1048:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    104a:	f8 94       	cli
    104c:	80 91 6b 03 	lds	r24, 0x036B
    1050:	90 91 6c 03 	lds	r25, 0x036C
    1054:	81 60       	ori	r24, 0x01	; 1
    1056:	90 93 6c 03 	sts	0x036C, r25
    105a:	80 93 6b 03 	sts	0x036B, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    105e:	2f bf       	out	0x3f, r18	; 63

	}

}
    1060:	ff 91       	pop	r31
    1062:	ef 91       	pop	r30
    1064:	bf 91       	pop	r27
    1066:	af 91       	pop	r26
    1068:	9f 91       	pop	r25
    106a:	8f 91       	pop	r24
    106c:	7f 91       	pop	r23
    106e:	6f 91       	pop	r22
    1070:	5f 91       	pop	r21
    1072:	4f 91       	pop	r20
    1074:	3f 91       	pop	r19
    1076:	2f 91       	pop	r18
    1078:	0f 90       	pop	r0
    107a:	0f be       	out	0x3f, r0	; 63
    107c:	0f 90       	pop	r0
    107e:	1f 90       	pop	r1
    1080:	18 95       	reti

00001082 <DebugSendAllResultValues>:



void DebugSendAllResultValues(void)
{
	DEBUG_PRINT_CHAR( 'C' );
    1082:	83 e4       	ldi	r24, 0x43	; 67
    1084:	0e 94 b0 06 	call	0xd60	; 0xd60 <uart_putchar>
	DEBUG_PRINT_UINT16( hex2dec_result( result[CALIBRATE_INDX][RED] ) );
    1088:	80 91 57 03 	lds	r24, 0x0357
    108c:	90 91 58 03 	lds	r25, 0x0358
    1090:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    1094:	89 2f       	mov	r24, r25
    1096:	0e 94 b0 06 	call	0xd60	; 0xd60 <uart_putchar>
    109a:	80 91 57 03 	lds	r24, 0x0357
    109e:	90 91 58 03 	lds	r25, 0x0358
    10a2:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    10a6:	0e 94 b0 06 	call	0xd60	; 0xd60 <uart_putchar>
	DEBUG_PRINT_UINT16( hex2dec_result( result[CALIBRATE_INDX][GREEN] ) );
    10aa:	80 91 59 03 	lds	r24, 0x0359
    10ae:	90 91 5a 03 	lds	r25, 0x035A
    10b2:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    10b6:	89 2f       	mov	r24, r25
    10b8:	0e 94 b0 06 	call	0xd60	; 0xd60 <uart_putchar>
    10bc:	80 91 59 03 	lds	r24, 0x0359
    10c0:	90 91 5a 03 	lds	r25, 0x035A
    10c4:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    10c8:	0e 94 b0 06 	call	0xd60	; 0xd60 <uart_putchar>
	DEBUG_PRINT_UINT16( hex2dec_result( result[CALIBRATE_INDX][BLUE] ) );
    10cc:	80 91 5b 03 	lds	r24, 0x035B
    10d0:	90 91 5c 03 	lds	r25, 0x035C
    10d4:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    10d8:	89 2f       	mov	r24, r25
    10da:	0e 94 b0 06 	call	0xd60	; 0xd60 <uart_putchar>
    10de:	80 91 5b 03 	lds	r24, 0x035B
    10e2:	90 91 5c 03 	lds	r25, 0x035C
    10e6:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    10ea:	0e 94 b0 06 	call	0xd60	; 0xd60 <uart_putchar>

	DEBUG_PRINT_CHAR( 'M' );
    10ee:	8d e4       	ldi	r24, 0x4D	; 77
    10f0:	0e 94 b0 06 	call	0xd60	; 0xd60 <uart_putchar>
	DEBUG_PRINT_UINT16( hex2dec_result( result[MEASURE_INDX][RED] ) );
    10f4:	80 91 5d 03 	lds	r24, 0x035D
    10f8:	90 91 5e 03 	lds	r25, 0x035E
    10fc:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    1100:	89 2f       	mov	r24, r25
    1102:	0e 94 b0 06 	call	0xd60	; 0xd60 <uart_putchar>
    1106:	80 91 5d 03 	lds	r24, 0x035D
    110a:	90 91 5e 03 	lds	r25, 0x035E
    110e:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    1112:	0e 94 b0 06 	call	0xd60	; 0xd60 <uart_putchar>
	DEBUG_PRINT_UINT16( hex2dec_result( result[MEASURE_INDX][GREEN] ) );
    1116:	80 91 5f 03 	lds	r24, 0x035F
    111a:	90 91 60 03 	lds	r25, 0x0360
    111e:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    1122:	89 2f       	mov	r24, r25
    1124:	0e 94 b0 06 	call	0xd60	; 0xd60 <uart_putchar>
    1128:	80 91 5f 03 	lds	r24, 0x035F
    112c:	90 91 60 03 	lds	r25, 0x0360
    1130:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    1134:	0e 94 b0 06 	call	0xd60	; 0xd60 <uart_putchar>
	DEBUG_PRINT_UINT16( hex2dec_result( result[MEASURE_INDX][BLUE] ) );
    1138:	80 91 61 03 	lds	r24, 0x0361
    113c:	90 91 62 03 	lds	r25, 0x0362
    1140:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    1144:	89 2f       	mov	r24, r25
    1146:	0e 94 b0 06 	call	0xd60	; 0xd60 <uart_putchar>
    114a:	80 91 61 03 	lds	r24, 0x0361
    114e:	90 91 62 03 	lds	r25, 0x0362
    1152:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    1156:	0e 94 b0 06 	call	0xd60	; 0xd60 <uart_putchar>

	DEBUG_PRINT_CHAR( 'D' );
    115a:	84 e4       	ldi	r24, 0x44	; 68
    115c:	0e 94 b0 06 	call	0xd60	; 0xd60 <uart_putchar>
	DEBUG_PRINT_UINT16( hex2dec_result( result[DIFF_INDX][RED] ) );
    1160:	80 91 63 03 	lds	r24, 0x0363
    1164:	90 91 64 03 	lds	r25, 0x0364
    1168:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    116c:	89 2f       	mov	r24, r25
    116e:	0e 94 b0 06 	call	0xd60	; 0xd60 <uart_putchar>
    1172:	80 91 63 03 	lds	r24, 0x0363
    1176:	90 91 64 03 	lds	r25, 0x0364
    117a:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    117e:	0e 94 b0 06 	call	0xd60	; 0xd60 <uart_putchar>
	DEBUG_PRINT_UINT16( hex2dec_result( result[DIFF_INDX][GREEN] ) );
    1182:	80 91 65 03 	lds	r24, 0x0365
    1186:	90 91 66 03 	lds	r25, 0x0366
    118a:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    118e:	89 2f       	mov	r24, r25
    1190:	0e 94 b0 06 	call	0xd60	; 0xd60 <uart_putchar>
    1194:	80 91 65 03 	lds	r24, 0x0365
    1198:	90 91 66 03 	lds	r25, 0x0366
    119c:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    11a0:	0e 94 b0 06 	call	0xd60	; 0xd60 <uart_putchar>
	DEBUG_PRINT_UINT16( hex2dec_result( result[DIFF_INDX][BLUE] ) );
    11a4:	80 91 67 03 	lds	r24, 0x0367
    11a8:	90 91 68 03 	lds	r25, 0x0368
    11ac:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    11b0:	89 2f       	mov	r24, r25
    11b2:	0e 94 b0 06 	call	0xd60	; 0xd60 <uart_putchar>
    11b6:	80 91 67 03 	lds	r24, 0x0367
    11ba:	90 91 68 03 	lds	r25, 0x0368
    11be:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    11c2:	0e 94 b0 06 	call	0xd60	; 0xd60 <uart_putchar>
//
//	DEBUG_PRINT_CHAR( 'D' );
//	DEBUG_PRINT_UINT16( ( result[DIFF_INDX][RED] ) );
//	DEBUG_PRINT_UINT16( ( result[DIFF_INDX][GREEN] ) );
//	DEBUG_PRINT_UINT16( ( result[DIFF_INDX][BLUE] ) );
}
    11c6:	08 95       	ret

000011c8 <main>:


int main(void)
{

	DEBUG_INIT(); // Initialize uart if DEBUG > 0
    11c8:	0e 94 a7 06 	call	0xd4e	; 0xd4e <uart_initialize>
    11cc:	88 e8       	ldi	r24, 0x88	; 136
    11ce:	93 e1       	ldi	r25, 0x13	; 19
    11d0:	20 e9       	ldi	r18, 0x90	; 144
    11d2:	31 e0       	ldi	r19, 0x01	; 1
    11d4:	f9 01       	movw	r30, r18
    11d6:	31 97       	sbiw	r30, 0x01	; 1
    11d8:	f1 f7       	brne	.-4      	; 0x11d6 <main+0xe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11da:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11dc:	d9 f7       	brne	.-10     	; 0x11d4 <main+0xc>
	DEBUG_PRINT_CHAR( 0x01 );
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	0e 94 b0 06 	call	0xd60	; 0xd60 <uart_putchar>

	// Input/Output Ports initialization
    PORTB = 0x00;
    11e4:	18 ba       	out	0x18, r1	; 24
    DDRB = 0x00;
    11e6:	17 ba       	out	0x17, r1	; 23

	LED_PORT = 0x00;
    11e8:	15 ba       	out	0x15, r1	; 21
	LED_DDR |= LED_P;
    11ea:	a3 9a       	sbi	0x14, 3	; 20

    PORTD |= J_C; // pull up joystick center button
    11ec:	93 9a       	sbi	0x12, 3	; 18
    DDRD = 0x00;
    11ee:	11 ba       	out	0x11, r1	; 17


    JPORT |= (uint8_t)(J_RU | J_LU | J_RD | J_LD);
    11f0:	85 b3       	in	r24, 0x15	; 21
    11f2:	80 6f       	ori	r24, 0xF0	; 240
    11f4:	85 bb       	out	0x15, r24	; 21
    JDDR &= (uint8_t)~(J_RU | J_LU | J_RD | J_LD);
    11f6:	84 b3       	in	r24, 0x14	; 20
    11f8:	8f 70       	andi	r24, 0x0F	; 15
    11fa:	84 bb       	out	0x14, r24	; 20


    ACSR = _BV(ACD); // turn off analog comparer, this is turns ON after RESET... delurium, but the fact ;)
    11fc:	90 e8       	ldi	r25, 0x80	; 128
    11fe:	98 b9       	out	0x08, r25	; 8

    // External Interrupt(s) initialization
    MCUCR= _BV(ISC11); // fall
    1200:	88 e0       	ldi	r24, 0x08	; 8
    1202:	85 bf       	out	0x35, r24	; 53
    GICR =  _BV(INT1); // joystick on int1 enable interrupt
    1204:	9b bf       	out	0x3b, r25	; 59

    ASSR = 0x00;
    1206:	12 bc       	out	0x22, r1	; 34
    TCCR0 = 0x00;
    1208:	13 be       	out	0x33, r1	; 51
    TCCR1A = 0x00;
    120a:	1f bc       	out	0x2f, r1	; 47
    TCCR1B = 0x00;
    120c:	1e bc       	out	0x2e, r1	; 46
    TCCR2 = 0x00;
    120e:	15 bc       	out	0x25, r1	; 37
    TIMSK = 0x00;
    1210:	19 be       	out	0x39, r1	; 57

	TIM2_INIT(); // see defines.h for details
    1212:	86 e0       	ldi	r24, 0x06	; 6
    1214:	85 bd       	out	0x25, r24	; 37

    // Init ADC
	ADMUX =  _BV(MUX3) | _BV(MUX0); // diff * 10; result in ADC
    1216:	89 e0       	ldi	r24, 0x09	; 9
    1218:	87 b9       	out	0x07, r24	; 7
	ADCSRA = _BV(ADEN) | _BV(ADPS2)  | _BV(ADPS1) | _BV(ADPS0); // F_CPU / 128;
    121a:	87 e8       	ldi	r24, 0x87	; 135
    121c:	86 b9       	out	0x06, r24	; 6

	// Make first conversation
	ADCSRA |= _BV( ADSC );
    121e:	36 9a       	sbi	0x06, 6	; 6
	while(ADC_CONVERT_IN_PROGRESS()){}
    1220:	36 99       	sbic	0x06, 6	; 6
    1222:	fe cf       	rjmp	.-4      	; 0x1220 <main+0x58>
	adc_data = ADC;
    1224:	84 b1       	in	r24, 0x04	; 4
    1226:	95 b1       	in	r25, 0x05	; 5
    1228:	90 93 6a 03 	sts	0x036A, r25
    122c:	80 93 69 03 	sts	0x0369, r24

	LedDriver_Init();
    1230:	0e 94 03 07 	call	0xe06	; 0xe06 <LedDriver_Init>
	LedDriver_SwitchLeds(0x0000);
    1234:	80 e0       	ldi	r24, 0x00	; 0
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	0e 94 ca 06 	call	0xd94	; 0xd94 <LedDriver_SwitchLeds>

	Lcd3310_InitializeDisplay(DELAY_SHOW_SPLASH);
    123c:	88 ee       	ldi	r24, 0xE8	; 232
    123e:	93 e0       	ldi	r25, 0x03	; 3
    1240:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <Lcd3310_InitializeDisplay>
	DEBUG_PRINT_CHAR( 0x02 );
    1244:	82 e0       	ldi	r24, 0x02	; 2
    1246:	0e 94 b0 06 	call	0xd60	; 0xd60 <uart_putchar>


	sei();
    124a:	78 94       	sei
	DEBUG_PRINT_CHAR( 0x03 );
    124c:	83 e0       	ldi	r24, 0x03	; 3
    124e:	0e 94 b0 06 	call	0xd60	; 0xd60 <uart_putchar>


   	for(;;){

		IF_FLAG_ON( UPDATE_DISPLAY_FLAG ){
    1252:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1254:	f8 94       	cli
    1256:	20 91 6b 03 	lds	r18, 0x036B
    125a:	30 91 6c 03 	lds	r19, 0x036C
    125e:	30 93 6e 03 	sts	0x036E, r19
    1262:	20 93 6d 03 	sts	0x036D, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1266:	8f bf       	out	0x3f, r24	; 63
    1268:	80 91 6d 03 	lds	r24, 0x036D
    126c:	80 ff       	sbrs	r24, 0
    126e:	1d c0       	rjmp	.+58     	; 0x12aa <main+0xe2>
			FLAGS_SWITCH_OFF( UPDATE_DISPLAY_FLAG );
    1270:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1272:	f8 94       	cli
    1274:	80 91 6b 03 	lds	r24, 0x036B
    1278:	90 91 6c 03 	lds	r25, 0x036C
    127c:	8e 7f       	andi	r24, 0xFE	; 254
    127e:	90 93 6c 03 	sts	0x036C, r25
    1282:	80 93 6b 03 	sts	0x036B, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1286:	2f bf       	out	0x3f, r18	; 63

			IF_FLAG_OFF( SNAKE_PLAYING_NOW_FLAG ){
    1288:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    128a:	f8 94       	cli
    128c:	80 91 6b 03 	lds	r24, 0x036B
    1290:	90 91 6c 03 	lds	r25, 0x036C
    1294:	90 93 6e 03 	sts	0x036E, r25
    1298:	80 93 6d 03 	sts	0x036D, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    129c:	2f bf       	out	0x3f, r18	; 63
    129e:	80 91 6d 03 	lds	r24, 0x036D
    12a2:	86 fd       	sbrc	r24, 6
    12a4:	02 c0       	rjmp	.+4      	; 0x12aa <main+0xe2>
				Lcd3310_UpdateDisplayInfo();
    12a6:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <Lcd3310_UpdateDisplayInfo>
			}
		}

		IF_FLAG_ON( JOYSTICK_CENTER_CLICK_FLAG ){
    12aa:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    12ac:	f8 94       	cli
    12ae:	20 91 6b 03 	lds	r18, 0x036B
    12b2:	30 91 6c 03 	lds	r19, 0x036C
    12b6:	30 93 6e 03 	sts	0x036E, r19
    12ba:	20 93 6d 03 	sts	0x036D, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    12be:	8f bf       	out	0x3f, r24	; 63
    12c0:	80 91 6d 03 	lds	r24, 0x036D
    12c4:	81 ff       	sbrs	r24, 1
    12c6:	1a c0       	rjmp	.+52     	; 0x12fc <main+0x134>
			FLAGS_SWITCH_OFF( JOYSTICK_CENTER_CLICK_FLAG );
    12c8:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    12ca:	f8 94       	cli
    12cc:	80 91 6b 03 	lds	r24, 0x036B
    12d0:	90 91 6c 03 	lds	r25, 0x036C
    12d4:	8d 7f       	andi	r24, 0xFD	; 253
    12d6:	90 93 6c 03 	sts	0x036C, r25
    12da:	80 93 6b 03 	sts	0x036B, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    12de:	2f bf       	out	0x3f, r18	; 63

			Menu_EnterClick();
    12e0:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <Menu_EnterClick>

			FLAGS_SWITCH_ON( UPDATE_DISPLAY_FLAG );
    12e4:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    12e6:	f8 94       	cli
    12e8:	80 91 6b 03 	lds	r24, 0x036B
    12ec:	90 91 6c 03 	lds	r25, 0x036C
    12f0:	81 60       	ori	r24, 0x01	; 1
    12f2:	90 93 6c 03 	sts	0x036C, r25
    12f6:	80 93 6b 03 	sts	0x036B, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    12fa:	2f bf       	out	0x3f, r18	; 63
		}



		IF_FLAG_ON( ADC_RESULT_FLAG ){ // in menu adc result
    12fc:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    12fe:	f8 94       	cli
    1300:	20 91 6b 03 	lds	r18, 0x036B
    1304:	30 91 6c 03 	lds	r19, 0x036C
    1308:	30 93 6e 03 	sts	0x036E, r19
    130c:	20 93 6d 03 	sts	0x036D, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1310:	8f bf       	out	0x3f, r24	; 63
    1312:	80 91 6d 03 	lds	r24, 0x036D
    1316:	84 ff       	sbrs	r24, 4
    1318:	1e c0       	rjmp	.+60     	; 0x1356 <main+0x18e>

			ADC_LoadingAndEvalIt(MeasureAllAlgorithm);
    131a:	82 e1       	ldi	r24, 0x12	; 18
    131c:	95 e0       	ldi	r25, 0x05	; 5
    131e:	0e 94 8e 05 	call	0xb1c	; 0xb1c <ADC_LoadingAndEvalIt>

			DebugSendAllResultValues();
    1322:	0e 94 41 08 	call	0x1082	; 0x1082 <DebugSendAllResultValues>

			FLAGS_SWITCH_OFF( ADC_RESULT_FLAG );
    1326:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1328:	f8 94       	cli
    132a:	80 91 6b 03 	lds	r24, 0x036B
    132e:	90 91 6c 03 	lds	r25, 0x036C
    1332:	8f 7e       	andi	r24, 0xEF	; 239
    1334:	90 93 6c 03 	sts	0x036C, r25
    1338:	80 93 6b 03 	sts	0x036B, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    133c:	2f bf       	out	0x3f, r18	; 63
			FLAGS_SWITCH_ON( UPDATE_DISPLAY_FLAG );
    133e:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1340:	f8 94       	cli
    1342:	80 91 6b 03 	lds	r24, 0x036B
    1346:	90 91 6c 03 	lds	r25, 0x036C
    134a:	81 60       	ori	r24, 0x01	; 1
    134c:	90 93 6c 03 	sts	0x036C, r25
    1350:	80 93 6b 03 	sts	0x036B, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1354:	2f bf       	out	0x3f, r18	; 63
		}

		IF_FLAG_ON( ADC_CALIBRATE_FLAG ){
    1356:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1358:	f8 94       	cli
    135a:	20 91 6b 03 	lds	r18, 0x036B
    135e:	30 91 6c 03 	lds	r19, 0x036C
    1362:	30 93 6e 03 	sts	0x036E, r19
    1366:	20 93 6d 03 	sts	0x036D, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    136a:	8f bf       	out	0x3f, r24	; 63
    136c:	80 91 6d 03 	lds	r24, 0x036D
    1370:	85 ff       	sbrs	r24, 5
    1372:	10 c0       	rjmp	.+32     	; 0x1394 <main+0x1cc>

			ADC_LoadingAndEvalIt(CalibrationAlgorithm);
    1374:	87 e3       	ldi	r24, 0x37	; 55
    1376:	95 e0       	ldi	r25, 0x05	; 5
    1378:	0e 94 8e 05 	call	0xb1c	; 0xb1c <ADC_LoadingAndEvalIt>

			FLAGS_SWITCH_OFF( ADC_CALIBRATE_FLAG );
    137c:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    137e:	f8 94       	cli
    1380:	80 91 6b 03 	lds	r24, 0x036B
    1384:	90 91 6c 03 	lds	r25, 0x036C
    1388:	8f 7d       	andi	r24, 0xDF	; 223
    138a:	90 93 6c 03 	sts	0x036C, r25
    138e:	80 93 6b 03 	sts	0x036B, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1392:	2f bf       	out	0x3f, r18	; 63
		}

		IF_FLAG_ON( SAVE_MEASURED_AS_CALIBRATE_FLAG ){
    1394:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1396:	f8 94       	cli
    1398:	20 91 6b 03 	lds	r18, 0x036B
    139c:	30 91 6c 03 	lds	r19, 0x036C
    13a0:	30 93 6e 03 	sts	0x036E, r19
    13a4:	20 93 6d 03 	sts	0x036D, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    13a8:	8f bf       	out	0x3f, r24	; 63
    13aa:	80 91 6d 03 	lds	r24, 0x036D
    13ae:	90 91 6e 03 	lds	r25, 0x036E
    13b2:	91 ff       	sbrs	r25, 1
    13b4:	1c c0       	rjmp	.+56     	; 0x13ee <main+0x226>
			FLAGS_SWITCH_OFF( SAVE_MEASURED_AS_CALIBRATE_FLAG );
    13b6:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    13b8:	f8 94       	cli
    13ba:	80 91 6b 03 	lds	r24, 0x036B
    13be:	90 91 6c 03 	lds	r25, 0x036C
    13c2:	9d 7f       	andi	r25, 0xFD	; 253
    13c4:	90 93 6c 03 	sts	0x036C, r25
    13c8:	80 93 6b 03 	sts	0x036B, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    13cc:	2f bf       	out	0x3f, r18	; 63

			SaveMeasureResultsToCalibrate();
    13ce:	0e 94 44 05 	call	0xa88	; 0xa88 <SaveMeasureResultsToCalibrate>
			DebugSendAllResultValues();
    13d2:	0e 94 41 08 	call	0x1082	; 0x1082 <DebugSendAllResultValues>

			FLAGS_SWITCH_ON( UPDATE_DISPLAY_FLAG );
    13d6:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    13d8:	f8 94       	cli
    13da:	80 91 6b 03 	lds	r24, 0x036B
    13de:	90 91 6c 03 	lds	r25, 0x036C
    13e2:	81 60       	ori	r24, 0x01	; 1
    13e4:	90 93 6c 03 	sts	0x036C, r25
    13e8:	80 93 6b 03 	sts	0x036B, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    13ec:	2f bf       	out	0x3f, r18	; 63
		}


	#ifdef ANIMATION_SWITCH_MENU_ITEMS
		IF_FLAG_ON( ANIMATION_NEXT_FLAG ){
    13ee:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    13f0:	f8 94       	cli
    13f2:	20 91 6b 03 	lds	r18, 0x036B
    13f6:	30 91 6c 03 	lds	r19, 0x036C
    13fa:	30 93 6e 03 	sts	0x036E, r19
    13fe:	20 93 6d 03 	sts	0x036D, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1402:	8f bf       	out	0x3f, r24	; 63
    1404:	80 91 6d 03 	lds	r24, 0x036D
    1408:	82 ff       	sbrs	r24, 2
    140a:	26 c0       	rjmp	.+76     	; 0x1458 <main+0x290>
			FLAGS_SWITCH_OFF( ANIMATION_NEXT_FLAG );
    140c:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    140e:	f8 94       	cli
    1410:	80 91 6b 03 	lds	r24, 0x036B
    1414:	90 91 6c 03 	lds	r25, 0x036C
    1418:	8b 7f       	andi	r24, 0xFB	; 251
    141a:	90 93 6c 03 	sts	0x036C, r25
    141e:	80 93 6b 03 	sts	0x036B, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1422:	2f bf       	out	0x3f, r18	; 63
			if(menu_now != &results && menu_now != &snake_results){
    1424:	80 91 79 03 	lds	r24, 0x0379
    1428:	90 91 7a 03 	lds	r25, 0x037A
    142c:	21 e0       	ldi	r18, 0x01	; 1
    142e:	83 34       	cpi	r24, 0x43	; 67
    1430:	92 07       	cpc	r25, r18
    1432:	31 f0       	breq	.+12     	; 0x1440 <main+0x278>
    1434:	87 57       	subi	r24, 0x77	; 119
    1436:	91 40       	sbci	r25, 0x01	; 1
    1438:	19 f0       	breq	.+6      	; 0x1440 <main+0x278>
				Lcd3310_AnimationSwitchMenuItems(1);
    143a:	81 e0       	ldi	r24, 0x01	; 1
    143c:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <Lcd3310_AnimationSwitchMenuItems>
			}
			FLAGS_SWITCH_ON( UPDATE_DISPLAY_FLAG );
    1440:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1442:	f8 94       	cli
    1444:	80 91 6b 03 	lds	r24, 0x036B
    1448:	90 91 6c 03 	lds	r25, 0x036C
    144c:	81 60       	ori	r24, 0x01	; 1
    144e:	90 93 6c 03 	sts	0x036C, r25
    1452:	80 93 6b 03 	sts	0x036B, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1456:	2f bf       	out	0x3f, r18	; 63
		}
		IF_FLAG_ON( ANIMATION_PREV_FLAG ){
    1458:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    145a:	f8 94       	cli
    145c:	20 91 6b 03 	lds	r18, 0x036B
    1460:	30 91 6c 03 	lds	r19, 0x036C
    1464:	30 93 6e 03 	sts	0x036E, r19
    1468:	20 93 6d 03 	sts	0x036D, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    146c:	8f bf       	out	0x3f, r24	; 63
    146e:	80 91 6d 03 	lds	r24, 0x036D
    1472:	83 ff       	sbrs	r24, 3
    1474:	26 c0       	rjmp	.+76     	; 0x14c2 <main+0x2fa>
			FLAGS_SWITCH_OFF( ANIMATION_PREV_FLAG );
    1476:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1478:	f8 94       	cli
    147a:	80 91 6b 03 	lds	r24, 0x036B
    147e:	90 91 6c 03 	lds	r25, 0x036C
    1482:	87 7f       	andi	r24, 0xF7	; 247
    1484:	90 93 6c 03 	sts	0x036C, r25
    1488:	80 93 6b 03 	sts	0x036B, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    148c:	2f bf       	out	0x3f, r18	; 63
			if(menu_now != &results && menu_now != &snake_results){
    148e:	80 91 79 03 	lds	r24, 0x0379
    1492:	90 91 7a 03 	lds	r25, 0x037A
    1496:	21 e0       	ldi	r18, 0x01	; 1
    1498:	83 34       	cpi	r24, 0x43	; 67
    149a:	92 07       	cpc	r25, r18
    149c:	31 f0       	breq	.+12     	; 0x14aa <main+0x2e2>
    149e:	87 57       	subi	r24, 0x77	; 119
    14a0:	91 40       	sbci	r25, 0x01	; 1
    14a2:	19 f0       	breq	.+6      	; 0x14aa <main+0x2e2>
				Lcd3310_AnimationSwitchMenuItems(0);
    14a4:	80 e0       	ldi	r24, 0x00	; 0
    14a6:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <Lcd3310_AnimationSwitchMenuItems>
			}
			FLAGS_SWITCH_ON( UPDATE_DISPLAY_FLAG );
    14aa:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    14ac:	f8 94       	cli
    14ae:	80 91 6b 03 	lds	r24, 0x036B
    14b2:	90 91 6c 03 	lds	r25, 0x036C
    14b6:	81 60       	ori	r24, 0x01	; 1
    14b8:	90 93 6c 03 	sts	0x036C, r25
    14bc:	80 93 6b 03 	sts	0x036B, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    14c0:	2f bf       	out	0x3f, r18	; 63
		}
	#endif

		IF_FLAG_ON( SNAKE_START_GAME_FLAG ){
    14c2:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    14c4:	f8 94       	cli
    14c6:	20 91 6b 03 	lds	r18, 0x036B
    14ca:	30 91 6c 03 	lds	r19, 0x036C
    14ce:	30 93 6e 03 	sts	0x036E, r19
    14d2:	20 93 6d 03 	sts	0x036D, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    14d6:	8f bf       	out	0x3f, r24	; 63
    14d8:	80 91 6d 03 	lds	r24, 0x036D
    14dc:	87 ff       	sbrs	r24, 7
    14de:	1e c0       	rjmp	.+60     	; 0x151c <main+0x354>
			FLAGS_SWITCH_OFF( SNAKE_START_GAME_FLAG );
    14e0:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    14e2:	f8 94       	cli
    14e4:	80 91 6b 03 	lds	r24, 0x036B
    14e8:	90 91 6c 03 	lds	r25, 0x036C
    14ec:	8f 77       	andi	r24, 0x7F	; 127
    14ee:	90 93 6c 03 	sts	0x036C, r25
    14f2:	80 93 6b 03 	sts	0x036B, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    14f6:	2f bf       	out	0x3f, r18	; 63
			SnakeGame_Start();
    14f8:	0e 94 7f 03 	call	0x6fe	; 0x6fe <SnakeGame_Start>
			TIM2_CLR_COUNTER_AND_OVF_ON();
    14fc:	14 bc       	out	0x24, r1	; 36
    14fe:	89 b7       	in	r24, 0x39	; 57
    1500:	80 64       	ori	r24, 0x40	; 64
    1502:	89 bf       	out	0x39, r24	; 57
			FLAGS_SWITCH_ON( SNAKE_PLAYING_NOW_FLAG );
    1504:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1506:	f8 94       	cli
    1508:	80 91 6b 03 	lds	r24, 0x036B
    150c:	90 91 6c 03 	lds	r25, 0x036C
    1510:	80 64       	ori	r24, 0x40	; 64
    1512:	90 93 6c 03 	sts	0x036C, r25
    1516:	80 93 6b 03 	sts	0x036B, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    151a:	2f bf       	out	0x3f, r18	; 63
		}
		IF_FLAG_ON( SNAKE_STOP_GAME_FLAG ){
    151c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    151e:	f8 94       	cli
    1520:	20 91 6b 03 	lds	r18, 0x036B
    1524:	30 91 6c 03 	lds	r19, 0x036C
    1528:	30 93 6e 03 	sts	0x036E, r19
    152c:	20 93 6d 03 	sts	0x036D, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1530:	8f bf       	out	0x3f, r24	; 63
    1532:	80 91 6d 03 	lds	r24, 0x036D
    1536:	90 91 6e 03 	lds	r25, 0x036E
    153a:	90 ff       	sbrs	r25, 0
    153c:	8a ce       	rjmp	.-748    	; 0x1252 <main+0x8a>
			FLAGS_SWITCH_OFF( SNAKE_STOP_GAME_FLAG );
    153e:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1540:	f8 94       	cli
    1542:	80 91 6b 03 	lds	r24, 0x036B
    1546:	90 91 6c 03 	lds	r25, 0x036C
    154a:	9e 7f       	andi	r25, 0xFE	; 254
    154c:	90 93 6c 03 	sts	0x036C, r25
    1550:	80 93 6b 03 	sts	0x036B, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1554:	2f bf       	out	0x3f, r18	; 63
			TIM2_OVF_OFF();
    1556:	89 b7       	in	r24, 0x39	; 57
    1558:	8f 7b       	andi	r24, 0xBF	; 191
    155a:	89 bf       	out	0x39, r24	; 57
			SnakeGame_Stop();
    155c:	0e 94 43 02 	call	0x486	; 0x486 <SnakeGame_Stop>
			FLAGS_SWITCH_OFF( SNAKE_PLAYING_NOW_FLAG );
    1560:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1562:	f8 94       	cli
    1564:	80 91 6b 03 	lds	r24, 0x036B
    1568:	90 91 6c 03 	lds	r25, 0x036C
    156c:	8f 7b       	andi	r24, 0xBF	; 191
    156e:	90 93 6c 03 	sts	0x036C, r25
    1572:	80 93 6b 03 	sts	0x036B, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1576:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    1578:	6c ce       	rjmp	.-808    	; 0x1252 <main+0x8a>

0000157a <HalfByteAsASCII>:
#include "uint8_16_to_string.h"

char to_string_result[] = {0, 0, 0, 0};

char HalfByteAsASCII(char c)
{
    157a:	98 2f       	mov	r25, r24
    if (c >= 0 && c <= 9){
    157c:	8a 30       	cpi	r24, 0x0A	; 10
    157e:	10 f4       	brcc	.+4      	; 0x1584 <HalfByteAsASCII+0xa>
        c += 0x30;
    1580:	80 5d       	subi	r24, 0xD0	; 208
    1582:	08 95       	ret
    }else if (c >= 0xA && c <= 0x0F){
    1584:	8a 50       	subi	r24, 0x0A	; 10
    1586:	86 30       	cpi	r24, 0x06	; 6
    1588:	10 f0       	brcs	.+4      	; 0x158e <HalfByteAsASCII+0x14>
    158a:	8f e3       	ldi	r24, 0x3F	; 63
    158c:	08 95       	ret
        c += 0x37;
    158e:	89 2f       	mov	r24, r25
    1590:	89 5c       	subi	r24, 0xC9	; 201
    }else{
        c = '?';
    }
    return c;
}
    1592:	08 95       	ret

00001594 <UInt8ToString>:

void UInt8ToString(uint8_t ch)
{
    1594:	28 2f       	mov	r18, r24
	to_string_result[0] = HalfByteAsASCII( (ch & 0xf0) >>4 );
    1596:	98 2f       	mov	r25, r24
    1598:	92 95       	swap	r25
    159a:	9f 70       	andi	r25, 0x0F	; 15

char to_string_result[] = {0, 0, 0, 0};

char HalfByteAsASCII(char c)
{
    if (c >= 0 && c <= 9){
    159c:	9a 30       	cpi	r25, 0x0A	; 10
    159e:	18 f4       	brcc	.+6      	; 0x15a6 <UInt8ToString+0x12>
        c += 0x30;
    15a0:	89 2f       	mov	r24, r25
    15a2:	80 5d       	subi	r24, 0xD0	; 208
    15a4:	08 c0       	rjmp	.+16     	; 0x15b6 <UInt8ToString+0x22>
    }else if (c >= 0xA && c <= 0x0F){
    15a6:	89 2f       	mov	r24, r25
    15a8:	8a 50       	subi	r24, 0x0A	; 10
    15aa:	86 30       	cpi	r24, 0x06	; 6
    15ac:	10 f0       	brcs	.+4      	; 0x15b2 <UInt8ToString+0x1e>
    15ae:	8f e3       	ldi	r24, 0x3F	; 63
    15b0:	02 c0       	rjmp	.+4      	; 0x15b6 <UInt8ToString+0x22>
        c += 0x37;
    15b2:	89 2f       	mov	r24, r25
    15b4:	89 5c       	subi	r24, 0xC9	; 201
    return c;
}

void UInt8ToString(uint8_t ch)
{
	to_string_result[0] = HalfByteAsASCII( (ch & 0xf0) >>4 );
    15b6:	80 93 71 03 	sts	0x0371, r24
	to_string_result[1] = HalfByteAsASCII( ch & 0x0f );
    15ba:	92 2f       	mov	r25, r18
    15bc:	9f 70       	andi	r25, 0x0F	; 15

char to_string_result[] = {0, 0, 0, 0};

char HalfByteAsASCII(char c)
{
    if (c >= 0 && c <= 9){
    15be:	9a 30       	cpi	r25, 0x0A	; 10
    15c0:	18 f4       	brcc	.+6      	; 0x15c8 <UInt8ToString+0x34>
        c += 0x30;
    15c2:	89 2f       	mov	r24, r25
    15c4:	80 5d       	subi	r24, 0xD0	; 208
    15c6:	08 c0       	rjmp	.+16     	; 0x15d8 <UInt8ToString+0x44>
    }else if (c >= 0xA && c <= 0x0F){
    15c8:	89 2f       	mov	r24, r25
    15ca:	8a 50       	subi	r24, 0x0A	; 10
    15cc:	86 30       	cpi	r24, 0x06	; 6
    15ce:	10 f0       	brcs	.+4      	; 0x15d4 <UInt8ToString+0x40>
    15d0:	8f e3       	ldi	r24, 0x3F	; 63
    15d2:	02 c0       	rjmp	.+4      	; 0x15d8 <UInt8ToString+0x44>
        c += 0x37;
    15d4:	89 2f       	mov	r24, r25
    15d6:	89 5c       	subi	r24, 0xC9	; 201
}

void UInt8ToString(uint8_t ch)
{
	to_string_result[0] = HalfByteAsASCII( (ch & 0xf0) >>4 );
	to_string_result[1] = HalfByteAsASCII( ch & 0x0f );
    15d8:	80 93 72 03 	sts	0x0372, r24
	//to_string_result[2] = 0x00; // end of result string here
	// result in result_str
}
    15dc:	08 95       	ret

000015de <UInt16ToString>:

void UInt16ToString(uint16_t i)
{
    15de:	9c 01       	movw	r18, r24
	to_string_result[0] = HalfByteAsASCII( (i & 0xf000) >> 12 );
    15e0:	93 2f       	mov	r25, r19
    15e2:	92 95       	swap	r25
    15e4:	9f 70       	andi	r25, 0x0F	; 15

char to_string_result[] = {0, 0, 0, 0};

char HalfByteAsASCII(char c)
{
    if (c >= 0 && c <= 9){
    15e6:	9a 30       	cpi	r25, 0x0A	; 10
    15e8:	18 f4       	brcc	.+6      	; 0x15f0 <UInt16ToString+0x12>
        c += 0x30;
    15ea:	89 2f       	mov	r24, r25
    15ec:	80 5d       	subi	r24, 0xD0	; 208
    15ee:	08 c0       	rjmp	.+16     	; 0x1600 <UInt16ToString+0x22>
    }else if (c >= 0xA && c <= 0x0F){
    15f0:	89 2f       	mov	r24, r25
    15f2:	8a 50       	subi	r24, 0x0A	; 10
    15f4:	86 30       	cpi	r24, 0x06	; 6
    15f6:	10 f0       	brcs	.+4      	; 0x15fc <UInt16ToString+0x1e>
    15f8:	8f e3       	ldi	r24, 0x3F	; 63
    15fa:	02 c0       	rjmp	.+4      	; 0x1600 <UInt16ToString+0x22>
        c += 0x37;
    15fc:	89 2f       	mov	r24, r25
    15fe:	89 5c       	subi	r24, 0xC9	; 201
	// result in result_str
}

void UInt16ToString(uint16_t i)
{
	to_string_result[0] = HalfByteAsASCII( (i & 0xf000) >> 12 );
    1600:	80 93 71 03 	sts	0x0371, r24
	to_string_result[1] = HalfByteAsASCII( (i & 0x0f00) >> 8  );
    1604:	c9 01       	movw	r24, r18
    1606:	80 70       	andi	r24, 0x00	; 0
    1608:	9f 70       	andi	r25, 0x0F	; 15

char to_string_result[] = {0, 0, 0, 0};

char HalfByteAsASCII(char c)
{
    if (c >= 0 && c <= 9){
    160a:	9a 30       	cpi	r25, 0x0A	; 10
    160c:	18 f4       	brcc	.+6      	; 0x1614 <UInt16ToString+0x36>
        c += 0x30;
    160e:	89 2f       	mov	r24, r25
    1610:	80 5d       	subi	r24, 0xD0	; 208
    1612:	08 c0       	rjmp	.+16     	; 0x1624 <UInt16ToString+0x46>
    }else if (c >= 0xA && c <= 0x0F){
    1614:	89 2f       	mov	r24, r25
    1616:	8a 50       	subi	r24, 0x0A	; 10
    1618:	86 30       	cpi	r24, 0x06	; 6
    161a:	10 f0       	brcs	.+4      	; 0x1620 <UInt16ToString+0x42>
    161c:	8f e3       	ldi	r24, 0x3F	; 63
    161e:	02 c0       	rjmp	.+4      	; 0x1624 <UInt16ToString+0x46>
        c += 0x37;
    1620:	89 2f       	mov	r24, r25
    1622:	89 5c       	subi	r24, 0xC9	; 201
}

void UInt16ToString(uint16_t i)
{
	to_string_result[0] = HalfByteAsASCII( (i & 0xf000) >> 12 );
	to_string_result[1] = HalfByteAsASCII( (i & 0x0f00) >> 8  );
    1624:	80 93 72 03 	sts	0x0372, r24
	to_string_result[2] = HalfByteAsASCII( (i & 0x00f0) >> 4  );
    1628:	c9 01       	movw	r24, r18
    162a:	80 7f       	andi	r24, 0xF0	; 240
    162c:	90 70       	andi	r25, 0x00	; 0
    162e:	34 e0       	ldi	r19, 0x04	; 4
    1630:	96 95       	lsr	r25
    1632:	87 95       	ror	r24
    1634:	3a 95       	dec	r19
    1636:	e1 f7       	brne	.-8      	; 0x1630 <UInt16ToString+0x52>
    1638:	98 2f       	mov	r25, r24

char to_string_result[] = {0, 0, 0, 0};

char HalfByteAsASCII(char c)
{
    if (c >= 0 && c <= 9){
    163a:	8a 30       	cpi	r24, 0x0A	; 10
    163c:	10 f4       	brcc	.+4      	; 0x1642 <UInt16ToString+0x64>
        c += 0x30;
    163e:	80 5d       	subi	r24, 0xD0	; 208
    1640:	07 c0       	rjmp	.+14     	; 0x1650 <UInt16ToString+0x72>
    }else if (c >= 0xA && c <= 0x0F){
    1642:	8a 50       	subi	r24, 0x0A	; 10
    1644:	86 30       	cpi	r24, 0x06	; 6
    1646:	10 f0       	brcs	.+4      	; 0x164c <UInt16ToString+0x6e>
    1648:	8f e3       	ldi	r24, 0x3F	; 63
    164a:	02 c0       	rjmp	.+4      	; 0x1650 <UInt16ToString+0x72>
        c += 0x37;
    164c:	89 2f       	mov	r24, r25
    164e:	89 5c       	subi	r24, 0xC9	; 201

void UInt16ToString(uint16_t i)
{
	to_string_result[0] = HalfByteAsASCII( (i & 0xf000) >> 12 );
	to_string_result[1] = HalfByteAsASCII( (i & 0x0f00) >> 8  );
	to_string_result[2] = HalfByteAsASCII( (i & 0x00f0) >> 4  );
    1650:	80 93 73 03 	sts	0x0373, r24
	to_string_result[3] = HalfByteAsASCII(  i & 0x000f		);
    1654:	92 2f       	mov	r25, r18
    1656:	9f 70       	andi	r25, 0x0F	; 15

char to_string_result[] = {0, 0, 0, 0};

char HalfByteAsASCII(char c)
{
    if (c >= 0 && c <= 9){
    1658:	9a 30       	cpi	r25, 0x0A	; 10
    165a:	18 f4       	brcc	.+6      	; 0x1662 <UInt16ToString+0x84>
        c += 0x30;
    165c:	89 2f       	mov	r24, r25
    165e:	80 5d       	subi	r24, 0xD0	; 208
    1660:	08 c0       	rjmp	.+16     	; 0x1672 <UInt16ToString+0x94>
    }else if (c >= 0xA && c <= 0x0F){
    1662:	89 2f       	mov	r24, r25
    1664:	8a 50       	subi	r24, 0x0A	; 10
    1666:	86 30       	cpi	r24, 0x06	; 6
    1668:	10 f0       	brcs	.+4      	; 0x166e <UInt16ToString+0x90>
    166a:	8f e3       	ldi	r24, 0x3F	; 63
    166c:	02 c0       	rjmp	.+4      	; 0x1672 <UInt16ToString+0x94>
        c += 0x37;
    166e:	89 2f       	mov	r24, r25
    1670:	89 5c       	subi	r24, 0xC9	; 201
void UInt16ToString(uint16_t i)
{
	to_string_result[0] = HalfByteAsASCII( (i & 0xf000) >> 12 );
	to_string_result[1] = HalfByteAsASCII( (i & 0x0f00) >> 8  );
	to_string_result[2] = HalfByteAsASCII( (i & 0x00f0) >> 4  );
	to_string_result[3] = HalfByteAsASCII(  i & 0x000f		);
    1672:	80 93 74 03 	sts	0x0374, r24
	// result in result_str
}
    1676:	08 95       	ret

00001678 <Lcd3310_Char>:

	_delay_ms(show_init_data_delay_ms); // show image from LcdCache initial value
}

void Lcd3310_Char(unsigned char ch, WhiteOrBlackText is_invert_colors)
{
    1678:	cf 93       	push	r28
    167a:	df 93       	push	r29
    167c:	28 2f       	mov	r18, r24
    167e:	36 2f       	mov	r19, r22
	//  Convert to a printable character.
    if ( (ch < 0x20) ){
    1680:	80 32       	cpi	r24, 0x20	; 32
    1682:	08 f4       	brcc	.+2      	; 0x1686 <Lcd3310_Char+0xe>
    1684:	2c e5       	ldi	r18, 0x5C	; 92
        ch = 92;
    }
	
	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    1686:	c0 91 75 03 	lds	r28, 0x0375
    168a:	d0 91 76 03 	lds	r29, 0x0376
    168e:	ce 01       	movw	r24, r28
    1690:	64 e5       	ldi	r22, 0x54	; 84
    1692:	70 e0       	ldi	r23, 0x00	; 0
    1694:	0e 94 d7 17 	call	0x2fae	; 0x2fae <__udivmodhi4>
    1698:	80 68       	ori	r24, 0x80	; 128


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    169a:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    169c:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    169e:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    16a0:	77 9b       	sbis	0x0e, 7	; 14
    16a2:	fe cf       	rjmp	.-4      	; 0x16a0 <Lcd3310_Char+0x28>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    16a4:	c3 9a       	sbi	0x18, 3	; 24
    if ( (ch < 0x20) ){
        ch = 92;
    }
	
	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    Lcd3310_Send( 0x40 | (Lcd3310_Index / LCD_X_RES), LCD_CMD );
    16a6:	ce 01       	movw	r24, r28
    16a8:	64 e5       	ldi	r22, 0x54	; 84
    16aa:	70 e0       	ldi	r23, 0x00	; 0
    16ac:	0e 94 d7 17 	call	0x2fae	; 0x2fae <__udivmodhi4>
    16b0:	60 64       	ori	r22, 0x40	; 64


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    16b2:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    16b4:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    16b6:	6f b9       	out	0x0f, r22	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    16b8:	77 9b       	sbis	0x0e, 7	; 14
    16ba:	fe cf       	rjmp	.-4      	; 0x16b8 <Lcd3310_Char+0x40>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    16bc:	c3 9a       	sbi	0x18, 3	; 24
	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    Lcd3310_Send( 0x40 | (Lcd3310_Index / LCD_X_RES), LCD_CMD );
	
	for (char i = 0; i < 5; i++ ){		
		char temp;
		PGM_GET_BYTE_FROM_FONTLOOKUP(temp, ch, i );
    16be:	85 e0       	ldi	r24, 0x05	; 5
    16c0:	28 9f       	mul	r18, r24
    16c2:	c0 01       	movw	r24, r0
    16c4:	11 24       	eor	r1, r1
    16c6:	fc 01       	movw	r30, r24
    16c8:	ec 54       	subi	r30, 0x4C	; 76
    16ca:	f0 40       	sbci	r31, 0x00	; 0
    }
	
	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    Lcd3310_Send( 0x40 | (Lcd3310_Index / LCD_X_RES), LCD_CMD );
	
	for (char i = 0; i < 5; i++ ){		
    16cc:	87 54       	subi	r24, 0x47	; 71
    16ce:	90 40       	sbci	r25, 0x00	; 0
		char temp;
		PGM_GET_BYTE_FROM_FONTLOOKUP(temp, ch, i );
    16d0:	24 91       	lpm	r18, Z+
    16d2:	22 0f       	add	r18, r18
		if(is_invert_colors) temp = (unsigned char) ~temp;
    16d4:	31 11       	cpse	r19, r1
    16d6:	20 95       	com	r18


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    16d8:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    16da:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    16dc:	2f b9       	out	0x0f, r18	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    16de:	77 9b       	sbis	0x0e, 7	; 14
    16e0:	fe cf       	rjmp	.-4      	; 0x16de <Lcd3310_Char+0x66>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    16e2:	c3 9a       	sbi	0x18, 3	; 24
    16e4:	31 96       	adiw	r30, 0x01	; 1
    }
	
	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    Lcd3310_Send( 0x40 | (Lcd3310_Index / LCD_X_RES), LCD_CMD );
	
	for (char i = 0; i < 5; i++ ){		
    16e6:	e8 17       	cp	r30, r24
    16e8:	f9 07       	cpc	r31, r25
    16ea:	91 f7       	brne	.-28     	; 0x16d0 <Lcd3310_Char+0x58>
		char temp;
		PGM_GET_BYTE_FROM_FONTLOOKUP(temp, ch, i );
		if(is_invert_colors) temp = (unsigned char) ~temp;
	    Lcd3310_Send( temp, LCD_DATA );
    }
	if(is_invert_colors) Lcd3310_Send( 0xff, LCD_DATA );
    16ec:	33 23       	and	r19, r19
    16ee:	39 f0       	breq	.+14     	; 0x16fe <Lcd3310_Char+0x86>


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    16f0:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    16f2:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    16f4:	8f ef       	ldi	r24, 0xFF	; 255
    16f6:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    16f8:	77 9b       	sbis	0x0e, 7	; 14
    16fa:	fe cf       	rjmp	.-4      	; 0x16f8 <Lcd3310_Char+0x80>
    16fc:	05 c0       	rjmp	.+10     	; 0x1708 <Lcd3310_Char+0x90>


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    16fe:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    1700:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    1702:	1f b8       	out	0x0f, r1	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1704:	77 9b       	sbis	0x0e, 7	; 14
    1706:	fe cf       	rjmp	.-4      	; 0x1704 <Lcd3310_Char+0x8c>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1708:	c3 9a       	sbi	0x18, 3	; 24
		if(is_invert_colors) temp = (unsigned char) ~temp;
	    Lcd3310_Send( temp, LCD_DATA );
    }
	if(is_invert_colors) Lcd3310_Send( 0xff, LCD_DATA );
	else Lcd3310_Send( 0x00, LCD_DATA );
	Lcd3310_Index += 6;
    170a:	26 96       	adiw	r28, 0x06	; 6
    170c:	d0 93 76 03 	sts	0x0376, r29
    1710:	c0 93 75 03 	sts	0x0375, r28
}
    1714:	df 91       	pop	r29
    1716:	cf 91       	pop	r28
    1718:	08 95       	ret

0000171a <Lcd3310_String_P>:

void Lcd3310_String_P(PGM_P str_ptr, WhiteOrBlackText is_invert_colors)
{
    171a:	0f 93       	push	r16
    171c:	1f 93       	push	r17
    171e:	cf 93       	push	r28
    1720:	df 93       	push	r29
    1722:	08 2f       	mov	r16, r24
    1724:	16 2f       	mov	r17, r22
    1726:	28 2f       	mov	r18, r24
    1728:	39 2f       	mov	r19, r25
    172a:	e9 01       	movw	r28, r18
    172c:	04 c0       	rjmp	.+8      	; 0x1736 <Lcd3310_String_P+0x1c>
	char count = 0;
    while ( *str_ptr ){
		count++;
        Lcd3310_Char( *(str_ptr++), is_invert_colors );
    172e:	21 96       	adiw	r28, 0x01	; 1
    1730:	61 2f       	mov	r22, r17
    1732:	0e 94 3c 0b 	call	0x1678	; 0x1678 <Lcd3310_Char>
    1736:	9e 01       	movw	r18, r28
    1738:	20 1b       	sub	r18, r16
    173a:	92 2f       	mov	r25, r18
}

void Lcd3310_String_P(PGM_P str_ptr, WhiteOrBlackText is_invert_colors)
{
	char count = 0;
    while ( *str_ptr ){
    173c:	88 81       	ld	r24, Y
    173e:	88 23       	and	r24, r24
    1740:	b1 f7       	brne	.-20     	; 0x172e <Lcd3310_String_P+0x14>
		count++;
        Lcd3310_Char( *(str_ptr++), is_invert_colors );
    }
	if(is_invert_colors && count > 0 && count < 14){
    1742:	11 23       	and	r17, r17
    1744:	b9 f0       	breq	.+46     	; 0x1774 <Lcd3310_String_P+0x5a>
    1746:	22 23       	and	r18, r18
    1748:	a9 f0       	breq	.+42     	; 0x1774 <Lcd3310_String_P+0x5a>
    174a:	2e 30       	cpi	r18, 0x0E	; 14
    174c:	98 f4       	brcc	.+38     	; 0x1774 <Lcd3310_String_P+0x5a>
		for(count = (14 - count) * 6; count > 0; count--){
    174e:	2e e0       	ldi	r18, 0x0E	; 14
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	29 1b       	sub	r18, r25
    1754:	31 09       	sbc	r19, r1
    1756:	c9 01       	movw	r24, r18
    1758:	88 0f       	add	r24, r24
    175a:	99 1f       	adc	r25, r25
    175c:	82 0f       	add	r24, r18
    175e:	93 1f       	adc	r25, r19
    1760:	88 0f       	add	r24, r24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    1762:	9f ef       	ldi	r25, 0xFF	; 255


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1764:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    1766:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    1768:	9f b9       	out	0x0f, r25	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    176a:	77 9b       	sbis	0x0e, 7	; 14
    176c:	fe cf       	rjmp	.-4      	; 0x176a <Lcd3310_String_P+0x50>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    176e:	c3 9a       	sbi	0x18, 3	; 24
    while ( *str_ptr ){
		count++;
        Lcd3310_Char( *(str_ptr++), is_invert_colors );
    }
	if(is_invert_colors && count > 0 && count < 14){
		for(count = (14 - count) * 6; count > 0; count--){
    1770:	81 50       	subi	r24, 0x01	; 1
    1772:	c1 f7       	brne	.-16     	; 0x1764 <Lcd3310_String_P+0x4a>
			Lcd3310_Send( 0xff, LCD_DATA );
		}
	}
}
    1774:	df 91       	pop	r29
    1776:	cf 91       	pop	r28
    1778:	1f 91       	pop	r17
    177a:	0f 91       	pop	r16
    177c:	08 95       	ret

0000177e <Lcd3310_String_P_Anime>:

#ifdef ANIMATION_SWITCH_MENU_ITEMS
void Lcd3310_String_P_Anime(PGM_P str_ptr, PGM_P str_ptr_next, WhiteOrBlackText is_invert_colors, char num_of_cadr, char is_next)
{
    177e:	2f 92       	push	r2
    1780:	3f 92       	push	r3
    1782:	4f 92       	push	r4
    1784:	5f 92       	push	r5
    1786:	6f 92       	push	r6
    1788:	7f 92       	push	r7
    178a:	8f 92       	push	r8
    178c:	9f 92       	push	r9
    178e:	af 92       	push	r10
    1790:	bf 92       	push	r11
    1792:	cf 92       	push	r12
    1794:	df 92       	push	r13
    1796:	ef 92       	push	r14
    1798:	ff 92       	push	r15
    179a:	0f 93       	push	r16
    179c:	1f 93       	push	r17
    179e:	cf 93       	push	r28
    17a0:	df 93       	push	r29
    17a2:	5c 01       	movw	r10, r24
    17a4:	6b 01       	movw	r12, r22
    17a6:	74 2e       	mov	r7, r20
    17a8:	60 2e       	mov	r6, r16
	unsigned char ch1 = 1, ch2 = 1, display, temp1, temp2, count = 0;

	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    17aa:	e0 91 75 03 	lds	r30, 0x0375
    17ae:	f0 91 76 03 	lds	r31, 0x0376
    17b2:	cf 01       	movw	r24, r30
    17b4:	64 e5       	ldi	r22, 0x54	; 84
    17b6:	70 e0       	ldi	r23, 0x00	; 0
    17b8:	0e 94 d7 17 	call	0x2fae	; 0x2fae <__udivmodhi4>
    17bc:	80 68       	ori	r24, 0x80	; 128


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    17be:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    17c0:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    17c2:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    17c4:	77 9b       	sbis	0x0e, 7	; 14
    17c6:	fe cf       	rjmp	.-4      	; 0x17c4 <Lcd3310_String_P_Anime+0x46>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    17c8:	c3 9a       	sbi	0x18, 3	; 24
void Lcd3310_String_P_Anime(PGM_P str_ptr, PGM_P str_ptr_next, WhiteOrBlackText is_invert_colors, char num_of_cadr, char is_next)
{
	unsigned char ch1 = 1, ch2 = 1, display, temp1, temp2, count = 0;

	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    Lcd3310_Send( 0x40 | (Lcd3310_Index / LCD_X_RES), LCD_CMD );
    17ca:	cf 01       	movw	r24, r30
    17cc:	64 e5       	ldi	r22, 0x54	; 84
    17ce:	70 e0       	ldi	r23, 0x00	; 0
    17d0:	0e 94 d7 17 	call	0x2fae	; 0x2fae <__udivmodhi4>
    17d4:	60 64       	ori	r22, 0x40	; 64


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    17d6:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    17d8:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    17da:	6f b9       	out	0x0f, r22	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    17dc:	77 9b       	sbis	0x0e, 7	; 14
    17de:	fe cf       	rjmp	.-4      	; 0x17dc <Lcd3310_String_P_Anime+0x5e>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    17e0:	c3 9a       	sbi	0x18, 3	; 24
	
	while ( ch1 || ch2 ){
		count++;
		if(*str_ptr) ch1 = *(str_ptr++);
		else ch1 = 0x00;
		if(str_ptr == &set_measure_delay.str[count] && count == 10){
    17e2:	40 90 b4 01 	lds	r4, 0x01B4
    17e6:	50 90 b5 01 	lds	r5, 0x01B5
			ch1 = measure_delay + 0x30;
    17ea:	80 90 06 01 	lds	r8, 0x0106
    17ee:	80 e3       	ldi	r24, 0x30	; 48
    17f0:	88 0e       	add	r8, r24
    17f2:	40 e0       	ldi	r20, 0x00	; 0

		for (char i = 0; i < 5; i++ ){		
			if(ch1) PGM_GET_BYTE_FROM_FONTLOOKUP(temp1, ch1, i )
			else temp1 = 0x00;

			if(ch2) PGM_GET_BYTE_FROM_FONTLOOKUP(temp2, ch2, i )
    17f4:	65 e0       	ldi	r22, 0x05	; 5
    17f6:	36 2e       	mov	r3, r22
    17f8:	e2 2e       	mov	r14, r18
    17fa:	ff 24       	eor	r15, r15
			else temp2 = 0x00;

			if(is_next) display = (temp1 >> num_of_cadr) | ( (temp2 << (8 - num_of_cadr)) );
			else 		display = (temp1 << num_of_cadr) | ( (temp2 >> (8 - num_of_cadr)) );
    17fc:	08 e0       	ldi	r16, 0x08	; 8
    17fe:	10 e0       	ldi	r17, 0x00	; 0
    1800:	0e 19       	sub	r16, r14
    1802:	1f 09       	sbc	r17, r15
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    1804:	22 24       	eor	r2, r2
    1806:	2a 94       	dec	r2

	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    Lcd3310_Send( 0x40 | (Lcd3310_Index / LCD_X_RES), LCD_CMD );
	
	while ( ch1 || ch2 ){
		count++;
    1808:	4f 5f       	subi	r20, 0xFF	; 255
		if(*str_ptr) ch1 = *(str_ptr++);
    180a:	f5 01       	movw	r30, r10
    180c:	90 80       	ld	r9, Z
    180e:	99 20       	and	r9, r9
    1810:	19 f0       	breq	.+6      	; 0x1818 <Lcd3310_String_P_Anime+0x9a>
    1812:	08 94       	sec
    1814:	a1 1c       	adc	r10, r1
    1816:	b1 1c       	adc	r11, r1
		else ch1 = 0x00;
		if(str_ptr == &set_measure_delay.str[count] && count == 10){
    1818:	c2 01       	movw	r24, r4
    181a:	84 0f       	add	r24, r20
    181c:	91 1d       	adc	r25, r1
    181e:	a8 16       	cp	r10, r24
    1820:	b9 06       	cpc	r11, r25
    1822:	19 f4       	brne	.+6      	; 0x182a <Lcd3310_String_P_Anime+0xac>
    1824:	4a 30       	cpi	r20, 0x0A	; 10
    1826:	09 f4       	brne	.+2      	; 0x182a <Lcd3310_String_P_Anime+0xac>
    1828:	98 2c       	mov	r9, r8
			ch1 = measure_delay + 0x30;
		}
		
		if(*str_ptr_next) ch2 = *(str_ptr_next++);
    182a:	f6 01       	movw	r30, r12
    182c:	20 81       	ld	r18, Z
    182e:	22 23       	and	r18, r18
    1830:	19 f0       	breq	.+6      	; 0x1838 <Lcd3310_String_P_Anime+0xba>
    1832:	08 94       	sec
    1834:	c1 1c       	adc	r12, r1
    1836:	d1 1c       	adc	r13, r1
		else ch2 = 0x00;
		if(str_ptr_next == &set_measure_delay.str[count] && count == 10){
    1838:	c8 16       	cp	r12, r24
    183a:	d9 06       	cpc	r13, r25
    183c:	19 f4       	brne	.+6      	; 0x1844 <Lcd3310_String_P_Anime+0xc6>
    183e:	4a 30       	cpi	r20, 0x0A	; 10
    1840:	09 f4       	brne	.+2      	; 0x1844 <Lcd3310_String_P_Anime+0xc6>
    1842:	28 2d       	mov	r18, r8

		for (char i = 0; i < 5; i++ ){		
			if(ch1) PGM_GET_BYTE_FROM_FONTLOOKUP(temp1, ch1, i )
			else temp1 = 0x00;

			if(ch2) PGM_GET_BYTE_FROM_FONTLOOKUP(temp2, ch2, i )
    1844:	23 9d       	mul	r18, r3
    1846:	c0 01       	movw	r24, r0
    1848:	11 24       	eor	r1, r1
    184a:	ec 01       	movw	r28, r24
    184c:	cc 54       	subi	r28, 0x4C	; 76
    184e:	d0 40       	sbci	r29, 0x00	; 0
    1850:	93 9c       	mul	r9, r3
    1852:	d0 01       	movw	r26, r0
    1854:	11 24       	eor	r1, r1
    1856:	ac 54       	subi	r26, 0x4C	; 76
    1858:	b0 40       	sbci	r27, 0x00	; 0
		else ch2 = 0x00;
		if(str_ptr_next == &set_measure_delay.str[count] && count == 10){
			ch2 = measure_delay + 0x30;
		}

		for (char i = 0; i < 5; i++ ){		
    185a:	87 54       	subi	r24, 0x47	; 71
    185c:	90 40       	sbci	r25, 0x00	; 0
			if(ch1) PGM_GET_BYTE_FROM_FONTLOOKUP(temp1, ch1, i )
    185e:	99 20       	and	r9, r9
    1860:	11 f4       	brne	.+4      	; 0x1866 <Lcd3310_String_P_Anime+0xe8>
    1862:	50 e0       	ldi	r21, 0x00	; 0
    1864:	03 c0       	rjmp	.+6      	; 0x186c <Lcd3310_String_P_Anime+0xee>
    1866:	fd 01       	movw	r30, r26
    1868:	54 91       	lpm	r21, Z+
    186a:	55 0f       	add	r21, r21
			else temp1 = 0x00;

			if(ch2) PGM_GET_BYTE_FROM_FONTLOOKUP(temp2, ch2, i )
    186c:	22 23       	and	r18, r18
    186e:	11 f4       	brne	.+4      	; 0x1874 <Lcd3310_String_P_Anime+0xf6>
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	03 c0       	rjmp	.+6      	; 0x187a <Lcd3310_String_P_Anime+0xfc>
    1874:	fe 01       	movw	r30, r28
    1876:	34 91       	lpm	r19, Z+
    1878:	33 0f       	add	r19, r19
    187a:	e3 2f       	mov	r30, r19
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	65 2f       	mov	r22, r21
    1880:	70 e0       	ldi	r23, 0x00	; 0
			else temp2 = 0x00;

			if(is_next) display = (temp1 >> num_of_cadr) | ( (temp2 << (8 - num_of_cadr)) );
    1882:	66 20       	and	r6, r6
    1884:	69 f0       	breq	.+26     	; 0x18a0 <Lcd3310_String_P_Anime+0x122>
    1886:	00 2e       	mov	r0, r16
    1888:	02 c0       	rjmp	.+4      	; 0x188e <Lcd3310_String_P_Anime+0x110>
    188a:	ee 0f       	add	r30, r30
    188c:	ff 1f       	adc	r31, r31
    188e:	0a 94       	dec	r0
    1890:	e2 f7       	brpl	.-8      	; 0x188a <Lcd3310_String_P_Anime+0x10c>
    1892:	0e 2c       	mov	r0, r14
    1894:	02 c0       	rjmp	.+4      	; 0x189a <Lcd3310_String_P_Anime+0x11c>
    1896:	75 95       	asr	r23
    1898:	67 95       	ror	r22
    189a:	0a 94       	dec	r0
    189c:	e2 f7       	brpl	.-8      	; 0x1896 <Lcd3310_String_P_Anime+0x118>
    189e:	0c c0       	rjmp	.+24     	; 0x18b8 <Lcd3310_String_P_Anime+0x13a>
			else 		display = (temp1 << num_of_cadr) | ( (temp2 >> (8 - num_of_cadr)) );
    18a0:	00 2e       	mov	r0, r16
    18a2:	02 c0       	rjmp	.+4      	; 0x18a8 <Lcd3310_String_P_Anime+0x12a>
    18a4:	f5 95       	asr	r31
    18a6:	e7 95       	ror	r30
    18a8:	0a 94       	dec	r0
    18aa:	e2 f7       	brpl	.-8      	; 0x18a4 <Lcd3310_String_P_Anime+0x126>
    18ac:	0e 2c       	mov	r0, r14
    18ae:	02 c0       	rjmp	.+4      	; 0x18b4 <Lcd3310_String_P_Anime+0x136>
    18b0:	66 0f       	add	r22, r22
    18b2:	77 1f       	adc	r23, r23
    18b4:	0a 94       	dec	r0
    18b6:	e2 f7       	brpl	.-8      	; 0x18b0 <Lcd3310_String_P_Anime+0x132>
    18b8:	3e 2f       	mov	r19, r30
    18ba:	36 2b       	or	r19, r22
			if(is_invert_colors) display = (unsigned char) ~display;
    18bc:	71 10       	cpse	r7, r1
    18be:	30 95       	com	r19


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    18c0:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    18c2:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    18c4:	3f b9       	out	0x0f, r19	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    18c6:	77 9b       	sbis	0x0e, 7	; 14
    18c8:	fe cf       	rjmp	.-4      	; 0x18c6 <Lcd3310_String_P_Anime+0x148>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    18ca:	c3 9a       	sbi	0x18, 3	; 24
    18cc:	21 96       	adiw	r28, 0x01	; 1
    18ce:	11 96       	adiw	r26, 0x01	; 1
		else ch2 = 0x00;
		if(str_ptr_next == &set_measure_delay.str[count] && count == 10){
			ch2 = measure_delay + 0x30;
		}

		for (char i = 0; i < 5; i++ ){		
    18d0:	c8 17       	cp	r28, r24
    18d2:	d9 07       	cpc	r29, r25
    18d4:	09 f0       	breq	.+2      	; 0x18d8 <Lcd3310_String_P_Anime+0x15a>
    18d6:	c3 cf       	rjmp	.-122    	; 0x185e <Lcd3310_String_P_Anime+0xe0>
			if(is_next) display = (temp1 >> num_of_cadr) | ( (temp2 << (8 - num_of_cadr)) );
			else 		display = (temp1 << num_of_cadr) | ( (temp2 >> (8 - num_of_cadr)) );
			if(is_invert_colors) display = (unsigned char) ~display;
		    Lcd3310_Send( display, LCD_DATA );
	    }
		if(is_invert_colors) Lcd3310_Send( 0xff, LCD_DATA );
    18d8:	77 20       	and	r7, r7
    18da:	31 f0       	breq	.+12     	; 0x18e8 <Lcd3310_String_P_Anime+0x16a>


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    18dc:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    18de:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    18e0:	2f b8       	out	0x0f, r2	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    18e2:	77 9b       	sbis	0x0e, 7	; 14
    18e4:	fe cf       	rjmp	.-4      	; 0x18e2 <Lcd3310_String_P_Anime+0x164>
    18e6:	05 c0       	rjmp	.+10     	; 0x18f2 <Lcd3310_String_P_Anime+0x174>


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    18e8:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    18ea:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    18ec:	1f b8       	out	0x0f, r1	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    18ee:	77 9b       	sbis	0x0e, 7	; 14
    18f0:	fe cf       	rjmp	.-4      	; 0x18ee <Lcd3310_String_P_Anime+0x170>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    18f2:	c3 9a       	sbi	0x18, 3	; 24
	unsigned char ch1 = 1, ch2 = 1, display, temp1, temp2, count = 0;

	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    Lcd3310_Send( 0x40 | (Lcd3310_Index / LCD_X_RES), LCD_CMD );
	
	while ( ch1 || ch2 ){
    18f4:	99 20       	and	r9, r9
    18f6:	09 f0       	breq	.+2      	; 0x18fa <Lcd3310_String_P_Anime+0x17c>
    18f8:	87 cf       	rjmp	.-242    	; 0x1808 <Lcd3310_String_P_Anime+0x8a>
    18fa:	22 23       	and	r18, r18
    18fc:	09 f0       	breq	.+2      	; 0x1900 <Lcd3310_String_P_Anime+0x182>
    18fe:	84 cf       	rjmp	.-248    	; 0x1808 <Lcd3310_String_P_Anime+0x8a>
		    Lcd3310_Send( display, LCD_DATA );
	    }
		if(is_invert_colors) Lcd3310_Send( 0xff, LCD_DATA );
		else Lcd3310_Send( 0x00, LCD_DATA );
	}
	if(is_invert_colors && (count < 14)){
    1900:	77 20       	and	r7, r7
    1902:	a9 f0       	breq	.+42     	; 0x192e <Lcd3310_String_P_Anime+0x1b0>
    1904:	4e 30       	cpi	r20, 0x0E	; 14
    1906:	98 f4       	brcc	.+38     	; 0x192e <Lcd3310_String_P_Anime+0x1b0>
		for(count = (14 - count) * 6; count > 0; count--){
    1908:	2e e0       	ldi	r18, 0x0E	; 14
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	24 1b       	sub	r18, r20
    190e:	31 09       	sbc	r19, r1
    1910:	c9 01       	movw	r24, r18
    1912:	88 0f       	add	r24, r24
    1914:	99 1f       	adc	r25, r25
    1916:	82 0f       	add	r24, r18
    1918:	93 1f       	adc	r25, r19
    191a:	88 0f       	add	r24, r24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    191c:	9f ef       	ldi	r25, 0xFF	; 255


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    191e:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    1920:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    1922:	9f b9       	out	0x0f, r25	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1924:	77 9b       	sbis	0x0e, 7	; 14
    1926:	fe cf       	rjmp	.-4      	; 0x1924 <Lcd3310_String_P_Anime+0x1a6>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1928:	c3 9a       	sbi	0x18, 3	; 24
	    }
		if(is_invert_colors) Lcd3310_Send( 0xff, LCD_DATA );
		else Lcd3310_Send( 0x00, LCD_DATA );
	}
	if(is_invert_colors && (count < 14)){
		for(count = (14 - count) * 6; count > 0; count--){
    192a:	81 50       	subi	r24, 0x01	; 1
    192c:	c1 f7       	brne	.-16     	; 0x191e <Lcd3310_String_P_Anime+0x1a0>
			Lcd3310_Send( 0xff, LCD_DATA );
		}
	}
}
    192e:	df 91       	pop	r29
    1930:	cf 91       	pop	r28
    1932:	1f 91       	pop	r17
    1934:	0f 91       	pop	r16
    1936:	ff 90       	pop	r15
    1938:	ef 90       	pop	r14
    193a:	df 90       	pop	r13
    193c:	cf 90       	pop	r12
    193e:	bf 90       	pop	r11
    1940:	af 90       	pop	r10
    1942:	9f 90       	pop	r9
    1944:	8f 90       	pop	r8
    1946:	7f 90       	pop	r7
    1948:	6f 90       	pop	r6
    194a:	5f 90       	pop	r5
    194c:	4f 90       	pop	r4
    194e:	3f 90       	pop	r3
    1950:	2f 90       	pop	r2
    1952:	08 95       	ret

00001954 <Lcd3310_GotoXY>:
#endif

void Lcd3310_GotoXY(uint16_t x, uint16_t y)
{
    Lcd3310_Index = (uint16_t)x * 6 + (uint16_t)y * 84;
    1954:	24 e5       	ldi	r18, 0x54	; 84
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	62 9f       	mul	r22, r18
    195a:	a0 01       	movw	r20, r0
    195c:	63 9f       	mul	r22, r19
    195e:	50 0d       	add	r21, r0
    1960:	72 9f       	mul	r23, r18
    1962:	50 0d       	add	r21, r0
    1964:	11 24       	eor	r1, r1
    1966:	9c 01       	movw	r18, r24
    1968:	22 0f       	add	r18, r18
    196a:	33 1f       	adc	r19, r19
    196c:	28 0f       	add	r18, r24
    196e:	39 1f       	adc	r19, r25
    1970:	22 0f       	add	r18, r18
    1972:	33 1f       	adc	r19, r19
    1974:	42 0f       	add	r20, r18
    1976:	53 1f       	adc	r21, r19
    1978:	50 93 76 03 	sts	0x0376, r21
    197c:	40 93 75 03 	sts	0x0375, r20
}
    1980:	08 95       	ret

00001982 <Lcd3310_ClearCenter>:


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1982:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    1984:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    1986:	80 e8       	ldi	r24, 0x80	; 128
    1988:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    198a:	77 9b       	sbis	0x0e, 7	; 14
    198c:	fe cf       	rjmp	.-4      	; 0x198a <Lcd3310_ClearCenter+0x8>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    198e:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1990:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    1992:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    1994:	81 e4       	ldi	r24, 0x41	; 65
    1996:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1998:	77 9b       	sbis	0x0e, 7	; 14
    199a:	fe cf       	rjmp	.-4      	; 0x1998 <Lcd3310_ClearCenter+0x16>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    199c:	c3 9a       	sbi	0x18, 3	; 24
    199e:	80 e0       	ldi	r24, 0x00	; 0
    19a0:	90 e0       	ldi	r25, 0x00	; 0


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    19a2:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    19a4:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    19a6:	1f b8       	out	0x0f, r1	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    19a8:	77 9b       	sbis	0x0e, 7	; 14
    19aa:	fe cf       	rjmp	.-4      	; 0x19a8 <Lcd3310_ClearCenter+0x26>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    19ac:	c3 9a       	sbi	0x18, 3	; 24
void Lcd3310_ClearCenter(void)
{
#ifdef LCD_IMAGES //  clear only center lines
	Lcd3310_Send( 0x80 | (84 % LCD_X_RES), LCD_CMD );
    Lcd3310_Send( 0x40 | (84 / LCD_X_RES), LCD_CMD );
	for(uint16_t i=0; i < LCD_CENTER_RES; i++){
    19ae:	01 96       	adiw	r24, 0x01	; 1
    19b0:	21 e0       	ldi	r18, 0x01	; 1
    19b2:	84 3a       	cpi	r24, 0xA4	; 164
    19b4:	92 07       	cpc	r25, r18
    19b6:	a9 f7       	brne	.-22     	; 0x19a2 <Lcd3310_ClearCenter+0x20>
	Lcd3310_Send( 0x40, LCD_CMD );
	for(uint16_t i=0; i < LCD_XY_RES; i++){
		Lcd3310_Send( 0x00, LCD_DATA );
	}
#endif
}
    19b8:	08 95       	ret

000019ba <Lcd3310_InitFill>:


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    19ba:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    19bc:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    19be:	80 e8       	ldi	r24, 0x80	; 128
    19c0:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    19c2:	77 9b       	sbis	0x0e, 7	; 14
    19c4:	fe cf       	rjmp	.-4      	; 0x19c2 <Lcd3310_InitFill+0x8>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    19c6:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    19c8:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    19ca:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    19cc:	80 e4       	ldi	r24, 0x40	; 64
    19ce:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    19d0:	77 9b       	sbis	0x0e, 7	; 14
    19d2:	fe cf       	rjmp	.-4      	; 0x19d0 <Lcd3310_InitFill+0x16>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    19d4:	c3 9a       	sbi	0x18, 3	; 24
    19d6:	eb e1       	ldi	r30, 0x1B	; 27
    19d8:	f2 e0       	ldi	r31, 0x02	; 2
	// Goto (0, 0) of display
	Lcd3310_Send( 0x80, LCD_CMD );
    Lcd3310_Send( 0x40, LCD_CMD );

	for (int i = 0; i < 84; i++ ){
        Lcd3310_Send( pgm_read_byte( LcdImage_Upper + i ), LCD_DATA );
    19da:	84 91       	lpm	r24, Z+


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    19dc:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    19de:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    19e0:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    19e2:	77 9b       	sbis	0x0e, 7	; 14
    19e4:	fe cf       	rjmp	.-4      	; 0x19e2 <Lcd3310_InitFill+0x28>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    19e6:	c3 9a       	sbi	0x18, 3	; 24
    19e8:	31 96       	adiw	r30, 0x01	; 1
#ifdef LCD_IMAGES
	// Goto (0, 0) of display
	Lcd3310_Send( 0x80, LCD_CMD );
    Lcd3310_Send( 0x40, LCD_CMD );

	for (int i = 0; i < 84; i++ ){
    19ea:	82 e0       	ldi	r24, 0x02	; 2
    19ec:	ef 36       	cpi	r30, 0x6F	; 111
    19ee:	f8 07       	cpc	r31, r24
    19f0:	a1 f7       	brne	.-24     	; 0x19da <Lcd3310_InitFill+0x20>
    19f2:	ef e6       	ldi	r30, 0x6F	; 111
    19f4:	f2 e0       	ldi	r31, 0x02	; 2
        Lcd3310_Send( pgm_read_byte( LcdImage_Upper + i ), LCD_DATA );
    }	
	for (uint16_t i=0; i < LCD_CENTER_RES; i++ ){
        Lcd3310_Send( pgm_read_byte( LcdImage_Center + i), LCD_DATA );
    19f6:	84 91       	lpm	r24, Z+


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    19f8:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    19fa:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    19fc:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    19fe:	77 9b       	sbis	0x0e, 7	; 14
    1a00:	fe cf       	rjmp	.-4      	; 0x19fe <Lcd3310_InitFill+0x44>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1a02:	c3 9a       	sbi	0x18, 3	; 24
    1a04:	31 96       	adiw	r30, 0x01	; 1
    Lcd3310_Send( 0x40, LCD_CMD );

	for (int i = 0; i < 84; i++ ){
        Lcd3310_Send( pgm_read_byte( LcdImage_Upper + i ), LCD_DATA );
    }	
	for (uint16_t i=0; i < LCD_CENTER_RES; i++ ){
    1a06:	84 e0       	ldi	r24, 0x04	; 4
    1a08:	e3 31       	cpi	r30, 0x13	; 19
    1a0a:	f8 07       	cpc	r31, r24
    1a0c:	a1 f7       	brne	.-24     	; 0x19f6 <Lcd3310_InitFill+0x3c>
    1a0e:	ef eb       	ldi	r30, 0xBF	; 191
    1a10:	f3 e0       	ldi	r31, 0x03	; 3
        Lcd3310_Send( pgm_read_byte( LcdImage_Center + i), LCD_DATA );
	}
    for (int i = 0; i < 84; i++ ){
        Lcd3310_Send( pgm_read_byte( LcdImage_brunql_gmail_com + i), LCD_DATA );
    1a12:	84 91       	lpm	r24, Z+


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1a14:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    1a16:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
    1a18:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1a1a:	77 9b       	sbis	0x0e, 7	; 14
    1a1c:	fe cf       	rjmp	.-4      	; 0x1a1a <Lcd3310_InitFill+0x60>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1a1e:	c3 9a       	sbi	0x18, 3	; 24
    1a20:	31 96       	adiw	r30, 0x01	; 1
        Lcd3310_Send( pgm_read_byte( LcdImage_Upper + i ), LCD_DATA );
    }	
	for (uint16_t i=0; i < LCD_CENTER_RES; i++ ){
        Lcd3310_Send( pgm_read_byte( LcdImage_Center + i), LCD_DATA );
	}
    for (int i = 0; i < 84; i++ ){
    1a22:	84 e0       	ldi	r24, 0x04	; 4
    1a24:	e3 31       	cpi	r30, 0x13	; 19
    1a26:	f8 07       	cpc	r31, r24
    1a28:	a1 f7       	brne	.-24     	; 0x1a12 <Lcd3310_InitFill+0x58>
        Lcd3310_Send( pgm_read_byte( LcdImage_brunql_gmail_com + i), LCD_DATA );
    }
#else
    Lcd3310_ClearCenter();
#endif
}
    1a2a:	08 95       	ret

00001a2c <Lcd3310_Init>:
void Lcd3310_InitFill (void);



void Lcd3310_Init(uint16_t show_init_data_delay_ms)
{
    1a2c:	af 92       	push	r10
    1a2e:	bf 92       	push	r11
    1a30:	cf 92       	push	r12
    1a32:	df 92       	push	r13
    1a34:	ef 92       	push	r14
    1a36:	ff 92       	push	r15
    1a38:	0f 93       	push	r16
    1a3a:	1f 93       	push	r17
    1a3c:	8c 01       	movw	r16, r24
	//  Pull-up on reset pin.
    PORTB |= LCD_RST_PIN;
    1a3e:	c2 9a       	sbi	0x18, 2	; 24

    //  Set output bits on port B.
    DDRB |= LCD_RST_PIN | LCD_DC_PIN | LCD_CE_PIN | SPI_MOSI_PIN | SPI_CLK_PIN;
    1a40:	87 b3       	in	r24, 0x17	; 23
    1a42:	8c 6b       	ori	r24, 0xBC	; 188
    1a44:	87 bb       	out	0x17, r24	; 23
    1a46:	84 ef       	ldi	r24, 0xF4	; 244
    1a48:	91 e0       	ldi	r25, 0x01	; 1
    1a4a:	20 e9       	ldi	r18, 0x90	; 144
    1a4c:	31 e0       	ldi	r19, 0x01	; 1
    1a4e:	f9 01       	movw	r30, r18
    1a50:	31 97       	sbiw	r30, 0x01	; 1
    1a52:	f1 f7       	brne	.-4      	; 0x1a50 <Lcd3310_Init+0x24>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a54:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a56:	d9 f7       	brne	.-10     	; 0x1a4e <Lcd3310_Init+0x22>

    _delay_ms(50);

    //  Toggle display reset pin.
    PORTB &= (unsigned char)~LCD_RST_PIN;
    1a58:	c2 98       	cbi	0x18, 2	; 24
    1a5a:	80 ea       	ldi	r24, 0xA0	; 160
    1a5c:	9f e0       	ldi	r25, 0x0F	; 15
    1a5e:	01 97       	sbiw	r24, 0x01	; 1
    1a60:	f1 f7       	brne	.-4      	; 0x1a5e <Lcd3310_Init+0x32>
    _delay_ms(1);
    PORTB |= LCD_RST_PIN;
    1a62:	c2 9a       	sbi	0x18, 2	; 24

    //  Enable SPI port: No interrupt, MSBit first, Master mode, CPOL->0, CPHA->0, Clk/4
    SPCR = 0x50;
    1a64:	80 e5       	ldi	r24, 0x50	; 80
    1a66:	8d b9       	out	0x0d, r24	; 13

    //  Disable LCD controller
    PORTB |= LCD_CE_PIN;
    1a68:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1a6a:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    1a6c:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    1a6e:	81 e2       	ldi	r24, 0x21	; 33
    1a70:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1a72:	77 9b       	sbis	0x0e, 7	; 14
    1a74:	fe cf       	rjmp	.-4      	; 0x1a72 <Lcd3310_Init+0x46>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1a76:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1a78:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    1a7a:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    1a7c:	88 ec       	ldi	r24, 0xC8	; 200
    1a7e:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1a80:	77 9b       	sbis	0x0e, 7	; 14
    1a82:	fe cf       	rjmp	.-4      	; 0x1a80 <Lcd3310_Init+0x54>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1a84:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1a86:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    1a88:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    1a8a:	86 e0       	ldi	r24, 0x06	; 6
    1a8c:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1a8e:	77 9b       	sbis	0x0e, 7	; 14
    1a90:	fe cf       	rjmp	.-4      	; 0x1a8e <Lcd3310_Init+0x62>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1a92:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1a94:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    1a96:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    1a98:	83 e1       	ldi	r24, 0x13	; 19
    1a9a:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1a9c:	77 9b       	sbis	0x0e, 7	; 14
    1a9e:	fe cf       	rjmp	.-4      	; 0x1a9c <Lcd3310_Init+0x70>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1aa0:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1aa2:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    1aa4:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    1aa6:	80 e2       	ldi	r24, 0x20	; 32
    1aa8:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1aaa:	77 9b       	sbis	0x0e, 7	; 14
    1aac:	fe cf       	rjmp	.-4      	; 0x1aaa <Lcd3310_Init+0x7e>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1aae:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1ab0:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    1ab2:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    1ab4:	8c e0       	ldi	r24, 0x0C	; 12
    1ab6:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1ab8:	77 9b       	sbis	0x0e, 7	; 14
    1aba:	fe cf       	rjmp	.-4      	; 0x1ab8 <Lcd3310_Init+0x8c>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1abc:	c3 9a       	sbi	0x18, 3	; 24
    Lcd3310_Send( 0x06, LCD_CMD );  // Set Temp coefficent.
    Lcd3310_Send( 0x13, LCD_CMD );  // LCD bias mode 1:48.
    Lcd3310_Send( 0x20, LCD_CMD );  // LCD Standard Commands, Horizontal addressing mode.
    Lcd3310_Send( 0x0C, LCD_CMD );  // LCD in normal mode.

	Lcd3310_InitFill();
    1abe:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <Lcd3310_InitFill>


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1ac2:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    1ac4:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    1ac6:	81 e2       	ldi	r24, 0x21	; 33
    1ac8:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1aca:	77 9b       	sbis	0x0e, 7	; 14
    1acc:	fe cf       	rjmp	.-4      	; 0x1aca <Lcd3310_Init+0x9e>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1ace:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1ad0:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    1ad2:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    1ad4:	8e e9       	ldi	r24, 0x9E	; 158
    1ad6:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1ad8:	77 9b       	sbis	0x0e, 7	; 14
    1ada:	fe cf       	rjmp	.-4      	; 0x1ad8 <Lcd3310_Init+0xac>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1adc:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1ade:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    1ae0:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    1ae2:	80 e2       	ldi	r24, 0x20	; 32
    1ae4:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1ae6:	77 9b       	sbis	0x0e, 7	; 14
    1ae8:	fe cf       	rjmp	.-4      	; 0x1ae6 <Lcd3310_Init+0xba>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1aea:	c3 9a       	sbi	0x18, 3	; 24
    Lcd3310_Send( 0x80 | LCD_CONTRAST, LCD_CMD );

    //  LCD Standard Commands, horizontal addressing mode.
    Lcd3310_Send( 0x20, LCD_CMD );

	_delay_ms(show_init_data_delay_ms); // show image from LcdCache initial value
    1aec:	b8 01       	movw	r22, r16
    1aee:	80 e0       	ldi	r24, 0x00	; 0
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	0e 94 08 15 	call	0x2a10	; 0x2a10 <__floatunsisf>
    1af6:	5b 01       	movw	r10, r22
    1af8:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1afa:	20 e0       	ldi	r18, 0x00	; 0
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	4a e7       	ldi	r20, 0x7A	; 122
    1b00:	55 e4       	ldi	r21, 0x45	; 69
    1b02:	0e 94 20 12 	call	0x2440	; 0x2440 <__mulsf3>
    1b06:	7b 01       	movw	r14, r22
    1b08:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    1b0a:	20 e0       	ldi	r18, 0x00	; 0
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	40 e8       	ldi	r20, 0x80	; 128
    1b10:	5f e3       	ldi	r21, 0x3F	; 63
    1b12:	0e 94 26 14 	call	0x284c	; 0x284c <__ltsf2>
    1b16:	88 23       	and	r24, r24
    1b18:	1c f4       	brge	.+6      	; 0x1b20 <Lcd3310_Init+0xf4>
    1b1a:	61 e0       	ldi	r22, 0x01	; 1
    1b1c:	70 e0       	ldi	r23, 0x00	; 0
    1b1e:	24 c0       	rjmp	.+72     	; 0x1b68 <Lcd3310_Init+0x13c>
		__ticks = 1;
	else if (__tmp > 65535)
    1b20:	c8 01       	movw	r24, r16
    1b22:	b7 01       	movw	r22, r14
    1b24:	20 e0       	ldi	r18, 0x00	; 0
    1b26:	3f ef       	ldi	r19, 0xFF	; 255
    1b28:	4f e7       	ldi	r20, 0x7F	; 127
    1b2a:	57 e4       	ldi	r21, 0x47	; 71
    1b2c:	0e 94 c6 13 	call	0x278c	; 0x278c <__gtsf2>
    1b30:	18 16       	cp	r1, r24
    1b32:	b4 f4       	brge	.+44     	; 0x1b60 <Lcd3310_Init+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b34:	c6 01       	movw	r24, r12
    1b36:	b5 01       	movw	r22, r10
    1b38:	20 e0       	ldi	r18, 0x00	; 0
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	40 e2       	ldi	r20, 0x20	; 32
    1b3e:	51 e4       	ldi	r21, 0x41	; 65
    1b40:	0e 94 20 12 	call	0x2440	; 0x2440 <__mulsf3>
    1b44:	0e 94 4a 10 	call	0x2094	; 0x2094 <__fixunssfsi>
    1b48:	80 e9       	ldi	r24, 0x90	; 144
    1b4a:	91 e0       	ldi	r25, 0x01	; 1
    1b4c:	05 c0       	rjmp	.+10     	; 0x1b58 <Lcd3310_Init+0x12c>
    1b4e:	fc 01       	movw	r30, r24
    1b50:	31 97       	sbiw	r30, 0x01	; 1
    1b52:	f1 f7       	brne	.-4      	; 0x1b50 <Lcd3310_Init+0x124>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b54:	61 50       	subi	r22, 0x01	; 1
    1b56:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b58:	61 15       	cp	r22, r1
    1b5a:	71 05       	cpc	r23, r1
    1b5c:	c1 f7       	brne	.-16     	; 0x1b4e <Lcd3310_Init+0x122>
    1b5e:	07 c0       	rjmp	.+14     	; 0x1b6e <Lcd3310_Init+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b60:	c8 01       	movw	r24, r16
    1b62:	b7 01       	movw	r22, r14
    1b64:	0e 94 4a 10 	call	0x2094	; 0x2094 <__fixunssfsi>
    1b68:	cb 01       	movw	r24, r22
    1b6a:	01 97       	sbiw	r24, 0x01	; 1
    1b6c:	f1 f7       	brne	.-4      	; 0x1b6a <Lcd3310_Init+0x13e>
}
    1b6e:	1f 91       	pop	r17
    1b70:	0f 91       	pop	r16
    1b72:	ff 90       	pop	r15
    1b74:	ef 90       	pop	r14
    1b76:	df 90       	pop	r13
    1b78:	cf 90       	pop	r12
    1b7a:	bf 90       	pop	r11
    1b7c:	af 90       	pop	r10
    1b7e:	08 95       	ret

00001b80 <Lcd3310_Send>:


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
    1b80:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    1b82:	61 30       	cpi	r22, 0x01	; 1
    1b84:	11 f4       	brne	.+4      	; 0x1b8a <Lcd3310_Send+0xa>
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    1b86:	c4 9a       	sbi	0x18, 4	; 24
    1b88:	01 c0       	rjmp	.+2      	; 0x1b8c <Lcd3310_Send+0xc>
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    1b8a:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
    1b8c:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
    1b8e:	77 9b       	sbis	0x0e, 7	; 14
    1b90:	fe cf       	rjmp	.-4      	; 0x1b8e <Lcd3310_Send+0xe>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
    1b92:	c3 9a       	sbi	0x18, 3	; 24
}
    1b94:	08 95       	ret

00001b96 <Lcd3310_UInt16AsText>:
	}
	Lcd3310_Char( ' ', is_invert_colors );
}

void Lcd3310_UInt16AsText(uint16_t i, WhiteOrBlackText is_invert_colors)
{
    1b96:	1f 93       	push	r17
    1b98:	16 2f       	mov	r17, r22
	UInt16ToString( i );
    1b9a:	0e 94 ef 0a 	call	0x15de	; 0x15de <UInt16ToString>
	// show three numbers and space
	for(uint8_t count=0; count < 4; count++){ // 4 chars
			Lcd3310_Char( to_string_result[count], is_invert_colors );
    1b9e:	80 91 71 03 	lds	r24, 0x0371
    1ba2:	61 2f       	mov	r22, r17
    1ba4:	0e 94 3c 0b 	call	0x1678	; 0x1678 <Lcd3310_Char>
    1ba8:	80 91 72 03 	lds	r24, 0x0372
    1bac:	61 2f       	mov	r22, r17
    1bae:	0e 94 3c 0b 	call	0x1678	; 0x1678 <Lcd3310_Char>
    1bb2:	80 91 73 03 	lds	r24, 0x0373
    1bb6:	61 2f       	mov	r22, r17
    1bb8:	0e 94 3c 0b 	call	0x1678	; 0x1678 <Lcd3310_Char>
    1bbc:	80 91 74 03 	lds	r24, 0x0374
    1bc0:	61 2f       	mov	r22, r17
    1bc2:	0e 94 3c 0b 	call	0x1678	; 0x1678 <Lcd3310_Char>
	}
	Lcd3310_Char( ' ', is_invert_colors );
    1bc6:	80 e2       	ldi	r24, 0x20	; 32
    1bc8:	61 2f       	mov	r22, r17
    1bca:	0e 94 3c 0b 	call	0x1678	; 0x1678 <Lcd3310_Char>
}
    1bce:	1f 91       	pop	r17
    1bd0:	08 95       	ret

00001bd2 <Lcd3310_UInt16AsText_3Chars>:
		Lcd3310_Char( to_string_result[count], is_invert_colors );
	}
}

void Lcd3310_UInt16AsText_3Chars(uint16_t i, WhiteOrBlackText is_invert_colors)
{
    1bd2:	1f 93       	push	r17
    1bd4:	16 2f       	mov	r17, r22
	UInt16ToString( i );
    1bd6:	0e 94 ef 0a 	call	0x15de	; 0x15de <UInt16ToString>
	// show three numbers and space
	for(uint8_t count=1; count < 4; count++){ // 0x03ff - max value, show only '3ff'
			Lcd3310_Char( to_string_result[count], is_invert_colors );
    1bda:	80 91 72 03 	lds	r24, 0x0372
    1bde:	61 2f       	mov	r22, r17
    1be0:	0e 94 3c 0b 	call	0x1678	; 0x1678 <Lcd3310_Char>
    1be4:	80 91 73 03 	lds	r24, 0x0373
    1be8:	61 2f       	mov	r22, r17
    1bea:	0e 94 3c 0b 	call	0x1678	; 0x1678 <Lcd3310_Char>
    1bee:	80 91 74 03 	lds	r24, 0x0374
    1bf2:	61 2f       	mov	r22, r17
    1bf4:	0e 94 3c 0b 	call	0x1678	; 0x1678 <Lcd3310_Char>
	}
	Lcd3310_Char( ' ', is_invert_colors );
    1bf8:	80 e2       	ldi	r24, 0x20	; 32
    1bfa:	61 2f       	mov	r22, r17
    1bfc:	0e 94 3c 0b 	call	0x1678	; 0x1678 <Lcd3310_Char>
}
    1c00:	1f 91       	pop	r17
    1c02:	08 95       	ret

00001c04 <Lcd3310_UInt8AsText>:




void Lcd3310_UInt8AsText(uint8_t ch, WhiteOrBlackText is_invert_colors)
{
    1c04:	1f 93       	push	r17
    1c06:	16 2f       	mov	r17, r22
	UInt8ToString( ch );
    1c08:	0e 94 ca 0a 	call	0x1594	; 0x1594 <UInt8ToString>
	for(uint8_t count=0; count < 2; count++){
		Lcd3310_Char( to_string_result[count], is_invert_colors );
    1c0c:	80 91 71 03 	lds	r24, 0x0371
    1c10:	61 2f       	mov	r22, r17
    1c12:	0e 94 3c 0b 	call	0x1678	; 0x1678 <Lcd3310_Char>
    1c16:	80 91 72 03 	lds	r24, 0x0372
    1c1a:	61 2f       	mov	r22, r17
    1c1c:	0e 94 3c 0b 	call	0x1678	; 0x1678 <Lcd3310_Char>
	}
}
    1c20:	1f 91       	pop	r17
    1c22:	08 95       	ret

00001c24 <init_menu_now>:



void init_menu_now(void)
{
	menu_now = &go;
    1c24:	89 e2       	ldi	r24, 0x29	; 41
    1c26:	91 e0       	ldi	r25, 0x01	; 1
    1c28:	90 93 7a 03 	sts	0x037A, r25
    1c2c:	80 93 79 03 	sts	0x0379, r24
}
    1c30:	08 95       	ret

00001c32 <Lcd3310_UpdateDisplayInfo>:
}
#endif


void Lcd3310_UpdateDisplayInfo(void)
{
    1c32:	ef 92       	push	r14
    1c34:	ff 92       	push	r15
    1c36:	0f 93       	push	r16
    1c38:	1f 93       	push	r17
    1c3a:	cf 93       	push	r28
    1c3c:	df 93       	push	r29
    uint8_t number_of_elements_in_menu_now = 1;
    
	Lcd3310_ClearCenter();
    1c3e:	0e 94 c1 0c 	call	0x1982	; 0x1982 <Lcd3310_ClearCenter>
	
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { menu_now_atomic = menu_now; }
    1c42:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1c44:	f8 94       	cli
    1c46:	80 91 79 03 	lds	r24, 0x0379
    1c4a:	90 91 7a 03 	lds	r25, 0x037A
    1c4e:	90 93 78 03 	sts	0x0378, r25
    1c52:	80 93 77 03 	sts	0x0377, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1c56:	2f bf       	out	0x3f, r18	; 63

	struct menu_item *menu_temp = menu_now_atomic->next;
    1c58:	e0 91 77 03 	lds	r30, 0x0377
    1c5c:	f0 91 78 03 	lds	r31, 0x0378
    1c60:	c5 81       	ldd	r28, Z+5	; 0x05
    1c62:	d6 81       	ldd	r29, Z+6	; 0x06
    1c64:	ff 24       	eor	r15, r15
    1c66:	f3 94       	inc	r15
    1c68:	04 c0       	rjmp	.+8      	; 0x1c72 <Lcd3310_UpdateDisplayInfo+0x40>
	while( menu_temp != menu_now_atomic ){
		number_of_elements_in_menu_now++;
    1c6a:	f3 94       	inc	r15
		menu_temp = menu_temp->next;
    1c6c:	0d 80       	ldd	r0, Y+5	; 0x05
    1c6e:	de 81       	ldd	r29, Y+6	; 0x06
    1c70:	c0 2d       	mov	r28, r0
	Lcd3310_ClearCenter();
	
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { menu_now_atomic = menu_now; }

	struct menu_item *menu_temp = menu_now_atomic->next;
	while( menu_temp != menu_now_atomic ){
    1c72:	ce 17       	cp	r28, r30
    1c74:	df 07       	cpc	r29, r31
    1c76:	c9 f7       	brne	.-14     	; 0x1c6a <Lcd3310_UpdateDisplayInfo+0x38>
		number_of_elements_in_menu_now++;
		menu_temp = menu_temp->next;
	}
	if(number_of_elements_in_menu_now > 4){
    1c78:	24 e0       	ldi	r18, 0x04	; 4
    1c7a:	2f 15       	cp	r18, r15
    1c7c:	18 f4       	brcc	.+6      	; 0x1c84 <Lcd3310_UpdateDisplayInfo+0x52>
    1c7e:	84 e0       	ldi	r24, 0x04	; 4
    1c80:	f8 2e       	mov	r15, r24
    1c82:	03 c0       	rjmp	.+6      	; 0x1c8a <Lcd3310_UpdateDisplayInfo+0x58>
		number_of_elements_in_menu_now = 4;
	}
	 
#ifdef ANIMATION_SWITCH_MENU_ITEMS
	if(number_of_elements_in_menu_now < 3){
    1c84:	82 e0       	ldi	r24, 0x02	; 2
    1c86:	8f 15       	cp	r24, r15
    1c88:	10 f4       	brcc	.+4      	; 0x1c8e <Lcd3310_UpdateDisplayInfo+0x5c>
		menu_temp = menu_now_atomic;
	}else{
		menu_temp = menu_now_atomic->prev;
    1c8a:	c7 81       	ldd	r28, Z+7	; 0x07
    1c8c:	d0 85       	ldd	r29, Z+8	; 0x08
		menu_temp = menu_temp->prev;
	}
#endif

#	ifdef LCD_FIRST_STR
	Lcd3310_GotoXY(0, 0);
    1c8e:	80 e0       	ldi	r24, 0x00	; 0
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	60 e0       	ldi	r22, 0x00	; 0
    1c94:	70 e0       	ldi	r23, 0x00	; 0
    1c96:	0e 94 aa 0c 	call	0x1954	; 0x1954 <Lcd3310_GotoXY>
	Lcd3310_String_P(lcd_first_str, WHITE_TEXT_ON_BLACK);
    1c9a:	80 91 18 01 	lds	r24, 0x0118
    1c9e:	90 91 19 01 	lds	r25, 0x0119
    1ca2:	61 e0       	ldi	r22, 0x01	; 1
    1ca4:	0e 94 8d 0b 	call	0x171a	; 0x171a <Lcd3310_String_P>
    1ca8:	ee 24       	eor	r14, r14
    1caa:	01 e0       	ldi	r16, 0x01	; 1
    1cac:	10 e0       	ldi	r17, 0x00	; 0
    1cae:	3a c0       	rjmp	.+116    	; 0x1d24 <Lcd3310_UpdateDisplayInfo+0xf2>
#	endif

	for(uint8_t i=0; i < number_of_elements_in_menu_now; i++){
#		ifdef LCD_IMAGES
			Lcd3310_GotoXY(0, i + 1);
    1cb0:	80 e0       	ldi	r24, 0x00	; 0
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	b8 01       	movw	r22, r16
    1cb6:	0e 94 aa 0c 	call	0x1954	; 0x1954 <Lcd3310_GotoXY>
				Lcd3310_GotoXY(0, i + 2);// show menu from (i+1) line because first line filled with '_COLORS_'
#			else
				Lcd3310_GotoXY(0, i); // no images at top
#			endif
#		endif
		if(menu_temp == &results){
    1cba:	21 e0       	ldi	r18, 0x01	; 1
    1cbc:	c3 34       	cpi	r28, 0x43	; 67
    1cbe:	d2 07       	cpc	r29, r18
    1cc0:	29 f4       	brne	.+10     	; 0x1ccc <Lcd3310_UpdateDisplayInfo+0x9a>
			Lcd3310_GotoXY(0, i + 1);
    1cc2:	80 e0       	ldi	r24, 0x00	; 0
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	b8 01       	movw	r22, r16
    1cc8:	0e 94 aa 0c 	call	0x1954	; 0x1954 <Lcd3310_GotoXY>
		}
		Lcd3310_String_P(menu_temp->str, (menu_now_atomic == menu_temp));
    1ccc:	29 85       	ldd	r18, Y+9	; 0x09
    1cce:	3a 85       	ldd	r19, Y+10	; 0x0a
    1cd0:	60 e0       	ldi	r22, 0x00	; 0
    1cd2:	80 91 77 03 	lds	r24, 0x0377
    1cd6:	90 91 78 03 	lds	r25, 0x0378
    1cda:	8c 17       	cp	r24, r28
    1cdc:	9d 07       	cpc	r25, r29
    1cde:	09 f4       	brne	.+2      	; 0x1ce2 <Lcd3310_UpdateDisplayInfo+0xb0>
    1ce0:	61 e0       	ldi	r22, 0x01	; 1
    1ce2:	c9 01       	movw	r24, r18
    1ce4:	0e 94 8d 0b 	call	0x171a	; 0x171a <Lcd3310_String_P>
		if(menu_temp == &set_measure_delay){
    1ce8:	81 e0       	ldi	r24, 0x01	; 1
    1cea:	cb 3a       	cpi	r28, 0xAB	; 171
    1cec:	d8 07       	cpc	r29, r24
    1cee:	a1 f4       	brne	.+40     	; 0x1d18 <Lcd3310_UpdateDisplayInfo+0xe6>
			Lcd3310_GotoXY(9, i + 1); // TODO: NEED TEST: (i+1) LCD_IMAGES, LCD_FIRST_STR
    1cf0:	89 e0       	ldi	r24, 0x09	; 9
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	b8 01       	movw	r22, r16
    1cf6:	0e 94 aa 0c 	call	0x1954	; 0x1954 <Lcd3310_GotoXY>
			Lcd3310_Char(measure_delay + 0x30, (menu_now_atomic == menu_temp));
    1cfa:	20 91 06 01 	lds	r18, 0x0106
    1cfe:	20 5d       	subi	r18, 0xD0	; 208
    1d00:	60 e0       	ldi	r22, 0x00	; 0
    1d02:	80 91 77 03 	lds	r24, 0x0377
    1d06:	90 91 78 03 	lds	r25, 0x0378
    1d0a:	8c 17       	cp	r24, r28
    1d0c:	9d 07       	cpc	r25, r29
    1d0e:	09 f4       	brne	.+2      	; 0x1d12 <Lcd3310_UpdateDisplayInfo+0xe0>
    1d10:	61 e0       	ldi	r22, 0x01	; 1
    1d12:	82 2f       	mov	r24, r18
    1d14:	0e 94 3c 0b 	call	0x1678	; 0x1678 <Lcd3310_Char>
		}
		menu_temp = menu_temp->next;
    1d18:	0d 80       	ldd	r0, Y+5	; 0x05
    1d1a:	de 81       	ldd	r29, Y+6	; 0x06
    1d1c:	c0 2d       	mov	r28, r0
#	ifdef LCD_FIRST_STR
	Lcd3310_GotoXY(0, 0);
	Lcd3310_String_P(lcd_first_str, WHITE_TEXT_ON_BLACK);
#	endif

	for(uint8_t i=0; i < number_of_elements_in_menu_now; i++){
    1d1e:	e3 94       	inc	r14
    1d20:	0f 5f       	subi	r16, 0xFF	; 255
    1d22:	1f 4f       	sbci	r17, 0xFF	; 255
    1d24:	ef 14       	cp	r14, r15
    1d26:	20 f2       	brcs	.-120    	; 0x1cb0 <Lcd3310_UpdateDisplayInfo+0x7e>
		}
		menu_temp = menu_temp->next;
	}


	if( menu_now_atomic == &results ){
    1d28:	80 91 77 03 	lds	r24, 0x0377
    1d2c:	90 91 78 03 	lds	r25, 0x0378
    1d30:	83 54       	subi	r24, 0x43	; 67
    1d32:	91 40       	sbci	r25, 0x01	; 1
    1d34:	09 f0       	breq	.+2      	; 0x1d38 <Lcd3310_UpdateDisplayInfo+0x106>
    1d36:	9f c0       	rjmp	.+318    	; 0x1e76 <Lcd3310_UpdateDisplayInfo+0x244>
		 * |D *** *** *** |  Diff = | Callibrate - Measure |;
		 *
		 */

		// |   R   G   B  |
		Lcd3310_GotoXY(3, 2);
    1d38:	83 e0       	ldi	r24, 0x03	; 3
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	62 e0       	ldi	r22, 0x02	; 2
    1d3e:	70 e0       	ldi	r23, 0x00	; 0
    1d40:	0e 94 aa 0c 	call	0x1954	; 0x1954 <Lcd3310_GotoXY>
		Lcd3310_Char('R', BLACK_TEXT_ON_WHITE);
    1d44:	82 e5       	ldi	r24, 0x52	; 82
    1d46:	60 e0       	ldi	r22, 0x00	; 0
    1d48:	0e 94 3c 0b 	call	0x1678	; 0x1678 <Lcd3310_Char>
		Lcd3310_GotoXY(7, 2);
    1d4c:	87 e0       	ldi	r24, 0x07	; 7
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	62 e0       	ldi	r22, 0x02	; 2
    1d52:	70 e0       	ldi	r23, 0x00	; 0
    1d54:	0e 94 aa 0c 	call	0x1954	; 0x1954 <Lcd3310_GotoXY>
		Lcd3310_Char('G', BLACK_TEXT_ON_WHITE);
    1d58:	87 e4       	ldi	r24, 0x47	; 71
    1d5a:	60 e0       	ldi	r22, 0x00	; 0
    1d5c:	0e 94 3c 0b 	call	0x1678	; 0x1678 <Lcd3310_Char>
		Lcd3310_GotoXY(11, 2);
    1d60:	8b e0       	ldi	r24, 0x0B	; 11
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	62 e0       	ldi	r22, 0x02	; 2
    1d66:	70 e0       	ldi	r23, 0x00	; 0
    1d68:	0e 94 aa 0c 	call	0x1954	; 0x1954 <Lcd3310_GotoXY>
		Lcd3310_Char('B', BLACK_TEXT_ON_WHITE);
    1d6c:	82 e4       	ldi	r24, 0x42	; 66
    1d6e:	60 e0       	ldi	r22, 0x00	; 0
    1d70:	0e 94 3c 0b 	call	0x1678	; 0x1678 <Lcd3310_Char>

		// |C *** *** *** |  Callibrate values
		Lcd3310_GotoXY(0, 3);
    1d74:	80 e0       	ldi	r24, 0x00	; 0
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	63 e0       	ldi	r22, 0x03	; 3
    1d7a:	70 e0       	ldi	r23, 0x00	; 0
    1d7c:	0e 94 aa 0c 	call	0x1954	; 0x1954 <Lcd3310_GotoXY>
		Lcd3310_Char('C', BLACK_TEXT_ON_WHITE);
    1d80:	83 e4       	ldi	r24, 0x43	; 67
    1d82:	60 e0       	ldi	r22, 0x00	; 0
    1d84:	0e 94 3c 0b 	call	0x1678	; 0x1678 <Lcd3310_Char>
		Lcd3310_GotoXY(2, 3);
    1d88:	82 e0       	ldi	r24, 0x02	; 2
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	63 e0       	ldi	r22, 0x03	; 3
    1d8e:	70 e0       	ldi	r23, 0x00	; 0
    1d90:	0e 94 aa 0c 	call	0x1954	; 0x1954 <Lcd3310_GotoXY>
		Lcd3310_UInt16AsText_3Chars(hex2dec_result( result[CALIBRATE_INDX][RED] ), BLACK_TEXT_ON_WHITE);
    1d94:	80 91 57 03 	lds	r24, 0x0357
    1d98:	90 91 58 03 	lds	r25, 0x0358
    1d9c:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    1da0:	60 e0       	ldi	r22, 0x00	; 0
    1da2:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <Lcd3310_UInt16AsText_3Chars>
		Lcd3310_UInt16AsText_3Chars(hex2dec_result( result[CALIBRATE_INDX][GREEN] ), BLACK_TEXT_ON_WHITE);
    1da6:	80 91 59 03 	lds	r24, 0x0359
    1daa:	90 91 5a 03 	lds	r25, 0x035A
    1dae:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    1db2:	60 e0       	ldi	r22, 0x00	; 0
    1db4:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <Lcd3310_UInt16AsText_3Chars>
		Lcd3310_UInt16AsText_3Chars(hex2dec_result( result[CALIBRATE_INDX][BLUE] ), BLACK_TEXT_ON_WHITE);
    1db8:	80 91 5b 03 	lds	r24, 0x035B
    1dbc:	90 91 5c 03 	lds	r25, 0x035C
    1dc0:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    1dc4:	60 e0       	ldi	r22, 0x00	; 0
    1dc6:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <Lcd3310_UInt16AsText_3Chars>

		// |M *** *** *** |	Measure values
		Lcd3310_GotoXY(0, 4);
    1dca:	80 e0       	ldi	r24, 0x00	; 0
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	64 e0       	ldi	r22, 0x04	; 4
    1dd0:	70 e0       	ldi	r23, 0x00	; 0
    1dd2:	0e 94 aa 0c 	call	0x1954	; 0x1954 <Lcd3310_GotoXY>
		Lcd3310_Char('M', BLACK_TEXT_ON_WHITE);
    1dd6:	8d e4       	ldi	r24, 0x4D	; 77
    1dd8:	60 e0       	ldi	r22, 0x00	; 0
    1dda:	0e 94 3c 0b 	call	0x1678	; 0x1678 <Lcd3310_Char>
		Lcd3310_GotoXY(2, 4);
    1dde:	82 e0       	ldi	r24, 0x02	; 2
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	64 e0       	ldi	r22, 0x04	; 4
    1de4:	70 e0       	ldi	r23, 0x00	; 0
    1de6:	0e 94 aa 0c 	call	0x1954	; 0x1954 <Lcd3310_GotoXY>
		Lcd3310_UInt16AsText_3Chars(hex2dec_result( result[MEASURE_INDX][RED] ), BLACK_TEXT_ON_WHITE);
    1dea:	80 91 5d 03 	lds	r24, 0x035D
    1dee:	90 91 5e 03 	lds	r25, 0x035E
    1df2:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    1df6:	60 e0       	ldi	r22, 0x00	; 0
    1df8:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <Lcd3310_UInt16AsText_3Chars>
		Lcd3310_UInt16AsText_3Chars(hex2dec_result( result[MEASURE_INDX][GREEN] ), BLACK_TEXT_ON_WHITE);
    1dfc:	80 91 5f 03 	lds	r24, 0x035F
    1e00:	90 91 60 03 	lds	r25, 0x0360
    1e04:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    1e08:	60 e0       	ldi	r22, 0x00	; 0
    1e0a:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <Lcd3310_UInt16AsText_3Chars>
		Lcd3310_UInt16AsText_3Chars(hex2dec_result( result[MEASURE_INDX][BLUE] ), BLACK_TEXT_ON_WHITE);
    1e0e:	80 91 61 03 	lds	r24, 0x0361
    1e12:	90 91 62 03 	lds	r25, 0x0362
    1e16:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    1e1a:	60 e0       	ldi	r22, 0x00	; 0
    1e1c:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <Lcd3310_UInt16AsText_3Chars>

		// |D *** *** *** |	Diff values
		Lcd3310_GotoXY(0, 5);
    1e20:	80 e0       	ldi	r24, 0x00	; 0
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	65 e0       	ldi	r22, 0x05	; 5
    1e26:	70 e0       	ldi	r23, 0x00	; 0
    1e28:	0e 94 aa 0c 	call	0x1954	; 0x1954 <Lcd3310_GotoXY>
		Lcd3310_Char('D', BLACK_TEXT_ON_WHITE);
    1e2c:	84 e4       	ldi	r24, 0x44	; 68
    1e2e:	60 e0       	ldi	r22, 0x00	; 0
    1e30:	0e 94 3c 0b 	call	0x1678	; 0x1678 <Lcd3310_Char>
		Lcd3310_GotoXY(2, 5);
    1e34:	82 e0       	ldi	r24, 0x02	; 2
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	65 e0       	ldi	r22, 0x05	; 5
    1e3a:	70 e0       	ldi	r23, 0x00	; 0
    1e3c:	0e 94 aa 0c 	call	0x1954	; 0x1954 <Lcd3310_GotoXY>
		Lcd3310_UInt16AsText_3Chars(hex2dec_result( result[DIFF_INDX][RED] ), BLACK_TEXT_ON_WHITE);
    1e40:	80 91 63 03 	lds	r24, 0x0363
    1e44:	90 91 64 03 	lds	r25, 0x0364
    1e48:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    1e4c:	60 e0       	ldi	r22, 0x00	; 0
    1e4e:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <Lcd3310_UInt16AsText_3Chars>
		Lcd3310_UInt16AsText_3Chars(hex2dec_result( result[DIFF_INDX][GREEN] ), BLACK_TEXT_ON_WHITE);
    1e52:	80 91 65 03 	lds	r24, 0x0365
    1e56:	90 91 66 03 	lds	r25, 0x0366
    1e5a:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    1e5e:	60 e0       	ldi	r22, 0x00	; 0
    1e60:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <Lcd3310_UInt16AsText_3Chars>
		Lcd3310_UInt16AsText_3Chars(hex2dec_result( result[DIFF_INDX][BLUE] ), BLACK_TEXT_ON_WHITE);
    1e64:	80 91 67 03 	lds	r24, 0x0367
    1e68:	90 91 68 03 	lds	r25, 0x0368
    1e6c:	0e 94 a5 04 	call	0x94a	; 0x94a <hex2dec_result>
    1e70:	60 e0       	ldi	r22, 0x00	; 0
    1e72:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <Lcd3310_UInt16AsText_3Chars>
	}
}
    1e76:	df 91       	pop	r29
    1e78:	cf 91       	pop	r28
    1e7a:	1f 91       	pop	r17
    1e7c:	0f 91       	pop	r16
    1e7e:	ff 90       	pop	r15
    1e80:	ef 90       	pop	r14
    1e82:	08 95       	ret

00001e84 <Lcd3310_AnimationSwitchMenuItems>:
}
//==============================================//

#ifdef ANIMATION_SWITCH_MENU_ITEMS
void Lcd3310_AnimationSwitchMenuItems(char is_turn_left)
{
    1e84:	9f 92       	push	r9
    1e86:	af 92       	push	r10
    1e88:	bf 92       	push	r11
    1e8a:	cf 92       	push	r12
    1e8c:	df 92       	push	r13
    1e8e:	ef 92       	push	r14
    1e90:	ff 92       	push	r15
    1e92:	0f 93       	push	r16
    1e94:	1f 93       	push	r17
    1e96:	cf 93       	push	r28
    1e98:	df 93       	push	r29
    1e9a:	98 2e       	mov	r9, r24
	uint8_t number_of_elements_in_menu_now = 1;
	struct menu_item *menu_temp;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { 
    1e9c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1e9e:	f8 94       	cli
		menu_now_atomic = menu_now; 
    1ea0:	20 91 79 03 	lds	r18, 0x0379
    1ea4:	30 91 7a 03 	lds	r19, 0x037A
    1ea8:	30 93 78 03 	sts	0x0378, r19
    1eac:	20 93 77 03 	sts	0x0377, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1eb0:	8f bf       	out	0x3f, r24	; 63
	}
	
	menu_temp = menu_now_atomic->next;
    1eb2:	e0 91 77 03 	lds	r30, 0x0377
    1eb6:	f0 91 78 03 	lds	r31, 0x0378
    1eba:	a5 81       	ldd	r26, Z+5	; 0x05
    1ebc:	b6 81       	ldd	r27, Z+6	; 0x06
	while( menu_temp->str != menu_now_atomic->str ){
    1ebe:	21 85       	ldd	r18, Z+9	; 0x09
    1ec0:	32 85       	ldd	r19, Z+10	; 0x0a
    1ec2:	11 e0       	ldi	r17, 0x01	; 1
    1ec4:	05 c0       	rjmp	.+10     	; 0x1ed0 <Lcd3310_AnimationSwitchMenuItems+0x4c>
		number_of_elements_in_menu_now++;
    1ec6:	1f 5f       	subi	r17, 0xFF	; 255
		menu_temp = menu_temp->next;
    1ec8:	15 96       	adiw	r26, 0x05	; 5
    1eca:	0d 90       	ld	r0, X+
    1ecc:	bc 91       	ld	r27, X
    1ece:	a0 2d       	mov	r26, r0
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { 
		menu_now_atomic = menu_now; 
	}
	
	menu_temp = menu_now_atomic->next;
	while( menu_temp->str != menu_now_atomic->str ){
    1ed0:	19 96       	adiw	r26, 0x09	; 9
    1ed2:	8d 91       	ld	r24, X+
    1ed4:	9c 91       	ld	r25, X
    1ed6:	1a 97       	sbiw	r26, 0x0a	; 10
    1ed8:	82 17       	cp	r24, r18
    1eda:	93 07       	cpc	r25, r19
    1edc:	a1 f7       	brne	.-24     	; 0x1ec6 <Lcd3310_AnimationSwitchMenuItems+0x42>
		number_of_elements_in_menu_now++;
		menu_temp = menu_temp->next;
	}
	if(number_of_elements_in_menu_now > 4){
    1ede:	15 30       	cpi	r17, 0x05	; 5
    1ee0:	08 f0       	brcs	.+2      	; 0x1ee4 <Lcd3310_AnimationSwitchMenuItems+0x60>
    1ee2:	14 e0       	ldi	r17, 0x04	; 4
		number_of_elements_in_menu_now = 4;
	}

	Lcd3310_ClearCenter();
    1ee4:	0e 94 c1 0c 	call	0x1982	; 0x1982 <Lcd3310_ClearCenter>
    1ee8:	e0 91 77 03 	lds	r30, 0x0377
    1eec:	f0 91 78 03 	lds	r31, 0x0378
	if(number_of_elements_in_menu_now < 3){
    1ef0:	13 30       	cpi	r17, 0x03	; 3
    1ef2:	38 f4       	brcc	.+14     	; 0x1f02 <Lcd3310_AnimationSwitchMenuItems+0x7e>
		menu_temp = menu_now_atomic;
    1ef4:	ef 01       	movw	r28, r30
    1ef6:	cc 24       	eor	r12, r12
    1ef8:	20 e9       	ldi	r18, 0x90	; 144
    1efa:	a2 2e       	mov	r10, r18
    1efc:	21 e0       	ldi	r18, 0x01	; 1
    1efe:	b2 2e       	mov	r11, r18
    1f00:	3f c0       	rjmp	.+126    	; 0x1f80 <Lcd3310_AnimationSwitchMenuItems+0xfc>
	}else{
		menu_temp = menu_now_atomic->prev;
    1f02:	c7 81       	ldd	r28, Z+7	; 0x07
    1f04:	d0 85       	ldd	r29, Z+8	; 0x08
    1f06:	f7 cf       	rjmp	.-18     	; 0x1ef6 <Lcd3310_AnimationSwitchMenuItems+0x72>
	}

	for(uint8_t j=0; j<8; j++){
		for(uint8_t i=0; i < number_of_elements_in_menu_now; i++){
#			ifdef LCD_IMAGES
				Lcd3310_GotoXY(0, i + 1);// show menu from (i+1) line because first line filled with '_COLORS_'
    1f08:	80 e0       	ldi	r24, 0x00	; 0
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	b7 01       	movw	r22, r14
    1f0e:	0e 94 aa 0c 	call	0x1954	; 0x1954 <Lcd3310_GotoXY>
#			else
				Lcd3310_GotoXY(0, i); // no images at top
#			endif
			Lcd3310_String_P_Anime(
    1f12:	99 20       	and	r9, r9
    1f14:	19 f0       	breq	.+6      	; 0x1f1c <Lcd3310_AnimationSwitchMenuItems+0x98>
    1f16:	ef 81       	ldd	r30, Y+7	; 0x07
    1f18:	f8 85       	ldd	r31, Y+8	; 0x08
    1f1a:	02 c0       	rjmp	.+4      	; 0x1f20 <Lcd3310_AnimationSwitchMenuItems+0x9c>
    1f1c:	ed 81       	ldd	r30, Y+5	; 0x05
    1f1e:	fe 81       	ldd	r31, Y+6	; 0x06
    1f20:	21 85       	ldd	r18, Z+9	; 0x09
    1f22:	32 85       	ldd	r19, Z+10	; 0x0a
    1f24:	69 85       	ldd	r22, Y+9	; 0x09
    1f26:	7a 85       	ldd	r23, Y+10	; 0x0a
    1f28:	40 e0       	ldi	r20, 0x00	; 0
    1f2a:	80 91 77 03 	lds	r24, 0x0377
    1f2e:	90 91 78 03 	lds	r25, 0x0378
    1f32:	8c 17       	cp	r24, r28
    1f34:	9d 07       	cpc	r25, r29
    1f36:	09 f4       	brne	.+2      	; 0x1f3a <Lcd3310_AnimationSwitchMenuItems+0xb6>
    1f38:	41 e0       	ldi	r20, 0x01	; 1
    1f3a:	c9 01       	movw	r24, r18
    1f3c:	2c 2d       	mov	r18, r12
    1f3e:	09 2d       	mov	r16, r9
    1f40:	0e 94 bf 0b 	call	0x177e	; 0x177e <Lcd3310_String_P_Anime>
							menu_temp->str,
							(menu_now_atomic == menu_temp), // WhiteOrBlackText
							j, // num_of_cadr
							is_turn_left // is_next
							);
			menu_temp = menu_temp->next;
    1f44:	0d 80       	ldd	r0, Y+5	; 0x05
    1f46:	de 81       	ldd	r29, Y+6	; 0x06
    1f48:	c0 2d       	mov	r28, r0
	}else{
		menu_temp = menu_now_atomic->prev;
	}

	for(uint8_t j=0; j<8; j++){
		for(uint8_t i=0; i < number_of_elements_in_menu_now; i++){
    1f4a:	d3 94       	inc	r13
    1f4c:	08 94       	sec
    1f4e:	e1 1c       	adc	r14, r1
    1f50:	f1 1c       	adc	r15, r1
    1f52:	d1 16       	cp	r13, r17
    1f54:	c8 f2       	brcs	.-78     	; 0x1f08 <Lcd3310_AnimationSwitchMenuItems+0x84>
    1f56:	e0 91 77 03 	lds	r30, 0x0377
    1f5a:	f0 91 78 03 	lds	r31, 0x0378
							j, // num_of_cadr
							is_turn_left // is_next
							);
			menu_temp = menu_temp->next;
		}
		if(number_of_elements_in_menu_now < 3){
    1f5e:	13 30       	cpi	r17, 0x03	; 3
    1f60:	10 f4       	brcc	.+4      	; 0x1f66 <Lcd3310_AnimationSwitchMenuItems+0xe2>
			menu_temp = menu_now_atomic;
    1f62:	ef 01       	movw	r28, r30
    1f64:	02 c0       	rjmp	.+4      	; 0x1f6a <Lcd3310_AnimationSwitchMenuItems+0xe6>
		}else{
			menu_temp = menu_now_atomic->prev;
    1f66:	c7 81       	ldd	r28, Z+7	; 0x07
    1f68:	d0 85       	ldd	r29, Z+8	; 0x08
    1f6a:	84 ef       	ldi	r24, 0xF4	; 244
    1f6c:	91 e0       	ldi	r25, 0x01	; 1
    1f6e:	f5 01       	movw	r30, r10
    1f70:	31 97       	sbiw	r30, 0x01	; 1
    1f72:	f1 f7       	brne	.-4      	; 0x1f70 <Lcd3310_AnimationSwitchMenuItems+0xec>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f74:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f76:	d9 f7       	brne	.-10     	; 0x1f6e <Lcd3310_AnimationSwitchMenuItems+0xea>
		menu_temp = menu_now_atomic;
	}else{
		menu_temp = menu_now_atomic->prev;
	}

	for(uint8_t j=0; j<8; j++){
    1f78:	c3 94       	inc	r12
    1f7a:	88 e0       	ldi	r24, 0x08	; 8
    1f7c:	c8 16       	cp	r12, r24
    1f7e:	29 f0       	breq	.+10     	; 0x1f8a <Lcd3310_AnimationSwitchMenuItems+0x106>
    1f80:	dd 24       	eor	r13, r13
    1f82:	91 e0       	ldi	r25, 0x01	; 1
    1f84:	e9 2e       	mov	r14, r25
    1f86:	f1 2c       	mov	r15, r1
    1f88:	e4 cf       	rjmp	.-56     	; 0x1f52 <Lcd3310_AnimationSwitchMenuItems+0xce>
		}else{
			menu_temp = menu_now_atomic->prev;
		}
		_delay_ms(50);
	}
}
    1f8a:	df 91       	pop	r29
    1f8c:	cf 91       	pop	r28
    1f8e:	1f 91       	pop	r17
    1f90:	0f 91       	pop	r16
    1f92:	ff 90       	pop	r15
    1f94:	ef 90       	pop	r14
    1f96:	df 90       	pop	r13
    1f98:	cf 90       	pop	r12
    1f9a:	bf 90       	pop	r11
    1f9c:	af 90       	pop	r10
    1f9e:	9f 90       	pop	r9
    1fa0:	08 95       	ret

00001fa2 <Lcd3310_InitializeDisplay>:



void init_menu_now(void)
{
	menu_now = &go;
    1fa2:	29 e2       	ldi	r18, 0x29	; 41
    1fa4:	31 e0       	ldi	r19, 0x01	; 1
    1fa6:	30 93 7a 03 	sts	0x037A, r19
    1faa:	20 93 79 03 	sts	0x0379, r18
//==============================================//
void Lcd3310_InitializeDisplay(uint16_t show_image_delay_ms)
{
	init_menu_now();

    Lcd3310_Init(show_image_delay_ms);
    1fae:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <Lcd3310_Init>
	//Lcd3310_LcdImageUpperBottom_Fill();
    Lcd3310_UpdateDisplayInfo();
    1fb2:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <Lcd3310_UpdateDisplayInfo>
}
    1fb6:	08 95       	ret

00001fb8 <Menu_EnterClick>:
struct menu_item readme = {ENTER_MENU_CMD, NULL, &text, &go, &setup, 												"// Readme   //"};
	struct menu_item text = {BACK_CMD, &readme, NULL, &text, &text, "[ Programmer:][   brunql   ][    (at)    ][  gmail.com ]"};

void Menu_EnterClick(void)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { menu_now_atomic = menu_now; }
    1fb8:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1fba:	f8 94       	cli
    1fbc:	20 91 79 03 	lds	r18, 0x0379
    1fc0:	30 91 7a 03 	lds	r19, 0x037A
    1fc4:	30 93 78 03 	sts	0x0378, r19
    1fc8:	20 93 77 03 	sts	0x0377, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1fcc:	8f bf       	out	0x3f, r24	; 63
	switch(menu_now_atomic->cmd){
    1fce:	e0 91 77 03 	lds	r30, 0x0377
    1fd2:	f0 91 78 03 	lds	r31, 0x0378
    1fd6:	e0 81       	ld	r30, Z
    1fd8:	e3 30       	cpi	r30, 0x03	; 3
    1fda:	39 f1       	breq	.+78     	; 0x202a <Menu_EnterClick+0x72>
    1fdc:	e4 30       	cpi	r30, 0x04	; 4
    1fde:	28 f4       	brcc	.+10     	; 0x1fea <Menu_EnterClick+0x32>
    1fe0:	e1 30       	cpi	r30, 0x01	; 1
    1fe2:	61 f0       	breq	.+24     	; 0x1ffc <Menu_EnterClick+0x44>
    1fe4:	e2 30       	cpi	r30, 0x02	; 2
    1fe6:	30 f5       	brcc	.+76     	; 0x2034 <Menu_EnterClick+0x7c>
    1fe8:	12 c0       	rjmp	.+36     	; 0x200e <Menu_EnterClick+0x56>
    1fea:	e6 30       	cpi	r30, 0x06	; 6
    1fec:	c1 f1       	breq	.+112    	; 0x205e <Menu_EnterClick+0xa6>
    1fee:	e7 30       	cpi	r30, 0x07	; 7
    1ff0:	09 f4       	brne	.+2      	; 0x1ff4 <Menu_EnterClick+0x3c>
    1ff2:	42 c0       	rjmp	.+132    	; 0x2078 <Menu_EnterClick+0xc0>
    1ff4:	e4 30       	cpi	r30, 0x04	; 4
    1ff6:	09 f0       	breq	.+2      	; 0x1ffa <Menu_EnterClick+0x42>
    1ff8:	4c c0       	rjmp	.+152    	; 0x2092 <Menu_EnterClick+0xda>
    1ffa:	24 c0       	rjmp	.+72     	; 0x2044 <Menu_EnterClick+0x8c>
		default:
			break;
		case ENTER_MENU_CMD:
		enter_menu_label:
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { menu_now = menu_now->sub_menu; }
    1ffc:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1ffe:	f8 94       	cli
    2000:	e0 91 79 03 	lds	r30, 0x0379
    2004:	f0 91 7a 03 	lds	r31, 0x037A
    2008:	23 81       	ldd	r18, Z+3	; 0x03
    200a:	34 81       	ldd	r19, Z+4	; 0x04
    200c:	08 c0       	rjmp	.+16     	; 0x201e <Menu_EnterClick+0x66>
			break;

		case BACK_CMD:
		back_menu_label:
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { menu_now = menu_now->main_menu; }
    200e:	8f b7       	in	r24, 0x3f	; 63
    2010:	f8 94       	cli
    2012:	e0 91 79 03 	lds	r30, 0x0379
    2016:	f0 91 7a 03 	lds	r31, 0x037A
    201a:	21 81       	ldd	r18, Z+1	; 0x01
    201c:	32 81       	ldd	r19, Z+2	; 0x02
    201e:	30 93 7a 03 	sts	0x037A, r19
    2022:	20 93 79 03 	sts	0x0379, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2026:	8f bf       	out	0x3f, r24	; 63
    2028:	19 c0       	rjmp	.+50     	; 0x205c <Menu_EnterClick+0xa4>
			break;
		
		case results_cmd:
			LedDriver_SwitchLeds( 0x0000 );
    202a:	80 e0       	ldi	r24, 0x00	; 0
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	0e 94 ca 06 	call	0xd94	; 0xd94 <LedDriver_SwitchLeds>
    2032:	ed cf       	rjmp	.-38     	; 0x200e <Menu_EnterClick+0x56>
			goto back_menu_label;
	
		case go_cmd:
			FLAGS_SWITCH_ON( ADC_RESULT_FLAG );
    2034:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2036:	f8 94       	cli
    2038:	80 91 6b 03 	lds	r24, 0x036B
    203c:	90 91 6c 03 	lds	r25, 0x036C
    2040:	80 61       	ori	r24, 0x10	; 16
    2042:	14 c0       	rjmp	.+40     	; 0x206c <Menu_EnterClick+0xb4>
			goto enter_menu_label;
		
		case calibration_cmd:
			FLAGS_SWITCH_ON( ADC_CALIBRATE_FLAG );
    2044:	2f b7       	in	r18, 0x3f	; 63
    2046:	f8 94       	cli
    2048:	80 91 6b 03 	lds	r24, 0x036B
    204c:	90 91 6c 03 	lds	r25, 0x036C
    2050:	80 62       	ori	r24, 0x20	; 32
    2052:	90 93 6c 03 	sts	0x036C, r25
    2056:	80 93 6b 03 	sts	0x036B, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    205a:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    205c:	08 95       	ret
			break;

		case snake_start_cmd:
			FLAGS_SWITCH_ON( SNAKE_START_GAME_FLAG );
    205e:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2060:	f8 94       	cli
    2062:	80 91 6b 03 	lds	r24, 0x036B
    2066:	90 91 6c 03 	lds	r25, 0x036C
    206a:	80 68       	ori	r24, 0x80	; 128
    206c:	90 93 6c 03 	sts	0x036C, r25
    2070:	80 93 6b 03 	sts	0x036B, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2074:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    2076:	c2 cf       	rjmp	.-124    	; 0x1ffc <Menu_EnterClick+0x44>
			goto enter_menu_label;

		case snake_results_cmd:
			FLAGS_SWITCH_ON( SNAKE_STOP_GAME_FLAG );
    2078:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    207a:	f8 94       	cli
    207c:	80 91 6b 03 	lds	r24, 0x036B
    2080:	90 91 6c 03 	lds	r25, 0x036C
    2084:	91 60       	ori	r25, 0x01	; 1
    2086:	90 93 6c 03 	sts	0x036C, r25
    208a:	80 93 6b 03 	sts	0x036B, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    208e:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    2090:	be cf       	rjmp	.-132    	; 0x200e <Menu_EnterClick+0x56>
    2092:	08 95       	ret

00002094 <__fixunssfsi>:
    2094:	ef 92       	push	r14
    2096:	ff 92       	push	r15
    2098:	0f 93       	push	r16
    209a:	1f 93       	push	r17
    209c:	7b 01       	movw	r14, r22
    209e:	8c 01       	movw	r16, r24
    20a0:	20 e0       	ldi	r18, 0x00	; 0
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	40 e0       	ldi	r20, 0x00	; 0
    20a6:	5f e4       	ldi	r21, 0x4F	; 79
    20a8:	0e 94 f6 13 	call	0x27ec	; 0x27ec <__gesf2>
    20ac:	88 23       	and	r24, r24
    20ae:	8c f0       	brlt	.+34     	; 0x20d2 <__fixunssfsi+0x3e>
    20b0:	c8 01       	movw	r24, r16
    20b2:	b7 01       	movw	r22, r14
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	40 e0       	ldi	r20, 0x00	; 0
    20ba:	5f e4       	ldi	r21, 0x4F	; 79
    20bc:	0e 94 c2 11 	call	0x2384	; 0x2384 <__subsf3>
    20c0:	0e 94 b4 14 	call	0x2968	; 0x2968 <__fixsfsi>
    20c4:	9b 01       	movw	r18, r22
    20c6:	ac 01       	movw	r20, r24
    20c8:	20 50       	subi	r18, 0x00	; 0
    20ca:	30 40       	sbci	r19, 0x00	; 0
    20cc:	40 40       	sbci	r20, 0x00	; 0
    20ce:	50 48       	sbci	r21, 0x80	; 128
    20d0:	06 c0       	rjmp	.+12     	; 0x20de <__fixunssfsi+0x4a>
    20d2:	c8 01       	movw	r24, r16
    20d4:	b7 01       	movw	r22, r14
    20d6:	0e 94 b4 14 	call	0x2968	; 0x2968 <__fixsfsi>
    20da:	9b 01       	movw	r18, r22
    20dc:	ac 01       	movw	r20, r24
    20de:	b9 01       	movw	r22, r18
    20e0:	ca 01       	movw	r24, r20
    20e2:	1f 91       	pop	r17
    20e4:	0f 91       	pop	r16
    20e6:	ff 90       	pop	r15
    20e8:	ef 90       	pop	r14
    20ea:	08 95       	ret

000020ec <_fpadd_parts>:
    20ec:	a0 e0       	ldi	r26, 0x00	; 0
    20ee:	b0 e0       	ldi	r27, 0x00	; 0
    20f0:	ec e7       	ldi	r30, 0x7C	; 124
    20f2:	f0 e1       	ldi	r31, 0x10	; 16
    20f4:	0c 94 fe 17 	jmp	0x2ffc	; 0x2ffc <__prologue_saves__>
    20f8:	dc 01       	movw	r26, r24
    20fa:	2b 01       	movw	r4, r22
    20fc:	fa 01       	movw	r30, r20
    20fe:	9c 91       	ld	r25, X
    2100:	92 30       	cpi	r25, 0x02	; 2
    2102:	08 f4       	brcc	.+2      	; 0x2106 <_fpadd_parts+0x1a>
    2104:	39 c1       	rjmp	.+626    	; 0x2378 <_fpadd_parts+0x28c>
    2106:	eb 01       	movw	r28, r22
    2108:	88 81       	ld	r24, Y
    210a:	82 30       	cpi	r24, 0x02	; 2
    210c:	08 f4       	brcc	.+2      	; 0x2110 <_fpadd_parts+0x24>
    210e:	33 c1       	rjmp	.+614    	; 0x2376 <_fpadd_parts+0x28a>
    2110:	94 30       	cpi	r25, 0x04	; 4
    2112:	69 f4       	brne	.+26     	; 0x212e <_fpadd_parts+0x42>
    2114:	84 30       	cpi	r24, 0x04	; 4
    2116:	09 f0       	breq	.+2      	; 0x211a <_fpadd_parts+0x2e>
    2118:	2f c1       	rjmp	.+606    	; 0x2378 <_fpadd_parts+0x28c>
    211a:	11 96       	adiw	r26, 0x01	; 1
    211c:	9c 91       	ld	r25, X
    211e:	11 97       	sbiw	r26, 0x01	; 1
    2120:	89 81       	ldd	r24, Y+1	; 0x01
    2122:	98 17       	cp	r25, r24
    2124:	09 f4       	brne	.+2      	; 0x2128 <_fpadd_parts+0x3c>
    2126:	28 c1       	rjmp	.+592    	; 0x2378 <_fpadd_parts+0x28c>
    2128:	a8 e4       	ldi	r26, 0x48	; 72
    212a:	b2 e0       	ldi	r27, 0x02	; 2
    212c:	25 c1       	rjmp	.+586    	; 0x2378 <_fpadd_parts+0x28c>
    212e:	84 30       	cpi	r24, 0x04	; 4
    2130:	09 f4       	brne	.+2      	; 0x2134 <_fpadd_parts+0x48>
    2132:	21 c1       	rjmp	.+578    	; 0x2376 <_fpadd_parts+0x28a>
    2134:	82 30       	cpi	r24, 0x02	; 2
    2136:	a9 f4       	brne	.+42     	; 0x2162 <_fpadd_parts+0x76>
    2138:	92 30       	cpi	r25, 0x02	; 2
    213a:	09 f0       	breq	.+2      	; 0x213e <_fpadd_parts+0x52>
    213c:	1d c1       	rjmp	.+570    	; 0x2378 <_fpadd_parts+0x28c>
    213e:	9a 01       	movw	r18, r20
    2140:	ad 01       	movw	r20, r26
    2142:	88 e0       	ldi	r24, 0x08	; 8
    2144:	ea 01       	movw	r28, r20
    2146:	09 90       	ld	r0, Y+
    2148:	ae 01       	movw	r20, r28
    214a:	e9 01       	movw	r28, r18
    214c:	09 92       	st	Y+, r0
    214e:	9e 01       	movw	r18, r28
    2150:	81 50       	subi	r24, 0x01	; 1
    2152:	c1 f7       	brne	.-16     	; 0x2144 <_fpadd_parts+0x58>
    2154:	e2 01       	movw	r28, r4
    2156:	89 81       	ldd	r24, Y+1	; 0x01
    2158:	11 96       	adiw	r26, 0x01	; 1
    215a:	9c 91       	ld	r25, X
    215c:	89 23       	and	r24, r25
    215e:	81 83       	std	Z+1, r24	; 0x01
    2160:	08 c1       	rjmp	.+528    	; 0x2372 <_fpadd_parts+0x286>
    2162:	92 30       	cpi	r25, 0x02	; 2
    2164:	09 f4       	brne	.+2      	; 0x2168 <_fpadd_parts+0x7c>
    2166:	07 c1       	rjmp	.+526    	; 0x2376 <_fpadd_parts+0x28a>
    2168:	12 96       	adiw	r26, 0x02	; 2
    216a:	2d 90       	ld	r2, X+
    216c:	3c 90       	ld	r3, X
    216e:	13 97       	sbiw	r26, 0x03	; 3
    2170:	eb 01       	movw	r28, r22
    2172:	8a 81       	ldd	r24, Y+2	; 0x02
    2174:	9b 81       	ldd	r25, Y+3	; 0x03
    2176:	14 96       	adiw	r26, 0x04	; 4
    2178:	ad 90       	ld	r10, X+
    217a:	bd 90       	ld	r11, X+
    217c:	cd 90       	ld	r12, X+
    217e:	dc 90       	ld	r13, X
    2180:	17 97       	sbiw	r26, 0x07	; 7
    2182:	ec 80       	ldd	r14, Y+4	; 0x04
    2184:	fd 80       	ldd	r15, Y+5	; 0x05
    2186:	0e 81       	ldd	r16, Y+6	; 0x06
    2188:	1f 81       	ldd	r17, Y+7	; 0x07
    218a:	91 01       	movw	r18, r2
    218c:	28 1b       	sub	r18, r24
    218e:	39 0b       	sbc	r19, r25
    2190:	b9 01       	movw	r22, r18
    2192:	37 ff       	sbrs	r19, 7
    2194:	04 c0       	rjmp	.+8      	; 0x219e <_fpadd_parts+0xb2>
    2196:	66 27       	eor	r22, r22
    2198:	77 27       	eor	r23, r23
    219a:	62 1b       	sub	r22, r18
    219c:	73 0b       	sbc	r23, r19
    219e:	60 32       	cpi	r22, 0x20	; 32
    21a0:	71 05       	cpc	r23, r1
    21a2:	0c f0       	brlt	.+2      	; 0x21a6 <_fpadd_parts+0xba>
    21a4:	61 c0       	rjmp	.+194    	; 0x2268 <_fpadd_parts+0x17c>
    21a6:	12 16       	cp	r1, r18
    21a8:	13 06       	cpc	r1, r19
    21aa:	6c f5       	brge	.+90     	; 0x2206 <_fpadd_parts+0x11a>
    21ac:	37 01       	movw	r6, r14
    21ae:	48 01       	movw	r8, r16
    21b0:	06 2e       	mov	r0, r22
    21b2:	04 c0       	rjmp	.+8      	; 0x21bc <_fpadd_parts+0xd0>
    21b4:	96 94       	lsr	r9
    21b6:	87 94       	ror	r8
    21b8:	77 94       	ror	r7
    21ba:	67 94       	ror	r6
    21bc:	0a 94       	dec	r0
    21be:	d2 f7       	brpl	.-12     	; 0x21b4 <_fpadd_parts+0xc8>
    21c0:	21 e0       	ldi	r18, 0x01	; 1
    21c2:	30 e0       	ldi	r19, 0x00	; 0
    21c4:	40 e0       	ldi	r20, 0x00	; 0
    21c6:	50 e0       	ldi	r21, 0x00	; 0
    21c8:	04 c0       	rjmp	.+8      	; 0x21d2 <_fpadd_parts+0xe6>
    21ca:	22 0f       	add	r18, r18
    21cc:	33 1f       	adc	r19, r19
    21ce:	44 1f       	adc	r20, r20
    21d0:	55 1f       	adc	r21, r21
    21d2:	6a 95       	dec	r22
    21d4:	d2 f7       	brpl	.-12     	; 0x21ca <_fpadd_parts+0xde>
    21d6:	21 50       	subi	r18, 0x01	; 1
    21d8:	30 40       	sbci	r19, 0x00	; 0
    21da:	40 40       	sbci	r20, 0x00	; 0
    21dc:	50 40       	sbci	r21, 0x00	; 0
    21de:	2e 21       	and	r18, r14
    21e0:	3f 21       	and	r19, r15
    21e2:	40 23       	and	r20, r16
    21e4:	51 23       	and	r21, r17
    21e6:	21 15       	cp	r18, r1
    21e8:	31 05       	cpc	r19, r1
    21ea:	41 05       	cpc	r20, r1
    21ec:	51 05       	cpc	r21, r1
    21ee:	21 f0       	breq	.+8      	; 0x21f8 <_fpadd_parts+0x10c>
    21f0:	21 e0       	ldi	r18, 0x01	; 1
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	40 e0       	ldi	r20, 0x00	; 0
    21f6:	50 e0       	ldi	r21, 0x00	; 0
    21f8:	79 01       	movw	r14, r18
    21fa:	8a 01       	movw	r16, r20
    21fc:	e6 28       	or	r14, r6
    21fe:	f7 28       	or	r15, r7
    2200:	08 29       	or	r16, r8
    2202:	19 29       	or	r17, r9
    2204:	3c c0       	rjmp	.+120    	; 0x227e <_fpadd_parts+0x192>
    2206:	23 2b       	or	r18, r19
    2208:	d1 f1       	breq	.+116    	; 0x227e <_fpadd_parts+0x192>
    220a:	26 0e       	add	r2, r22
    220c:	37 1e       	adc	r3, r23
    220e:	35 01       	movw	r6, r10
    2210:	46 01       	movw	r8, r12
    2212:	06 2e       	mov	r0, r22
    2214:	04 c0       	rjmp	.+8      	; 0x221e <_fpadd_parts+0x132>
    2216:	96 94       	lsr	r9
    2218:	87 94       	ror	r8
    221a:	77 94       	ror	r7
    221c:	67 94       	ror	r6
    221e:	0a 94       	dec	r0
    2220:	d2 f7       	brpl	.-12     	; 0x2216 <_fpadd_parts+0x12a>
    2222:	21 e0       	ldi	r18, 0x01	; 1
    2224:	30 e0       	ldi	r19, 0x00	; 0
    2226:	40 e0       	ldi	r20, 0x00	; 0
    2228:	50 e0       	ldi	r21, 0x00	; 0
    222a:	04 c0       	rjmp	.+8      	; 0x2234 <_fpadd_parts+0x148>
    222c:	22 0f       	add	r18, r18
    222e:	33 1f       	adc	r19, r19
    2230:	44 1f       	adc	r20, r20
    2232:	55 1f       	adc	r21, r21
    2234:	6a 95       	dec	r22
    2236:	d2 f7       	brpl	.-12     	; 0x222c <_fpadd_parts+0x140>
    2238:	21 50       	subi	r18, 0x01	; 1
    223a:	30 40       	sbci	r19, 0x00	; 0
    223c:	40 40       	sbci	r20, 0x00	; 0
    223e:	50 40       	sbci	r21, 0x00	; 0
    2240:	2a 21       	and	r18, r10
    2242:	3b 21       	and	r19, r11
    2244:	4c 21       	and	r20, r12
    2246:	5d 21       	and	r21, r13
    2248:	21 15       	cp	r18, r1
    224a:	31 05       	cpc	r19, r1
    224c:	41 05       	cpc	r20, r1
    224e:	51 05       	cpc	r21, r1
    2250:	21 f0       	breq	.+8      	; 0x225a <_fpadd_parts+0x16e>
    2252:	21 e0       	ldi	r18, 0x01	; 1
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	40 e0       	ldi	r20, 0x00	; 0
    2258:	50 e0       	ldi	r21, 0x00	; 0
    225a:	59 01       	movw	r10, r18
    225c:	6a 01       	movw	r12, r20
    225e:	a6 28       	or	r10, r6
    2260:	b7 28       	or	r11, r7
    2262:	c8 28       	or	r12, r8
    2264:	d9 28       	or	r13, r9
    2266:	0b c0       	rjmp	.+22     	; 0x227e <_fpadd_parts+0x192>
    2268:	82 15       	cp	r24, r2
    226a:	93 05       	cpc	r25, r3
    226c:	2c f0       	brlt	.+10     	; 0x2278 <_fpadd_parts+0x18c>
    226e:	1c 01       	movw	r2, r24
    2270:	aa 24       	eor	r10, r10
    2272:	bb 24       	eor	r11, r11
    2274:	65 01       	movw	r12, r10
    2276:	03 c0       	rjmp	.+6      	; 0x227e <_fpadd_parts+0x192>
    2278:	ee 24       	eor	r14, r14
    227a:	ff 24       	eor	r15, r15
    227c:	87 01       	movw	r16, r14
    227e:	11 96       	adiw	r26, 0x01	; 1
    2280:	9c 91       	ld	r25, X
    2282:	d2 01       	movw	r26, r4
    2284:	11 96       	adiw	r26, 0x01	; 1
    2286:	8c 91       	ld	r24, X
    2288:	98 17       	cp	r25, r24
    228a:	09 f4       	brne	.+2      	; 0x228e <_fpadd_parts+0x1a2>
    228c:	45 c0       	rjmp	.+138    	; 0x2318 <_fpadd_parts+0x22c>
    228e:	99 23       	and	r25, r25
    2290:	39 f0       	breq	.+14     	; 0x22a0 <_fpadd_parts+0x1b4>
    2292:	a8 01       	movw	r20, r16
    2294:	97 01       	movw	r18, r14
    2296:	2a 19       	sub	r18, r10
    2298:	3b 09       	sbc	r19, r11
    229a:	4c 09       	sbc	r20, r12
    229c:	5d 09       	sbc	r21, r13
    229e:	06 c0       	rjmp	.+12     	; 0x22ac <_fpadd_parts+0x1c0>
    22a0:	a6 01       	movw	r20, r12
    22a2:	95 01       	movw	r18, r10
    22a4:	2e 19       	sub	r18, r14
    22a6:	3f 09       	sbc	r19, r15
    22a8:	40 0b       	sbc	r20, r16
    22aa:	51 0b       	sbc	r21, r17
    22ac:	57 fd       	sbrc	r21, 7
    22ae:	08 c0       	rjmp	.+16     	; 0x22c0 <_fpadd_parts+0x1d4>
    22b0:	11 82       	std	Z+1, r1	; 0x01
    22b2:	33 82       	std	Z+3, r3	; 0x03
    22b4:	22 82       	std	Z+2, r2	; 0x02
    22b6:	24 83       	std	Z+4, r18	; 0x04
    22b8:	35 83       	std	Z+5, r19	; 0x05
    22ba:	46 83       	std	Z+6, r20	; 0x06
    22bc:	57 83       	std	Z+7, r21	; 0x07
    22be:	1d c0       	rjmp	.+58     	; 0x22fa <_fpadd_parts+0x20e>
    22c0:	81 e0       	ldi	r24, 0x01	; 1
    22c2:	81 83       	std	Z+1, r24	; 0x01
    22c4:	33 82       	std	Z+3, r3	; 0x03
    22c6:	22 82       	std	Z+2, r2	; 0x02
    22c8:	88 27       	eor	r24, r24
    22ca:	99 27       	eor	r25, r25
    22cc:	dc 01       	movw	r26, r24
    22ce:	82 1b       	sub	r24, r18
    22d0:	93 0b       	sbc	r25, r19
    22d2:	a4 0b       	sbc	r26, r20
    22d4:	b5 0b       	sbc	r27, r21
    22d6:	84 83       	std	Z+4, r24	; 0x04
    22d8:	95 83       	std	Z+5, r25	; 0x05
    22da:	a6 83       	std	Z+6, r26	; 0x06
    22dc:	b7 83       	std	Z+7, r27	; 0x07
    22de:	0d c0       	rjmp	.+26     	; 0x22fa <_fpadd_parts+0x20e>
    22e0:	22 0f       	add	r18, r18
    22e2:	33 1f       	adc	r19, r19
    22e4:	44 1f       	adc	r20, r20
    22e6:	55 1f       	adc	r21, r21
    22e8:	24 83       	std	Z+4, r18	; 0x04
    22ea:	35 83       	std	Z+5, r19	; 0x05
    22ec:	46 83       	std	Z+6, r20	; 0x06
    22ee:	57 83       	std	Z+7, r21	; 0x07
    22f0:	82 81       	ldd	r24, Z+2	; 0x02
    22f2:	93 81       	ldd	r25, Z+3	; 0x03
    22f4:	01 97       	sbiw	r24, 0x01	; 1
    22f6:	93 83       	std	Z+3, r25	; 0x03
    22f8:	82 83       	std	Z+2, r24	; 0x02
    22fa:	24 81       	ldd	r18, Z+4	; 0x04
    22fc:	35 81       	ldd	r19, Z+5	; 0x05
    22fe:	46 81       	ldd	r20, Z+6	; 0x06
    2300:	57 81       	ldd	r21, Z+7	; 0x07
    2302:	da 01       	movw	r26, r20
    2304:	c9 01       	movw	r24, r18
    2306:	01 97       	sbiw	r24, 0x01	; 1
    2308:	a1 09       	sbc	r26, r1
    230a:	b1 09       	sbc	r27, r1
    230c:	8f 5f       	subi	r24, 0xFF	; 255
    230e:	9f 4f       	sbci	r25, 0xFF	; 255
    2310:	af 4f       	sbci	r26, 0xFF	; 255
    2312:	bf 43       	sbci	r27, 0x3F	; 63
    2314:	28 f3       	brcs	.-54     	; 0x22e0 <_fpadd_parts+0x1f4>
    2316:	0b c0       	rjmp	.+22     	; 0x232e <_fpadd_parts+0x242>
    2318:	91 83       	std	Z+1, r25	; 0x01
    231a:	33 82       	std	Z+3, r3	; 0x03
    231c:	22 82       	std	Z+2, r2	; 0x02
    231e:	ea 0c       	add	r14, r10
    2320:	fb 1c       	adc	r15, r11
    2322:	0c 1d       	adc	r16, r12
    2324:	1d 1d       	adc	r17, r13
    2326:	e4 82       	std	Z+4, r14	; 0x04
    2328:	f5 82       	std	Z+5, r15	; 0x05
    232a:	06 83       	std	Z+6, r16	; 0x06
    232c:	17 83       	std	Z+7, r17	; 0x07
    232e:	83 e0       	ldi	r24, 0x03	; 3
    2330:	80 83       	st	Z, r24
    2332:	24 81       	ldd	r18, Z+4	; 0x04
    2334:	35 81       	ldd	r19, Z+5	; 0x05
    2336:	46 81       	ldd	r20, Z+6	; 0x06
    2338:	57 81       	ldd	r21, Z+7	; 0x07
    233a:	57 ff       	sbrs	r21, 7
    233c:	1a c0       	rjmp	.+52     	; 0x2372 <_fpadd_parts+0x286>
    233e:	c9 01       	movw	r24, r18
    2340:	aa 27       	eor	r26, r26
    2342:	97 fd       	sbrc	r25, 7
    2344:	a0 95       	com	r26
    2346:	ba 2f       	mov	r27, r26
    2348:	81 70       	andi	r24, 0x01	; 1
    234a:	90 70       	andi	r25, 0x00	; 0
    234c:	a0 70       	andi	r26, 0x00	; 0
    234e:	b0 70       	andi	r27, 0x00	; 0
    2350:	56 95       	lsr	r21
    2352:	47 95       	ror	r20
    2354:	37 95       	ror	r19
    2356:	27 95       	ror	r18
    2358:	82 2b       	or	r24, r18
    235a:	93 2b       	or	r25, r19
    235c:	a4 2b       	or	r26, r20
    235e:	b5 2b       	or	r27, r21
    2360:	84 83       	std	Z+4, r24	; 0x04
    2362:	95 83       	std	Z+5, r25	; 0x05
    2364:	a6 83       	std	Z+6, r26	; 0x06
    2366:	b7 83       	std	Z+7, r27	; 0x07
    2368:	82 81       	ldd	r24, Z+2	; 0x02
    236a:	93 81       	ldd	r25, Z+3	; 0x03
    236c:	01 96       	adiw	r24, 0x01	; 1
    236e:	93 83       	std	Z+3, r25	; 0x03
    2370:	82 83       	std	Z+2, r24	; 0x02
    2372:	df 01       	movw	r26, r30
    2374:	01 c0       	rjmp	.+2      	; 0x2378 <_fpadd_parts+0x28c>
    2376:	d2 01       	movw	r26, r4
    2378:	cd 01       	movw	r24, r26
    237a:	cd b7       	in	r28, 0x3d	; 61
    237c:	de b7       	in	r29, 0x3e	; 62
    237e:	e2 e1       	ldi	r30, 0x12	; 18
    2380:	0c 94 1a 18 	jmp	0x3034	; 0x3034 <__epilogue_restores__>

00002384 <__subsf3>:
    2384:	a0 e2       	ldi	r26, 0x20	; 32
    2386:	b0 e0       	ldi	r27, 0x00	; 0
    2388:	e8 ec       	ldi	r30, 0xC8	; 200
    238a:	f1 e1       	ldi	r31, 0x11	; 17
    238c:	0c 94 0a 18 	jmp	0x3014	; 0x3014 <__prologue_saves__+0x18>
    2390:	69 83       	std	Y+1, r22	; 0x01
    2392:	7a 83       	std	Y+2, r23	; 0x02
    2394:	8b 83       	std	Y+3, r24	; 0x03
    2396:	9c 83       	std	Y+4, r25	; 0x04
    2398:	2d 83       	std	Y+5, r18	; 0x05
    239a:	3e 83       	std	Y+6, r19	; 0x06
    239c:	4f 83       	std	Y+7, r20	; 0x07
    239e:	58 87       	std	Y+8, r21	; 0x08
    23a0:	e9 e0       	ldi	r30, 0x09	; 9
    23a2:	ee 2e       	mov	r14, r30
    23a4:	f1 2c       	mov	r15, r1
    23a6:	ec 0e       	add	r14, r28
    23a8:	fd 1e       	adc	r15, r29
    23aa:	ce 01       	movw	r24, r28
    23ac:	01 96       	adiw	r24, 0x01	; 1
    23ae:	b7 01       	movw	r22, r14
    23b0:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <__unpack_f>
    23b4:	8e 01       	movw	r16, r28
    23b6:	0f 5e       	subi	r16, 0xEF	; 239
    23b8:	1f 4f       	sbci	r17, 0xFF	; 255
    23ba:	ce 01       	movw	r24, r28
    23bc:	05 96       	adiw	r24, 0x05	; 5
    23be:	b8 01       	movw	r22, r16
    23c0:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <__unpack_f>
    23c4:	8a 89       	ldd	r24, Y+18	; 0x12
    23c6:	91 e0       	ldi	r25, 0x01	; 1
    23c8:	89 27       	eor	r24, r25
    23ca:	8a 8b       	std	Y+18, r24	; 0x12
    23cc:	c7 01       	movw	r24, r14
    23ce:	b8 01       	movw	r22, r16
    23d0:	ae 01       	movw	r20, r28
    23d2:	47 5e       	subi	r20, 0xE7	; 231
    23d4:	5f 4f       	sbci	r21, 0xFF	; 255
    23d6:	0e 94 76 10 	call	0x20ec	; 0x20ec <_fpadd_parts>
    23da:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <__pack_f>
    23de:	a0 96       	adiw	r28, 0x20	; 32
    23e0:	e6 e0       	ldi	r30, 0x06	; 6
    23e2:	0c 94 26 18 	jmp	0x304c	; 0x304c <__epilogue_restores__+0x18>

000023e6 <__addsf3>:
    23e6:	a0 e2       	ldi	r26, 0x20	; 32
    23e8:	b0 e0       	ldi	r27, 0x00	; 0
    23ea:	e9 ef       	ldi	r30, 0xF9	; 249
    23ec:	f1 e1       	ldi	r31, 0x11	; 17
    23ee:	0c 94 0a 18 	jmp	0x3014	; 0x3014 <__prologue_saves__+0x18>
    23f2:	69 83       	std	Y+1, r22	; 0x01
    23f4:	7a 83       	std	Y+2, r23	; 0x02
    23f6:	8b 83       	std	Y+3, r24	; 0x03
    23f8:	9c 83       	std	Y+4, r25	; 0x04
    23fa:	2d 83       	std	Y+5, r18	; 0x05
    23fc:	3e 83       	std	Y+6, r19	; 0x06
    23fe:	4f 83       	std	Y+7, r20	; 0x07
    2400:	58 87       	std	Y+8, r21	; 0x08
    2402:	f9 e0       	ldi	r31, 0x09	; 9
    2404:	ef 2e       	mov	r14, r31
    2406:	f1 2c       	mov	r15, r1
    2408:	ec 0e       	add	r14, r28
    240a:	fd 1e       	adc	r15, r29
    240c:	ce 01       	movw	r24, r28
    240e:	01 96       	adiw	r24, 0x01	; 1
    2410:	b7 01       	movw	r22, r14
    2412:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <__unpack_f>
    2416:	8e 01       	movw	r16, r28
    2418:	0f 5e       	subi	r16, 0xEF	; 239
    241a:	1f 4f       	sbci	r17, 0xFF	; 255
    241c:	ce 01       	movw	r24, r28
    241e:	05 96       	adiw	r24, 0x05	; 5
    2420:	b8 01       	movw	r22, r16
    2422:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <__unpack_f>
    2426:	c7 01       	movw	r24, r14
    2428:	b8 01       	movw	r22, r16
    242a:	ae 01       	movw	r20, r28
    242c:	47 5e       	subi	r20, 0xE7	; 231
    242e:	5f 4f       	sbci	r21, 0xFF	; 255
    2430:	0e 94 76 10 	call	0x20ec	; 0x20ec <_fpadd_parts>
    2434:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <__pack_f>
    2438:	a0 96       	adiw	r28, 0x20	; 32
    243a:	e6 e0       	ldi	r30, 0x06	; 6
    243c:	0c 94 26 18 	jmp	0x304c	; 0x304c <__epilogue_restores__+0x18>

00002440 <__mulsf3>:
    2440:	a0 e2       	ldi	r26, 0x20	; 32
    2442:	b0 e0       	ldi	r27, 0x00	; 0
    2444:	e6 e2       	ldi	r30, 0x26	; 38
    2446:	f2 e1       	ldi	r31, 0x12	; 18
    2448:	0c 94 fe 17 	jmp	0x2ffc	; 0x2ffc <__prologue_saves__>
    244c:	69 83       	std	Y+1, r22	; 0x01
    244e:	7a 83       	std	Y+2, r23	; 0x02
    2450:	8b 83       	std	Y+3, r24	; 0x03
    2452:	9c 83       	std	Y+4, r25	; 0x04
    2454:	2d 83       	std	Y+5, r18	; 0x05
    2456:	3e 83       	std	Y+6, r19	; 0x06
    2458:	4f 83       	std	Y+7, r20	; 0x07
    245a:	58 87       	std	Y+8, r21	; 0x08
    245c:	ce 01       	movw	r24, r28
    245e:	01 96       	adiw	r24, 0x01	; 1
    2460:	be 01       	movw	r22, r28
    2462:	67 5f       	subi	r22, 0xF7	; 247
    2464:	7f 4f       	sbci	r23, 0xFF	; 255
    2466:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <__unpack_f>
    246a:	ce 01       	movw	r24, r28
    246c:	05 96       	adiw	r24, 0x05	; 5
    246e:	be 01       	movw	r22, r28
    2470:	6f 5e       	subi	r22, 0xEF	; 239
    2472:	7f 4f       	sbci	r23, 0xFF	; 255
    2474:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <__unpack_f>
    2478:	99 85       	ldd	r25, Y+9	; 0x09
    247a:	92 30       	cpi	r25, 0x02	; 2
    247c:	88 f0       	brcs	.+34     	; 0x24a0 <__mulsf3+0x60>
    247e:	89 89       	ldd	r24, Y+17	; 0x11
    2480:	82 30       	cpi	r24, 0x02	; 2
    2482:	c8 f0       	brcs	.+50     	; 0x24b6 <__mulsf3+0x76>
    2484:	94 30       	cpi	r25, 0x04	; 4
    2486:	19 f4       	brne	.+6      	; 0x248e <__mulsf3+0x4e>
    2488:	82 30       	cpi	r24, 0x02	; 2
    248a:	51 f4       	brne	.+20     	; 0x24a0 <__mulsf3+0x60>
    248c:	04 c0       	rjmp	.+8      	; 0x2496 <__mulsf3+0x56>
    248e:	84 30       	cpi	r24, 0x04	; 4
    2490:	29 f4       	brne	.+10     	; 0x249c <__mulsf3+0x5c>
    2492:	92 30       	cpi	r25, 0x02	; 2
    2494:	81 f4       	brne	.+32     	; 0x24b6 <__mulsf3+0x76>
    2496:	88 e4       	ldi	r24, 0x48	; 72
    2498:	92 e0       	ldi	r25, 0x02	; 2
    249a:	c6 c0       	rjmp	.+396    	; 0x2628 <__mulsf3+0x1e8>
    249c:	92 30       	cpi	r25, 0x02	; 2
    249e:	49 f4       	brne	.+18     	; 0x24b2 <__mulsf3+0x72>
    24a0:	20 e0       	ldi	r18, 0x00	; 0
    24a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24a4:	8a 89       	ldd	r24, Y+18	; 0x12
    24a6:	98 13       	cpse	r25, r24
    24a8:	21 e0       	ldi	r18, 0x01	; 1
    24aa:	2a 87       	std	Y+10, r18	; 0x0a
    24ac:	ce 01       	movw	r24, r28
    24ae:	09 96       	adiw	r24, 0x09	; 9
    24b0:	bb c0       	rjmp	.+374    	; 0x2628 <__mulsf3+0x1e8>
    24b2:	82 30       	cpi	r24, 0x02	; 2
    24b4:	49 f4       	brne	.+18     	; 0x24c8 <__mulsf3+0x88>
    24b6:	20 e0       	ldi	r18, 0x00	; 0
    24b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ba:	8a 89       	ldd	r24, Y+18	; 0x12
    24bc:	98 13       	cpse	r25, r24
    24be:	21 e0       	ldi	r18, 0x01	; 1
    24c0:	2a 8b       	std	Y+18, r18	; 0x12
    24c2:	ce 01       	movw	r24, r28
    24c4:	41 96       	adiw	r24, 0x11	; 17
    24c6:	b0 c0       	rjmp	.+352    	; 0x2628 <__mulsf3+0x1e8>
    24c8:	2d 84       	ldd	r2, Y+13	; 0x0d
    24ca:	3e 84       	ldd	r3, Y+14	; 0x0e
    24cc:	4f 84       	ldd	r4, Y+15	; 0x0f
    24ce:	58 88       	ldd	r5, Y+16	; 0x10
    24d0:	6d 88       	ldd	r6, Y+21	; 0x15
    24d2:	7e 88       	ldd	r7, Y+22	; 0x16
    24d4:	8f 88       	ldd	r8, Y+23	; 0x17
    24d6:	98 8c       	ldd	r9, Y+24	; 0x18
    24d8:	ee 24       	eor	r14, r14
    24da:	ff 24       	eor	r15, r15
    24dc:	87 01       	movw	r16, r14
    24de:	aa 24       	eor	r10, r10
    24e0:	bb 24       	eor	r11, r11
    24e2:	65 01       	movw	r12, r10
    24e4:	40 e0       	ldi	r20, 0x00	; 0
    24e6:	50 e0       	ldi	r21, 0x00	; 0
    24e8:	60 e0       	ldi	r22, 0x00	; 0
    24ea:	70 e0       	ldi	r23, 0x00	; 0
    24ec:	e0 e0       	ldi	r30, 0x00	; 0
    24ee:	f0 e0       	ldi	r31, 0x00	; 0
    24f0:	c1 01       	movw	r24, r2
    24f2:	81 70       	andi	r24, 0x01	; 1
    24f4:	90 70       	andi	r25, 0x00	; 0
    24f6:	89 2b       	or	r24, r25
    24f8:	e9 f0       	breq	.+58     	; 0x2534 <__mulsf3+0xf4>
    24fa:	e6 0c       	add	r14, r6
    24fc:	f7 1c       	adc	r15, r7
    24fe:	08 1d       	adc	r16, r8
    2500:	19 1d       	adc	r17, r9
    2502:	9a 01       	movw	r18, r20
    2504:	ab 01       	movw	r20, r22
    2506:	2a 0d       	add	r18, r10
    2508:	3b 1d       	adc	r19, r11
    250a:	4c 1d       	adc	r20, r12
    250c:	5d 1d       	adc	r21, r13
    250e:	80 e0       	ldi	r24, 0x00	; 0
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	a0 e0       	ldi	r26, 0x00	; 0
    2514:	b0 e0       	ldi	r27, 0x00	; 0
    2516:	e6 14       	cp	r14, r6
    2518:	f7 04       	cpc	r15, r7
    251a:	08 05       	cpc	r16, r8
    251c:	19 05       	cpc	r17, r9
    251e:	20 f4       	brcc	.+8      	; 0x2528 <__mulsf3+0xe8>
    2520:	81 e0       	ldi	r24, 0x01	; 1
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	a0 e0       	ldi	r26, 0x00	; 0
    2526:	b0 e0       	ldi	r27, 0x00	; 0
    2528:	ba 01       	movw	r22, r20
    252a:	a9 01       	movw	r20, r18
    252c:	48 0f       	add	r20, r24
    252e:	59 1f       	adc	r21, r25
    2530:	6a 1f       	adc	r22, r26
    2532:	7b 1f       	adc	r23, r27
    2534:	aa 0c       	add	r10, r10
    2536:	bb 1c       	adc	r11, r11
    2538:	cc 1c       	adc	r12, r12
    253a:	dd 1c       	adc	r13, r13
    253c:	97 fe       	sbrs	r9, 7
    253e:	08 c0       	rjmp	.+16     	; 0x2550 <__mulsf3+0x110>
    2540:	81 e0       	ldi	r24, 0x01	; 1
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	a0 e0       	ldi	r26, 0x00	; 0
    2546:	b0 e0       	ldi	r27, 0x00	; 0
    2548:	a8 2a       	or	r10, r24
    254a:	b9 2a       	or	r11, r25
    254c:	ca 2a       	or	r12, r26
    254e:	db 2a       	or	r13, r27
    2550:	31 96       	adiw	r30, 0x01	; 1
    2552:	e0 32       	cpi	r30, 0x20	; 32
    2554:	f1 05       	cpc	r31, r1
    2556:	49 f0       	breq	.+18     	; 0x256a <__mulsf3+0x12a>
    2558:	66 0c       	add	r6, r6
    255a:	77 1c       	adc	r7, r7
    255c:	88 1c       	adc	r8, r8
    255e:	99 1c       	adc	r9, r9
    2560:	56 94       	lsr	r5
    2562:	47 94       	ror	r4
    2564:	37 94       	ror	r3
    2566:	27 94       	ror	r2
    2568:	c3 cf       	rjmp	.-122    	; 0x24f0 <__mulsf3+0xb0>
    256a:	fa 85       	ldd	r31, Y+10	; 0x0a
    256c:	ea 89       	ldd	r30, Y+18	; 0x12
    256e:	2b 89       	ldd	r18, Y+19	; 0x13
    2570:	3c 89       	ldd	r19, Y+20	; 0x14
    2572:	8b 85       	ldd	r24, Y+11	; 0x0b
    2574:	9c 85       	ldd	r25, Y+12	; 0x0c
    2576:	28 0f       	add	r18, r24
    2578:	39 1f       	adc	r19, r25
    257a:	2e 5f       	subi	r18, 0xFE	; 254
    257c:	3f 4f       	sbci	r19, 0xFF	; 255
    257e:	17 c0       	rjmp	.+46     	; 0x25ae <__mulsf3+0x16e>
    2580:	ca 01       	movw	r24, r20
    2582:	81 70       	andi	r24, 0x01	; 1
    2584:	90 70       	andi	r25, 0x00	; 0
    2586:	89 2b       	or	r24, r25
    2588:	61 f0       	breq	.+24     	; 0x25a2 <__mulsf3+0x162>
    258a:	16 95       	lsr	r17
    258c:	07 95       	ror	r16
    258e:	f7 94       	ror	r15
    2590:	e7 94       	ror	r14
    2592:	80 e0       	ldi	r24, 0x00	; 0
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	a0 e0       	ldi	r26, 0x00	; 0
    2598:	b0 e8       	ldi	r27, 0x80	; 128
    259a:	e8 2a       	or	r14, r24
    259c:	f9 2a       	or	r15, r25
    259e:	0a 2b       	or	r16, r26
    25a0:	1b 2b       	or	r17, r27
    25a2:	76 95       	lsr	r23
    25a4:	67 95       	ror	r22
    25a6:	57 95       	ror	r21
    25a8:	47 95       	ror	r20
    25aa:	2f 5f       	subi	r18, 0xFF	; 255
    25ac:	3f 4f       	sbci	r19, 0xFF	; 255
    25ae:	77 fd       	sbrc	r23, 7
    25b0:	e7 cf       	rjmp	.-50     	; 0x2580 <__mulsf3+0x140>
    25b2:	0c c0       	rjmp	.+24     	; 0x25cc <__mulsf3+0x18c>
    25b4:	44 0f       	add	r20, r20
    25b6:	55 1f       	adc	r21, r21
    25b8:	66 1f       	adc	r22, r22
    25ba:	77 1f       	adc	r23, r23
    25bc:	17 fd       	sbrc	r17, 7
    25be:	41 60       	ori	r20, 0x01	; 1
    25c0:	ee 0c       	add	r14, r14
    25c2:	ff 1c       	adc	r15, r15
    25c4:	00 1f       	adc	r16, r16
    25c6:	11 1f       	adc	r17, r17
    25c8:	21 50       	subi	r18, 0x01	; 1
    25ca:	30 40       	sbci	r19, 0x00	; 0
    25cc:	40 30       	cpi	r20, 0x00	; 0
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	59 07       	cpc	r21, r25
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	69 07       	cpc	r22, r25
    25d6:	90 e4       	ldi	r25, 0x40	; 64
    25d8:	79 07       	cpc	r23, r25
    25da:	60 f3       	brcs	.-40     	; 0x25b4 <__mulsf3+0x174>
    25dc:	2b 8f       	std	Y+27, r18	; 0x1b
    25de:	3c 8f       	std	Y+28, r19	; 0x1c
    25e0:	db 01       	movw	r26, r22
    25e2:	ca 01       	movw	r24, r20
    25e4:	8f 77       	andi	r24, 0x7F	; 127
    25e6:	90 70       	andi	r25, 0x00	; 0
    25e8:	a0 70       	andi	r26, 0x00	; 0
    25ea:	b0 70       	andi	r27, 0x00	; 0
    25ec:	80 34       	cpi	r24, 0x40	; 64
    25ee:	91 05       	cpc	r25, r1
    25f0:	a1 05       	cpc	r26, r1
    25f2:	b1 05       	cpc	r27, r1
    25f4:	61 f4       	brne	.+24     	; 0x260e <__mulsf3+0x1ce>
    25f6:	47 fd       	sbrc	r20, 7
    25f8:	0a c0       	rjmp	.+20     	; 0x260e <__mulsf3+0x1ce>
    25fa:	e1 14       	cp	r14, r1
    25fc:	f1 04       	cpc	r15, r1
    25fe:	01 05       	cpc	r16, r1
    2600:	11 05       	cpc	r17, r1
    2602:	29 f0       	breq	.+10     	; 0x260e <__mulsf3+0x1ce>
    2604:	40 5c       	subi	r20, 0xC0	; 192
    2606:	5f 4f       	sbci	r21, 0xFF	; 255
    2608:	6f 4f       	sbci	r22, 0xFF	; 255
    260a:	7f 4f       	sbci	r23, 0xFF	; 255
    260c:	40 78       	andi	r20, 0x80	; 128
    260e:	1a 8e       	std	Y+26, r1	; 0x1a
    2610:	fe 17       	cp	r31, r30
    2612:	11 f0       	breq	.+4      	; 0x2618 <__mulsf3+0x1d8>
    2614:	81 e0       	ldi	r24, 0x01	; 1
    2616:	8a 8f       	std	Y+26, r24	; 0x1a
    2618:	4d 8f       	std	Y+29, r20	; 0x1d
    261a:	5e 8f       	std	Y+30, r21	; 0x1e
    261c:	6f 8f       	std	Y+31, r22	; 0x1f
    261e:	78 a3       	std	Y+32, r23	; 0x20
    2620:	83 e0       	ldi	r24, 0x03	; 3
    2622:	89 8f       	std	Y+25, r24	; 0x19
    2624:	ce 01       	movw	r24, r28
    2626:	49 96       	adiw	r24, 0x19	; 25
    2628:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <__pack_f>
    262c:	a0 96       	adiw	r28, 0x20	; 32
    262e:	e2 e1       	ldi	r30, 0x12	; 18
    2630:	0c 94 1a 18 	jmp	0x3034	; 0x3034 <__epilogue_restores__>

00002634 <__divsf3>:
    2634:	a8 e1       	ldi	r26, 0x18	; 24
    2636:	b0 e0       	ldi	r27, 0x00	; 0
    2638:	e0 e2       	ldi	r30, 0x20	; 32
    263a:	f3 e1       	ldi	r31, 0x13	; 19
    263c:	0c 94 06 18 	jmp	0x300c	; 0x300c <__prologue_saves__+0x10>
    2640:	69 83       	std	Y+1, r22	; 0x01
    2642:	7a 83       	std	Y+2, r23	; 0x02
    2644:	8b 83       	std	Y+3, r24	; 0x03
    2646:	9c 83       	std	Y+4, r25	; 0x04
    2648:	2d 83       	std	Y+5, r18	; 0x05
    264a:	3e 83       	std	Y+6, r19	; 0x06
    264c:	4f 83       	std	Y+7, r20	; 0x07
    264e:	58 87       	std	Y+8, r21	; 0x08
    2650:	b9 e0       	ldi	r27, 0x09	; 9
    2652:	eb 2e       	mov	r14, r27
    2654:	f1 2c       	mov	r15, r1
    2656:	ec 0e       	add	r14, r28
    2658:	fd 1e       	adc	r15, r29
    265a:	ce 01       	movw	r24, r28
    265c:	01 96       	adiw	r24, 0x01	; 1
    265e:	b7 01       	movw	r22, r14
    2660:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <__unpack_f>
    2664:	8e 01       	movw	r16, r28
    2666:	0f 5e       	subi	r16, 0xEF	; 239
    2668:	1f 4f       	sbci	r17, 0xFF	; 255
    266a:	ce 01       	movw	r24, r28
    266c:	05 96       	adiw	r24, 0x05	; 5
    266e:	b8 01       	movw	r22, r16
    2670:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <__unpack_f>
    2674:	29 85       	ldd	r18, Y+9	; 0x09
    2676:	22 30       	cpi	r18, 0x02	; 2
    2678:	08 f4       	brcc	.+2      	; 0x267c <__divsf3+0x48>
    267a:	7e c0       	rjmp	.+252    	; 0x2778 <__divsf3+0x144>
    267c:	39 89       	ldd	r19, Y+17	; 0x11
    267e:	32 30       	cpi	r19, 0x02	; 2
    2680:	10 f4       	brcc	.+4      	; 0x2686 <__divsf3+0x52>
    2682:	b8 01       	movw	r22, r16
    2684:	7c c0       	rjmp	.+248    	; 0x277e <__divsf3+0x14a>
    2686:	8a 85       	ldd	r24, Y+10	; 0x0a
    2688:	9a 89       	ldd	r25, Y+18	; 0x12
    268a:	89 27       	eor	r24, r25
    268c:	8a 87       	std	Y+10, r24	; 0x0a
    268e:	24 30       	cpi	r18, 0x04	; 4
    2690:	11 f0       	breq	.+4      	; 0x2696 <__divsf3+0x62>
    2692:	22 30       	cpi	r18, 0x02	; 2
    2694:	31 f4       	brne	.+12     	; 0x26a2 <__divsf3+0x6e>
    2696:	23 17       	cp	r18, r19
    2698:	09 f0       	breq	.+2      	; 0x269c <__divsf3+0x68>
    269a:	6e c0       	rjmp	.+220    	; 0x2778 <__divsf3+0x144>
    269c:	68 e4       	ldi	r22, 0x48	; 72
    269e:	72 e0       	ldi	r23, 0x02	; 2
    26a0:	6e c0       	rjmp	.+220    	; 0x277e <__divsf3+0x14a>
    26a2:	34 30       	cpi	r19, 0x04	; 4
    26a4:	39 f4       	brne	.+14     	; 0x26b4 <__divsf3+0x80>
    26a6:	1d 86       	std	Y+13, r1	; 0x0d
    26a8:	1e 86       	std	Y+14, r1	; 0x0e
    26aa:	1f 86       	std	Y+15, r1	; 0x0f
    26ac:	18 8a       	std	Y+16, r1	; 0x10
    26ae:	1c 86       	std	Y+12, r1	; 0x0c
    26b0:	1b 86       	std	Y+11, r1	; 0x0b
    26b2:	04 c0       	rjmp	.+8      	; 0x26bc <__divsf3+0x88>
    26b4:	32 30       	cpi	r19, 0x02	; 2
    26b6:	21 f4       	brne	.+8      	; 0x26c0 <__divsf3+0x8c>
    26b8:	84 e0       	ldi	r24, 0x04	; 4
    26ba:	89 87       	std	Y+9, r24	; 0x09
    26bc:	b7 01       	movw	r22, r14
    26be:	5f c0       	rjmp	.+190    	; 0x277e <__divsf3+0x14a>
    26c0:	2b 85       	ldd	r18, Y+11	; 0x0b
    26c2:	3c 85       	ldd	r19, Y+12	; 0x0c
    26c4:	8b 89       	ldd	r24, Y+19	; 0x13
    26c6:	9c 89       	ldd	r25, Y+20	; 0x14
    26c8:	28 1b       	sub	r18, r24
    26ca:	39 0b       	sbc	r19, r25
    26cc:	3c 87       	std	Y+12, r19	; 0x0c
    26ce:	2b 87       	std	Y+11, r18	; 0x0b
    26d0:	ed 84       	ldd	r14, Y+13	; 0x0d
    26d2:	fe 84       	ldd	r15, Y+14	; 0x0e
    26d4:	0f 85       	ldd	r16, Y+15	; 0x0f
    26d6:	18 89       	ldd	r17, Y+16	; 0x10
    26d8:	ad 88       	ldd	r10, Y+21	; 0x15
    26da:	be 88       	ldd	r11, Y+22	; 0x16
    26dc:	cf 88       	ldd	r12, Y+23	; 0x17
    26de:	d8 8c       	ldd	r13, Y+24	; 0x18
    26e0:	ea 14       	cp	r14, r10
    26e2:	fb 04       	cpc	r15, r11
    26e4:	0c 05       	cpc	r16, r12
    26e6:	1d 05       	cpc	r17, r13
    26e8:	40 f4       	brcc	.+16     	; 0x26fa <__divsf3+0xc6>
    26ea:	ee 0c       	add	r14, r14
    26ec:	ff 1c       	adc	r15, r15
    26ee:	00 1f       	adc	r16, r16
    26f0:	11 1f       	adc	r17, r17
    26f2:	21 50       	subi	r18, 0x01	; 1
    26f4:	30 40       	sbci	r19, 0x00	; 0
    26f6:	3c 87       	std	Y+12, r19	; 0x0c
    26f8:	2b 87       	std	Y+11, r18	; 0x0b
    26fa:	20 e0       	ldi	r18, 0x00	; 0
    26fc:	30 e0       	ldi	r19, 0x00	; 0
    26fe:	40 e0       	ldi	r20, 0x00	; 0
    2700:	50 e0       	ldi	r21, 0x00	; 0
    2702:	80 e0       	ldi	r24, 0x00	; 0
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	a0 e0       	ldi	r26, 0x00	; 0
    2708:	b0 e4       	ldi	r27, 0x40	; 64
    270a:	60 e0       	ldi	r22, 0x00	; 0
    270c:	70 e0       	ldi	r23, 0x00	; 0
    270e:	ea 14       	cp	r14, r10
    2710:	fb 04       	cpc	r15, r11
    2712:	0c 05       	cpc	r16, r12
    2714:	1d 05       	cpc	r17, r13
    2716:	40 f0       	brcs	.+16     	; 0x2728 <__divsf3+0xf4>
    2718:	28 2b       	or	r18, r24
    271a:	39 2b       	or	r19, r25
    271c:	4a 2b       	or	r20, r26
    271e:	5b 2b       	or	r21, r27
    2720:	ea 18       	sub	r14, r10
    2722:	fb 08       	sbc	r15, r11
    2724:	0c 09       	sbc	r16, r12
    2726:	1d 09       	sbc	r17, r13
    2728:	b6 95       	lsr	r27
    272a:	a7 95       	ror	r26
    272c:	97 95       	ror	r25
    272e:	87 95       	ror	r24
    2730:	ee 0c       	add	r14, r14
    2732:	ff 1c       	adc	r15, r15
    2734:	00 1f       	adc	r16, r16
    2736:	11 1f       	adc	r17, r17
    2738:	6f 5f       	subi	r22, 0xFF	; 255
    273a:	7f 4f       	sbci	r23, 0xFF	; 255
    273c:	6f 31       	cpi	r22, 0x1F	; 31
    273e:	71 05       	cpc	r23, r1
    2740:	31 f7       	brne	.-52     	; 0x270e <__divsf3+0xda>
    2742:	da 01       	movw	r26, r20
    2744:	c9 01       	movw	r24, r18
    2746:	8f 77       	andi	r24, 0x7F	; 127
    2748:	90 70       	andi	r25, 0x00	; 0
    274a:	a0 70       	andi	r26, 0x00	; 0
    274c:	b0 70       	andi	r27, 0x00	; 0
    274e:	80 34       	cpi	r24, 0x40	; 64
    2750:	91 05       	cpc	r25, r1
    2752:	a1 05       	cpc	r26, r1
    2754:	b1 05       	cpc	r27, r1
    2756:	61 f4       	brne	.+24     	; 0x2770 <__divsf3+0x13c>
    2758:	27 fd       	sbrc	r18, 7
    275a:	0a c0       	rjmp	.+20     	; 0x2770 <__divsf3+0x13c>
    275c:	e1 14       	cp	r14, r1
    275e:	f1 04       	cpc	r15, r1
    2760:	01 05       	cpc	r16, r1
    2762:	11 05       	cpc	r17, r1
    2764:	29 f0       	breq	.+10     	; 0x2770 <__divsf3+0x13c>
    2766:	20 5c       	subi	r18, 0xC0	; 192
    2768:	3f 4f       	sbci	r19, 0xFF	; 255
    276a:	4f 4f       	sbci	r20, 0xFF	; 255
    276c:	5f 4f       	sbci	r21, 0xFF	; 255
    276e:	20 78       	andi	r18, 0x80	; 128
    2770:	2d 87       	std	Y+13, r18	; 0x0d
    2772:	3e 87       	std	Y+14, r19	; 0x0e
    2774:	4f 87       	std	Y+15, r20	; 0x0f
    2776:	58 8b       	std	Y+16, r21	; 0x10
    2778:	be 01       	movw	r22, r28
    277a:	67 5f       	subi	r22, 0xF7	; 247
    277c:	7f 4f       	sbci	r23, 0xFF	; 255
    277e:	cb 01       	movw	r24, r22
    2780:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <__pack_f>
    2784:	68 96       	adiw	r28, 0x18	; 24
    2786:	ea e0       	ldi	r30, 0x0A	; 10
    2788:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__epilogue_restores__+0x10>

0000278c <__gtsf2>:
    278c:	a8 e1       	ldi	r26, 0x18	; 24
    278e:	b0 e0       	ldi	r27, 0x00	; 0
    2790:	ec ec       	ldi	r30, 0xCC	; 204
    2792:	f3 e1       	ldi	r31, 0x13	; 19
    2794:	0c 94 0a 18 	jmp	0x3014	; 0x3014 <__prologue_saves__+0x18>
    2798:	69 83       	std	Y+1, r22	; 0x01
    279a:	7a 83       	std	Y+2, r23	; 0x02
    279c:	8b 83       	std	Y+3, r24	; 0x03
    279e:	9c 83       	std	Y+4, r25	; 0x04
    27a0:	2d 83       	std	Y+5, r18	; 0x05
    27a2:	3e 83       	std	Y+6, r19	; 0x06
    27a4:	4f 83       	std	Y+7, r20	; 0x07
    27a6:	58 87       	std	Y+8, r21	; 0x08
    27a8:	89 e0       	ldi	r24, 0x09	; 9
    27aa:	e8 2e       	mov	r14, r24
    27ac:	f1 2c       	mov	r15, r1
    27ae:	ec 0e       	add	r14, r28
    27b0:	fd 1e       	adc	r15, r29
    27b2:	ce 01       	movw	r24, r28
    27b4:	01 96       	adiw	r24, 0x01	; 1
    27b6:	b7 01       	movw	r22, r14
    27b8:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <__unpack_f>
    27bc:	8e 01       	movw	r16, r28
    27be:	0f 5e       	subi	r16, 0xEF	; 239
    27c0:	1f 4f       	sbci	r17, 0xFF	; 255
    27c2:	ce 01       	movw	r24, r28
    27c4:	05 96       	adiw	r24, 0x05	; 5
    27c6:	b8 01       	movw	r22, r16
    27c8:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <__unpack_f>
    27cc:	89 85       	ldd	r24, Y+9	; 0x09
    27ce:	82 30       	cpi	r24, 0x02	; 2
    27d0:	40 f0       	brcs	.+16     	; 0x27e2 <__gtsf2+0x56>
    27d2:	89 89       	ldd	r24, Y+17	; 0x11
    27d4:	82 30       	cpi	r24, 0x02	; 2
    27d6:	28 f0       	brcs	.+10     	; 0x27e2 <__gtsf2+0x56>
    27d8:	c7 01       	movw	r24, r14
    27da:	b8 01       	movw	r22, r16
    27dc:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__fpcmp_parts_f>
    27e0:	01 c0       	rjmp	.+2      	; 0x27e4 <__gtsf2+0x58>
    27e2:	8f ef       	ldi	r24, 0xFF	; 255
    27e4:	68 96       	adiw	r28, 0x18	; 24
    27e6:	e6 e0       	ldi	r30, 0x06	; 6
    27e8:	0c 94 26 18 	jmp	0x304c	; 0x304c <__epilogue_restores__+0x18>

000027ec <__gesf2>:
    27ec:	a8 e1       	ldi	r26, 0x18	; 24
    27ee:	b0 e0       	ldi	r27, 0x00	; 0
    27f0:	ec ef       	ldi	r30, 0xFC	; 252
    27f2:	f3 e1       	ldi	r31, 0x13	; 19
    27f4:	0c 94 0a 18 	jmp	0x3014	; 0x3014 <__prologue_saves__+0x18>
    27f8:	69 83       	std	Y+1, r22	; 0x01
    27fa:	7a 83       	std	Y+2, r23	; 0x02
    27fc:	8b 83       	std	Y+3, r24	; 0x03
    27fe:	9c 83       	std	Y+4, r25	; 0x04
    2800:	2d 83       	std	Y+5, r18	; 0x05
    2802:	3e 83       	std	Y+6, r19	; 0x06
    2804:	4f 83       	std	Y+7, r20	; 0x07
    2806:	58 87       	std	Y+8, r21	; 0x08
    2808:	89 e0       	ldi	r24, 0x09	; 9
    280a:	e8 2e       	mov	r14, r24
    280c:	f1 2c       	mov	r15, r1
    280e:	ec 0e       	add	r14, r28
    2810:	fd 1e       	adc	r15, r29
    2812:	ce 01       	movw	r24, r28
    2814:	01 96       	adiw	r24, 0x01	; 1
    2816:	b7 01       	movw	r22, r14
    2818:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <__unpack_f>
    281c:	8e 01       	movw	r16, r28
    281e:	0f 5e       	subi	r16, 0xEF	; 239
    2820:	1f 4f       	sbci	r17, 0xFF	; 255
    2822:	ce 01       	movw	r24, r28
    2824:	05 96       	adiw	r24, 0x05	; 5
    2826:	b8 01       	movw	r22, r16
    2828:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <__unpack_f>
    282c:	89 85       	ldd	r24, Y+9	; 0x09
    282e:	82 30       	cpi	r24, 0x02	; 2
    2830:	40 f0       	brcs	.+16     	; 0x2842 <__gesf2+0x56>
    2832:	89 89       	ldd	r24, Y+17	; 0x11
    2834:	82 30       	cpi	r24, 0x02	; 2
    2836:	28 f0       	brcs	.+10     	; 0x2842 <__gesf2+0x56>
    2838:	c7 01       	movw	r24, r14
    283a:	b8 01       	movw	r22, r16
    283c:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__fpcmp_parts_f>
    2840:	01 c0       	rjmp	.+2      	; 0x2844 <__gesf2+0x58>
    2842:	8f ef       	ldi	r24, 0xFF	; 255
    2844:	68 96       	adiw	r28, 0x18	; 24
    2846:	e6 e0       	ldi	r30, 0x06	; 6
    2848:	0c 94 26 18 	jmp	0x304c	; 0x304c <__epilogue_restores__+0x18>

0000284c <__ltsf2>:
    284c:	a8 e1       	ldi	r26, 0x18	; 24
    284e:	b0 e0       	ldi	r27, 0x00	; 0
    2850:	ec e2       	ldi	r30, 0x2C	; 44
    2852:	f4 e1       	ldi	r31, 0x14	; 20
    2854:	0c 94 0a 18 	jmp	0x3014	; 0x3014 <__prologue_saves__+0x18>
    2858:	69 83       	std	Y+1, r22	; 0x01
    285a:	7a 83       	std	Y+2, r23	; 0x02
    285c:	8b 83       	std	Y+3, r24	; 0x03
    285e:	9c 83       	std	Y+4, r25	; 0x04
    2860:	2d 83       	std	Y+5, r18	; 0x05
    2862:	3e 83       	std	Y+6, r19	; 0x06
    2864:	4f 83       	std	Y+7, r20	; 0x07
    2866:	58 87       	std	Y+8, r21	; 0x08
    2868:	89 e0       	ldi	r24, 0x09	; 9
    286a:	e8 2e       	mov	r14, r24
    286c:	f1 2c       	mov	r15, r1
    286e:	ec 0e       	add	r14, r28
    2870:	fd 1e       	adc	r15, r29
    2872:	ce 01       	movw	r24, r28
    2874:	01 96       	adiw	r24, 0x01	; 1
    2876:	b7 01       	movw	r22, r14
    2878:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <__unpack_f>
    287c:	8e 01       	movw	r16, r28
    287e:	0f 5e       	subi	r16, 0xEF	; 239
    2880:	1f 4f       	sbci	r17, 0xFF	; 255
    2882:	ce 01       	movw	r24, r28
    2884:	05 96       	adiw	r24, 0x05	; 5
    2886:	b8 01       	movw	r22, r16
    2888:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <__unpack_f>
    288c:	89 85       	ldd	r24, Y+9	; 0x09
    288e:	82 30       	cpi	r24, 0x02	; 2
    2890:	40 f0       	brcs	.+16     	; 0x28a2 <__ltsf2+0x56>
    2892:	89 89       	ldd	r24, Y+17	; 0x11
    2894:	82 30       	cpi	r24, 0x02	; 2
    2896:	28 f0       	brcs	.+10     	; 0x28a2 <__ltsf2+0x56>
    2898:	c7 01       	movw	r24, r14
    289a:	b8 01       	movw	r22, r16
    289c:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__fpcmp_parts_f>
    28a0:	01 c0       	rjmp	.+2      	; 0x28a4 <__ltsf2+0x58>
    28a2:	81 e0       	ldi	r24, 0x01	; 1
    28a4:	68 96       	adiw	r28, 0x18	; 24
    28a6:	e6 e0       	ldi	r30, 0x06	; 6
    28a8:	0c 94 26 18 	jmp	0x304c	; 0x304c <__epilogue_restores__+0x18>

000028ac <__floatsisf>:
    28ac:	a8 e0       	ldi	r26, 0x08	; 8
    28ae:	b0 e0       	ldi	r27, 0x00	; 0
    28b0:	ec e5       	ldi	r30, 0x5C	; 92
    28b2:	f4 e1       	ldi	r31, 0x14	; 20
    28b4:	0c 94 07 18 	jmp	0x300e	; 0x300e <__prologue_saves__+0x12>
    28b8:	9b 01       	movw	r18, r22
    28ba:	ac 01       	movw	r20, r24
    28bc:	83 e0       	ldi	r24, 0x03	; 3
    28be:	89 83       	std	Y+1, r24	; 0x01
    28c0:	da 01       	movw	r26, r20
    28c2:	c9 01       	movw	r24, r18
    28c4:	88 27       	eor	r24, r24
    28c6:	b7 fd       	sbrc	r27, 7
    28c8:	83 95       	inc	r24
    28ca:	99 27       	eor	r25, r25
    28cc:	aa 27       	eor	r26, r26
    28ce:	bb 27       	eor	r27, r27
    28d0:	b8 2e       	mov	r11, r24
    28d2:	21 15       	cp	r18, r1
    28d4:	31 05       	cpc	r19, r1
    28d6:	41 05       	cpc	r20, r1
    28d8:	51 05       	cpc	r21, r1
    28da:	19 f4       	brne	.+6      	; 0x28e2 <__floatsisf+0x36>
    28dc:	82 e0       	ldi	r24, 0x02	; 2
    28de:	89 83       	std	Y+1, r24	; 0x01
    28e0:	3a c0       	rjmp	.+116    	; 0x2956 <__floatsisf+0xaa>
    28e2:	88 23       	and	r24, r24
    28e4:	a9 f0       	breq	.+42     	; 0x2910 <__floatsisf+0x64>
    28e6:	20 30       	cpi	r18, 0x00	; 0
    28e8:	80 e0       	ldi	r24, 0x00	; 0
    28ea:	38 07       	cpc	r19, r24
    28ec:	80 e0       	ldi	r24, 0x00	; 0
    28ee:	48 07       	cpc	r20, r24
    28f0:	80 e8       	ldi	r24, 0x80	; 128
    28f2:	58 07       	cpc	r21, r24
    28f4:	29 f4       	brne	.+10     	; 0x2900 <__floatsisf+0x54>
    28f6:	60 e0       	ldi	r22, 0x00	; 0
    28f8:	70 e0       	ldi	r23, 0x00	; 0
    28fa:	80 e0       	ldi	r24, 0x00	; 0
    28fc:	9f ec       	ldi	r25, 0xCF	; 207
    28fe:	30 c0       	rjmp	.+96     	; 0x2960 <__floatsisf+0xb4>
    2900:	ee 24       	eor	r14, r14
    2902:	ff 24       	eor	r15, r15
    2904:	87 01       	movw	r16, r14
    2906:	e2 1a       	sub	r14, r18
    2908:	f3 0a       	sbc	r15, r19
    290a:	04 0b       	sbc	r16, r20
    290c:	15 0b       	sbc	r17, r21
    290e:	02 c0       	rjmp	.+4      	; 0x2914 <__floatsisf+0x68>
    2910:	79 01       	movw	r14, r18
    2912:	8a 01       	movw	r16, r20
    2914:	8e e1       	ldi	r24, 0x1E	; 30
    2916:	c8 2e       	mov	r12, r24
    2918:	d1 2c       	mov	r13, r1
    291a:	dc 82       	std	Y+4, r13	; 0x04
    291c:	cb 82       	std	Y+3, r12	; 0x03
    291e:	ed 82       	std	Y+5, r14	; 0x05
    2920:	fe 82       	std	Y+6, r15	; 0x06
    2922:	0f 83       	std	Y+7, r16	; 0x07
    2924:	18 87       	std	Y+8, r17	; 0x08
    2926:	c8 01       	movw	r24, r16
    2928:	b7 01       	movw	r22, r14
    292a:	0e 94 81 15 	call	0x2b02	; 0x2b02 <__clzsi2>
    292e:	01 97       	sbiw	r24, 0x01	; 1
    2930:	18 16       	cp	r1, r24
    2932:	19 06       	cpc	r1, r25
    2934:	84 f4       	brge	.+32     	; 0x2956 <__floatsisf+0xaa>
    2936:	08 2e       	mov	r0, r24
    2938:	04 c0       	rjmp	.+8      	; 0x2942 <__floatsisf+0x96>
    293a:	ee 0c       	add	r14, r14
    293c:	ff 1c       	adc	r15, r15
    293e:	00 1f       	adc	r16, r16
    2940:	11 1f       	adc	r17, r17
    2942:	0a 94       	dec	r0
    2944:	d2 f7       	brpl	.-12     	; 0x293a <__floatsisf+0x8e>
    2946:	ed 82       	std	Y+5, r14	; 0x05
    2948:	fe 82       	std	Y+6, r15	; 0x06
    294a:	0f 83       	std	Y+7, r16	; 0x07
    294c:	18 87       	std	Y+8, r17	; 0x08
    294e:	c8 1a       	sub	r12, r24
    2950:	d9 0a       	sbc	r13, r25
    2952:	dc 82       	std	Y+4, r13	; 0x04
    2954:	cb 82       	std	Y+3, r12	; 0x03
    2956:	ba 82       	std	Y+2, r11	; 0x02
    2958:	ce 01       	movw	r24, r28
    295a:	01 96       	adiw	r24, 0x01	; 1
    295c:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <__pack_f>
    2960:	28 96       	adiw	r28, 0x08	; 8
    2962:	e9 e0       	ldi	r30, 0x09	; 9
    2964:	0c 94 23 18 	jmp	0x3046	; 0x3046 <__epilogue_restores__+0x12>

00002968 <__fixsfsi>:
    2968:	ac e0       	ldi	r26, 0x0C	; 12
    296a:	b0 e0       	ldi	r27, 0x00	; 0
    296c:	ea eb       	ldi	r30, 0xBA	; 186
    296e:	f4 e1       	ldi	r31, 0x14	; 20
    2970:	0c 94 0e 18 	jmp	0x301c	; 0x301c <__prologue_saves__+0x20>
    2974:	69 83       	std	Y+1, r22	; 0x01
    2976:	7a 83       	std	Y+2, r23	; 0x02
    2978:	8b 83       	std	Y+3, r24	; 0x03
    297a:	9c 83       	std	Y+4, r25	; 0x04
    297c:	ce 01       	movw	r24, r28
    297e:	01 96       	adiw	r24, 0x01	; 1
    2980:	be 01       	movw	r22, r28
    2982:	6b 5f       	subi	r22, 0xFB	; 251
    2984:	7f 4f       	sbci	r23, 0xFF	; 255
    2986:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <__unpack_f>
    298a:	8d 81       	ldd	r24, Y+5	; 0x05
    298c:	82 30       	cpi	r24, 0x02	; 2
    298e:	61 f1       	breq	.+88     	; 0x29e8 <__fixsfsi+0x80>
    2990:	82 30       	cpi	r24, 0x02	; 2
    2992:	50 f1       	brcs	.+84     	; 0x29e8 <__fixsfsi+0x80>
    2994:	84 30       	cpi	r24, 0x04	; 4
    2996:	21 f4       	brne	.+8      	; 0x29a0 <__fixsfsi+0x38>
    2998:	8e 81       	ldd	r24, Y+6	; 0x06
    299a:	88 23       	and	r24, r24
    299c:	51 f1       	breq	.+84     	; 0x29f2 <__fixsfsi+0x8a>
    299e:	2e c0       	rjmp	.+92     	; 0x29fc <__fixsfsi+0x94>
    29a0:	2f 81       	ldd	r18, Y+7	; 0x07
    29a2:	38 85       	ldd	r19, Y+8	; 0x08
    29a4:	37 fd       	sbrc	r19, 7
    29a6:	20 c0       	rjmp	.+64     	; 0x29e8 <__fixsfsi+0x80>
    29a8:	6e 81       	ldd	r22, Y+6	; 0x06
    29aa:	2f 31       	cpi	r18, 0x1F	; 31
    29ac:	31 05       	cpc	r19, r1
    29ae:	1c f0       	brlt	.+6      	; 0x29b6 <__fixsfsi+0x4e>
    29b0:	66 23       	and	r22, r22
    29b2:	f9 f0       	breq	.+62     	; 0x29f2 <__fixsfsi+0x8a>
    29b4:	23 c0       	rjmp	.+70     	; 0x29fc <__fixsfsi+0x94>
    29b6:	8e e1       	ldi	r24, 0x1E	; 30
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	82 1b       	sub	r24, r18
    29bc:	93 0b       	sbc	r25, r19
    29be:	29 85       	ldd	r18, Y+9	; 0x09
    29c0:	3a 85       	ldd	r19, Y+10	; 0x0a
    29c2:	4b 85       	ldd	r20, Y+11	; 0x0b
    29c4:	5c 85       	ldd	r21, Y+12	; 0x0c
    29c6:	04 c0       	rjmp	.+8      	; 0x29d0 <__fixsfsi+0x68>
    29c8:	56 95       	lsr	r21
    29ca:	47 95       	ror	r20
    29cc:	37 95       	ror	r19
    29ce:	27 95       	ror	r18
    29d0:	8a 95       	dec	r24
    29d2:	d2 f7       	brpl	.-12     	; 0x29c8 <__fixsfsi+0x60>
    29d4:	66 23       	and	r22, r22
    29d6:	b1 f0       	breq	.+44     	; 0x2a04 <__fixsfsi+0x9c>
    29d8:	50 95       	com	r21
    29da:	40 95       	com	r20
    29dc:	30 95       	com	r19
    29de:	21 95       	neg	r18
    29e0:	3f 4f       	sbci	r19, 0xFF	; 255
    29e2:	4f 4f       	sbci	r20, 0xFF	; 255
    29e4:	5f 4f       	sbci	r21, 0xFF	; 255
    29e6:	0e c0       	rjmp	.+28     	; 0x2a04 <__fixsfsi+0x9c>
    29e8:	20 e0       	ldi	r18, 0x00	; 0
    29ea:	30 e0       	ldi	r19, 0x00	; 0
    29ec:	40 e0       	ldi	r20, 0x00	; 0
    29ee:	50 e0       	ldi	r21, 0x00	; 0
    29f0:	09 c0       	rjmp	.+18     	; 0x2a04 <__fixsfsi+0x9c>
    29f2:	2f ef       	ldi	r18, 0xFF	; 255
    29f4:	3f ef       	ldi	r19, 0xFF	; 255
    29f6:	4f ef       	ldi	r20, 0xFF	; 255
    29f8:	5f e7       	ldi	r21, 0x7F	; 127
    29fa:	04 c0       	rjmp	.+8      	; 0x2a04 <__fixsfsi+0x9c>
    29fc:	20 e0       	ldi	r18, 0x00	; 0
    29fe:	30 e0       	ldi	r19, 0x00	; 0
    2a00:	40 e0       	ldi	r20, 0x00	; 0
    2a02:	50 e8       	ldi	r21, 0x80	; 128
    2a04:	b9 01       	movw	r22, r18
    2a06:	ca 01       	movw	r24, r20
    2a08:	2c 96       	adiw	r28, 0x0c	; 12
    2a0a:	e2 e0       	ldi	r30, 0x02	; 2
    2a0c:	0c 94 2a 18 	jmp	0x3054	; 0x3054 <__epilogue_restores__+0x20>

00002a10 <__floatunsisf>:
    2a10:	a8 e0       	ldi	r26, 0x08	; 8
    2a12:	b0 e0       	ldi	r27, 0x00	; 0
    2a14:	ee e0       	ldi	r30, 0x0E	; 14
    2a16:	f5 e1       	ldi	r31, 0x15	; 21
    2a18:	0c 94 06 18 	jmp	0x300c	; 0x300c <__prologue_saves__+0x10>
    2a1c:	7b 01       	movw	r14, r22
    2a1e:	8c 01       	movw	r16, r24
    2a20:	61 15       	cp	r22, r1
    2a22:	71 05       	cpc	r23, r1
    2a24:	81 05       	cpc	r24, r1
    2a26:	91 05       	cpc	r25, r1
    2a28:	19 f4       	brne	.+6      	; 0x2a30 <__floatunsisf+0x20>
    2a2a:	82 e0       	ldi	r24, 0x02	; 2
    2a2c:	89 83       	std	Y+1, r24	; 0x01
    2a2e:	60 c0       	rjmp	.+192    	; 0x2af0 <__floatunsisf+0xe0>
    2a30:	83 e0       	ldi	r24, 0x03	; 3
    2a32:	89 83       	std	Y+1, r24	; 0x01
    2a34:	8e e1       	ldi	r24, 0x1E	; 30
    2a36:	c8 2e       	mov	r12, r24
    2a38:	d1 2c       	mov	r13, r1
    2a3a:	dc 82       	std	Y+4, r13	; 0x04
    2a3c:	cb 82       	std	Y+3, r12	; 0x03
    2a3e:	ed 82       	std	Y+5, r14	; 0x05
    2a40:	fe 82       	std	Y+6, r15	; 0x06
    2a42:	0f 83       	std	Y+7, r16	; 0x07
    2a44:	18 87       	std	Y+8, r17	; 0x08
    2a46:	c8 01       	movw	r24, r16
    2a48:	b7 01       	movw	r22, r14
    2a4a:	0e 94 81 15 	call	0x2b02	; 0x2b02 <__clzsi2>
    2a4e:	fc 01       	movw	r30, r24
    2a50:	31 97       	sbiw	r30, 0x01	; 1
    2a52:	f7 ff       	sbrs	r31, 7
    2a54:	3b c0       	rjmp	.+118    	; 0x2acc <__floatunsisf+0xbc>
    2a56:	22 27       	eor	r18, r18
    2a58:	33 27       	eor	r19, r19
    2a5a:	2e 1b       	sub	r18, r30
    2a5c:	3f 0b       	sbc	r19, r31
    2a5e:	57 01       	movw	r10, r14
    2a60:	68 01       	movw	r12, r16
    2a62:	02 2e       	mov	r0, r18
    2a64:	04 c0       	rjmp	.+8      	; 0x2a6e <__floatunsisf+0x5e>
    2a66:	d6 94       	lsr	r13
    2a68:	c7 94       	ror	r12
    2a6a:	b7 94       	ror	r11
    2a6c:	a7 94       	ror	r10
    2a6e:	0a 94       	dec	r0
    2a70:	d2 f7       	brpl	.-12     	; 0x2a66 <__floatunsisf+0x56>
    2a72:	40 e0       	ldi	r20, 0x00	; 0
    2a74:	50 e0       	ldi	r21, 0x00	; 0
    2a76:	60 e0       	ldi	r22, 0x00	; 0
    2a78:	70 e0       	ldi	r23, 0x00	; 0
    2a7a:	81 e0       	ldi	r24, 0x01	; 1
    2a7c:	90 e0       	ldi	r25, 0x00	; 0
    2a7e:	a0 e0       	ldi	r26, 0x00	; 0
    2a80:	b0 e0       	ldi	r27, 0x00	; 0
    2a82:	04 c0       	rjmp	.+8      	; 0x2a8c <__floatunsisf+0x7c>
    2a84:	88 0f       	add	r24, r24
    2a86:	99 1f       	adc	r25, r25
    2a88:	aa 1f       	adc	r26, r26
    2a8a:	bb 1f       	adc	r27, r27
    2a8c:	2a 95       	dec	r18
    2a8e:	d2 f7       	brpl	.-12     	; 0x2a84 <__floatunsisf+0x74>
    2a90:	01 97       	sbiw	r24, 0x01	; 1
    2a92:	a1 09       	sbc	r26, r1
    2a94:	b1 09       	sbc	r27, r1
    2a96:	8e 21       	and	r24, r14
    2a98:	9f 21       	and	r25, r15
    2a9a:	a0 23       	and	r26, r16
    2a9c:	b1 23       	and	r27, r17
    2a9e:	00 97       	sbiw	r24, 0x00	; 0
    2aa0:	a1 05       	cpc	r26, r1
    2aa2:	b1 05       	cpc	r27, r1
    2aa4:	21 f0       	breq	.+8      	; 0x2aae <__floatunsisf+0x9e>
    2aa6:	41 e0       	ldi	r20, 0x01	; 1
    2aa8:	50 e0       	ldi	r21, 0x00	; 0
    2aaa:	60 e0       	ldi	r22, 0x00	; 0
    2aac:	70 e0       	ldi	r23, 0x00	; 0
    2aae:	4a 29       	or	r20, r10
    2ab0:	5b 29       	or	r21, r11
    2ab2:	6c 29       	or	r22, r12
    2ab4:	7d 29       	or	r23, r13
    2ab6:	4d 83       	std	Y+5, r20	; 0x05
    2ab8:	5e 83       	std	Y+6, r21	; 0x06
    2aba:	6f 83       	std	Y+7, r22	; 0x07
    2abc:	78 87       	std	Y+8, r23	; 0x08
    2abe:	8e e1       	ldi	r24, 0x1E	; 30
    2ac0:	90 e0       	ldi	r25, 0x00	; 0
    2ac2:	8e 1b       	sub	r24, r30
    2ac4:	9f 0b       	sbc	r25, r31
    2ac6:	9c 83       	std	Y+4, r25	; 0x04
    2ac8:	8b 83       	std	Y+3, r24	; 0x03
    2aca:	12 c0       	rjmp	.+36     	; 0x2af0 <__floatunsisf+0xe0>
    2acc:	30 97       	sbiw	r30, 0x00	; 0
    2ace:	81 f0       	breq	.+32     	; 0x2af0 <__floatunsisf+0xe0>
    2ad0:	0e 2e       	mov	r0, r30
    2ad2:	04 c0       	rjmp	.+8      	; 0x2adc <__floatunsisf+0xcc>
    2ad4:	ee 0c       	add	r14, r14
    2ad6:	ff 1c       	adc	r15, r15
    2ad8:	00 1f       	adc	r16, r16
    2ada:	11 1f       	adc	r17, r17
    2adc:	0a 94       	dec	r0
    2ade:	d2 f7       	brpl	.-12     	; 0x2ad4 <__floatunsisf+0xc4>
    2ae0:	ed 82       	std	Y+5, r14	; 0x05
    2ae2:	fe 82       	std	Y+6, r15	; 0x06
    2ae4:	0f 83       	std	Y+7, r16	; 0x07
    2ae6:	18 87       	std	Y+8, r17	; 0x08
    2ae8:	ce 1a       	sub	r12, r30
    2aea:	df 0a       	sbc	r13, r31
    2aec:	dc 82       	std	Y+4, r13	; 0x04
    2aee:	cb 82       	std	Y+3, r12	; 0x03
    2af0:	1a 82       	std	Y+2, r1	; 0x02
    2af2:	ce 01       	movw	r24, r28
    2af4:	01 96       	adiw	r24, 0x01	; 1
    2af6:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <__pack_f>
    2afa:	28 96       	adiw	r28, 0x08	; 8
    2afc:	ea e0       	ldi	r30, 0x0A	; 10
    2afe:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__epilogue_restores__+0x10>

00002b02 <__clzsi2>:
    2b02:	ef 92       	push	r14
    2b04:	ff 92       	push	r15
    2b06:	0f 93       	push	r16
    2b08:	1f 93       	push	r17
    2b0a:	7b 01       	movw	r14, r22
    2b0c:	8c 01       	movw	r16, r24
    2b0e:	80 e0       	ldi	r24, 0x00	; 0
    2b10:	e8 16       	cp	r14, r24
    2b12:	80 e0       	ldi	r24, 0x00	; 0
    2b14:	f8 06       	cpc	r15, r24
    2b16:	81 e0       	ldi	r24, 0x01	; 1
    2b18:	08 07       	cpc	r16, r24
    2b1a:	80 e0       	ldi	r24, 0x00	; 0
    2b1c:	18 07       	cpc	r17, r24
    2b1e:	88 f4       	brcc	.+34     	; 0x2b42 <__clzsi2+0x40>
    2b20:	8f ef       	ldi	r24, 0xFF	; 255
    2b22:	e8 16       	cp	r14, r24
    2b24:	f1 04       	cpc	r15, r1
    2b26:	01 05       	cpc	r16, r1
    2b28:	11 05       	cpc	r17, r1
    2b2a:	31 f0       	breq	.+12     	; 0x2b38 <__clzsi2+0x36>
    2b2c:	28 f0       	brcs	.+10     	; 0x2b38 <__clzsi2+0x36>
    2b2e:	88 e0       	ldi	r24, 0x08	; 8
    2b30:	90 e0       	ldi	r25, 0x00	; 0
    2b32:	a0 e0       	ldi	r26, 0x00	; 0
    2b34:	b0 e0       	ldi	r27, 0x00	; 0
    2b36:	17 c0       	rjmp	.+46     	; 0x2b66 <__clzsi2+0x64>
    2b38:	80 e0       	ldi	r24, 0x00	; 0
    2b3a:	90 e0       	ldi	r25, 0x00	; 0
    2b3c:	a0 e0       	ldi	r26, 0x00	; 0
    2b3e:	b0 e0       	ldi	r27, 0x00	; 0
    2b40:	12 c0       	rjmp	.+36     	; 0x2b66 <__clzsi2+0x64>
    2b42:	80 e0       	ldi	r24, 0x00	; 0
    2b44:	e8 16       	cp	r14, r24
    2b46:	80 e0       	ldi	r24, 0x00	; 0
    2b48:	f8 06       	cpc	r15, r24
    2b4a:	80 e0       	ldi	r24, 0x00	; 0
    2b4c:	08 07       	cpc	r16, r24
    2b4e:	81 e0       	ldi	r24, 0x01	; 1
    2b50:	18 07       	cpc	r17, r24
    2b52:	28 f0       	brcs	.+10     	; 0x2b5e <__clzsi2+0x5c>
    2b54:	88 e1       	ldi	r24, 0x18	; 24
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	a0 e0       	ldi	r26, 0x00	; 0
    2b5a:	b0 e0       	ldi	r27, 0x00	; 0
    2b5c:	04 c0       	rjmp	.+8      	; 0x2b66 <__clzsi2+0x64>
    2b5e:	80 e1       	ldi	r24, 0x10	; 16
    2b60:	90 e0       	ldi	r25, 0x00	; 0
    2b62:	a0 e0       	ldi	r26, 0x00	; 0
    2b64:	b0 e0       	ldi	r27, 0x00	; 0
    2b66:	20 e2       	ldi	r18, 0x20	; 32
    2b68:	30 e0       	ldi	r19, 0x00	; 0
    2b6a:	40 e0       	ldi	r20, 0x00	; 0
    2b6c:	50 e0       	ldi	r21, 0x00	; 0
    2b6e:	28 1b       	sub	r18, r24
    2b70:	39 0b       	sbc	r19, r25
    2b72:	4a 0b       	sbc	r20, r26
    2b74:	5b 0b       	sbc	r21, r27
    2b76:	04 c0       	rjmp	.+8      	; 0x2b80 <__clzsi2+0x7e>
    2b78:	16 95       	lsr	r17
    2b7a:	07 95       	ror	r16
    2b7c:	f7 94       	ror	r15
    2b7e:	e7 94       	ror	r14
    2b80:	8a 95       	dec	r24
    2b82:	d2 f7       	brpl	.-12     	; 0x2b78 <__clzsi2+0x76>
    2b84:	f7 01       	movw	r30, r14
    2b86:	e0 5b       	subi	r30, 0xB0	; 176
    2b88:	fd 4f       	sbci	r31, 0xFD	; 253
    2b8a:	80 81       	ld	r24, Z
    2b8c:	28 1b       	sub	r18, r24
    2b8e:	31 09       	sbc	r19, r1
    2b90:	41 09       	sbc	r20, r1
    2b92:	51 09       	sbc	r21, r1
    2b94:	c9 01       	movw	r24, r18
    2b96:	1f 91       	pop	r17
    2b98:	0f 91       	pop	r16
    2b9a:	ff 90       	pop	r15
    2b9c:	ef 90       	pop	r14
    2b9e:	08 95       	ret

00002ba0 <__pack_f>:
    2ba0:	df 92       	push	r13
    2ba2:	ef 92       	push	r14
    2ba4:	ff 92       	push	r15
    2ba6:	0f 93       	push	r16
    2ba8:	1f 93       	push	r17
    2baa:	fc 01       	movw	r30, r24
    2bac:	e4 80       	ldd	r14, Z+4	; 0x04
    2bae:	f5 80       	ldd	r15, Z+5	; 0x05
    2bb0:	06 81       	ldd	r16, Z+6	; 0x06
    2bb2:	17 81       	ldd	r17, Z+7	; 0x07
    2bb4:	d1 80       	ldd	r13, Z+1	; 0x01
    2bb6:	80 81       	ld	r24, Z
    2bb8:	82 30       	cpi	r24, 0x02	; 2
    2bba:	48 f4       	brcc	.+18     	; 0x2bce <__pack_f+0x2e>
    2bbc:	80 e0       	ldi	r24, 0x00	; 0
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	a0 e1       	ldi	r26, 0x10	; 16
    2bc2:	b0 e0       	ldi	r27, 0x00	; 0
    2bc4:	e8 2a       	or	r14, r24
    2bc6:	f9 2a       	or	r15, r25
    2bc8:	0a 2b       	or	r16, r26
    2bca:	1b 2b       	or	r17, r27
    2bcc:	a5 c0       	rjmp	.+330    	; 0x2d18 <__pack_f+0x178>
    2bce:	84 30       	cpi	r24, 0x04	; 4
    2bd0:	09 f4       	brne	.+2      	; 0x2bd4 <__pack_f+0x34>
    2bd2:	9f c0       	rjmp	.+318    	; 0x2d12 <__pack_f+0x172>
    2bd4:	82 30       	cpi	r24, 0x02	; 2
    2bd6:	21 f4       	brne	.+8      	; 0x2be0 <__pack_f+0x40>
    2bd8:	ee 24       	eor	r14, r14
    2bda:	ff 24       	eor	r15, r15
    2bdc:	87 01       	movw	r16, r14
    2bde:	05 c0       	rjmp	.+10     	; 0x2bea <__pack_f+0x4a>
    2be0:	e1 14       	cp	r14, r1
    2be2:	f1 04       	cpc	r15, r1
    2be4:	01 05       	cpc	r16, r1
    2be6:	11 05       	cpc	r17, r1
    2be8:	19 f4       	brne	.+6      	; 0x2bf0 <__pack_f+0x50>
    2bea:	e0 e0       	ldi	r30, 0x00	; 0
    2bec:	f0 e0       	ldi	r31, 0x00	; 0
    2bee:	96 c0       	rjmp	.+300    	; 0x2d1c <__pack_f+0x17c>
    2bf0:	62 81       	ldd	r22, Z+2	; 0x02
    2bf2:	73 81       	ldd	r23, Z+3	; 0x03
    2bf4:	9f ef       	ldi	r25, 0xFF	; 255
    2bf6:	62 38       	cpi	r22, 0x82	; 130
    2bf8:	79 07       	cpc	r23, r25
    2bfa:	0c f0       	brlt	.+2      	; 0x2bfe <__pack_f+0x5e>
    2bfc:	5b c0       	rjmp	.+182    	; 0x2cb4 <__pack_f+0x114>
    2bfe:	22 e8       	ldi	r18, 0x82	; 130
    2c00:	3f ef       	ldi	r19, 0xFF	; 255
    2c02:	26 1b       	sub	r18, r22
    2c04:	37 0b       	sbc	r19, r23
    2c06:	2a 31       	cpi	r18, 0x1A	; 26
    2c08:	31 05       	cpc	r19, r1
    2c0a:	2c f0       	brlt	.+10     	; 0x2c16 <__pack_f+0x76>
    2c0c:	20 e0       	ldi	r18, 0x00	; 0
    2c0e:	30 e0       	ldi	r19, 0x00	; 0
    2c10:	40 e0       	ldi	r20, 0x00	; 0
    2c12:	50 e0       	ldi	r21, 0x00	; 0
    2c14:	2a c0       	rjmp	.+84     	; 0x2c6a <__pack_f+0xca>
    2c16:	b8 01       	movw	r22, r16
    2c18:	a7 01       	movw	r20, r14
    2c1a:	02 2e       	mov	r0, r18
    2c1c:	04 c0       	rjmp	.+8      	; 0x2c26 <__pack_f+0x86>
    2c1e:	76 95       	lsr	r23
    2c20:	67 95       	ror	r22
    2c22:	57 95       	ror	r21
    2c24:	47 95       	ror	r20
    2c26:	0a 94       	dec	r0
    2c28:	d2 f7       	brpl	.-12     	; 0x2c1e <__pack_f+0x7e>
    2c2a:	81 e0       	ldi	r24, 0x01	; 1
    2c2c:	90 e0       	ldi	r25, 0x00	; 0
    2c2e:	a0 e0       	ldi	r26, 0x00	; 0
    2c30:	b0 e0       	ldi	r27, 0x00	; 0
    2c32:	04 c0       	rjmp	.+8      	; 0x2c3c <__pack_f+0x9c>
    2c34:	88 0f       	add	r24, r24
    2c36:	99 1f       	adc	r25, r25
    2c38:	aa 1f       	adc	r26, r26
    2c3a:	bb 1f       	adc	r27, r27
    2c3c:	2a 95       	dec	r18
    2c3e:	d2 f7       	brpl	.-12     	; 0x2c34 <__pack_f+0x94>
    2c40:	01 97       	sbiw	r24, 0x01	; 1
    2c42:	a1 09       	sbc	r26, r1
    2c44:	b1 09       	sbc	r27, r1
    2c46:	8e 21       	and	r24, r14
    2c48:	9f 21       	and	r25, r15
    2c4a:	a0 23       	and	r26, r16
    2c4c:	b1 23       	and	r27, r17
    2c4e:	00 97       	sbiw	r24, 0x00	; 0
    2c50:	a1 05       	cpc	r26, r1
    2c52:	b1 05       	cpc	r27, r1
    2c54:	21 f0       	breq	.+8      	; 0x2c5e <__pack_f+0xbe>
    2c56:	81 e0       	ldi	r24, 0x01	; 1
    2c58:	90 e0       	ldi	r25, 0x00	; 0
    2c5a:	a0 e0       	ldi	r26, 0x00	; 0
    2c5c:	b0 e0       	ldi	r27, 0x00	; 0
    2c5e:	9a 01       	movw	r18, r20
    2c60:	ab 01       	movw	r20, r22
    2c62:	28 2b       	or	r18, r24
    2c64:	39 2b       	or	r19, r25
    2c66:	4a 2b       	or	r20, r26
    2c68:	5b 2b       	or	r21, r27
    2c6a:	da 01       	movw	r26, r20
    2c6c:	c9 01       	movw	r24, r18
    2c6e:	8f 77       	andi	r24, 0x7F	; 127
    2c70:	90 70       	andi	r25, 0x00	; 0
    2c72:	a0 70       	andi	r26, 0x00	; 0
    2c74:	b0 70       	andi	r27, 0x00	; 0
    2c76:	80 34       	cpi	r24, 0x40	; 64
    2c78:	91 05       	cpc	r25, r1
    2c7a:	a1 05       	cpc	r26, r1
    2c7c:	b1 05       	cpc	r27, r1
    2c7e:	39 f4       	brne	.+14     	; 0x2c8e <__pack_f+0xee>
    2c80:	27 ff       	sbrs	r18, 7
    2c82:	09 c0       	rjmp	.+18     	; 0x2c96 <__pack_f+0xf6>
    2c84:	20 5c       	subi	r18, 0xC0	; 192
    2c86:	3f 4f       	sbci	r19, 0xFF	; 255
    2c88:	4f 4f       	sbci	r20, 0xFF	; 255
    2c8a:	5f 4f       	sbci	r21, 0xFF	; 255
    2c8c:	04 c0       	rjmp	.+8      	; 0x2c96 <__pack_f+0xf6>
    2c8e:	21 5c       	subi	r18, 0xC1	; 193
    2c90:	3f 4f       	sbci	r19, 0xFF	; 255
    2c92:	4f 4f       	sbci	r20, 0xFF	; 255
    2c94:	5f 4f       	sbci	r21, 0xFF	; 255
    2c96:	e0 e0       	ldi	r30, 0x00	; 0
    2c98:	f0 e0       	ldi	r31, 0x00	; 0
    2c9a:	20 30       	cpi	r18, 0x00	; 0
    2c9c:	a0 e0       	ldi	r26, 0x00	; 0
    2c9e:	3a 07       	cpc	r19, r26
    2ca0:	a0 e0       	ldi	r26, 0x00	; 0
    2ca2:	4a 07       	cpc	r20, r26
    2ca4:	a0 e4       	ldi	r26, 0x40	; 64
    2ca6:	5a 07       	cpc	r21, r26
    2ca8:	10 f0       	brcs	.+4      	; 0x2cae <__pack_f+0x10e>
    2caa:	e1 e0       	ldi	r30, 0x01	; 1
    2cac:	f0 e0       	ldi	r31, 0x00	; 0
    2cae:	79 01       	movw	r14, r18
    2cb0:	8a 01       	movw	r16, r20
    2cb2:	27 c0       	rjmp	.+78     	; 0x2d02 <__pack_f+0x162>
    2cb4:	60 38       	cpi	r22, 0x80	; 128
    2cb6:	71 05       	cpc	r23, r1
    2cb8:	64 f5       	brge	.+88     	; 0x2d12 <__pack_f+0x172>
    2cba:	fb 01       	movw	r30, r22
    2cbc:	e1 58       	subi	r30, 0x81	; 129
    2cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc0:	d8 01       	movw	r26, r16
    2cc2:	c7 01       	movw	r24, r14
    2cc4:	8f 77       	andi	r24, 0x7F	; 127
    2cc6:	90 70       	andi	r25, 0x00	; 0
    2cc8:	a0 70       	andi	r26, 0x00	; 0
    2cca:	b0 70       	andi	r27, 0x00	; 0
    2ccc:	80 34       	cpi	r24, 0x40	; 64
    2cce:	91 05       	cpc	r25, r1
    2cd0:	a1 05       	cpc	r26, r1
    2cd2:	b1 05       	cpc	r27, r1
    2cd4:	39 f4       	brne	.+14     	; 0x2ce4 <__pack_f+0x144>
    2cd6:	e7 fe       	sbrs	r14, 7
    2cd8:	0d c0       	rjmp	.+26     	; 0x2cf4 <__pack_f+0x154>
    2cda:	80 e4       	ldi	r24, 0x40	; 64
    2cdc:	90 e0       	ldi	r25, 0x00	; 0
    2cde:	a0 e0       	ldi	r26, 0x00	; 0
    2ce0:	b0 e0       	ldi	r27, 0x00	; 0
    2ce2:	04 c0       	rjmp	.+8      	; 0x2cec <__pack_f+0x14c>
    2ce4:	8f e3       	ldi	r24, 0x3F	; 63
    2ce6:	90 e0       	ldi	r25, 0x00	; 0
    2ce8:	a0 e0       	ldi	r26, 0x00	; 0
    2cea:	b0 e0       	ldi	r27, 0x00	; 0
    2cec:	e8 0e       	add	r14, r24
    2cee:	f9 1e       	adc	r15, r25
    2cf0:	0a 1f       	adc	r16, r26
    2cf2:	1b 1f       	adc	r17, r27
    2cf4:	17 ff       	sbrs	r17, 7
    2cf6:	05 c0       	rjmp	.+10     	; 0x2d02 <__pack_f+0x162>
    2cf8:	16 95       	lsr	r17
    2cfa:	07 95       	ror	r16
    2cfc:	f7 94       	ror	r15
    2cfe:	e7 94       	ror	r14
    2d00:	31 96       	adiw	r30, 0x01	; 1
    2d02:	87 e0       	ldi	r24, 0x07	; 7
    2d04:	16 95       	lsr	r17
    2d06:	07 95       	ror	r16
    2d08:	f7 94       	ror	r15
    2d0a:	e7 94       	ror	r14
    2d0c:	8a 95       	dec	r24
    2d0e:	d1 f7       	brne	.-12     	; 0x2d04 <__pack_f+0x164>
    2d10:	05 c0       	rjmp	.+10     	; 0x2d1c <__pack_f+0x17c>
    2d12:	ee 24       	eor	r14, r14
    2d14:	ff 24       	eor	r15, r15
    2d16:	87 01       	movw	r16, r14
    2d18:	ef ef       	ldi	r30, 0xFF	; 255
    2d1a:	f0 e0       	ldi	r31, 0x00	; 0
    2d1c:	6e 2f       	mov	r22, r30
    2d1e:	67 95       	ror	r22
    2d20:	66 27       	eor	r22, r22
    2d22:	67 95       	ror	r22
    2d24:	90 2f       	mov	r25, r16
    2d26:	9f 77       	andi	r25, 0x7F	; 127
    2d28:	d7 94       	ror	r13
    2d2a:	dd 24       	eor	r13, r13
    2d2c:	d7 94       	ror	r13
    2d2e:	8e 2f       	mov	r24, r30
    2d30:	86 95       	lsr	r24
    2d32:	49 2f       	mov	r20, r25
    2d34:	46 2b       	or	r20, r22
    2d36:	58 2f       	mov	r21, r24
    2d38:	5d 29       	or	r21, r13
    2d3a:	b7 01       	movw	r22, r14
    2d3c:	ca 01       	movw	r24, r20
    2d3e:	1f 91       	pop	r17
    2d40:	0f 91       	pop	r16
    2d42:	ff 90       	pop	r15
    2d44:	ef 90       	pop	r14
    2d46:	df 90       	pop	r13
    2d48:	08 95       	ret

00002d4a <__unpack_f>:
    2d4a:	fc 01       	movw	r30, r24
    2d4c:	db 01       	movw	r26, r22
    2d4e:	40 81       	ld	r20, Z
    2d50:	51 81       	ldd	r21, Z+1	; 0x01
    2d52:	22 81       	ldd	r18, Z+2	; 0x02
    2d54:	62 2f       	mov	r22, r18
    2d56:	6f 77       	andi	r22, 0x7F	; 127
    2d58:	70 e0       	ldi	r23, 0x00	; 0
    2d5a:	22 1f       	adc	r18, r18
    2d5c:	22 27       	eor	r18, r18
    2d5e:	22 1f       	adc	r18, r18
    2d60:	93 81       	ldd	r25, Z+3	; 0x03
    2d62:	89 2f       	mov	r24, r25
    2d64:	88 0f       	add	r24, r24
    2d66:	82 2b       	or	r24, r18
    2d68:	28 2f       	mov	r18, r24
    2d6a:	30 e0       	ldi	r19, 0x00	; 0
    2d6c:	99 1f       	adc	r25, r25
    2d6e:	99 27       	eor	r25, r25
    2d70:	99 1f       	adc	r25, r25
    2d72:	11 96       	adiw	r26, 0x01	; 1
    2d74:	9c 93       	st	X, r25
    2d76:	11 97       	sbiw	r26, 0x01	; 1
    2d78:	21 15       	cp	r18, r1
    2d7a:	31 05       	cpc	r19, r1
    2d7c:	a9 f5       	brne	.+106    	; 0x2de8 <__unpack_f+0x9e>
    2d7e:	41 15       	cp	r20, r1
    2d80:	51 05       	cpc	r21, r1
    2d82:	61 05       	cpc	r22, r1
    2d84:	71 05       	cpc	r23, r1
    2d86:	11 f4       	brne	.+4      	; 0x2d8c <__unpack_f+0x42>
    2d88:	82 e0       	ldi	r24, 0x02	; 2
    2d8a:	37 c0       	rjmp	.+110    	; 0x2dfa <__unpack_f+0xb0>
    2d8c:	82 e8       	ldi	r24, 0x82	; 130
    2d8e:	9f ef       	ldi	r25, 0xFF	; 255
    2d90:	13 96       	adiw	r26, 0x03	; 3
    2d92:	9c 93       	st	X, r25
    2d94:	8e 93       	st	-X, r24
    2d96:	12 97       	sbiw	r26, 0x02	; 2
    2d98:	9a 01       	movw	r18, r20
    2d9a:	ab 01       	movw	r20, r22
    2d9c:	67 e0       	ldi	r22, 0x07	; 7
    2d9e:	22 0f       	add	r18, r18
    2da0:	33 1f       	adc	r19, r19
    2da2:	44 1f       	adc	r20, r20
    2da4:	55 1f       	adc	r21, r21
    2da6:	6a 95       	dec	r22
    2da8:	d1 f7       	brne	.-12     	; 0x2d9e <__unpack_f+0x54>
    2daa:	83 e0       	ldi	r24, 0x03	; 3
    2dac:	8c 93       	st	X, r24
    2dae:	0d c0       	rjmp	.+26     	; 0x2dca <__unpack_f+0x80>
    2db0:	22 0f       	add	r18, r18
    2db2:	33 1f       	adc	r19, r19
    2db4:	44 1f       	adc	r20, r20
    2db6:	55 1f       	adc	r21, r21
    2db8:	12 96       	adiw	r26, 0x02	; 2
    2dba:	8d 91       	ld	r24, X+
    2dbc:	9c 91       	ld	r25, X
    2dbe:	13 97       	sbiw	r26, 0x03	; 3
    2dc0:	01 97       	sbiw	r24, 0x01	; 1
    2dc2:	13 96       	adiw	r26, 0x03	; 3
    2dc4:	9c 93       	st	X, r25
    2dc6:	8e 93       	st	-X, r24
    2dc8:	12 97       	sbiw	r26, 0x02	; 2
    2dca:	20 30       	cpi	r18, 0x00	; 0
    2dcc:	80 e0       	ldi	r24, 0x00	; 0
    2dce:	38 07       	cpc	r19, r24
    2dd0:	80 e0       	ldi	r24, 0x00	; 0
    2dd2:	48 07       	cpc	r20, r24
    2dd4:	80 e4       	ldi	r24, 0x40	; 64
    2dd6:	58 07       	cpc	r21, r24
    2dd8:	58 f3       	brcs	.-42     	; 0x2db0 <__unpack_f+0x66>
    2dda:	14 96       	adiw	r26, 0x04	; 4
    2ddc:	2d 93       	st	X+, r18
    2dde:	3d 93       	st	X+, r19
    2de0:	4d 93       	st	X+, r20
    2de2:	5c 93       	st	X, r21
    2de4:	17 97       	sbiw	r26, 0x07	; 7
    2de6:	08 95       	ret
    2de8:	2f 3f       	cpi	r18, 0xFF	; 255
    2dea:	31 05       	cpc	r19, r1
    2dec:	79 f4       	brne	.+30     	; 0x2e0c <__unpack_f+0xc2>
    2dee:	41 15       	cp	r20, r1
    2df0:	51 05       	cpc	r21, r1
    2df2:	61 05       	cpc	r22, r1
    2df4:	71 05       	cpc	r23, r1
    2df6:	19 f4       	brne	.+6      	; 0x2dfe <__unpack_f+0xb4>
    2df8:	84 e0       	ldi	r24, 0x04	; 4
    2dfa:	8c 93       	st	X, r24
    2dfc:	08 95       	ret
    2dfe:	64 ff       	sbrs	r22, 4
    2e00:	03 c0       	rjmp	.+6      	; 0x2e08 <__unpack_f+0xbe>
    2e02:	81 e0       	ldi	r24, 0x01	; 1
    2e04:	8c 93       	st	X, r24
    2e06:	12 c0       	rjmp	.+36     	; 0x2e2c <__unpack_f+0xe2>
    2e08:	1c 92       	st	X, r1
    2e0a:	10 c0       	rjmp	.+32     	; 0x2e2c <__unpack_f+0xe2>
    2e0c:	2f 57       	subi	r18, 0x7F	; 127
    2e0e:	30 40       	sbci	r19, 0x00	; 0
    2e10:	13 96       	adiw	r26, 0x03	; 3
    2e12:	3c 93       	st	X, r19
    2e14:	2e 93       	st	-X, r18
    2e16:	12 97       	sbiw	r26, 0x02	; 2
    2e18:	83 e0       	ldi	r24, 0x03	; 3
    2e1a:	8c 93       	st	X, r24
    2e1c:	87 e0       	ldi	r24, 0x07	; 7
    2e1e:	44 0f       	add	r20, r20
    2e20:	55 1f       	adc	r21, r21
    2e22:	66 1f       	adc	r22, r22
    2e24:	77 1f       	adc	r23, r23
    2e26:	8a 95       	dec	r24
    2e28:	d1 f7       	brne	.-12     	; 0x2e1e <__unpack_f+0xd4>
    2e2a:	70 64       	ori	r23, 0x40	; 64
    2e2c:	14 96       	adiw	r26, 0x04	; 4
    2e2e:	4d 93       	st	X+, r20
    2e30:	5d 93       	st	X+, r21
    2e32:	6d 93       	st	X+, r22
    2e34:	7c 93       	st	X, r23
    2e36:	17 97       	sbiw	r26, 0x07	; 7
    2e38:	08 95       	ret

00002e3a <__fpcmp_parts_f>:
    2e3a:	1f 93       	push	r17
    2e3c:	dc 01       	movw	r26, r24
    2e3e:	fb 01       	movw	r30, r22
    2e40:	9c 91       	ld	r25, X
    2e42:	92 30       	cpi	r25, 0x02	; 2
    2e44:	08 f4       	brcc	.+2      	; 0x2e48 <__fpcmp_parts_f+0xe>
    2e46:	47 c0       	rjmp	.+142    	; 0x2ed6 <__fpcmp_parts_f+0x9c>
    2e48:	80 81       	ld	r24, Z
    2e4a:	82 30       	cpi	r24, 0x02	; 2
    2e4c:	08 f4       	brcc	.+2      	; 0x2e50 <__fpcmp_parts_f+0x16>
    2e4e:	43 c0       	rjmp	.+134    	; 0x2ed6 <__fpcmp_parts_f+0x9c>
    2e50:	94 30       	cpi	r25, 0x04	; 4
    2e52:	51 f4       	brne	.+20     	; 0x2e68 <__fpcmp_parts_f+0x2e>
    2e54:	11 96       	adiw	r26, 0x01	; 1
    2e56:	1c 91       	ld	r17, X
    2e58:	84 30       	cpi	r24, 0x04	; 4
    2e5a:	99 f5       	brne	.+102    	; 0x2ec2 <__fpcmp_parts_f+0x88>
    2e5c:	81 81       	ldd	r24, Z+1	; 0x01
    2e5e:	68 2f       	mov	r22, r24
    2e60:	70 e0       	ldi	r23, 0x00	; 0
    2e62:	61 1b       	sub	r22, r17
    2e64:	71 09       	sbc	r23, r1
    2e66:	3f c0       	rjmp	.+126    	; 0x2ee6 <__fpcmp_parts_f+0xac>
    2e68:	84 30       	cpi	r24, 0x04	; 4
    2e6a:	21 f0       	breq	.+8      	; 0x2e74 <__fpcmp_parts_f+0x3a>
    2e6c:	92 30       	cpi	r25, 0x02	; 2
    2e6e:	31 f4       	brne	.+12     	; 0x2e7c <__fpcmp_parts_f+0x42>
    2e70:	82 30       	cpi	r24, 0x02	; 2
    2e72:	b9 f1       	breq	.+110    	; 0x2ee2 <__fpcmp_parts_f+0xa8>
    2e74:	81 81       	ldd	r24, Z+1	; 0x01
    2e76:	88 23       	and	r24, r24
    2e78:	89 f1       	breq	.+98     	; 0x2edc <__fpcmp_parts_f+0xa2>
    2e7a:	2d c0       	rjmp	.+90     	; 0x2ed6 <__fpcmp_parts_f+0x9c>
    2e7c:	11 96       	adiw	r26, 0x01	; 1
    2e7e:	1c 91       	ld	r17, X
    2e80:	11 97       	sbiw	r26, 0x01	; 1
    2e82:	82 30       	cpi	r24, 0x02	; 2
    2e84:	f1 f0       	breq	.+60     	; 0x2ec2 <__fpcmp_parts_f+0x88>
    2e86:	81 81       	ldd	r24, Z+1	; 0x01
    2e88:	18 17       	cp	r17, r24
    2e8a:	d9 f4       	brne	.+54     	; 0x2ec2 <__fpcmp_parts_f+0x88>
    2e8c:	12 96       	adiw	r26, 0x02	; 2
    2e8e:	2d 91       	ld	r18, X+
    2e90:	3c 91       	ld	r19, X
    2e92:	13 97       	sbiw	r26, 0x03	; 3
    2e94:	82 81       	ldd	r24, Z+2	; 0x02
    2e96:	93 81       	ldd	r25, Z+3	; 0x03
    2e98:	82 17       	cp	r24, r18
    2e9a:	93 07       	cpc	r25, r19
    2e9c:	94 f0       	brlt	.+36     	; 0x2ec2 <__fpcmp_parts_f+0x88>
    2e9e:	28 17       	cp	r18, r24
    2ea0:	39 07       	cpc	r19, r25
    2ea2:	bc f0       	brlt	.+46     	; 0x2ed2 <__fpcmp_parts_f+0x98>
    2ea4:	14 96       	adiw	r26, 0x04	; 4
    2ea6:	8d 91       	ld	r24, X+
    2ea8:	9d 91       	ld	r25, X+
    2eaa:	0d 90       	ld	r0, X+
    2eac:	bc 91       	ld	r27, X
    2eae:	a0 2d       	mov	r26, r0
    2eb0:	24 81       	ldd	r18, Z+4	; 0x04
    2eb2:	35 81       	ldd	r19, Z+5	; 0x05
    2eb4:	46 81       	ldd	r20, Z+6	; 0x06
    2eb6:	57 81       	ldd	r21, Z+7	; 0x07
    2eb8:	28 17       	cp	r18, r24
    2eba:	39 07       	cpc	r19, r25
    2ebc:	4a 07       	cpc	r20, r26
    2ebe:	5b 07       	cpc	r21, r27
    2ec0:	18 f4       	brcc	.+6      	; 0x2ec8 <__fpcmp_parts_f+0x8e>
    2ec2:	11 23       	and	r17, r17
    2ec4:	41 f0       	breq	.+16     	; 0x2ed6 <__fpcmp_parts_f+0x9c>
    2ec6:	0a c0       	rjmp	.+20     	; 0x2edc <__fpcmp_parts_f+0xa2>
    2ec8:	82 17       	cp	r24, r18
    2eca:	93 07       	cpc	r25, r19
    2ecc:	a4 07       	cpc	r26, r20
    2ece:	b5 07       	cpc	r27, r21
    2ed0:	40 f4       	brcc	.+16     	; 0x2ee2 <__fpcmp_parts_f+0xa8>
    2ed2:	11 23       	and	r17, r17
    2ed4:	19 f0       	breq	.+6      	; 0x2edc <__fpcmp_parts_f+0xa2>
    2ed6:	61 e0       	ldi	r22, 0x01	; 1
    2ed8:	70 e0       	ldi	r23, 0x00	; 0
    2eda:	05 c0       	rjmp	.+10     	; 0x2ee6 <__fpcmp_parts_f+0xac>
    2edc:	6f ef       	ldi	r22, 0xFF	; 255
    2ede:	7f ef       	ldi	r23, 0xFF	; 255
    2ee0:	02 c0       	rjmp	.+4      	; 0x2ee6 <__fpcmp_parts_f+0xac>
    2ee2:	60 e0       	ldi	r22, 0x00	; 0
    2ee4:	70 e0       	ldi	r23, 0x00	; 0
    2ee6:	cb 01       	movw	r24, r22
    2ee8:	1f 91       	pop	r17
    2eea:	08 95       	ret

00002eec <do_rand>:
    2eec:	a0 e0       	ldi	r26, 0x00	; 0
    2eee:	b0 e0       	ldi	r27, 0x00	; 0
    2ef0:	ec e7       	ldi	r30, 0x7C	; 124
    2ef2:	f7 e1       	ldi	r31, 0x17	; 23
    2ef4:	0c 94 06 18 	jmp	0x300c	; 0x300c <__prologue_saves__+0x10>
    2ef8:	ec 01       	movw	r28, r24
    2efa:	a8 80       	ld	r10, Y
    2efc:	b9 80       	ldd	r11, Y+1	; 0x01
    2efe:	ca 80       	ldd	r12, Y+2	; 0x02
    2f00:	db 80       	ldd	r13, Y+3	; 0x03
    2f02:	a1 14       	cp	r10, r1
    2f04:	b1 04       	cpc	r11, r1
    2f06:	c1 04       	cpc	r12, r1
    2f08:	d1 04       	cpc	r13, r1
    2f0a:	41 f4       	brne	.+16     	; 0x2f1c <do_rand+0x30>
    2f0c:	84 e2       	ldi	r24, 0x24	; 36
    2f0e:	a8 2e       	mov	r10, r24
    2f10:	89 ed       	ldi	r24, 0xD9	; 217
    2f12:	b8 2e       	mov	r11, r24
    2f14:	8b e5       	ldi	r24, 0x5B	; 91
    2f16:	c8 2e       	mov	r12, r24
    2f18:	87 e0       	ldi	r24, 0x07	; 7
    2f1a:	d8 2e       	mov	r13, r24
    2f1c:	c6 01       	movw	r24, r12
    2f1e:	b5 01       	movw	r22, r10
    2f20:	2d e1       	ldi	r18, 0x1D	; 29
    2f22:	33 ef       	ldi	r19, 0xF3	; 243
    2f24:	41 e0       	ldi	r20, 0x01	; 1
    2f26:	50 e0       	ldi	r21, 0x00	; 0
    2f28:	0e 94 54 18 	call	0x30a8	; 0x30a8 <__divmodsi4>
    2f2c:	27 ea       	ldi	r18, 0xA7	; 167
    2f2e:	31 e4       	ldi	r19, 0x41	; 65
    2f30:	40 e0       	ldi	r20, 0x00	; 0
    2f32:	50 e0       	ldi	r21, 0x00	; 0
    2f34:	0e 94 35 18 	call	0x306a	; 0x306a <__mulsi3>
    2f38:	7b 01       	movw	r14, r22
    2f3a:	8c 01       	movw	r16, r24
    2f3c:	c6 01       	movw	r24, r12
    2f3e:	b5 01       	movw	r22, r10
    2f40:	2d e1       	ldi	r18, 0x1D	; 29
    2f42:	33 ef       	ldi	r19, 0xF3	; 243
    2f44:	41 e0       	ldi	r20, 0x01	; 1
    2f46:	50 e0       	ldi	r21, 0x00	; 0
    2f48:	0e 94 54 18 	call	0x30a8	; 0x30a8 <__divmodsi4>
    2f4c:	ca 01       	movw	r24, r20
    2f4e:	b9 01       	movw	r22, r18
    2f50:	2c ee       	ldi	r18, 0xEC	; 236
    2f52:	34 ef       	ldi	r19, 0xF4	; 244
    2f54:	4f ef       	ldi	r20, 0xFF	; 255
    2f56:	5f ef       	ldi	r21, 0xFF	; 255
    2f58:	0e 94 35 18 	call	0x306a	; 0x306a <__mulsi3>
    2f5c:	6e 0d       	add	r22, r14
    2f5e:	7f 1d       	adc	r23, r15
    2f60:	80 1f       	adc	r24, r16
    2f62:	91 1f       	adc	r25, r17
    2f64:	97 ff       	sbrs	r25, 7
    2f66:	04 c0       	rjmp	.+8      	; 0x2f70 <do_rand+0x84>
    2f68:	61 50       	subi	r22, 0x01	; 1
    2f6a:	70 40       	sbci	r23, 0x00	; 0
    2f6c:	80 40       	sbci	r24, 0x00	; 0
    2f6e:	90 48       	sbci	r25, 0x80	; 128
    2f70:	68 83       	st	Y, r22
    2f72:	79 83       	std	Y+1, r23	; 0x01
    2f74:	8a 83       	std	Y+2, r24	; 0x02
    2f76:	9b 83       	std	Y+3, r25	; 0x03
    2f78:	9b 01       	movw	r18, r22
    2f7a:	3f 77       	andi	r19, 0x7F	; 127
    2f7c:	c9 01       	movw	r24, r18
    2f7e:	cd b7       	in	r28, 0x3d	; 61
    2f80:	de b7       	in	r29, 0x3e	; 62
    2f82:	ea e0       	ldi	r30, 0x0A	; 10
    2f84:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__epilogue_restores__+0x10>

00002f88 <rand_r>:
    2f88:	0e 94 76 17 	call	0x2eec	; 0x2eec <do_rand>
    2f8c:	08 95       	ret

00002f8e <rand>:
    2f8e:	80 e5       	ldi	r24, 0x50	; 80
    2f90:	93 e0       	ldi	r25, 0x03	; 3
    2f92:	0e 94 76 17 	call	0x2eec	; 0x2eec <do_rand>
    2f96:	08 95       	ret

00002f98 <srand>:
    2f98:	a0 e0       	ldi	r26, 0x00	; 0
    2f9a:	b0 e0       	ldi	r27, 0x00	; 0
    2f9c:	80 93 50 03 	sts	0x0350, r24
    2fa0:	90 93 51 03 	sts	0x0351, r25
    2fa4:	a0 93 52 03 	sts	0x0352, r26
    2fa8:	b0 93 53 03 	sts	0x0353, r27
    2fac:	08 95       	ret

00002fae <__udivmodhi4>:
    2fae:	aa 1b       	sub	r26, r26
    2fb0:	bb 1b       	sub	r27, r27
    2fb2:	51 e1       	ldi	r21, 0x11	; 17
    2fb4:	07 c0       	rjmp	.+14     	; 0x2fc4 <__udivmodhi4_ep>

00002fb6 <__udivmodhi4_loop>:
    2fb6:	aa 1f       	adc	r26, r26
    2fb8:	bb 1f       	adc	r27, r27
    2fba:	a6 17       	cp	r26, r22
    2fbc:	b7 07       	cpc	r27, r23
    2fbe:	10 f0       	brcs	.+4      	; 0x2fc4 <__udivmodhi4_ep>
    2fc0:	a6 1b       	sub	r26, r22
    2fc2:	b7 0b       	sbc	r27, r23

00002fc4 <__udivmodhi4_ep>:
    2fc4:	88 1f       	adc	r24, r24
    2fc6:	99 1f       	adc	r25, r25
    2fc8:	5a 95       	dec	r21
    2fca:	a9 f7       	brne	.-22     	; 0x2fb6 <__udivmodhi4_loop>
    2fcc:	80 95       	com	r24
    2fce:	90 95       	com	r25
    2fd0:	bc 01       	movw	r22, r24
    2fd2:	cd 01       	movw	r24, r26
    2fd4:	08 95       	ret

00002fd6 <__divmodhi4>:
    2fd6:	97 fb       	bst	r25, 7
    2fd8:	09 2e       	mov	r0, r25
    2fda:	07 26       	eor	r0, r23
    2fdc:	0a d0       	rcall	.+20     	; 0x2ff2 <__divmodhi4_neg1>
    2fde:	77 fd       	sbrc	r23, 7
    2fe0:	04 d0       	rcall	.+8      	; 0x2fea <__divmodhi4_neg2>
    2fe2:	e5 df       	rcall	.-54     	; 0x2fae <__udivmodhi4>
    2fe4:	06 d0       	rcall	.+12     	; 0x2ff2 <__divmodhi4_neg1>
    2fe6:	00 20       	and	r0, r0
    2fe8:	1a f4       	brpl	.+6      	; 0x2ff0 <__divmodhi4_exit>

00002fea <__divmodhi4_neg2>:
    2fea:	70 95       	com	r23
    2fec:	61 95       	neg	r22
    2fee:	7f 4f       	sbci	r23, 0xFF	; 255

00002ff0 <__divmodhi4_exit>:
    2ff0:	08 95       	ret

00002ff2 <__divmodhi4_neg1>:
    2ff2:	f6 f7       	brtc	.-4      	; 0x2ff0 <__divmodhi4_exit>
    2ff4:	90 95       	com	r25
    2ff6:	81 95       	neg	r24
    2ff8:	9f 4f       	sbci	r25, 0xFF	; 255
    2ffa:	08 95       	ret

00002ffc <__prologue_saves__>:
    2ffc:	2f 92       	push	r2
    2ffe:	3f 92       	push	r3
    3000:	4f 92       	push	r4
    3002:	5f 92       	push	r5
    3004:	6f 92       	push	r6
    3006:	7f 92       	push	r7
    3008:	8f 92       	push	r8
    300a:	9f 92       	push	r9
    300c:	af 92       	push	r10
    300e:	bf 92       	push	r11
    3010:	cf 92       	push	r12
    3012:	df 92       	push	r13
    3014:	ef 92       	push	r14
    3016:	ff 92       	push	r15
    3018:	0f 93       	push	r16
    301a:	1f 93       	push	r17
    301c:	cf 93       	push	r28
    301e:	df 93       	push	r29
    3020:	cd b7       	in	r28, 0x3d	; 61
    3022:	de b7       	in	r29, 0x3e	; 62
    3024:	ca 1b       	sub	r28, r26
    3026:	db 0b       	sbc	r29, r27
    3028:	0f b6       	in	r0, 0x3f	; 63
    302a:	f8 94       	cli
    302c:	de bf       	out	0x3e, r29	; 62
    302e:	0f be       	out	0x3f, r0	; 63
    3030:	cd bf       	out	0x3d, r28	; 61
    3032:	09 94       	ijmp

00003034 <__epilogue_restores__>:
    3034:	2a 88       	ldd	r2, Y+18	; 0x12
    3036:	39 88       	ldd	r3, Y+17	; 0x11
    3038:	48 88       	ldd	r4, Y+16	; 0x10
    303a:	5f 84       	ldd	r5, Y+15	; 0x0f
    303c:	6e 84       	ldd	r6, Y+14	; 0x0e
    303e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3040:	8c 84       	ldd	r8, Y+12	; 0x0c
    3042:	9b 84       	ldd	r9, Y+11	; 0x0b
    3044:	aa 84       	ldd	r10, Y+10	; 0x0a
    3046:	b9 84       	ldd	r11, Y+9	; 0x09
    3048:	c8 84       	ldd	r12, Y+8	; 0x08
    304a:	df 80       	ldd	r13, Y+7	; 0x07
    304c:	ee 80       	ldd	r14, Y+6	; 0x06
    304e:	fd 80       	ldd	r15, Y+5	; 0x05
    3050:	0c 81       	ldd	r16, Y+4	; 0x04
    3052:	1b 81       	ldd	r17, Y+3	; 0x03
    3054:	aa 81       	ldd	r26, Y+2	; 0x02
    3056:	b9 81       	ldd	r27, Y+1	; 0x01
    3058:	ce 0f       	add	r28, r30
    305a:	d1 1d       	adc	r29, r1
    305c:	0f b6       	in	r0, 0x3f	; 63
    305e:	f8 94       	cli
    3060:	de bf       	out	0x3e, r29	; 62
    3062:	0f be       	out	0x3f, r0	; 63
    3064:	cd bf       	out	0x3d, r28	; 61
    3066:	ed 01       	movw	r28, r26
    3068:	08 95       	ret

0000306a <__mulsi3>:
    306a:	62 9f       	mul	r22, r18
    306c:	d0 01       	movw	r26, r0
    306e:	73 9f       	mul	r23, r19
    3070:	f0 01       	movw	r30, r0
    3072:	82 9f       	mul	r24, r18
    3074:	e0 0d       	add	r30, r0
    3076:	f1 1d       	adc	r31, r1
    3078:	64 9f       	mul	r22, r20
    307a:	e0 0d       	add	r30, r0
    307c:	f1 1d       	adc	r31, r1
    307e:	92 9f       	mul	r25, r18
    3080:	f0 0d       	add	r31, r0
    3082:	83 9f       	mul	r24, r19
    3084:	f0 0d       	add	r31, r0
    3086:	74 9f       	mul	r23, r20
    3088:	f0 0d       	add	r31, r0
    308a:	65 9f       	mul	r22, r21
    308c:	f0 0d       	add	r31, r0
    308e:	99 27       	eor	r25, r25
    3090:	72 9f       	mul	r23, r18
    3092:	b0 0d       	add	r27, r0
    3094:	e1 1d       	adc	r30, r1
    3096:	f9 1f       	adc	r31, r25
    3098:	63 9f       	mul	r22, r19
    309a:	b0 0d       	add	r27, r0
    309c:	e1 1d       	adc	r30, r1
    309e:	f9 1f       	adc	r31, r25
    30a0:	bd 01       	movw	r22, r26
    30a2:	cf 01       	movw	r24, r30
    30a4:	11 24       	eor	r1, r1
    30a6:	08 95       	ret

000030a8 <__divmodsi4>:
    30a8:	97 fb       	bst	r25, 7
    30aa:	09 2e       	mov	r0, r25
    30ac:	05 26       	eor	r0, r21
    30ae:	0e d0       	rcall	.+28     	; 0x30cc <__divmodsi4_neg1>
    30b0:	57 fd       	sbrc	r21, 7
    30b2:	04 d0       	rcall	.+8      	; 0x30bc <__divmodsi4_neg2>
    30b4:	14 d0       	rcall	.+40     	; 0x30de <__udivmodsi4>
    30b6:	0a d0       	rcall	.+20     	; 0x30cc <__divmodsi4_neg1>
    30b8:	00 1c       	adc	r0, r0
    30ba:	38 f4       	brcc	.+14     	; 0x30ca <__divmodsi4_exit>

000030bc <__divmodsi4_neg2>:
    30bc:	50 95       	com	r21
    30be:	40 95       	com	r20
    30c0:	30 95       	com	r19
    30c2:	21 95       	neg	r18
    30c4:	3f 4f       	sbci	r19, 0xFF	; 255
    30c6:	4f 4f       	sbci	r20, 0xFF	; 255
    30c8:	5f 4f       	sbci	r21, 0xFF	; 255

000030ca <__divmodsi4_exit>:
    30ca:	08 95       	ret

000030cc <__divmodsi4_neg1>:
    30cc:	f6 f7       	brtc	.-4      	; 0x30ca <__divmodsi4_exit>
    30ce:	90 95       	com	r25
    30d0:	80 95       	com	r24
    30d2:	70 95       	com	r23
    30d4:	61 95       	neg	r22
    30d6:	7f 4f       	sbci	r23, 0xFF	; 255
    30d8:	8f 4f       	sbci	r24, 0xFF	; 255
    30da:	9f 4f       	sbci	r25, 0xFF	; 255
    30dc:	08 95       	ret

000030de <__udivmodsi4>:
    30de:	a1 e2       	ldi	r26, 0x21	; 33
    30e0:	1a 2e       	mov	r1, r26
    30e2:	aa 1b       	sub	r26, r26
    30e4:	bb 1b       	sub	r27, r27
    30e6:	fd 01       	movw	r30, r26
    30e8:	0d c0       	rjmp	.+26     	; 0x3104 <__udivmodsi4_ep>

000030ea <__udivmodsi4_loop>:
    30ea:	aa 1f       	adc	r26, r26
    30ec:	bb 1f       	adc	r27, r27
    30ee:	ee 1f       	adc	r30, r30
    30f0:	ff 1f       	adc	r31, r31
    30f2:	a2 17       	cp	r26, r18
    30f4:	b3 07       	cpc	r27, r19
    30f6:	e4 07       	cpc	r30, r20
    30f8:	f5 07       	cpc	r31, r21
    30fa:	20 f0       	brcs	.+8      	; 0x3104 <__udivmodsi4_ep>
    30fc:	a2 1b       	sub	r26, r18
    30fe:	b3 0b       	sbc	r27, r19
    3100:	e4 0b       	sbc	r30, r20
    3102:	f5 0b       	sbc	r31, r21

00003104 <__udivmodsi4_ep>:
    3104:	66 1f       	adc	r22, r22
    3106:	77 1f       	adc	r23, r23
    3108:	88 1f       	adc	r24, r24
    310a:	99 1f       	adc	r25, r25
    310c:	1a 94       	dec	r1
    310e:	69 f7       	brne	.-38     	; 0x30ea <__udivmodsi4_loop>
    3110:	60 95       	com	r22
    3112:	70 95       	com	r23
    3114:	80 95       	com	r24
    3116:	90 95       	com	r25
    3118:	9b 01       	movw	r18, r22
    311a:	ac 01       	movw	r20, r24
    311c:	bd 01       	movw	r22, r26
    311e:	cf 01       	movw	r24, r30
    3120:	08 95       	ret

00003122 <_exit>:
    3122:	f8 94       	cli

00003124 <__stop_program>:
    3124:	ff cf       	rjmp	.-2      	; 0x3124 <__stop_program>
