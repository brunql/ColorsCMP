
ColorsCMP_EclipseEdition.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ed6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000236  00800060  00001ed6  00001f4a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  00800296  0000210c  00002180  2**0
                  ALLOC
  3 .stab         00003780  00000000  00000000  00002180  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000146f  00000000  00000000  00005900  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__ctors_end>
       4:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
       8:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__vector_2>
       c:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
      10:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
      14:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
      18:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
      1c:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
      20:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
      24:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
      28:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
      2c:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
      30:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
      34:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
      38:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
      3c:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
      40:	0c 94 ac 03 	jmp	0x758	; 0x758 <__vector_16>
      44:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
      48:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
      4c:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
      50:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>

00000054 <FontLookup>:
      54:	00 00 00 00 00 00 00 2f 00 00 00 07 00 07 00 14     ......./........
      64:	7f 14 7f 14 24 2a 7f 2a 12 c4 c8 10 26 46 36 49     ....$*.*....&F6I
      74:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
      84:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 00 50 30     ....>....>....P0
      94:	00 10 10 10 10 10 00 60 60 00 00 20 10 08 04 02     .......``.. ....
      a4:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
      b4:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
      c4:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
      d4:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
      e4:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
      f4:	3e 59 65 65 5e 7e 11 11 11 7e 7f 49 49 49 36 3e     >Yee^~...~.III6>
     104:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     114:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     124:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     134:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     144:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     154:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     164:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     174:	08 07 61 51 49 45 43 00 7f 41 41 00 55 2a 55 2a     ..aQIEC..AA.U*U*
     184:	55 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40     U.AA.......@@@@@
     194:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     1a4:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     1b4:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
     1c4:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     1d4:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     1e4:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     1f4:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     204:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     214:	50 3c 44 64 54 4c 44 00                             P<DdTLD.

0000021c <__ctors_end>:
     21c:	11 24       	eor	r1, r1
     21e:	1f be       	out	0x3f, r1	; 63
     220:	cf e5       	ldi	r28, 0x5F	; 95
     222:	d8 e0       	ldi	r29, 0x08	; 8
     224:	de bf       	out	0x3e, r29	; 62
     226:	cd bf       	out	0x3d, r28	; 61

00000228 <__do_copy_data>:
     228:	12 e0       	ldi	r17, 0x02	; 2
     22a:	a0 e6       	ldi	r26, 0x60	; 96
     22c:	b0 e0       	ldi	r27, 0x00	; 0
     22e:	e6 ed       	ldi	r30, 0xD6	; 214
     230:	fe e1       	ldi	r31, 0x1E	; 30
     232:	02 c0       	rjmp	.+4      	; 0x238 <.do_copy_data_start>

00000234 <.do_copy_data_loop>:
     234:	05 90       	lpm	r0, Z+
     236:	0d 92       	st	X+, r0

00000238 <.do_copy_data_start>:
     238:	a6 39       	cpi	r26, 0x96	; 150
     23a:	b1 07       	cpc	r27, r17
     23c:	d9 f7       	brne	.-10     	; 0x234 <.do_copy_data_loop>

0000023e <__do_clear_bss>:
     23e:	12 e0       	ldi	r17, 0x02	; 2
     240:	a6 e9       	ldi	r26, 0x96	; 150
     242:	b2 e0       	ldi	r27, 0x02	; 2
     244:	01 c0       	rjmp	.+2      	; 0x248 <.do_clear_bss_start>

00000246 <.do_clear_bss_loop>:
     246:	1d 92       	st	X+, r1

00000248 <.do_clear_bss_start>:
     248:	a6 3d       	cpi	r26, 0xD6	; 214
     24a:	b1 07       	cpc	r27, r17
     24c:	e1 f7       	brne	.-8      	; 0x246 <.do_clear_bss_loop>
     24e:	0e 94 c0 03 	call	0x780	; 0x780 <main>
     252:	0c 94 69 0f 	jmp	0x1ed2	; 0x1ed2 <_exit>

00000256 <__bad_interrupt>:
     256:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

0000025a <hex2dec_result>:
PGM_P pstr_complete = "Done!";
PGM_P pstr_please_wait = "Please wait...";


void hex2dec_result(uint16_t hex, uint8_t result_index, uint8_t result_color)
{
     25a:	cf 92       	push	r12
     25c:	df 92       	push	r13
     25e:	ef 92       	push	r14
     260:	ff 92       	push	r15
     262:	0f 93       	push	r16
     264:	1f 93       	push	r17
     266:	7c 01       	movw	r14, r24
     268:	26 2f       	mov	r18, r22
	uint8_t res2, res1, res0;
	res0 =  hex % 10;
	hex /= 10;
     26a:	6a e0       	ldi	r22, 0x0A	; 10
     26c:	70 e0       	ldi	r23, 0x00	; 0
     26e:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__udivmodhi4>
     272:	d6 2e       	mov	r13, r22
     274:	c7 2e       	mov	r12, r23
	hex /= 10;
	res2 = hex % 10;

	uint16_t dec_result = (res2 << 8) | (res1 << 4)| res0;

	result[result_index][result_color] = dec_result;
     276:	30 e0       	ldi	r19, 0x00	; 0
     278:	89 01       	movw	r16, r18
     27a:	00 0f       	add	r16, r16
     27c:	11 1f       	adc	r17, r17
     27e:	02 0f       	add	r16, r18
     280:	13 1f       	adc	r17, r19
     282:	04 0f       	add	r16, r20
     284:	11 1d       	adc	r17, r1
     286:	00 0f       	add	r16, r16
     288:	11 1f       	adc	r17, r17
     28a:	02 55       	subi	r16, 0x52	; 82
     28c:	1d 4f       	sbci	r17, 0xFD	; 253
     28e:	86 2f       	mov	r24, r22
     290:	97 2f       	mov	r25, r23
     292:	6a e0       	ldi	r22, 0x0A	; 10
     294:	70 e0       	ldi	r23, 0x00	; 0
     296:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__udivmodhi4>
     29a:	e8 2f       	mov	r30, r24
     29c:	f0 e0       	ldi	r31, 0x00	; 0
     29e:	84 e0       	ldi	r24, 0x04	; 4
     2a0:	ee 0f       	add	r30, r30
     2a2:	ff 1f       	adc	r31, r31
     2a4:	8a 95       	dec	r24
     2a6:	e1 f7       	brne	.-8      	; 0x2a0 <hex2dec_result+0x46>
     2a8:	c7 01       	movw	r24, r14
     2aa:	6a e0       	ldi	r22, 0x0A	; 10
     2ac:	70 e0       	ldi	r23, 0x00	; 0
     2ae:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__udivmodhi4>
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	e8 2b       	or	r30, r24
     2b6:	f9 2b       	or	r31, r25
     2b8:	8d 2d       	mov	r24, r13
     2ba:	9c 2d       	mov	r25, r12
     2bc:	6a e0       	ldi	r22, 0x0A	; 10
     2be:	70 e0       	ldi	r23, 0x00	; 0
     2c0:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__udivmodhi4>
     2c4:	cb 01       	movw	r24, r22
     2c6:	6a e0       	ldi	r22, 0x0A	; 10
     2c8:	70 e0       	ldi	r23, 0x00	; 0
     2ca:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__udivmodhi4>
     2ce:	38 2f       	mov	r19, r24
     2d0:	20 e0       	ldi	r18, 0x00	; 0
     2d2:	e2 2b       	or	r30, r18
     2d4:	f3 2b       	or	r31, r19
     2d6:	d8 01       	movw	r26, r16
     2d8:	ed 93       	st	X+, r30
     2da:	fc 93       	st	X, r31
}
     2dc:	1f 91       	pop	r17
     2de:	0f 91       	pop	r16
     2e0:	ff 90       	pop	r15
     2e2:	ef 90       	pop	r14
     2e4:	df 90       	pop	r13
     2e6:	cf 90       	pop	r12
     2e8:	08 95       	ret

000002ea <StartADC>:


void StartADC(FirstOrSecond first)
{
	if (first){
     2ea:	88 23       	and	r24, r24
     2ec:	11 f0       	breq	.+4      	; 0x2f2 <StartADC+0x8>
		ADMUX &= (unsigned char) ~ _BV(MUX0);
     2ee:	38 98       	cbi	0x07, 0	; 7
     2f0:	01 c0       	rjmp	.+2      	; 0x2f4 <StartADC+0xa>
	}else{ // second
		ADMUX |= _BV(MUX0);
     2f2:	38 9a       	sbi	0x07, 0	; 7
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2f4:	88 ec       	ldi	r24, 0xC8	; 200
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	01 97       	sbiw	r24, 0x01	; 1
     2fa:	f1 f7       	brne	.-4      	; 0x2f8 <StartADC+0xe>

	// delay for stabilisation on ADC pin (charge intro reference capacitor)
	// TODO: NEED TEST!
	_delay_us(50);

	ADCSRA |= _BV( ADSC ); // start conversation
     2fc:	36 9a       	sbi	0x06, 6	; 6
	while( ADC_CONVERT_IN_PROGRESS() ) {  };
     2fe:	36 99       	sbic	0x06, 6	; 6
     300:	fe cf       	rjmp	.-4      	; 0x2fe <StartADC+0x14>
	//result in adc_data
}
     302:	08 95       	ret

00000304 <GetValuesFromADC>:

void GetValuesFromADC(void) // with simple averaging
{
	uint16_t temp_val = adc_res_first;
     304:	20 91 c0 02 	lds	r18, 0x02C0
     308:	30 91 c1 02 	lds	r19, 0x02C1
void StartADC(FirstOrSecond first)
{
	if (first){
		ADMUX &= (unsigned char) ~ _BV(MUX0);
	}else{ // second
		ADMUX |= _BV(MUX0);
     30c:	38 9a       	sbi	0x07, 0	; 7
     30e:	88 ec       	ldi	r24, 0xC8	; 200
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	01 97       	sbiw	r24, 0x01	; 1
     314:	f1 f7       	brne	.-4      	; 0x312 <GetValuesFromADC+0xe>

	// delay for stabilisation on ADC pin (charge intro reference capacitor)
	// TODO: NEED TEST!
	_delay_us(50);

	ADCSRA |= _BV( ADSC ); // start conversation
     316:	36 9a       	sbi	0x06, 6	; 6
	while( ADC_CONVERT_IN_PROGRESS() ) {  };
     318:	36 99       	sbic	0x06, 6	; 6
     31a:	fe cf       	rjmp	.-4      	; 0x318 <GetValuesFromADC+0x14>

void GetValuesFromADC(void) // with simple averaging
{
	uint16_t temp_val = adc_res_first;
	StartADC( FIRST );
	if(temp_val){
     31c:	21 15       	cp	r18, r1
     31e:	31 05       	cpc	r19, r1
     320:	49 f0       	breq	.+18     	; 0x334 <GetValuesFromADC+0x30>
		adc_res_first = (adc_data + temp_val) / 2;
     322:	80 91 c6 02 	lds	r24, 0x02C6
     326:	90 91 c7 02 	lds	r25, 0x02C7
     32a:	82 0f       	add	r24, r18
     32c:	93 1f       	adc	r25, r19
     32e:	96 95       	lsr	r25
     330:	87 95       	ror	r24
     332:	04 c0       	rjmp	.+8      	; 0x33c <GetValuesFromADC+0x38>
	}else{
		adc_res_first = adc_data;
     334:	80 91 c6 02 	lds	r24, 0x02C6
     338:	90 91 c7 02 	lds	r25, 0x02C7
     33c:	90 93 c1 02 	sts	0x02C1, r25
     340:	80 93 c0 02 	sts	0x02C0, r24
	}

	temp_val = adc_res_second;
     344:	20 91 c2 02 	lds	r18, 0x02C2
     348:	30 91 c3 02 	lds	r19, 0x02C3


void StartADC(FirstOrSecond first)
{
	if (first){
		ADMUX &= (unsigned char) ~ _BV(MUX0);
     34c:	38 98       	cbi	0x07, 0	; 7
     34e:	88 ec       	ldi	r24, 0xC8	; 200
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	01 97       	sbiw	r24, 0x01	; 1
     354:	f1 f7       	brne	.-4      	; 0x352 <GetValuesFromADC+0x4e>

	// delay for stabilisation on ADC pin (charge intro reference capacitor)
	// TODO: NEED TEST!
	_delay_us(50);

	ADCSRA |= _BV( ADSC ); // start conversation
     356:	36 9a       	sbi	0x06, 6	; 6
	while( ADC_CONVERT_IN_PROGRESS() ) {  };
     358:	36 99       	sbic	0x06, 6	; 6
     35a:	fe cf       	rjmp	.-4      	; 0x358 <GetValuesFromADC+0x54>
		adc_res_first = adc_data;
	}

	temp_val = adc_res_second;
	StartADC( SECOND );
	if(temp_val){
     35c:	21 15       	cp	r18, r1
     35e:	31 05       	cpc	r19, r1
     360:	49 f0       	breq	.+18     	; 0x374 <GetValuesFromADC+0x70>
		adc_res_second = (adc_data + temp_val) / 2;
     362:	80 91 c6 02 	lds	r24, 0x02C6
     366:	90 91 c7 02 	lds	r25, 0x02C7
     36a:	82 0f       	add	r24, r18
     36c:	93 1f       	adc	r25, r19
     36e:	96 95       	lsr	r25
     370:	87 95       	ror	r24
     372:	04 c0       	rjmp	.+8      	; 0x37c <GetValuesFromADC+0x78>
	}else{
		adc_res_second = adc_data;
     374:	80 91 c6 02 	lds	r24, 0x02C6
     378:	90 91 c7 02 	lds	r25, 0x02C7
     37c:	90 93 c3 02 	sts	0x02C3, r25
     380:	80 93 c2 02 	sts	0x02C2, r24
     384:	08 95       	ret

00000386 <ADC_255_Times>:
	}
}


void ADC_255_Times(void)
{
     386:	1f 93       	push	r17
	//===================================//
	adc_res_first = 0x00;
     388:	10 92 c1 02 	sts	0x02C1, r1
     38c:	10 92 c0 02 	sts	0x02C0, r1
	adc_res_second = 0x00;
     390:	10 92 c3 02 	sts	0x02C3, r1
     394:	10 92 c2 02 	sts	0x02C2, r1
     398:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0; i < 0xff;  i++){
		GetValuesFromADC();
     39a:	0e 94 82 01 	call	0x304	; 0x304 <GetValuesFromADC>
void ADC_255_Times(void)
{
	//===================================//
	adc_res_first = 0x00;
	adc_res_second = 0x00;
	for(uint8_t i=0; i < 0xff;  i++){
     39e:	1f 5f       	subi	r17, 0xFF	; 255
     3a0:	1f 3f       	cpi	r17, 0xFF	; 255
     3a2:	d9 f7       	brne	.-10     	; 0x39a <ADC_255_Times+0x14>
		GetValuesFromADC();
	}
	//===================================//
}
     3a4:	1f 91       	pop	r17
     3a6:	08 95       	ret

000003a8 <CalibrationAlgorithm>:


void CalibrationAlgorithm(uint8_t color)
{
     3a8:	cf 92       	push	r12
     3aa:	df 92       	push	r13
     3ac:	ef 92       	push	r14
     3ae:	ff 92       	push	r15
     3b0:	0f 93       	push	r16
     3b2:	1f 93       	push	r17
//	uint8_t adc_res_first_8 = (uint8_t)((uint16_t)adc_res_first >> 2);
//	uint8_t adc_res_second_8 = (uint8_t)((uint16_t)adc_res_second >> 2);
//	coefs[FIRST][color] = (double) EVP_ALG_PERCENT * ADC_MAX_VALUE / adc_res_first_8;
//	coefs[SECOND][color] = (double) EVP_ALG_PERCENT * ADC_MAX_VALUE / adc_res_second_8;
//
	coefs[FIRST][color] = (double) EVP_ALG_PERCENT * ADC_MAX_VALUE / adc_res_first;
     3b4:	08 2f       	mov	r16, r24
     3b6:	10 e0       	ldi	r17, 0x00	; 0
     3b8:	60 91 c0 02 	lds	r22, 0x02C0
     3bc:	70 91 c1 02 	lds	r23, 0x02C1
     3c0:	a6 e9       	ldi	r26, 0x96	; 150
     3c2:	ca 2e       	mov	r12, r26
     3c4:	a2 e0       	ldi	r26, 0x02	; 2
     3c6:	da 2e       	mov	r13, r26
     3c8:	78 01       	movw	r14, r16
     3ca:	ee 0c       	add	r14, r14
     3cc:	ff 1c       	adc	r15, r15
     3ce:	ee 0c       	add	r14, r14
     3d0:	ff 1c       	adc	r15, r15
     3d2:	ec 0c       	add	r14, r12
     3d4:	fd 1c       	adc	r15, r13
     3d6:	88 27       	eor	r24, r24
     3d8:	77 fd       	sbrc	r23, 7
     3da:	80 95       	com	r24
     3dc:	98 2f       	mov	r25, r24
     3de:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__floatsisf>
     3e2:	9b 01       	movw	r18, r22
     3e4:	ac 01       	movw	r20, r24
     3e6:	60 e0       	ldi	r22, 0x00	; 0
     3e8:	70 ec       	ldi	r23, 0xC0	; 192
     3ea:	8f ef       	ldi	r24, 0xFF	; 255
     3ec:	93 e4       	ldi	r25, 0x43	; 67
     3ee:	0e 94 c2 0a 	call	0x1584	; 0x1584 <__divsf3>
     3f2:	f7 01       	movw	r30, r14
     3f4:	60 83       	st	Z, r22
     3f6:	71 83       	std	Z+1, r23	; 0x01
     3f8:	82 83       	std	Z+2, r24	; 0x02
     3fa:	93 83       	std	Z+3, r25	; 0x03
	coefs[SECOND][color] = (double) EVP_ALG_PERCENT * ADC_MAX_VALUE / adc_res_second;
     3fc:	60 91 c2 02 	lds	r22, 0x02C2
     400:	70 91 c3 02 	lds	r23, 0x02C3
     404:	0d 5f       	subi	r16, 0xFD	; 253
     406:	1f 4f       	sbci	r17, 0xFF	; 255
     408:	00 0f       	add	r16, r16
     40a:	11 1f       	adc	r17, r17
     40c:	00 0f       	add	r16, r16
     40e:	11 1f       	adc	r17, r17
     410:	c0 0e       	add	r12, r16
     412:	d1 1e       	adc	r13, r17
     414:	88 27       	eor	r24, r24
     416:	77 fd       	sbrc	r23, 7
     418:	80 95       	com	r24
     41a:	98 2f       	mov	r25, r24
     41c:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__floatsisf>
     420:	9b 01       	movw	r18, r22
     422:	ac 01       	movw	r20, r24
     424:	60 e0       	ldi	r22, 0x00	; 0
     426:	70 ec       	ldi	r23, 0xC0	; 192
     428:	8f ef       	ldi	r24, 0xFF	; 255
     42a:	93 e4       	ldi	r25, 0x43	; 67
     42c:	0e 94 c2 0a 	call	0x1584	; 0x1584 <__divsf3>
     430:	f6 01       	movw	r30, r12
     432:	60 83       	st	Z, r22
     434:	71 83       	std	Z+1, r23	; 0x01
     436:	82 83       	std	Z+2, r24	; 0x02
     438:	93 83       	std	Z+3, r25	; 0x03

#else
	coefs[FIRST][color] = 1;
	coefs[SECOND][color] = (double)adc_res_first / adc_res_second;
#endif
}
     43a:	1f 91       	pop	r17
     43c:	0f 91       	pop	r16
     43e:	ff 90       	pop	r15
     440:	ef 90       	pop	r14
     442:	df 90       	pop	r13
     444:	cf 90       	pop	r12
     446:	08 95       	ret

00000448 <SetZeroAlgorithm>:
void SetZeroAlgorithm(uint8_t color)
{
//	zero[FIRST] = adc_res_first;
//	zero[SECOND] = adc_res_second;

	max_diff = ADC_MAX_VALUE;// -  ((adc_res_first < adc_res_second) ? adc_res_first : adc_res_second);
     448:	8f ef       	ldi	r24, 0xFF	; 255
     44a:	93 e0       	ldi	r25, 0x03	; 3
     44c:	90 93 61 00 	sts	0x0061, r25
     450:	80 93 60 00 	sts	0x0060, r24
}
     454:	08 95       	ret

00000456 <SaveResultsAlgorithm>:

void SaveResultsAlgorithm(uint8_t color)
{
     456:	df 92       	push	r13
     458:	ef 92       	push	r14
     45a:	ff 92       	push	r15
     45c:	0f 93       	push	r16
     45e:	1f 93       	push	r17
     460:	cf 93       	push	r28
     462:	df 93       	push	r29
     464:	d8 2e       	mov	r13, r24
//	uint8_t adc_res_second_8 = (uint8_t)((uint16_t)adc_res_second >> 2);
//
//	int16_t result1 = (int16_t)((double)(((double)adc_res_first_8) * coefs[FIRST][color]));
//	int16_t result2 = (int16_t)((double)(((double)adc_res_second_8) * coefs[SECOND][color]));

	int16_t result1 = (int16_t)((double)(((double)adc_res_first) * coefs[FIRST][color]));
     466:	60 91 c0 02 	lds	r22, 0x02C0
     46a:	70 91 c1 02 	lds	r23, 0x02C1
     46e:	08 2f       	mov	r16, r24
     470:	10 e0       	ldi	r17, 0x00	; 0
     472:	88 27       	eor	r24, r24
     474:	77 fd       	sbrc	r23, 7
     476:	80 95       	com	r24
     478:	98 2f       	mov	r25, r24
     47a:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__floatsisf>
     47e:	00 0f       	add	r16, r16
     480:	11 1f       	adc	r17, r17
     482:	00 0f       	add	r16, r16
     484:	11 1f       	adc	r17, r17
     486:	f8 01       	movw	r30, r16
     488:	ea 56       	subi	r30, 0x6A	; 106
     48a:	fd 4f       	sbci	r31, 0xFD	; 253
     48c:	20 81       	ld	r18, Z
     48e:	31 81       	ldd	r19, Z+1	; 0x01
     490:	42 81       	ldd	r20, Z+2	; 0x02
     492:	53 81       	ldd	r21, Z+3	; 0x03
     494:	0e 94 c8 09 	call	0x1390	; 0x1390 <__mulsf3>
     498:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <__fixsfsi>
     49c:	7b 01       	movw	r14, r22
	int16_t result2 = (int16_t)((double)(((double)adc_res_second) * coefs[SECOND][color]));
     49e:	60 91 c2 02 	lds	r22, 0x02C2
     4a2:	70 91 c3 02 	lds	r23, 0x02C3
     4a6:	88 27       	eor	r24, r24
     4a8:	77 fd       	sbrc	r23, 7
     4aa:	80 95       	com	r24
     4ac:	98 2f       	mov	r25, r24
     4ae:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__floatsisf>
     4b2:	0e 55       	subi	r16, 0x5E	; 94
     4b4:	1d 4f       	sbci	r17, 0xFD	; 253
     4b6:	f8 01       	movw	r30, r16
     4b8:	20 81       	ld	r18, Z
     4ba:	31 81       	ldd	r19, Z+1	; 0x01
     4bc:	42 81       	ldd	r20, Z+2	; 0x02
     4be:	53 81       	ldd	r21, Z+3	; 0x03
     4c0:	0e 94 c8 09 	call	0x1390	; 0x1390 <__mulsf3>
     4c4:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <__fixsfsi>
     4c8:	eb 01       	movw	r28, r22
	uint16_t diff_percent = DIFF(result1, result2) * 100 / max_diff;
     4ca:	97 01       	movw	r18, r14
     4cc:	26 1b       	sub	r18, r22
     4ce:	37 0b       	sbc	r19, r23
     4d0:	37 ff       	sbrs	r19, 7
     4d2:	03 c0       	rjmp	.+6      	; 0x4da <SaveResultsAlgorithm+0x84>
     4d4:	30 95       	com	r19
     4d6:	21 95       	neg	r18
     4d8:	3f 4f       	sbci	r19, 0xFF	; 255
     4da:	60 91 60 00 	lds	r22, 0x0060
     4de:	70 91 61 00 	lds	r23, 0x0061
     4e2:	84 e6       	ldi	r24, 0x64	; 100
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	ac 01       	movw	r20, r24
     4e8:	24 9f       	mul	r18, r20
     4ea:	c0 01       	movw	r24, r0
     4ec:	25 9f       	mul	r18, r21
     4ee:	90 0d       	add	r25, r0
     4f0:	34 9f       	mul	r19, r20
     4f2:	90 0d       	add	r25, r0
     4f4:	11 24       	eor	r1, r1
     4f6:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__udivmodhi4>
     4fa:	16 2f       	mov	r17, r22
     4fc:	07 2f       	mov	r16, r23

	hex2dec_result(result1, FIRST, color); // result[FIRST][color] = result1;
     4fe:	c7 01       	movw	r24, r14
     500:	60 e0       	ldi	r22, 0x00	; 0
     502:	4d 2d       	mov	r20, r13
     504:	0e 94 2d 01 	call	0x25a	; 0x25a <hex2dec_result>
	hex2dec_result(result2, SECOND, color); //result[SECOND][color] = result2;
     508:	ce 01       	movw	r24, r28
     50a:	61 e0       	ldi	r22, 0x01	; 1
     50c:	4d 2d       	mov	r20, r13
     50e:	0e 94 2d 01 	call	0x25a	; 0x25a <hex2dec_result>
	hex2dec_result(diff_percent, PERCENT, color); //result[PERCENT][color] = DIFF(result1, result2);// * 100 / max_diff;
     512:	81 2f       	mov	r24, r17
     514:	90 2f       	mov	r25, r16
     516:	62 e0       	ldi	r22, 0x02	; 2
     518:	4d 2d       	mov	r20, r13
     51a:	0e 94 2d 01 	call	0x25a	; 0x25a <hex2dec_result>
}
     51e:	df 91       	pop	r29
     520:	cf 91       	pop	r28
     522:	1f 91       	pop	r17
     524:	0f 91       	pop	r16
     526:	ff 90       	pop	r15
     528:	ef 90       	pop	r14
     52a:	df 90       	pop	r13
     52c:	08 95       	ret

0000052e <ADC_LoadingAndEvalIt>:

void ADC_LoadingAndEvalIt(ptrEvalMe evalMe)
{
     52e:	cf 92       	push	r12
     530:	df 92       	push	r13
     532:	ff 92       	push	r15
     534:	0f 93       	push	r16
     536:	1f 93       	push	r17
     538:	cf 93       	push	r28
     53a:	df 93       	push	r29
     53c:	8c 01       	movw	r16, r24
	 *
	 * [############]
	 *
	 * 	 Complete!
	 */
	JOYSTICK_INT_DISABLE();
     53e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     540:	f8 94       	cli
     542:	8b b7       	in	r24, 0x3b	; 59
     544:	8f 77       	andi	r24, 0x7F	; 127
     546:	8b bf       	out	0x3b, r24	; 59
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     548:	9f bf       	out	0x3f, r25	; 63

	Lcd3310_ClearCenter();
     54a:	0e 94 62 05 	call	0xac4	; 0xac4 <Lcd3310_ClearCenter>
	Lcd3310_GotoXY(0, 1);
     54e:	80 e0       	ldi	r24, 0x00	; 0
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	61 e0       	ldi	r22, 0x01	; 1
     554:	70 e0       	ldi	r23, 0x00	; 0
     556:	0e 94 4b 05 	call	0xa96	; 0xa96 <Lcd3310_GotoXY>
	Lcd3310_String_P( pstr_please_wait, BLACK_TEXT_ON_WHITE );
     55a:	80 91 7f 00 	lds	r24, 0x007F
     55e:	90 91 80 00 	lds	r25, 0x0080
     562:	60 e0       	ldi	r22, 0x00	; 0
     564:	0e 94 19 05 	call	0xa32	; 0xa32 <Lcd3310_String_P>
	if(evalMe == SetZeroAlgorithm){
     568:	82 e0       	ldi	r24, 0x02	; 2
     56a:	04 32       	cpi	r16, 0x24	; 36
     56c:	18 07       	cpc	r17, r24
     56e:	19 f4       	brne	.+6      	; 0x576 <ADC_LoadingAndEvalIt+0x48>
		Lcd3310_GotoXY(5, 3);
     570:	85 e0       	ldi	r24, 0x05	; 5
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	02 c0       	rjmp	.+4      	; 0x57a <ADC_LoadingAndEvalIt+0x4c>
	}else{
		Lcd3310_GotoXY(1, 3);
     576:	81 e0       	ldi	r24, 0x01	; 1
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	63 e0       	ldi	r22, 0x03	; 3
     57c:	70 e0       	ldi	r23, 0x00	; 0
     57e:	0e 94 4b 05 	call	0xa96	; 0xa96 <Lcd3310_GotoXY>
	}
	Lcd3310_Char('[', BLACK_TEXT_ON_WHITE);
     582:	8b e5       	ldi	r24, 0x5B	; 91
     584:	60 e0       	ldi	r22, 0x00	; 0
     586:	0e 94 c8 04 	call	0x990	; 0x990 <Lcd3310_Char>
     58a:	c2 e6       	ldi	r28, 0x62	; 98
     58c:	d0 e0       	ldi	r29, 0x00	; 0
     58e:	ff 24       	eor	r15, r15
     590:	30 e9       	ldi	r19, 0x90	; 144
     592:	c3 2e       	mov	r12, r19
     594:	31 e0       	ldi	r19, 0x01	; 1
     596:	d3 2e       	mov	r13, r19
	for(uint8_t color=0; color < 3; color++){
		Lcd3310_Char('#', BLACK_TEXT_ON_WHITE);
     598:	83 e2       	ldi	r24, 0x23	; 35
     59a:	60 e0       	ldi	r22, 0x00	; 0
     59c:	0e 94 c8 04 	call	0x990	; 0x990 <Lcd3310_Char>
		if(evalMe == SetZeroAlgorithm){
     5a0:	82 e0       	ldi	r24, 0x02	; 2
     5a2:	04 32       	cpi	r16, 0x24	; 36
     5a4:	18 07       	cpc	r17, r24
     5a6:	19 f4       	brne	.+6      	; 0x5ae <ADC_LoadingAndEvalIt+0x80>
			LedDriver_SwitchLeds( 0x00 );
     5a8:	80 e0       	ldi	r24, 0x00	; 0
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <ADC_LoadingAndEvalIt+0x84>
		}else{
			LedDriver_SwitchLeds( led_show_codes[color] );
     5ae:	88 81       	ld	r24, Y
     5b0:	99 81       	ldd	r25, Y+1	; 0x01
     5b2:	0e 94 26 03 	call	0x64c	; 0x64c <LedDriver_SwitchLeds>
     5b6:	80 e2       	ldi	r24, 0x20	; 32
     5b8:	9e e4       	ldi	r25, 0x4E	; 78
     5ba:	f6 01       	movw	r30, r12
     5bc:	31 97       	sbiw	r30, 0x01	; 1
     5be:	f1 f7       	brne	.-4      	; 0x5bc <ADC_LoadingAndEvalIt+0x8e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5c0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5c2:	d9 f7       	brne	.-10     	; 0x5ba <ADC_LoadingAndEvalIt+0x8c>
		}
		_delay_ms( DELAY_BEFORE_START_ADC );
		Lcd3310_Char('#', BLACK_TEXT_ON_WHITE);
     5c4:	83 e2       	ldi	r24, 0x23	; 35
     5c6:	60 e0       	ldi	r22, 0x00	; 0
     5c8:	0e 94 c8 04 	call	0x990	; 0x990 <Lcd3310_Char>
		ADC_255_Times();
     5cc:	0e 94 c3 01 	call	0x386	; 0x386 <ADC_255_Times>
		Lcd3310_Char('#', BLACK_TEXT_ON_WHITE);
     5d0:	83 e2       	ldi	r24, 0x23	; 35
     5d2:	60 e0       	ldi	r22, 0x00	; 0
     5d4:	0e 94 c8 04 	call	0x990	; 0x990 <Lcd3310_Char>

		// Start Algorithm
		(evalMe)(color);
     5d8:	8f 2d       	mov	r24, r15
     5da:	f8 01       	movw	r30, r16
     5dc:	09 95       	icall

		if(evalMe == SetZeroAlgorithm){
     5de:	82 e0       	ldi	r24, 0x02	; 2
     5e0:	04 32       	cpi	r16, 0x24	; 36
     5e2:	18 07       	cpc	r17, r24
     5e4:	29 f0       	breq	.+10     	; 0x5f0 <ADC_LoadingAndEvalIt+0xc2>
		Lcd3310_GotoXY(5, 3);
	}else{
		Lcd3310_GotoXY(1, 3);
	}
	Lcd3310_Char('[', BLACK_TEXT_ON_WHITE);
	for(uint8_t color=0; color < 3; color++){
     5e6:	f3 94       	inc	r15
     5e8:	22 96       	adiw	r28, 0x02	; 2
     5ea:	83 e0       	ldi	r24, 0x03	; 3
     5ec:	f8 16       	cp	r15, r24
     5ee:	a1 f6       	brne	.-88     	; 0x598 <ADC_LoadingAndEvalIt+0x6a>

		if(evalMe == SetZeroAlgorithm){
			break; // not need to switch off leds 3 times :)
		}
	}
	LedDriver_SwitchLeds( 0x00 );
     5f0:	80 e0       	ldi	r24, 0x00	; 0
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	0e 94 26 03 	call	0x64c	; 0x64c <LedDriver_SwitchLeds>
	Lcd3310_Char(']', BLACK_TEXT_ON_WHITE);
     5f8:	8d e5       	ldi	r24, 0x5D	; 93
     5fa:	60 e0       	ldi	r22, 0x00	; 0
     5fc:	0e 94 c8 04 	call	0x990	; 0x990 <Lcd3310_Char>
	Lcd3310_GotoXY(2, 5);
     600:	82 e0       	ldi	r24, 0x02	; 2
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	65 e0       	ldi	r22, 0x05	; 5
     606:	70 e0       	ldi	r23, 0x00	; 0
     608:	0e 94 4b 05 	call	0xa96	; 0xa96 <Lcd3310_GotoXY>
	Lcd3310_String_P( pstr_complete, BLACK_TEXT_ON_WHITE );
     60c:	80 91 6e 00 	lds	r24, 0x006E
     610:	90 91 6f 00 	lds	r25, 0x006F
     614:	60 e0       	ldi	r22, 0x00	; 0
     616:	0e 94 19 05 	call	0xa32	; 0xa32 <Lcd3310_String_P>
     61a:	88 e8       	ldi	r24, 0x88	; 136
     61c:	93 e1       	ldi	r25, 0x13	; 19
     61e:	20 e9       	ldi	r18, 0x90	; 144
     620:	31 e0       	ldi	r19, 0x01	; 1
     622:	f9 01       	movw	r30, r18
     624:	31 97       	sbiw	r30, 0x01	; 1
     626:	f1 f7       	brne	.-4      	; 0x624 <ADC_LoadingAndEvalIt+0xf6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     628:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     62a:	d9 f7       	brne	.-10     	; 0x622 <ADC_LoadingAndEvalIt+0xf4>
	_delay_ms(500); // show complete and wait 0.5 sec
	JOYSTICK_INT_ENABLE();
     62c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     62e:	f8 94       	cli
     630:	80 e4       	ldi	r24, 0x40	; 64
     632:	8a bf       	out	0x3a, r24	; 58
     634:	8b b7       	in	r24, 0x3b	; 59
     636:	80 68       	ori	r24, 0x80	; 128
     638:	8b bf       	out	0x3b, r24	; 59
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     63a:	9f bf       	out	0x3f, r25	; 63
}
     63c:	df 91       	pop	r29
     63e:	cf 91       	pop	r28
     640:	1f 91       	pop	r17
     642:	0f 91       	pop	r16
     644:	ff 90       	pop	r15
     646:	df 90       	pop	r13
     648:	cf 90       	pop	r12
     64a:	08 95       	ret

0000064c <LedDriver_SwitchLeds>:

#include "led_driver.h"


void LedDriver_SwitchLeds(uint16_t data)
{
     64c:	ac 01       	movw	r20, r24
     64e:	20 e0       	ldi	r18, 0x00	; 0
     650:	30 e0       	ldi	r19, 0x00	; 0
	char i;
	for(i=0; i<16; i++){
		CLK_DOWN;
		if(data & _BV(i)){
     652:	61 e0       	ldi	r22, 0x01	; 1
     654:	70 e0       	ldi	r23, 0x00	; 0

void LedDriver_SwitchLeds(uint16_t data)
{
	char i;
	for(i=0; i<16; i++){
		CLK_DOWN;
     656:	db 98       	cbi	0x1b, 3	; 27
		if(data & _BV(i)){
     658:	cb 01       	movw	r24, r22
     65a:	02 2e       	mov	r0, r18
     65c:	02 c0       	rjmp	.+4      	; 0x662 <LedDriver_SwitchLeds+0x16>
     65e:	88 0f       	add	r24, r24
     660:	99 1f       	adc	r25, r25
     662:	0a 94       	dec	r0
     664:	e2 f7       	brpl	.-8      	; 0x65e <LedDriver_SwitchLeds+0x12>
     666:	84 23       	and	r24, r20
     668:	95 23       	and	r25, r21
     66a:	89 2b       	or	r24, r25
     66c:	11 f0       	breq	.+4      	; 0x672 <LedDriver_SwitchLeds+0x26>
			LED_DR_PORT |= DATA_PIN;
     66e:	da 9a       	sbi	0x1b, 2	; 27
     670:	01 c0       	rjmp	.+2      	; 0x674 <LedDriver_SwitchLeds+0x28>
		}else{
			LED_DR_PORT &= (unsigned char)~DATA_PIN;
     672:	da 98       	cbi	0x1b, 2	; 27
		}
		CLK_UP;
     674:	db 9a       	sbi	0x1b, 3	; 27
     676:	2f 5f       	subi	r18, 0xFF	; 255
     678:	3f 4f       	sbci	r19, 0xFF	; 255


void LedDriver_SwitchLeds(uint16_t data)
{
	char i;
	for(i=0; i<16; i++){
     67a:	20 31       	cpi	r18, 0x10	; 16
     67c:	31 05       	cpc	r19, r1
     67e:	59 f7       	brne	.-42     	; 0x656 <LedDriver_SwitchLeds+0xa>
		}else{
			LED_DR_PORT &= (unsigned char)~DATA_PIN;
		}
		CLK_UP;
	}
	LATCH_PULSE;
     680:	dc 9a       	sbi	0x1b, 4	; 27
     682:	00 00       	nop
     684:	dc 98       	cbi	0x1b, 4	; 27
}
     686:	08 95       	ret

00000688 <LedDriver_Init>:
//	LedDriver_SwitchLeds(0x00);
//}

void LedDriver_Init(void)
{
	LATCH_DOWN;
     688:	dc 98       	cbi	0x1b, 4	; 27
	CLK_DOWN;
     68a:	db 98       	cbi	0x1b, 3	; 27
	LED_DR_DDR |= DATA_PIN | CLK_PIN | LATCH_PIN;
     68c:	8a b3       	in	r24, 0x1a	; 26
     68e:	8c 61       	ori	r24, 0x1C	; 28
     690:	8a bb       	out	0x1a, r24	; 26
	LedDriver_SwitchLeds(0x00);
     692:	80 e0       	ldi	r24, 0x00	; 0
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	0e 94 26 03 	call	0x64c	; 0x64c <LedDriver_SwitchLeds>
}
     69a:	08 95       	ret

0000069c <__vector_2>:


//================================================//
//== 				Joystick click				==//
ISR(INT1_vect)
{
     69c:	1f 92       	push	r1
     69e:	0f 92       	push	r0
     6a0:	0f b6       	in	r0, 0x3f	; 63
     6a2:	0f 92       	push	r0
     6a4:	11 24       	eor	r1, r1
     6a6:	8f 93       	push	r24
     6a8:	9f 93       	push	r25
     6aa:	ef 93       	push	r30
     6ac:	ff 93       	push	r31
#ifndef ANIMATION_SWITCH_MENU_ITEMS
	menu_before_now = 0x80;
     6ae:	80 e8       	ldi	r24, 0x80	; 128
     6b0:	80 93 81 00 	sts	0x0081, r24
     6b4:	e0 e4       	ldi	r30, 0x40	; 64
     6b6:	ff e1       	ldi	r31, 0x1F	; 31
     6b8:	31 97       	sbiw	r30, 0x01	; 1
     6ba:	f1 f7       	brne	.-4      	; 0x6b8 <__vector_2+0x1c>
#endif
	_delay_ms(2);	// anti brrrrzzzzrr

	GIFR = _BV(INTF1); // kill int1 flag
     6bc:	8a bf       	out	0x3a, r24	; 58

//	Lcd3310_ClearCenter();
//	Lcd3310_GotoXY(0, 0);

	while(1){
		uint8_t jpin_h = (JPIN & 0xf0);
     6be:	83 b3       	in	r24, 0x13	; 19
     6c0:	80 7f       	andi	r24, 0xF0	; 240

		if( jpin_h == (uint8_t)(J_LU | J_RU) ){
     6c2:	80 39       	cpi	r24, 0x90	; 144
     6c4:	11 f4       	brne	.+4      	; 0x6ca <__vector_2+0x2e>
     6c6:	82 e0       	ldi	r24, 0x02	; 2
     6c8:	0f c0       	rjmp	.+30     	; 0x6e8 <__vector_2+0x4c>
					break;
				}
			}
		}

		if( jpin_h == (uint8_t)(J_LD | J_RD) ){
     6ca:	80 36       	cpi	r24, 0x60	; 96
     6cc:	11 f4       	brne	.+4      	; 0x6d2 <__vector_2+0x36>
     6ce:	81 e0       	ldi	r24, 0x01	; 1
     6d0:	0b c0       	rjmp	.+22     	; 0x6e8 <__vector_2+0x4c>
					break;
				}
			}
		}

		if( jpin_h == (uint8_t)(J_LU | J_LD) ){
     6d2:	80 3c       	cpi	r24, 0xC0	; 192
     6d4:	11 f4       	brne	.+4      	; 0x6da <__vector_2+0x3e>
     6d6:	84 e0       	ldi	r24, 0x04	; 4
     6d8:	07 c0       	rjmp	.+14     	; 0x6e8 <__vector_2+0x4c>
					break;
				}
			}

		}
		if( jpin_h == (uint8_t)(J_RU | J_RD) ){
     6da:	80 33       	cpi	r24, 0x30	; 48
     6dc:	11 f4       	brne	.+4      	; 0x6e2 <__vector_2+0x46>
     6de:	83 e0       	ldi	r24, 0x03	; 3
     6e0:	03 c0       	rjmp	.+6      	; 0x6e8 <__vector_2+0x4c>
					break;
				}
			}

		}
		if( jpin_h == (uint8_t)(J_RU | J_LU | J_RD | J_LD) ){
     6e2:	80 3f       	cpi	r24, 0xF0	; 240
     6e4:	61 f7       	brne	.-40     	; 0x6be <__vector_2+0x22>
     6e6:	80 e0       	ldi	r24, 0x00	; 0
				}
			}
		}
	}

	if (JOYSTICK_INT_CHECK()) { return; } // interrupt on brrzzzz then pulling up joystick, so not need to do smth
     6e8:	83 99       	sbic	0x10, 3	; 16
     6ea:	2d c0       	rjmp	.+90     	; 0x746 <__vector_2+0xaa>

	if (result == J_CENTER){
     6ec:	88 23       	and	r24, r24
     6ee:	31 f4       	brne	.+12     	; 0x6fc <__vector_2+0x60>
		FLAGS_SWITCH_ON(JOYSTICK_CENTER_CLICK_FLAG);
     6f0:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     6f2:	f8 94       	cli
     6f4:	80 91 c4 02 	lds	r24, 0x02C4
     6f8:	82 60       	ori	r24, 0x02	; 2
     6fa:	22 c0       	rjmp	.+68     	; 0x740 <__vector_2+0xa4>
	}else if(result == J_UP){
     6fc:	81 30       	cpi	r24, 0x01	; 1
     6fe:	61 f4       	brne	.+24     	; 0x718 <__vector_2+0x7c>
		menu_now = menu_now->prev;
     700:	e0 91 d4 02 	lds	r30, 0x02D4
     704:	f0 91 d5 02 	lds	r31, 0x02D5
     708:	87 81       	ldd	r24, Z+7	; 0x07
     70a:	90 85       	ldd	r25, Z+8	; 0x08
     70c:	90 93 d5 02 	sts	0x02D5, r25
     710:	80 93 d4 02 	sts	0x02D4, r24

#ifdef ANIMATION_SWITCH_MENU_ITEMS
		FLAGS_SWITCH_ON( ANIMATION_PREV_FLAG );
#else
		menu_before_now--;
     714:	8f e7       	ldi	r24, 0x7F	; 127
     716:	0d c0       	rjmp	.+26     	; 0x732 <__vector_2+0x96>
		FLAGS_SWITCH_ON( UPDATE_DISPLAY_FLAG );
#endif
	}else if(result == J_DOWN){
     718:	82 30       	cpi	r24, 0x02	; 2
     71a:	a9 f4       	brne	.+42     	; 0x746 <__vector_2+0xaa>
		menu_now = menu_now->next;
     71c:	e0 91 d4 02 	lds	r30, 0x02D4
     720:	f0 91 d5 02 	lds	r31, 0x02D5
     724:	85 81       	ldd	r24, Z+5	; 0x05
     726:	96 81       	ldd	r25, Z+6	; 0x06
     728:	90 93 d5 02 	sts	0x02D5, r25
     72c:	80 93 d4 02 	sts	0x02D4, r24

#ifdef ANIMATION_SWITCH_MENU_ITEMS
		FLAGS_SWITCH_ON( ANIMATION_NEXT_FLAG );
#else
		menu_before_now++;
     730:	81 e8       	ldi	r24, 0x81	; 129
     732:	80 93 81 00 	sts	0x0081, r24
		FLAGS_SWITCH_ON( UPDATE_DISPLAY_FLAG );
     736:	9f b7       	in	r25, 0x3f	; 63
     738:	f8 94       	cli
     73a:	80 91 c4 02 	lds	r24, 0x02C4
     73e:	81 60       	ori	r24, 0x01	; 1
     740:	80 93 c4 02 	sts	0x02C4, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     744:	9f bf       	out	0x3f, r25	; 63
#endif
	}

}
     746:	ff 91       	pop	r31
     748:	ef 91       	pop	r30
     74a:	9f 91       	pop	r25
     74c:	8f 91       	pop	r24
     74e:	0f 90       	pop	r0
     750:	0f be       	out	0x3f, r0	; 63
     752:	0f 90       	pop	r0
     754:	1f 90       	pop	r1
     756:	18 95       	reti

00000758 <__vector_16>:
//}

//================================================//
//==					ADC						==//
ISR(ADC_vect)
{
     758:	1f 92       	push	r1
     75a:	0f 92       	push	r0
     75c:	0f b6       	in	r0, 0x3f	; 63
     75e:	0f 92       	push	r0
     760:	11 24       	eor	r1, r1
     762:	8f 93       	push	r24
     764:	9f 93       	push	r25
	adc_data = ADC;
     766:	84 b1       	in	r24, 0x04	; 4
     768:	95 b1       	in	r25, 0x05	; 5
     76a:	90 93 c7 02 	sts	0x02C7, r25
     76e:	80 93 c6 02 	sts	0x02C6, r24
}
     772:	9f 91       	pop	r25
     774:	8f 91       	pop	r24
     776:	0f 90       	pop	r0
     778:	0f be       	out	0x3f, r0	; 63
     77a:	0f 90       	pop	r0
     77c:	1f 90       	pop	r1
     77e:	18 95       	reti

00000780 <main>:

//	DEBUG_INIT(); // Initialize uart if DEBUG != 0
	DEBUG_PRINT_CHAR( 0x01 );

	// Input/Output Ports initialization
    PORTB=0x00;
     780:	18 ba       	out	0x18, r1	; 24
    DDRB=0x00;
     782:	17 ba       	out	0x17, r1	; 23

    PORTC=0x00;
     784:	15 ba       	out	0x15, r1	; 21
    DDRC=0x00;
     786:	14 ba       	out	0x14, r1	; 20

    PORTD= _BV(PD3); // pull up joystick center button
     788:	88 e0       	ldi	r24, 0x08	; 8
     78a:	82 bb       	out	0x12, r24	; 18
    DDRD=0x00;
     78c:	11 ba       	out	0x11, r1	; 17


    JPORT = (uint8_t)(J_RU | J_LU | J_RD | J_LD);
     78e:	80 ef       	ldi	r24, 0xF0	; 240
     790:	85 bb       	out	0x15, r24	; 21
    JDDR &= (uint8_t)~(J_RU | J_LU | J_RD | J_LD);
     792:	84 b3       	in	r24, 0x14	; 20
     794:	8f 70       	andi	r24, 0x0F	; 15
     796:	84 bb       	out	0x14, r24	; 20

    //TEST_PIN_DDR_INIT();

    ACSR = _BV(ACD); // turn off analog comparer, this is turns ON after RESET... delurium, but the fact ;)
     798:	80 e8       	ldi	r24, 0x80	; 128
     79a:	88 b9       	out	0x08, r24	; 8

    // External Interrupt(s) initialization
    MCUCR= _BV(ISC11) | _BV(ISC01); // fall
     79c:	8a e0       	ldi	r24, 0x0A	; 10
     79e:	85 bf       	out	0x35, r24	; 53
    //// --Any logical change on INT1 and INT0 generates an interrupt request.--
    GICR = _BV(INT0) | _BV(INT1); // int1 int0 enable interrupts
     7a0:	80 ec       	ldi	r24, 0xC0	; 192
     7a2:	8b bf       	out	0x3b, r24	; 59
//    TIMSK = 0x00;

	//TIM2_INIT(); // see defines.h for details

    // Init ADC
	ADMUX = 0x00; //_BV(ADLAR); // ADC0, result in ADC
     7a4:	17 b8       	out	0x07, r1	; 7
	ADCSRA = _BV(ADEN) | _BV(ADIE) | _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) ; // XTAL / 16;
     7a6:	8f e8       	ldi	r24, 0x8F	; 143
     7a8:	86 b9       	out	0x06, r24	; 6


	LedDriver_Init();
     7aa:	0e 94 44 03 	call	0x688	; 0x688 <LedDriver_Init>
	Lcd3310_InitializeDisplay(DELAY_SHOW_SPLASH);
     7ae:	88 ee       	ldi	r24, 0xE8	; 232
     7b0:	93 e0       	ldi	r25, 0x03	; 3
     7b2:	0e 94 8e 07 	call	0xf1c	; 0xf1c <Lcd3310_InitializeDisplay>

	DEBUG_PRINT_CHAR( 0x02 );


	sei();
     7b6:	78 94       	sei

	DEBUG_PRINT_CHAR( 0x00 );

   	for(;;){

		IF_FLAG_ON( UPDATE_DISPLAY_FLAG ){
     7b8:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     7ba:	f8 94       	cli
     7bc:	90 91 c4 02 	lds	r25, 0x02C4
     7c0:	90 93 c5 02 	sts	0x02C5, r25
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     7c4:	8f bf       	out	0x3f, r24	; 63
     7c6:	80 91 c5 02 	lds	r24, 0x02C5
     7ca:	80 ff       	sbrs	r24, 0
     7cc:	0a c0       	rjmp	.+20     	; 0x7e2 <main+0x62>
			FLAGS_SWITCH_OFF( UPDATE_DISPLAY_FLAG );
     7ce:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     7d0:	f8 94       	cli
     7d2:	80 91 c4 02 	lds	r24, 0x02C4
     7d6:	8e 7f       	andi	r24, 0xFE	; 254
     7d8:	80 93 c4 02 	sts	0x02C4, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     7dc:	9f bf       	out	0x3f, r25	; 63
			Lcd3310_UpdateDisplayInfo();
     7de:	0e 94 66 06 	call	0xccc	; 0xccc <Lcd3310_UpdateDisplayInfo>
		}

		IF_FLAG_ON( JOYSTICK_CENTER_CLICK_FLAG ){
     7e2:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     7e4:	f8 94       	cli
     7e6:	90 91 c4 02 	lds	r25, 0x02C4
     7ea:	90 93 c5 02 	sts	0x02C5, r25
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     7ee:	8f bf       	out	0x3f, r24	; 63
     7f0:	80 91 c5 02 	lds	r24, 0x02C5
     7f4:	81 ff       	sbrs	r24, 1
     7f6:	12 c0       	rjmp	.+36     	; 0x81c <main+0x9c>
			FLAGS_SWITCH_OFF( JOYSTICK_CENTER_CLICK_FLAG );
     7f8:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     7fa:	f8 94       	cli
     7fc:	80 91 c4 02 	lds	r24, 0x02C4
     800:	8d 7f       	andi	r24, 0xFD	; 253
     802:	80 93 c4 02 	sts	0x02C4, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     806:	9f bf       	out	0x3f, r25	; 63

			Menu_EnterClick();
     808:	0e 94 99 07 	call	0xf32	; 0xf32 <Menu_EnterClick>

			FLAGS_SWITCH_ON( UPDATE_DISPLAY_FLAG );
     80c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     80e:	f8 94       	cli
     810:	80 91 c4 02 	lds	r24, 0x02C4
     814:	81 60       	ori	r24, 0x01	; 1
     816:	80 93 c4 02 	sts	0x02C4, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     81a:	9f bf       	out	0x3f, r25	; 63
		}



		IF_FLAG_ON( ADC_RESULT_FLAG ){ // in menu adc result
     81c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     81e:	f8 94       	cli
     820:	90 91 c4 02 	lds	r25, 0x02C4
     824:	90 93 c5 02 	sts	0x02C5, r25
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     828:	8f bf       	out	0x3f, r24	; 63
     82a:	80 91 c5 02 	lds	r24, 0x02C5
     82e:	84 ff       	sbrs	r24, 4
     830:	14 c0       	rjmp	.+40     	; 0x85a <main+0xda>

			ADC_LoadingAndEvalIt(SaveResultsAlgorithm);
     832:	8b e2       	ldi	r24, 0x2B	; 43
     834:	92 e0       	ldi	r25, 0x02	; 2
     836:	0e 94 97 02 	call	0x52e	; 0x52e <ADC_LoadingAndEvalIt>

			FLAGS_SWITCH_OFF( ADC_RESULT_FLAG );
     83a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     83c:	f8 94       	cli
     83e:	80 91 c4 02 	lds	r24, 0x02C4
     842:	8f 7e       	andi	r24, 0xEF	; 239
     844:	80 93 c4 02 	sts	0x02C4, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     848:	9f bf       	out	0x3f, r25	; 63
			FLAGS_SWITCH_ON( UPDATE_DISPLAY_FLAG );
     84a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     84c:	f8 94       	cli
     84e:	80 91 c4 02 	lds	r24, 0x02C4
     852:	81 60       	ori	r24, 0x01	; 1
     854:	80 93 c4 02 	sts	0x02C4, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     858:	9f bf       	out	0x3f, r25	; 63
		}

		IF_FLAG_ON( ADC_CALIBRATE_FLAG ){
     85a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     85c:	f8 94       	cli
     85e:	90 91 c4 02 	lds	r25, 0x02C4
     862:	90 93 c5 02 	sts	0x02C5, r25
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     866:	8f bf       	out	0x3f, r24	; 63
     868:	80 91 c5 02 	lds	r24, 0x02C5
     86c:	85 ff       	sbrs	r24, 5
     86e:	0c c0       	rjmp	.+24     	; 0x888 <__stack+0x29>

			ADC_LoadingAndEvalIt(CalibrationAlgorithm);
     870:	84 ed       	ldi	r24, 0xD4	; 212
     872:	91 e0       	ldi	r25, 0x01	; 1
     874:	0e 94 97 02 	call	0x52e	; 0x52e <ADC_LoadingAndEvalIt>

			FLAGS_SWITCH_OFF( ADC_CALIBRATE_FLAG );
     878:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     87a:	f8 94       	cli
     87c:	80 91 c4 02 	lds	r24, 0x02C4
     880:	8f 7d       	andi	r24, 0xDF	; 223
     882:	80 93 c4 02 	sts	0x02C4, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     886:	9f bf       	out	0x3f, r25	; 63
		}

		IF_FLAG_ON( ADC_SET_ZERO ){
     888:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     88a:	f8 94       	cli
     88c:	90 91 c4 02 	lds	r25, 0x02C4
     890:	90 93 c5 02 	sts	0x02C5, r25
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     894:	8f bf       	out	0x3f, r24	; 63
     896:	80 91 c5 02 	lds	r24, 0x02C5
     89a:	86 ff       	sbrs	r24, 6
     89c:	8d cf       	rjmp	.-230    	; 0x7b8 <main+0x38>

			ADC_LoadingAndEvalIt(SetZeroAlgorithm);
     89e:	84 e2       	ldi	r24, 0x24	; 36
     8a0:	92 e0       	ldi	r25, 0x02	; 2
     8a2:	0e 94 97 02 	call	0x52e	; 0x52e <ADC_LoadingAndEvalIt>

			FLAGS_SWITCH_OFF( ADC_SET_ZERO );
     8a6:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     8a8:	f8 94       	cli
     8aa:	80 91 c4 02 	lds	r24, 0x02C4
     8ae:	8f 7b       	andi	r24, 0xBF	; 191
     8b0:	80 93 c4 02 	sts	0x02C4, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     8b4:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     8b6:	80 cf       	rjmp	.-256    	; 0x7b8 <main+0x38>

000008b8 <HalfByteAsASCII>:
#include "uint8_16_to_string.h"

char to_string_result[] = {0, 0, 0, 0};

char HalfByteAsASCII(char c)
{
     8b8:	98 2f       	mov	r25, r24
    if (c >= 0 && c <= 9){
     8ba:	8a 30       	cpi	r24, 0x0A	; 10
     8bc:	10 f4       	brcc	.+4      	; 0x8c2 <HalfByteAsASCII+0xa>
        c += 0x30;
     8be:	80 5d       	subi	r24, 0xD0	; 208
     8c0:	08 95       	ret
    }else if (c >= 0xA && c <= 0x0F){
     8c2:	8a 50       	subi	r24, 0x0A	; 10
     8c4:	86 30       	cpi	r24, 0x06	; 6
     8c6:	10 f0       	brcs	.+4      	; 0x8cc <HalfByteAsASCII+0x14>
     8c8:	8f e3       	ldi	r24, 0x3F	; 63
     8ca:	08 95       	ret
        c += 0x37;
     8cc:	89 2f       	mov	r24, r25
     8ce:	89 5c       	subi	r24, 0xC9	; 201
    }else{
        c = '?';
    }
    return c;
}
     8d0:	08 95       	ret

000008d2 <UInt8ToString>:

void UInt8ToString(uint8_t ch)
{
     8d2:	28 2f       	mov	r18, r24
	to_string_result[0] = HalfByteAsASCII( (ch & 0xf0) >>4 );
     8d4:	98 2f       	mov	r25, r24
     8d6:	92 95       	swap	r25
     8d8:	9f 70       	andi	r25, 0x0F	; 15

char to_string_result[] = {0, 0, 0, 0};

char HalfByteAsASCII(char c)
{
    if (c >= 0 && c <= 9){
     8da:	9a 30       	cpi	r25, 0x0A	; 10
     8dc:	18 f4       	brcc	.+6      	; 0x8e4 <UInt8ToString+0x12>
        c += 0x30;
     8de:	89 2f       	mov	r24, r25
     8e0:	80 5d       	subi	r24, 0xD0	; 208
     8e2:	08 c0       	rjmp	.+16     	; 0x8f4 <UInt8ToString+0x22>
    }else if (c >= 0xA && c <= 0x0F){
     8e4:	89 2f       	mov	r24, r25
     8e6:	8a 50       	subi	r24, 0x0A	; 10
     8e8:	86 30       	cpi	r24, 0x06	; 6
     8ea:	10 f0       	brcs	.+4      	; 0x8f0 <UInt8ToString+0x1e>
     8ec:	8f e3       	ldi	r24, 0x3F	; 63
     8ee:	02 c0       	rjmp	.+4      	; 0x8f4 <UInt8ToString+0x22>
        c += 0x37;
     8f0:	89 2f       	mov	r24, r25
     8f2:	89 5c       	subi	r24, 0xC9	; 201
    return c;
}

void UInt8ToString(uint8_t ch)
{
	to_string_result[0] = HalfByteAsASCII( (ch & 0xf0) >>4 );
     8f4:	80 93 c8 02 	sts	0x02C8, r24
	to_string_result[1] = HalfByteAsASCII( ch & 0x0f );
     8f8:	92 2f       	mov	r25, r18
     8fa:	9f 70       	andi	r25, 0x0F	; 15

char to_string_result[] = {0, 0, 0, 0};

char HalfByteAsASCII(char c)
{
    if (c >= 0 && c <= 9){
     8fc:	9a 30       	cpi	r25, 0x0A	; 10
     8fe:	18 f4       	brcc	.+6      	; 0x906 <UInt8ToString+0x34>
        c += 0x30;
     900:	89 2f       	mov	r24, r25
     902:	80 5d       	subi	r24, 0xD0	; 208
     904:	08 c0       	rjmp	.+16     	; 0x916 <UInt8ToString+0x44>
    }else if (c >= 0xA && c <= 0x0F){
     906:	89 2f       	mov	r24, r25
     908:	8a 50       	subi	r24, 0x0A	; 10
     90a:	86 30       	cpi	r24, 0x06	; 6
     90c:	10 f0       	brcs	.+4      	; 0x912 <UInt8ToString+0x40>
     90e:	8f e3       	ldi	r24, 0x3F	; 63
     910:	02 c0       	rjmp	.+4      	; 0x916 <UInt8ToString+0x44>
        c += 0x37;
     912:	89 2f       	mov	r24, r25
     914:	89 5c       	subi	r24, 0xC9	; 201
}

void UInt8ToString(uint8_t ch)
{
	to_string_result[0] = HalfByteAsASCII( (ch & 0xf0) >>4 );
	to_string_result[1] = HalfByteAsASCII( ch & 0x0f );
     916:	80 93 c9 02 	sts	0x02C9, r24
	//to_string_result[2] = 0x00; // end of result string here
	// result in result_str
}
     91a:	08 95       	ret

0000091c <UInt16ToString>:

void UInt16ToString(uint16_t i)
{
     91c:	9c 01       	movw	r18, r24
	//to_string_result[0] = HalfByteAsASCII( (i & 0xf000) >> 12 );
	to_string_result[1] = HalfByteAsASCII( (i & 0x0f00) >> 8  );
     91e:	80 70       	andi	r24, 0x00	; 0
     920:	9f 70       	andi	r25, 0x0F	; 15

char to_string_result[] = {0, 0, 0, 0};

char HalfByteAsASCII(char c)
{
    if (c >= 0 && c <= 9){
     922:	9a 30       	cpi	r25, 0x0A	; 10
     924:	18 f4       	brcc	.+6      	; 0x92c <UInt16ToString+0x10>
        c += 0x30;
     926:	89 2f       	mov	r24, r25
     928:	80 5d       	subi	r24, 0xD0	; 208
     92a:	08 c0       	rjmp	.+16     	; 0x93c <UInt16ToString+0x20>
    }else if (c >= 0xA && c <= 0x0F){
     92c:	89 2f       	mov	r24, r25
     92e:	8a 50       	subi	r24, 0x0A	; 10
     930:	86 30       	cpi	r24, 0x06	; 6
     932:	10 f0       	brcs	.+4      	; 0x938 <UInt16ToString+0x1c>
     934:	8f e3       	ldi	r24, 0x3F	; 63
     936:	02 c0       	rjmp	.+4      	; 0x93c <UInt16ToString+0x20>
        c += 0x37;
     938:	89 2f       	mov	r24, r25
     93a:	89 5c       	subi	r24, 0xC9	; 201
}

void UInt16ToString(uint16_t i)
{
	//to_string_result[0] = HalfByteAsASCII( (i & 0xf000) >> 12 );
	to_string_result[1] = HalfByteAsASCII( (i & 0x0f00) >> 8  );
     93c:	80 93 c9 02 	sts	0x02C9, r24
	to_string_result[2] = HalfByteAsASCII( (i & 0x00f0) >> 4  );
     940:	c9 01       	movw	r24, r18
     942:	80 7f       	andi	r24, 0xF0	; 240
     944:	90 70       	andi	r25, 0x00	; 0
     946:	34 e0       	ldi	r19, 0x04	; 4
     948:	96 95       	lsr	r25
     94a:	87 95       	ror	r24
     94c:	3a 95       	dec	r19
     94e:	e1 f7       	brne	.-8      	; 0x948 <UInt16ToString+0x2c>
     950:	98 2f       	mov	r25, r24

char to_string_result[] = {0, 0, 0, 0};

char HalfByteAsASCII(char c)
{
    if (c >= 0 && c <= 9){
     952:	8a 30       	cpi	r24, 0x0A	; 10
     954:	10 f4       	brcc	.+4      	; 0x95a <UInt16ToString+0x3e>
        c += 0x30;
     956:	80 5d       	subi	r24, 0xD0	; 208
     958:	07 c0       	rjmp	.+14     	; 0x968 <UInt16ToString+0x4c>
    }else if (c >= 0xA && c <= 0x0F){
     95a:	8a 50       	subi	r24, 0x0A	; 10
     95c:	86 30       	cpi	r24, 0x06	; 6
     95e:	10 f0       	brcs	.+4      	; 0x964 <UInt16ToString+0x48>
     960:	8f e3       	ldi	r24, 0x3F	; 63
     962:	02 c0       	rjmp	.+4      	; 0x968 <UInt16ToString+0x4c>
        c += 0x37;
     964:	89 2f       	mov	r24, r25
     966:	89 5c       	subi	r24, 0xC9	; 201

void UInt16ToString(uint16_t i)
{
	//to_string_result[0] = HalfByteAsASCII( (i & 0xf000) >> 12 );
	to_string_result[1] = HalfByteAsASCII( (i & 0x0f00) >> 8  );
	to_string_result[2] = HalfByteAsASCII( (i & 0x00f0) >> 4  );
     968:	80 93 ca 02 	sts	0x02CA, r24
	to_string_result[3] = HalfByteAsASCII(  i & 0x000f		);
     96c:	92 2f       	mov	r25, r18
     96e:	9f 70       	andi	r25, 0x0F	; 15

char to_string_result[] = {0, 0, 0, 0};

char HalfByteAsASCII(char c)
{
    if (c >= 0 && c <= 9){
     970:	9a 30       	cpi	r25, 0x0A	; 10
     972:	18 f4       	brcc	.+6      	; 0x97a <UInt16ToString+0x5e>
        c += 0x30;
     974:	89 2f       	mov	r24, r25
     976:	80 5d       	subi	r24, 0xD0	; 208
     978:	08 c0       	rjmp	.+16     	; 0x98a <UInt16ToString+0x6e>
    }else if (c >= 0xA && c <= 0x0F){
     97a:	89 2f       	mov	r24, r25
     97c:	8a 50       	subi	r24, 0x0A	; 10
     97e:	86 30       	cpi	r24, 0x06	; 6
     980:	10 f0       	brcs	.+4      	; 0x986 <UInt16ToString+0x6a>
     982:	8f e3       	ldi	r24, 0x3F	; 63
     984:	02 c0       	rjmp	.+4      	; 0x98a <UInt16ToString+0x6e>
        c += 0x37;
     986:	89 2f       	mov	r24, r25
     988:	89 5c       	subi	r24, 0xC9	; 201
void UInt16ToString(uint16_t i)
{
	//to_string_result[0] = HalfByteAsASCII( (i & 0xf000) >> 12 );
	to_string_result[1] = HalfByteAsASCII( (i & 0x0f00) >> 8  );
	to_string_result[2] = HalfByteAsASCII( (i & 0x00f0) >> 4  );
	to_string_result[3] = HalfByteAsASCII(  i & 0x000f		);
     98a:	80 93 cb 02 	sts	0x02CB, r24
	// result in result_str
}
     98e:	08 95       	ret

00000990 <Lcd3310_Char>:

	_delay_ms(show_init_data_delay_ms); // show image from LcdCache initial value
}

void Lcd3310_Char(unsigned char ch, WhiteOrBlackText is_invert_colors)
{
     990:	cf 93       	push	r28
     992:	df 93       	push	r29
     994:	28 2f       	mov	r18, r24
     996:	36 2f       	mov	r19, r22
	//  Convert to a printable character.
    if ( (ch < 0x20) ){
     998:	80 32       	cpi	r24, 0x20	; 32
     99a:	08 f4       	brcc	.+2      	; 0x99e <Lcd3310_Char+0xe>
     99c:	2c e5       	ldi	r18, 0x5C	; 92
        ch = 92;
    }
	
	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
     99e:	c0 91 cc 02 	lds	r28, 0x02CC
     9a2:	d0 91 cd 02 	lds	r29, 0x02CD
     9a6:	ce 01       	movw	r24, r28
     9a8:	64 e5       	ldi	r22, 0x54	; 84
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__udivmodhi4>
     9b0:	80 68       	ori	r24, 0x80	; 128


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
     9b2:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
     9b4:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
     9b6:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
     9b8:	77 9b       	sbis	0x0e, 7	; 14
     9ba:	fe cf       	rjmp	.-4      	; 0x9b8 <Lcd3310_Char+0x28>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
     9bc:	c3 9a       	sbi	0x18, 3	; 24
    if ( (ch < 0x20) ){
        ch = 92;
    }
	
	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    Lcd3310_Send( 0x40 | (Lcd3310_Index / LCD_X_RES), LCD_CMD );
     9be:	ce 01       	movw	r24, r28
     9c0:	64 e5       	ldi	r22, 0x54	; 84
     9c2:	70 e0       	ldi	r23, 0x00	; 0
     9c4:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__udivmodhi4>
     9c8:	60 64       	ori	r22, 0x40	; 64


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
     9ca:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
     9cc:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
     9ce:	6f b9       	out	0x0f, r22	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
     9d0:	77 9b       	sbis	0x0e, 7	; 14
     9d2:	fe cf       	rjmp	.-4      	; 0x9d0 <Lcd3310_Char+0x40>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
     9d4:	c3 9a       	sbi	0x18, 3	; 24
	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    Lcd3310_Send( 0x40 | (Lcd3310_Index / LCD_X_RES), LCD_CMD );
	
	for (char i = 0; i < 5; i++ ){		
		char temp;
		PGM_GET_BYTE_FROM_FONTLOOKUP(temp, ch, i );
     9d6:	85 e0       	ldi	r24, 0x05	; 5
     9d8:	28 9f       	mul	r18, r24
     9da:	c0 01       	movw	r24, r0
     9dc:	11 24       	eor	r1, r1
     9de:	fc 01       	movw	r30, r24
     9e0:	ec 54       	subi	r30, 0x4C	; 76
     9e2:	f0 40       	sbci	r31, 0x00	; 0
    }
	
	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    Lcd3310_Send( 0x40 | (Lcd3310_Index / LCD_X_RES), LCD_CMD );
	
	for (char i = 0; i < 5; i++ ){		
     9e4:	87 54       	subi	r24, 0x47	; 71
     9e6:	90 40       	sbci	r25, 0x00	; 0
		char temp;
		PGM_GET_BYTE_FROM_FONTLOOKUP(temp, ch, i );
     9e8:	24 91       	lpm	r18, Z+
     9ea:	22 0f       	add	r18, r18
		if(is_invert_colors) temp = (unsigned char) ~temp;
     9ec:	31 11       	cpse	r19, r1
     9ee:	20 95       	com	r18


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
     9f0:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
     9f2:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
     9f4:	2f b9       	out	0x0f, r18	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
     9f6:	77 9b       	sbis	0x0e, 7	; 14
     9f8:	fe cf       	rjmp	.-4      	; 0x9f6 <Lcd3310_Char+0x66>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
     9fa:	c3 9a       	sbi	0x18, 3	; 24
     9fc:	31 96       	adiw	r30, 0x01	; 1
    }
	
	Lcd3310_Send( 0x80 | (Lcd3310_Index % LCD_X_RES), LCD_CMD );
    Lcd3310_Send( 0x40 | (Lcd3310_Index / LCD_X_RES), LCD_CMD );
	
	for (char i = 0; i < 5; i++ ){		
     9fe:	e8 17       	cp	r30, r24
     a00:	f9 07       	cpc	r31, r25
     a02:	91 f7       	brne	.-28     	; 0x9e8 <Lcd3310_Char+0x58>
		char temp;
		PGM_GET_BYTE_FROM_FONTLOOKUP(temp, ch, i );
		if(is_invert_colors) temp = (unsigned char) ~temp;
	    Lcd3310_Send( temp, LCD_DATA );
    }
	if(is_invert_colors) Lcd3310_Send( 0xff, LCD_DATA );
     a04:	33 23       	and	r19, r19
     a06:	39 f0       	breq	.+14     	; 0xa16 <Lcd3310_Char+0x86>


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
     a08:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
     a0a:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
     a0c:	8f ef       	ldi	r24, 0xFF	; 255
     a0e:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
     a10:	77 9b       	sbis	0x0e, 7	; 14
     a12:	fe cf       	rjmp	.-4      	; 0xa10 <Lcd3310_Char+0x80>
     a14:	05 c0       	rjmp	.+10     	; 0xa20 <Lcd3310_Char+0x90>


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
     a16:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
     a18:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
     a1a:	1f b8       	out	0x0f, r1	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
     a1c:	77 9b       	sbis	0x0e, 7	; 14
     a1e:	fe cf       	rjmp	.-4      	; 0xa1c <Lcd3310_Char+0x8c>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
     a20:	c3 9a       	sbi	0x18, 3	; 24
		if(is_invert_colors) temp = (unsigned char) ~temp;
	    Lcd3310_Send( temp, LCD_DATA );
    }
	if(is_invert_colors) Lcd3310_Send( 0xff, LCD_DATA );
	else Lcd3310_Send( 0x00, LCD_DATA );
	Lcd3310_Index += 6;
     a22:	26 96       	adiw	r28, 0x06	; 6
     a24:	d0 93 cd 02 	sts	0x02CD, r29
     a28:	c0 93 cc 02 	sts	0x02CC, r28
}
     a2c:	df 91       	pop	r29
     a2e:	cf 91       	pop	r28
     a30:	08 95       	ret

00000a32 <Lcd3310_String_P>:

void Lcd3310_String_P(PGM_P str_ptr, WhiteOrBlackText is_invert_colors)
{
     a32:	0f 93       	push	r16
     a34:	1f 93       	push	r17
     a36:	cf 93       	push	r28
     a38:	df 93       	push	r29
     a3a:	08 2f       	mov	r16, r24
     a3c:	16 2f       	mov	r17, r22
     a3e:	28 2f       	mov	r18, r24
     a40:	39 2f       	mov	r19, r25
     a42:	e9 01       	movw	r28, r18
     a44:	04 c0       	rjmp	.+8      	; 0xa4e <Lcd3310_String_P+0x1c>
	char count = 0;
    while ( *str_ptr ){
		count++;
        Lcd3310_Char( *(str_ptr++), is_invert_colors );
     a46:	21 96       	adiw	r28, 0x01	; 1
     a48:	61 2f       	mov	r22, r17
     a4a:	0e 94 c8 04 	call	0x990	; 0x990 <Lcd3310_Char>
     a4e:	9e 01       	movw	r18, r28
     a50:	20 1b       	sub	r18, r16
     a52:	92 2f       	mov	r25, r18
}

void Lcd3310_String_P(PGM_P str_ptr, WhiteOrBlackText is_invert_colors)
{
	char count = 0;
    while ( *str_ptr ){
     a54:	88 81       	ld	r24, Y
     a56:	88 23       	and	r24, r24
     a58:	b1 f7       	brne	.-20     	; 0xa46 <Lcd3310_String_P+0x14>
		count++;
        Lcd3310_Char( *(str_ptr++), is_invert_colors );
    }
	if(is_invert_colors && count > 0 && count < 14){
     a5a:	11 23       	and	r17, r17
     a5c:	b9 f0       	breq	.+46     	; 0xa8c <Lcd3310_String_P+0x5a>
     a5e:	22 23       	and	r18, r18
     a60:	a9 f0       	breq	.+42     	; 0xa8c <Lcd3310_String_P+0x5a>
     a62:	2e 30       	cpi	r18, 0x0E	; 14
     a64:	98 f4       	brcc	.+38     	; 0xa8c <Lcd3310_String_P+0x5a>
		for(count = (14 - count) * 6; count > 0; count--){
     a66:	2e e0       	ldi	r18, 0x0E	; 14
     a68:	30 e0       	ldi	r19, 0x00	; 0
     a6a:	29 1b       	sub	r18, r25
     a6c:	31 09       	sbc	r19, r1
     a6e:	c9 01       	movw	r24, r18
     a70:	88 0f       	add	r24, r24
     a72:	99 1f       	adc	r25, r25
     a74:	82 0f       	add	r24, r18
     a76:	93 1f       	adc	r25, r19
     a78:	88 0f       	add	r24, r24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
     a7a:	9f ef       	ldi	r25, 0xFF	; 255


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
     a7c:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
     a7e:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
     a80:	9f b9       	out	0x0f, r25	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
     a82:	77 9b       	sbis	0x0e, 7	; 14
     a84:	fe cf       	rjmp	.-4      	; 0xa82 <Lcd3310_String_P+0x50>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
     a86:	c3 9a       	sbi	0x18, 3	; 24
    while ( *str_ptr ){
		count++;
        Lcd3310_Char( *(str_ptr++), is_invert_colors );
    }
	if(is_invert_colors && count > 0 && count < 14){
		for(count = (14 - count) * 6; count > 0; count--){
     a88:	81 50       	subi	r24, 0x01	; 1
     a8a:	c1 f7       	brne	.-16     	; 0xa7c <Lcd3310_String_P+0x4a>
			Lcd3310_Send( 0xff, LCD_DATA );
		}
	}
}
     a8c:	df 91       	pop	r29
     a8e:	cf 91       	pop	r28
     a90:	1f 91       	pop	r17
     a92:	0f 91       	pop	r16
     a94:	08 95       	ret

00000a96 <Lcd3310_GotoXY>:
}
#endif

void Lcd3310_GotoXY(uint16_t x, uint16_t y)
{
    Lcd3310_Index = (uint16_t)x * 6 + (uint16_t)y * 84;
     a96:	24 e5       	ldi	r18, 0x54	; 84
     a98:	30 e0       	ldi	r19, 0x00	; 0
     a9a:	62 9f       	mul	r22, r18
     a9c:	a0 01       	movw	r20, r0
     a9e:	63 9f       	mul	r22, r19
     aa0:	50 0d       	add	r21, r0
     aa2:	72 9f       	mul	r23, r18
     aa4:	50 0d       	add	r21, r0
     aa6:	11 24       	eor	r1, r1
     aa8:	9c 01       	movw	r18, r24
     aaa:	22 0f       	add	r18, r18
     aac:	33 1f       	adc	r19, r19
     aae:	28 0f       	add	r18, r24
     ab0:	39 1f       	adc	r19, r25
     ab2:	22 0f       	add	r18, r18
     ab4:	33 1f       	adc	r19, r19
     ab6:	42 0f       	add	r20, r18
     ab8:	53 1f       	adc	r21, r19
     aba:	50 93 cd 02 	sts	0x02CD, r21
     abe:	40 93 cc 02 	sts	0x02CC, r20
}
     ac2:	08 95       	ret

00000ac4 <Lcd3310_ClearCenter>:


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
     ac4:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
     ac6:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
     ac8:	80 e8       	ldi	r24, 0x80	; 128
     aca:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
     acc:	77 9b       	sbis	0x0e, 7	; 14
     ace:	fe cf       	rjmp	.-4      	; 0xacc <Lcd3310_ClearCenter+0x8>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
     ad0:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
     ad2:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
     ad4:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
     ad6:	80 e4       	ldi	r24, 0x40	; 64
     ad8:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
     ada:	77 9b       	sbis	0x0e, 7	; 14
     adc:	fe cf       	rjmp	.-4      	; 0xada <Lcd3310_ClearCenter+0x16>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
     ade:	c3 9a       	sbi	0x18, 3	; 24
     ae0:	80 e0       	ldi	r24, 0x00	; 0
     ae2:	90 e0       	ldi	r25, 0x00	; 0


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
     ae4:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
     ae6:	c4 9a       	sbi	0x18, 4	; 24
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
    }

    //  Send data to display controller.
    SPDR = data;
     ae8:	1f b8       	out	0x0f, r1	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
     aea:	77 9b       	sbis	0x0e, 7	; 14
     aec:	fe cf       	rjmp	.-4      	; 0xaea <Lcd3310_ClearCenter+0x26>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
     aee:	c3 9a       	sbi	0x18, 3	; 24
		Lcd3310_Send( 0x00, LCD_DATA );
	}
#else // clear all...
	Lcd3310_Send( 0x80, LCD_CMD );
	Lcd3310_Send( 0x40, LCD_CMD );
	for(uint16_t i=0; i < LCD_XY_RES; i++){
     af0:	01 96       	adiw	r24, 0x01	; 1
     af2:	21 e0       	ldi	r18, 0x01	; 1
     af4:	88 3f       	cpi	r24, 0xF8	; 248
     af6:	92 07       	cpc	r25, r18
     af8:	a9 f7       	brne	.-22     	; 0xae4 <Lcd3310_ClearCenter+0x20>
		Lcd3310_Send( 0x00, LCD_DATA );
	}
#endif
}
     afa:	08 95       	ret

00000afc <Lcd3310_Init>:
void Lcd3310_InitFill (void);



void Lcd3310_Init(uint16_t show_init_data_delay_ms)
{
     afc:	af 92       	push	r10
     afe:	bf 92       	push	r11
     b00:	cf 92       	push	r12
     b02:	df 92       	push	r13
     b04:	ef 92       	push	r14
     b06:	ff 92       	push	r15
     b08:	0f 93       	push	r16
     b0a:	1f 93       	push	r17
     b0c:	8c 01       	movw	r16, r24
	//  Pull-up on reset pin.
    PORTB |= LCD_RST_PIN;
     b0e:	c2 9a       	sbi	0x18, 2	; 24

    //  Set output bits on port B.
    DDRB |= LCD_RST_PIN | LCD_DC_PIN | LCD_CE_PIN | SPI_MOSI_PIN | SPI_CLK_PIN;
     b10:	87 b3       	in	r24, 0x17	; 23
     b12:	8c 6b       	ori	r24, 0xBC	; 188
     b14:	87 bb       	out	0x17, r24	; 23
     b16:	84 ef       	ldi	r24, 0xF4	; 244
     b18:	91 e0       	ldi	r25, 0x01	; 1
     b1a:	20 e9       	ldi	r18, 0x90	; 144
     b1c:	31 e0       	ldi	r19, 0x01	; 1
     b1e:	f9 01       	movw	r30, r18
     b20:	31 97       	sbiw	r30, 0x01	; 1
     b22:	f1 f7       	brne	.-4      	; 0xb20 <Lcd3310_Init+0x24>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b24:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b26:	d9 f7       	brne	.-10     	; 0xb1e <Lcd3310_Init+0x22>

    _delay_ms(50);

    //  Toggle display reset pin.
    PORTB &= (unsigned char)~LCD_RST_PIN;
     b28:	c2 98       	cbi	0x18, 2	; 24
     b2a:	80 ea       	ldi	r24, 0xA0	; 160
     b2c:	9f e0       	ldi	r25, 0x0F	; 15
     b2e:	01 97       	sbiw	r24, 0x01	; 1
     b30:	f1 f7       	brne	.-4      	; 0xb2e <Lcd3310_Init+0x32>
    _delay_ms(1);
    PORTB |= LCD_RST_PIN;
     b32:	c2 9a       	sbi	0x18, 2	; 24

    //  Enable SPI port: No interrupt, MSBit first, Master mode, CPOL->0, CPHA->0, Clk/4
    SPCR = 0x50;
     b34:	80 e5       	ldi	r24, 0x50	; 80
     b36:	8d b9       	out	0x0d, r24	; 13

    //  Disable LCD controller
    PORTB |= LCD_CE_PIN;
     b38:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
     b3a:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
     b3c:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
     b3e:	81 e2       	ldi	r24, 0x21	; 33
     b40:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
     b42:	77 9b       	sbis	0x0e, 7	; 14
     b44:	fe cf       	rjmp	.-4      	; 0xb42 <Lcd3310_Init+0x46>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
     b46:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
     b48:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
     b4a:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
     b4c:	88 ec       	ldi	r24, 0xC8	; 200
     b4e:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
     b50:	77 9b       	sbis	0x0e, 7	; 14
     b52:	fe cf       	rjmp	.-4      	; 0xb50 <Lcd3310_Init+0x54>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
     b54:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
     b56:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
     b58:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
     b5a:	86 e0       	ldi	r24, 0x06	; 6
     b5c:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
     b5e:	77 9b       	sbis	0x0e, 7	; 14
     b60:	fe cf       	rjmp	.-4      	; 0xb5e <Lcd3310_Init+0x62>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
     b62:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
     b64:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
     b66:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
     b68:	83 e1       	ldi	r24, 0x13	; 19
     b6a:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
     b6c:	77 9b       	sbis	0x0e, 7	; 14
     b6e:	fe cf       	rjmp	.-4      	; 0xb6c <Lcd3310_Init+0x70>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
     b70:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
     b72:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
     b74:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
     b76:	80 e2       	ldi	r24, 0x20	; 32
     b78:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
     b7a:	77 9b       	sbis	0x0e, 7	; 14
     b7c:	fe cf       	rjmp	.-4      	; 0xb7a <Lcd3310_Init+0x7e>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
     b7e:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
     b80:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
     b82:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
     b84:	8c e0       	ldi	r24, 0x0C	; 12
     b86:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
     b88:	77 9b       	sbis	0x0e, 7	; 14
     b8a:	fe cf       	rjmp	.-4      	; 0xb88 <Lcd3310_Init+0x8c>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
     b8c:	c3 9a       	sbi	0x18, 3	; 24
	}
    for (int i = 0; i < 84; i++ ){
        Lcd3310_Send( pgm_read_byte( LcdImage_brunql_gmail_com + i), LCD_DATA );
    }
#else
    Lcd3310_ClearCenter();
     b8e:	0e 94 62 05 	call	0xac4	; 0xac4 <Lcd3310_ClearCenter>


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
     b92:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
     b94:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
     b96:	81 e2       	ldi	r24, 0x21	; 33
     b98:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
     b9a:	77 9b       	sbis	0x0e, 7	; 14
     b9c:	fe cf       	rjmp	.-4      	; 0xb9a <Lcd3310_Init+0x9e>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
     b9e:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
     ba0:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
     ba2:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
     ba4:	8e e9       	ldi	r24, 0x9E	; 158
     ba6:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
     ba8:	77 9b       	sbis	0x0e, 7	; 14
     baa:	fe cf       	rjmp	.-4      	; 0xba8 <Lcd3310_Init+0xac>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
     bac:	c3 9a       	sbi	0x18, 3	; 24


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
     bae:	c3 98       	cbi	0x18, 3	; 24
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
     bb0:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
     bb2:	80 e2       	ldi	r24, 0x20	; 32
     bb4:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
     bb6:	77 9b       	sbis	0x0e, 7	; 14
     bb8:	fe cf       	rjmp	.-4      	; 0xbb6 <Lcd3310_Init+0xba>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
     bba:	c3 9a       	sbi	0x18, 3	; 24
    Lcd3310_Send( 0x80 | LCD_CONTRAST, LCD_CMD );

    //  LCD Standard Commands, horizontal addressing mode.
    Lcd3310_Send( 0x20, LCD_CMD );

	_delay_ms(show_init_data_delay_ms); // show image from LcdCache initial value
     bbc:	b8 01       	movw	r22, r16
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	0e 94 b0 0c 	call	0x1960	; 0x1960 <__floatunsisf>
     bc6:	5b 01       	movw	r10, r22
     bc8:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bca:	20 e0       	ldi	r18, 0x00	; 0
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	4a e7       	ldi	r20, 0x7A	; 122
     bd0:	55 e4       	ldi	r21, 0x45	; 69
     bd2:	0e 94 c8 09 	call	0x1390	; 0x1390 <__mulsf3>
     bd6:	7b 01       	movw	r14, r22
     bd8:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     bda:	20 e0       	ldi	r18, 0x00	; 0
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	40 e8       	ldi	r20, 0x80	; 128
     be0:	5f e3       	ldi	r21, 0x3F	; 63
     be2:	0e 94 ce 0b 	call	0x179c	; 0x179c <__ltsf2>
     be6:	88 23       	and	r24, r24
     be8:	1c f4       	brge	.+6      	; 0xbf0 <Lcd3310_Init+0xf4>
     bea:	61 e0       	ldi	r22, 0x01	; 1
     bec:	70 e0       	ldi	r23, 0x00	; 0
     bee:	24 c0       	rjmp	.+72     	; 0xc38 <Lcd3310_Init+0x13c>
		__ticks = 1;
	else if (__tmp > 65535)
     bf0:	c8 01       	movw	r24, r16
     bf2:	b7 01       	movw	r22, r14
     bf4:	20 e0       	ldi	r18, 0x00	; 0
     bf6:	3f ef       	ldi	r19, 0xFF	; 255
     bf8:	4f e7       	ldi	r20, 0x7F	; 127
     bfa:	57 e4       	ldi	r21, 0x47	; 71
     bfc:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <__gtsf2>
     c00:	18 16       	cp	r1, r24
     c02:	b4 f4       	brge	.+44     	; 0xc30 <Lcd3310_Init+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c04:	c6 01       	movw	r24, r12
     c06:	b5 01       	movw	r22, r10
     c08:	20 e0       	ldi	r18, 0x00	; 0
     c0a:	30 e0       	ldi	r19, 0x00	; 0
     c0c:	40 e2       	ldi	r20, 0x20	; 32
     c0e:	51 e4       	ldi	r21, 0x41	; 65
     c10:	0e 94 c8 09 	call	0x1390	; 0x1390 <__mulsf3>
     c14:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <__fixunssfsi>
     c18:	80 e9       	ldi	r24, 0x90	; 144
     c1a:	91 e0       	ldi	r25, 0x01	; 1
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <Lcd3310_Init+0x12c>
     c1e:	fc 01       	movw	r30, r24
     c20:	31 97       	sbiw	r30, 0x01	; 1
     c22:	f1 f7       	brne	.-4      	; 0xc20 <Lcd3310_Init+0x124>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c24:	61 50       	subi	r22, 0x01	; 1
     c26:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c28:	61 15       	cp	r22, r1
     c2a:	71 05       	cpc	r23, r1
     c2c:	c1 f7       	brne	.-16     	; 0xc1e <Lcd3310_Init+0x122>
     c2e:	07 c0       	rjmp	.+14     	; 0xc3e <Lcd3310_Init+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c30:	c8 01       	movw	r24, r16
     c32:	b7 01       	movw	r22, r14
     c34:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <__fixunssfsi>
     c38:	cb 01       	movw	r24, r22
     c3a:	01 97       	sbiw	r24, 0x01	; 1
     c3c:	f1 f7       	brne	.-4      	; 0xc3a <Lcd3310_Init+0x13e>
}
     c3e:	1f 91       	pop	r17
     c40:	0f 91       	pop	r16
     c42:	ff 90       	pop	r15
     c44:	ef 90       	pop	r14
     c46:	df 90       	pop	r13
     c48:	cf 90       	pop	r12
     c4a:	bf 90       	pop	r11
     c4c:	af 90       	pop	r10
     c4e:	08 95       	ret

00000c50 <Lcd3310_InitFill>:
	}
    for (int i = 0; i < 84; i++ ){
        Lcd3310_Send( pgm_read_byte( LcdImage_brunql_gmail_com + i), LCD_DATA );
    }
#else
    Lcd3310_ClearCenter();
     c50:	0e 94 62 05 	call	0xac4	; 0xac4 <Lcd3310_ClearCenter>
#endif
}
     c54:	08 95       	ret

00000c56 <Lcd3310_Send>:


void Lcd3310_Send (char data, LcdCmdData cd)
{
	//  Enable display controller (active low).
    PORTB &= (unsigned char)~LCD_CE_PIN;
     c56:	c3 98       	cbi	0x18, 3	; 24

    if ( cd == LCD_DATA )
     c58:	61 30       	cpi	r22, 0x01	; 1
     c5a:	11 f4       	brne	.+4      	; 0xc60 <Lcd3310_Send+0xa>
    {
        PORTB |= (unsigned char)LCD_DC_PIN;
     c5c:	c4 9a       	sbi	0x18, 4	; 24
     c5e:	01 c0       	rjmp	.+2      	; 0xc62 <Lcd3310_Send+0xc>
    }
    else
    {
        PORTB &= (unsigned char)~LCD_DC_PIN;
     c60:	c4 98       	cbi	0x18, 4	; 24
    }

    //  Send data to display controller.
    SPDR = data;
     c62:	8f b9       	out	0x0f, r24	; 15

    //  Wait until Tx register empty.
    while ( (SPSR & _BV(SPIE)) == 0 );
     c64:	77 9b       	sbis	0x0e, 7	; 14
     c66:	fe cf       	rjmp	.-4      	; 0xc64 <Lcd3310_Send+0xe>

    //  Disable display controller.
    PORTB |= (unsigned char)LCD_CE_PIN;
     c68:	c3 9a       	sbi	0x18, 3	; 24
}
     c6a:	08 95       	ret

00000c6c <Lcd3310_UInt16AsText>:
		Lcd3310_Char( to_string_result[count], is_invert_colors );
	}
}

void Lcd3310_UInt16AsText(uint16_t i, WhiteOrBlackText is_invert_colors)
{
     c6c:	1f 93       	push	r17
     c6e:	16 2f       	mov	r17, r22
	UInt16ToString( i );
     c70:	0e 94 8e 04 	call	0x91c	; 0x91c <UInt16ToString>
	// show three numbers and space
	for(uint8_t count=1; count < 4; count++){ // 0x03ff - max value, show only '3ff'
			Lcd3310_Char( to_string_result[count], is_invert_colors );
     c74:	80 91 c9 02 	lds	r24, 0x02C9
     c78:	61 2f       	mov	r22, r17
     c7a:	0e 94 c8 04 	call	0x990	; 0x990 <Lcd3310_Char>
     c7e:	80 91 ca 02 	lds	r24, 0x02CA
     c82:	61 2f       	mov	r22, r17
     c84:	0e 94 c8 04 	call	0x990	; 0x990 <Lcd3310_Char>
     c88:	80 91 cb 02 	lds	r24, 0x02CB
     c8c:	61 2f       	mov	r22, r17
     c8e:	0e 94 c8 04 	call	0x990	; 0x990 <Lcd3310_Char>
	}
	Lcd3310_Char( ' ', is_invert_colors );
     c92:	80 e2       	ldi	r24, 0x20	; 32
     c94:	61 2f       	mov	r22, r17
     c96:	0e 94 c8 04 	call	0x990	; 0x990 <Lcd3310_Char>
}
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <Lcd3310_UInt8AsText>:




void Lcd3310_UInt8AsText(uint8_t ch, WhiteOrBlackText is_invert_colors)
{
     c9e:	1f 93       	push	r17
     ca0:	16 2f       	mov	r17, r22
	UInt8ToString( ch );
     ca2:	0e 94 69 04 	call	0x8d2	; 0x8d2 <UInt8ToString>
	for(uint8_t count=0; count < 2; count++){
		Lcd3310_Char( to_string_result[count], is_invert_colors );
     ca6:	80 91 c8 02 	lds	r24, 0x02C8
     caa:	61 2f       	mov	r22, r17
     cac:	0e 94 c8 04 	call	0x990	; 0x990 <Lcd3310_Char>
     cb0:	80 91 c9 02 	lds	r24, 0x02C9
     cb4:	61 2f       	mov	r22, r17
     cb6:	0e 94 c8 04 	call	0x990	; 0x990 <Lcd3310_Char>
	}
}
     cba:	1f 91       	pop	r17
     cbc:	08 95       	ret

00000cbe <init_menu_now>:



void init_menu_now(void)
{
	menu_now = &go;
     cbe:	82 ea       	ldi	r24, 0xA2	; 162
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	90 93 d5 02 	sts	0x02D5, r25
     cc6:	80 93 d4 02 	sts	0x02D4, r24
}
     cca:	08 95       	ret

00000ccc <Lcd3310_UpdateDisplayInfo>:
}
#endif


void Lcd3310_UpdateDisplayInfo(void)
{
     ccc:	ef 92       	push	r14
     cce:	ff 92       	push	r15
     cd0:	0f 93       	push	r16
     cd2:	1f 93       	push	r17
     cd4:	cf 93       	push	r28
     cd6:	df 93       	push	r29
    uint8_t number_of_elements_in_menu_now = 1;
    
	Lcd3310_ClearCenter();
     cd8:	0e 94 62 05 	call	0xac4	; 0xac4 <Lcd3310_ClearCenter>
	
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { menu_now_atomic = menu_now; }
     cdc:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     cde:	f8 94       	cli
     ce0:	80 91 d4 02 	lds	r24, 0x02D4
     ce4:	90 91 d5 02 	lds	r25, 0x02D5
     ce8:	90 93 d3 02 	sts	0x02D3, r25
     cec:	80 93 d2 02 	sts	0x02D2, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     cf0:	2f bf       	out	0x3f, r18	; 63

	struct menu_item *menu_temp = menu_now_atomic->next;
     cf2:	e0 91 d2 02 	lds	r30, 0x02D2
     cf6:	f0 91 d3 02 	lds	r31, 0x02D3
     cfa:	c5 81       	ldd	r28, Z+5	; 0x05
     cfc:	d6 81       	ldd	r29, Z+6	; 0x06
     cfe:	ff 24       	eor	r15, r15
     d00:	f3 94       	inc	r15
     d02:	04 c0       	rjmp	.+8      	; 0xd0c <Lcd3310_UpdateDisplayInfo+0x40>
	while( menu_temp != menu_now_atomic ){
		number_of_elements_in_menu_now++;
     d04:	f3 94       	inc	r15
		menu_temp = menu_temp->next;
     d06:	0d 80       	ldd	r0, Y+5	; 0x05
     d08:	de 81       	ldd	r29, Y+6	; 0x06
     d0a:	c0 2d       	mov	r28, r0
	Lcd3310_ClearCenter();
	
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { menu_now_atomic = menu_now; }

	struct menu_item *menu_temp = menu_now_atomic->next;
	while( menu_temp != menu_now_atomic ){
     d0c:	ce 17       	cp	r28, r30
     d0e:	df 07       	cpc	r29, r31
     d10:	c9 f7       	brne	.-14     	; 0xd04 <Lcd3310_UpdateDisplayInfo+0x38>
		number_of_elements_in_menu_now++;
		menu_temp = menu_temp->next;
	}
	if(number_of_elements_in_menu_now > 4){
     d12:	24 e0       	ldi	r18, 0x04	; 4
     d14:	2f 15       	cp	r18, r15
     d16:	10 f4       	brcc	.+4      	; 0xd1c <Lcd3310_UpdateDisplayInfo+0x50>
     d18:	84 e0       	ldi	r24, 0x04	; 4
     d1a:	f8 2e       	mov	r15, r24
		menu_temp = menu_now_atomic;
	}else{
		menu_temp = menu_now_atomic->prev;
	}	
#else
	if(menu_before_now >= 0x80 + number_of_elements_in_menu_now){
     d1c:	40 91 81 00 	lds	r20, 0x0081
     d20:	8f 2d       	mov	r24, r15
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	81 58       	subi	r24, 0x81	; 129
     d26:	9f 4f       	sbci	r25, 0xFF	; 255
     d28:	24 2f       	mov	r18, r20
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	82 17       	cp	r24, r18
     d2e:	93 07       	cpc	r25, r19
     d30:	3c f4       	brge	.+14     	; 0xd40 <Lcd3310_UpdateDisplayInfo+0x74>
		menu_before_now = 0x80 + number_of_elements_in_menu_now - 1;
     d32:	8f e7       	ldi	r24, 0x7F	; 127
     d34:	f8 0e       	add	r15, r24
     d36:	f0 92 81 00 	sts	0x0081, r15
     d3a:	21 e8       	ldi	r18, 0x81	; 129
     d3c:	f2 0e       	add	r15, r18
     d3e:	05 c0       	rjmp	.+10     	; 0xd4a <Lcd3310_UpdateDisplayInfo+0x7e>
	}else if (menu_before_now < 0x80){
     d40:	47 fd       	sbrc	r20, 7
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <Lcd3310_UpdateDisplayInfo+0x7e>
		menu_before_now = 0x80;
     d44:	80 e8       	ldi	r24, 0x80	; 128
     d46:	80 93 81 00 	sts	0x0081, r24
	}

	menu_temp = menu_now_atomic;
	for(uint8_t i=1; i <= menu_before_now - 0x80; i++){
     d4a:	80 91 81 00 	lds	r24, 0x0081
     d4e:	28 2f       	mov	r18, r24
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	2f 57       	subi	r18, 0x7F	; 127
     d54:	30 40       	sbci	r19, 0x00	; 0
     d56:	41 e0       	ldi	r20, 0x01	; 1
     d58:	04 c0       	rjmp	.+8      	; 0xd62 <Lcd3310_UpdateDisplayInfo+0x96>
		menu_temp = menu_temp->prev;
     d5a:	0f 80       	ldd	r0, Y+7	; 0x07
     d5c:	d8 85       	ldd	r29, Y+8	; 0x08
     d5e:	c0 2d       	mov	r28, r0
	}else if (menu_before_now < 0x80){
		menu_before_now = 0x80;
	}

	menu_temp = menu_now_atomic;
	for(uint8_t i=1; i <= menu_before_now - 0x80; i++){
     d60:	4f 5f       	subi	r20, 0xFF	; 255
     d62:	84 2f       	mov	r24, r20
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	82 17       	cp	r24, r18
     d68:	93 07       	cpc	r25, r19
     d6a:	bc f3       	brlt	.-18     	; 0xd5a <Lcd3310_UpdateDisplayInfo+0x8e>
		menu_temp = menu_temp->prev;
	}
#endif

#	ifdef LCD_FIRST_STR
	Lcd3310_GotoXY(0, 0);
     d6c:	80 e0       	ldi	r24, 0x00	; 0
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	60 e0       	ldi	r22, 0x00	; 0
     d72:	70 e0       	ldi	r23, 0x00	; 0
     d74:	0e 94 4b 05 	call	0xa96	; 0xa96 <Lcd3310_GotoXY>
	Lcd3310_String_P(lcd_first_str, WHITE_TEXT_ON_BLACK);
     d78:	80 91 91 00 	lds	r24, 0x0091
     d7c:	90 91 92 00 	lds	r25, 0x0092
     d80:	61 e0       	ldi	r22, 0x01	; 1
     d82:	0e 94 19 05 	call	0xa32	; 0xa32 <Lcd3310_String_P>
     d86:	ee 24       	eor	r14, r14
     d88:	02 e0       	ldi	r16, 0x02	; 2
     d8a:	10 e0       	ldi	r17, 0x00	; 0
     d8c:	29 c0       	rjmp	.+82     	; 0xde0 <Lcd3310_UpdateDisplayInfo+0x114>
	for(uint8_t i=0; i < number_of_elements_in_menu_now; i++){
#		ifdef LCD_IMAGES
			Lcd3310_GotoXY(0, i + 1);
#		else
#			ifdef LCD_FIRST_STR
				Lcd3310_GotoXY(0, i + 2);// show menu from (i+1) line because first line filled with '_COLORS_'
     d8e:	80 e0       	ldi	r24, 0x00	; 0
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	b8 01       	movw	r22, r16
     d94:	0e 94 4b 05 	call	0xa96	; 0xa96 <Lcd3310_GotoXY>
#			else
				Lcd3310_GotoXY(0, i); // no images at top
#			endif
#		endif
		if(menu_temp->str == results.str){
     d98:	29 85       	ldd	r18, Y+9	; 0x09
     d9a:	3a 85       	ldd	r19, Y+10	; 0x0a
     d9c:	80 91 c5 00 	lds	r24, 0x00C5
     da0:	90 91 c6 00 	lds	r25, 0x00C6
     da4:	28 17       	cp	r18, r24
     da6:	39 07       	cpc	r19, r25
     da8:	39 f4       	brne	.+14     	; 0xdb8 <Lcd3310_UpdateDisplayInfo+0xec>
			Lcd3310_GotoXY(0, i + 1);
     daa:	b8 01       	movw	r22, r16
     dac:	61 50       	subi	r22, 0x01	; 1
     dae:	70 40       	sbci	r23, 0x00	; 0
     db0:	80 e0       	ldi	r24, 0x00	; 0
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	0e 94 4b 05 	call	0xa96	; 0xa96 <Lcd3310_GotoXY>
		}
		Lcd3310_String_P(menu_temp->str, (menu_now_atomic == menu_temp));
     db8:	29 85       	ldd	r18, Y+9	; 0x09
     dba:	3a 85       	ldd	r19, Y+10	; 0x0a
     dbc:	60 e0       	ldi	r22, 0x00	; 0
     dbe:	80 91 d2 02 	lds	r24, 0x02D2
     dc2:	90 91 d3 02 	lds	r25, 0x02D3
     dc6:	8c 17       	cp	r24, r28
     dc8:	9d 07       	cpc	r25, r29
     dca:	09 f4       	brne	.+2      	; 0xdce <Lcd3310_UpdateDisplayInfo+0x102>
     dcc:	61 e0       	ldi	r22, 0x01	; 1
     dce:	c9 01       	movw	r24, r18
     dd0:	0e 94 19 05 	call	0xa32	; 0xa32 <Lcd3310_String_P>
		menu_temp = menu_temp->next;
     dd4:	0d 80       	ldd	r0, Y+5	; 0x05
     dd6:	de 81       	ldd	r29, Y+6	; 0x06
     dd8:	c0 2d       	mov	r28, r0
#	ifdef LCD_FIRST_STR
	Lcd3310_GotoXY(0, 0);
	Lcd3310_String_P(lcd_first_str, WHITE_TEXT_ON_BLACK);
#	endif

	for(uint8_t i=0; i < number_of_elements_in_menu_now; i++){
     dda:	e3 94       	inc	r14
     ddc:	0f 5f       	subi	r16, 0xFF	; 255
     dde:	1f 4f       	sbci	r17, 0xFF	; 255
     de0:	ef 14       	cp	r14, r15
     de2:	a8 f2       	brcs	.-86     	; 0xd8e <Lcd3310_UpdateDisplayInfo+0xc2>
		Lcd3310_String_P(menu_temp->str, (menu_now_atomic == menu_temp));
		menu_temp = menu_temp->next;
	}


	if( menu_now_atomic == &results ){
     de4:	80 91 d2 02 	lds	r24, 0x02D2
     de8:	90 91 d3 02 	lds	r25, 0x02D3
     dec:	8c 5b       	subi	r24, 0xBC	; 188
     dee:	90 40       	sbci	r25, 0x00	; 0
     df0:	09 f0       	breq	.+2      	; 0xdf4 <Lcd3310_UpdateDisplayInfo+0x128>
     df2:	8d c0       	rjmp	.+282    	; 0xf0e <Lcd3310_UpdateDisplayInfo+0x242>
		 * |  xxxxxxxxxxx |
		 *
		 */

		// |   R   G   B  |
		Lcd3310_GotoXY(3, 2);
     df4:	83 e0       	ldi	r24, 0x03	; 3
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	62 e0       	ldi	r22, 0x02	; 2
     dfa:	70 e0       	ldi	r23, 0x00	; 0
     dfc:	0e 94 4b 05 	call	0xa96	; 0xa96 <Lcd3310_GotoXY>
		Lcd3310_Char('R', BLACK_TEXT_ON_WHITE);
     e00:	82 e5       	ldi	r24, 0x52	; 82
     e02:	60 e0       	ldi	r22, 0x00	; 0
     e04:	0e 94 c8 04 	call	0x990	; 0x990 <Lcd3310_Char>
		Lcd3310_GotoXY(7, 2);
     e08:	87 e0       	ldi	r24, 0x07	; 7
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	62 e0       	ldi	r22, 0x02	; 2
     e0e:	70 e0       	ldi	r23, 0x00	; 0
     e10:	0e 94 4b 05 	call	0xa96	; 0xa96 <Lcd3310_GotoXY>
		Lcd3310_Char('G', BLACK_TEXT_ON_WHITE);
     e14:	87 e4       	ldi	r24, 0x47	; 71
     e16:	60 e0       	ldi	r22, 0x00	; 0
     e18:	0e 94 c8 04 	call	0x990	; 0x990 <Lcd3310_Char>
		Lcd3310_GotoXY(11, 2);
     e1c:	8b e0       	ldi	r24, 0x0B	; 11
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	62 e0       	ldi	r22, 0x02	; 2
     e22:	70 e0       	ldi	r23, 0x00	; 0
     e24:	0e 94 4b 05 	call	0xa96	; 0xa96 <Lcd3310_GotoXY>
		Lcd3310_Char('B', BLACK_TEXT_ON_WHITE);
     e28:	82 e4       	ldi	r24, 0x42	; 66
     e2a:	60 e0       	ldi	r22, 0x00	; 0
     e2c:	0e 94 c8 04 	call	0x990	; 0x990 <Lcd3310_Char>

		// |1 *** *** *** |
		Lcd3310_GotoXY(0, 3);
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	63 e0       	ldi	r22, 0x03	; 3
     e36:	70 e0       	ldi	r23, 0x00	; 0
     e38:	0e 94 4b 05 	call	0xa96	; 0xa96 <Lcd3310_GotoXY>
		Lcd3310_Char('1', BLACK_TEXT_ON_WHITE);
     e3c:	81 e3       	ldi	r24, 0x31	; 49
     e3e:	60 e0       	ldi	r22, 0x00	; 0
     e40:	0e 94 c8 04 	call	0x990	; 0x990 <Lcd3310_Char>
		Lcd3310_GotoXY(2, 3);
     e44:	82 e0       	ldi	r24, 0x02	; 2
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	63 e0       	ldi	r22, 0x03	; 3
     e4a:	70 e0       	ldi	r23, 0x00	; 0
     e4c:	0e 94 4b 05 	call	0xa96	; 0xa96 <Lcd3310_GotoXY>
		Lcd3310_UInt16AsText(result[FIRST][RED], BLACK_TEXT_ON_WHITE);
     e50:	80 91 ae 02 	lds	r24, 0x02AE
     e54:	90 91 af 02 	lds	r25, 0x02AF
     e58:	60 e0       	ldi	r22, 0x00	; 0
     e5a:	0e 94 36 06 	call	0xc6c	; 0xc6c <Lcd3310_UInt16AsText>
		Lcd3310_UInt16AsText(result[FIRST][GREEN], BLACK_TEXT_ON_WHITE);
     e5e:	80 91 b0 02 	lds	r24, 0x02B0
     e62:	90 91 b1 02 	lds	r25, 0x02B1
     e66:	60 e0       	ldi	r22, 0x00	; 0
     e68:	0e 94 36 06 	call	0xc6c	; 0xc6c <Lcd3310_UInt16AsText>
		Lcd3310_UInt16AsText(result[FIRST][BLUE], BLACK_TEXT_ON_WHITE);
     e6c:	80 91 b2 02 	lds	r24, 0x02B2
     e70:	90 91 b3 02 	lds	r25, 0x02B3
     e74:	60 e0       	ldi	r22, 0x00	; 0
     e76:	0e 94 36 06 	call	0xc6c	; 0xc6c <Lcd3310_UInt16AsText>

		// |2 *** *** *** |
		Lcd3310_GotoXY(0, 4);
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	64 e0       	ldi	r22, 0x04	; 4
     e80:	70 e0       	ldi	r23, 0x00	; 0
     e82:	0e 94 4b 05 	call	0xa96	; 0xa96 <Lcd3310_GotoXY>
		Lcd3310_Char('2', BLACK_TEXT_ON_WHITE);
     e86:	82 e3       	ldi	r24, 0x32	; 50
     e88:	60 e0       	ldi	r22, 0x00	; 0
     e8a:	0e 94 c8 04 	call	0x990	; 0x990 <Lcd3310_Char>
		Lcd3310_GotoXY(2, 4);
     e8e:	82 e0       	ldi	r24, 0x02	; 2
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	64 e0       	ldi	r22, 0x04	; 4
     e94:	70 e0       	ldi	r23, 0x00	; 0
     e96:	0e 94 4b 05 	call	0xa96	; 0xa96 <Lcd3310_GotoXY>
		Lcd3310_UInt16AsText(result[SECOND][RED], BLACK_TEXT_ON_WHITE);
     e9a:	80 91 b4 02 	lds	r24, 0x02B4
     e9e:	90 91 b5 02 	lds	r25, 0x02B5
     ea2:	60 e0       	ldi	r22, 0x00	; 0
     ea4:	0e 94 36 06 	call	0xc6c	; 0xc6c <Lcd3310_UInt16AsText>
		Lcd3310_UInt16AsText(result[SECOND][GREEN], BLACK_TEXT_ON_WHITE);
     ea8:	80 91 b6 02 	lds	r24, 0x02B6
     eac:	90 91 b7 02 	lds	r25, 0x02B7
     eb0:	60 e0       	ldi	r22, 0x00	; 0
     eb2:	0e 94 36 06 	call	0xc6c	; 0xc6c <Lcd3310_UInt16AsText>
		Lcd3310_UInt16AsText(result[SECOND][BLUE], BLACK_TEXT_ON_WHITE);
     eb6:	80 91 b8 02 	lds	r24, 0x02B8
     eba:	90 91 b9 02 	lds	r25, 0x02B9
     ebe:	60 e0       	ldi	r22, 0x00	; 0
     ec0:	0e 94 36 06 	call	0xc6c	; 0xc6c <Lcd3310_UInt16AsText>

		// |% **% **% **% |
		Lcd3310_GotoXY(0, 5);
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	65 e0       	ldi	r22, 0x05	; 5
     eca:	70 e0       	ldi	r23, 0x00	; 0
     ecc:	0e 94 4b 05 	call	0xa96	; 0xa96 <Lcd3310_GotoXY>
		Lcd3310_Char('%', BLACK_TEXT_ON_WHITE);
     ed0:	85 e2       	ldi	r24, 0x25	; 37
     ed2:	60 e0       	ldi	r22, 0x00	; 0
     ed4:	0e 94 c8 04 	call	0x990	; 0x990 <Lcd3310_Char>
		Lcd3310_GotoXY(2, 5);
     ed8:	82 e0       	ldi	r24, 0x02	; 2
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	65 e0       	ldi	r22, 0x05	; 5
     ede:	70 e0       	ldi	r23, 0x00	; 0
     ee0:	0e 94 4b 05 	call	0xa96	; 0xa96 <Lcd3310_GotoXY>
		Lcd3310_UInt16AsText(result[PERCENT][RED], BLACK_TEXT_ON_WHITE);
     ee4:	80 91 ba 02 	lds	r24, 0x02BA
     ee8:	90 91 bb 02 	lds	r25, 0x02BB
     eec:	60 e0       	ldi	r22, 0x00	; 0
     eee:	0e 94 36 06 	call	0xc6c	; 0xc6c <Lcd3310_UInt16AsText>
		Lcd3310_UInt16AsText(result[PERCENT][GREEN], BLACK_TEXT_ON_WHITE);
     ef2:	80 91 bc 02 	lds	r24, 0x02BC
     ef6:	90 91 bd 02 	lds	r25, 0x02BD
     efa:	60 e0       	ldi	r22, 0x00	; 0
     efc:	0e 94 36 06 	call	0xc6c	; 0xc6c <Lcd3310_UInt16AsText>
		Lcd3310_UInt16AsText(result[PERCENT][BLUE], BLACK_TEXT_ON_WHITE);
     f00:	80 91 be 02 	lds	r24, 0x02BE
     f04:	90 91 bf 02 	lds	r25, 0x02BF
     f08:	60 e0       	ldi	r22, 0x00	; 0
     f0a:	0e 94 36 06 	call	0xc6c	; 0xc6c <Lcd3310_UInt16AsText>
	}
}
     f0e:	df 91       	pop	r29
     f10:	cf 91       	pop	r28
     f12:	1f 91       	pop	r17
     f14:	0f 91       	pop	r16
     f16:	ff 90       	pop	r15
     f18:	ef 90       	pop	r14
     f1a:	08 95       	ret

00000f1c <Lcd3310_InitializeDisplay>:



void init_menu_now(void)
{
	menu_now = &go;
     f1c:	22 ea       	ldi	r18, 0xA2	; 162
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	30 93 d5 02 	sts	0x02D5, r19
     f24:	20 93 d4 02 	sts	0x02D4, r18
//==============================================//
void Lcd3310_InitializeDisplay(uint16_t show_image_delay_ms)
{
	init_menu_now();

    Lcd3310_Init(show_image_delay_ms);
     f28:	0e 94 7e 05 	call	0xafc	; 0xafc <Lcd3310_Init>
	//Lcd3310_LcdImageUpperBottom_Fill();
    Lcd3310_UpdateDisplayInfo();
     f2c:	0e 94 66 06 	call	0xccc	; 0xccc <Lcd3310_UpdateDisplayInfo>
}
     f30:	08 95       	ret

00000f32 <Menu_EnterClick>:
struct menu_item readme = {ENTER_MENU_CMD, NULL, &text, &go, &setup, 							"// Readme   //"};
	struct menu_item text = {BACK_CMD, &readme, NULL, &text, &text, "[ Programmer:][   brunql   ][    (at)    ][  gmail.com ]"};

void Menu_EnterClick(void)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { menu_now_atomic = menu_now; }
     f32:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     f34:	f8 94       	cli
     f36:	20 91 d4 02 	lds	r18, 0x02D4
     f3a:	30 91 d5 02 	lds	r19, 0x02D5
     f3e:	30 93 d3 02 	sts	0x02D3, r19
     f42:	20 93 d2 02 	sts	0x02D2, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     f46:	8f bf       	out	0x3f, r24	; 63
	switch(menu_now_atomic->cmd){
     f48:	e0 91 d2 02 	lds	r30, 0x02D2
     f4c:	f0 91 d3 02 	lds	r31, 0x02D3
     f50:	e0 81       	ld	r30, Z
     f52:	e2 30       	cpi	r30, 0x02	; 2
     f54:	61 f1       	breq	.+88     	; 0xfae <Menu_EnterClick+0x7c>
     f56:	e3 30       	cpi	r30, 0x03	; 3
     f58:	30 f4       	brcc	.+12     	; 0xf66 <Menu_EnterClick+0x34>
     f5a:	ee 23       	and	r30, r30
     f5c:	a9 f0       	breq	.+42     	; 0xf88 <Menu_EnterClick+0x56>
     f5e:	e1 30       	cpi	r30, 0x01	; 1
     f60:	09 f0       	breq	.+2      	; 0xf64 <Menu_EnterClick+0x32>
     f62:	3f c0       	rjmp	.+126    	; 0xfe2 <Menu_EnterClick+0xb0>
     f64:	08 c0       	rjmp	.+16     	; 0xf76 <Menu_EnterClick+0x44>
     f66:	e4 30       	cpi	r30, 0x04	; 4
     f68:	59 f1       	breq	.+86     	; 0xfc0 <Menu_EnterClick+0x8e>
     f6a:	e4 30       	cpi	r30, 0x04	; 4
     f6c:	d8 f0       	brcs	.+54     	; 0xfa4 <Menu_EnterClick+0x72>
     f6e:	e5 30       	cpi	r30, 0x05	; 5
     f70:	09 f0       	breq	.+2      	; 0xf74 <Menu_EnterClick+0x42>
     f72:	37 c0       	rjmp	.+110    	; 0xfe2 <Menu_EnterClick+0xb0>
     f74:	2e c0       	rjmp	.+92     	; 0xfd2 <Menu_EnterClick+0xa0>
		default:
			break;
		case ENTER_MENU_CMD:
		enter_menu_label:
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { menu_now = menu_now->sub_menu; }
     f76:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     f78:	f8 94       	cli
     f7a:	e0 91 d4 02 	lds	r30, 0x02D4
     f7e:	f0 91 d5 02 	lds	r31, 0x02D5
     f82:	23 81       	ldd	r18, Z+3	; 0x03
     f84:	34 81       	ldd	r19, Z+4	; 0x04
     f86:	08 c0       	rjmp	.+16     	; 0xf98 <Menu_EnterClick+0x66>
			break;

		case BACK_CMD:
		back_menu_label:
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { menu_now = menu_now->main_menu; }
     f88:	8f b7       	in	r24, 0x3f	; 63
     f8a:	f8 94       	cli
     f8c:	e0 91 d4 02 	lds	r30, 0x02D4
     f90:	f0 91 d5 02 	lds	r31, 0x02D5
     f94:	21 81       	ldd	r18, Z+1	; 0x01
     f96:	32 81       	ldd	r19, Z+2	; 0x02
     f98:	30 93 d5 02 	sts	0x02D5, r19
     f9c:	20 93 d4 02 	sts	0x02D4, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     fa0:	8f bf       	out	0x3f, r24	; 63
     fa2:	16 c0       	rjmp	.+44     	; 0xfd0 <Menu_EnterClick+0x9e>
			break;
		
		case results_cmd:
			LedDriver_SwitchLeds( 0x0000 );
     fa4:	80 e0       	ldi	r24, 0x00	; 0
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	0e 94 26 03 	call	0x64c	; 0x64c <LedDriver_SwitchLeds>
     fac:	ed cf       	rjmp	.-38     	; 0xf88 <Menu_EnterClick+0x56>
			goto back_menu_label;
	
		case go_cmd:
			FLAGS_SWITCH_ON( ADC_RESULT_FLAG );
     fae:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     fb0:	f8 94       	cli
     fb2:	80 91 c4 02 	lds	r24, 0x02C4
     fb6:	80 61       	ori	r24, 0x10	; 16
     fb8:	80 93 c4 02 	sts	0x02C4, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     fbc:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     fbe:	db cf       	rjmp	.-74     	; 0xf76 <Menu_EnterClick+0x44>
			goto enter_menu_label;
		
		case calibration_cmd:
			FLAGS_SWITCH_ON( ADC_CALIBRATE_FLAG );
     fc0:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     fc2:	f8 94       	cli
     fc4:	80 91 c4 02 	lds	r24, 0x02C4
     fc8:	80 62       	ori	r24, 0x20	; 32
     fca:	80 93 c4 02 	sts	0x02C4, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     fce:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     fd0:	08 95       	ret
			break;
		case set_zero_cmd:
			FLAGS_SWITCH_ON( ADC_SET_ZERO );
     fd2:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     fd4:	f8 94       	cli
     fd6:	80 91 c4 02 	lds	r24, 0x02C4
     fda:	80 64       	ori	r24, 0x40	; 64
     fdc:	80 93 c4 02 	sts	0x02C4, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     fe0:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     fe2:	08 95       	ret

00000fe4 <__fixunssfsi>:
     fe4:	ef 92       	push	r14
     fe6:	ff 92       	push	r15
     fe8:	0f 93       	push	r16
     fea:	1f 93       	push	r17
     fec:	7b 01       	movw	r14, r22
     fee:	8c 01       	movw	r16, r24
     ff0:	20 e0       	ldi	r18, 0x00	; 0
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	40 e0       	ldi	r20, 0x00	; 0
     ff6:	5f e4       	ldi	r21, 0x4F	; 79
     ff8:	0e 94 9e 0b 	call	0x173c	; 0x173c <__gesf2>
     ffc:	88 23       	and	r24, r24
     ffe:	8c f0       	brlt	.+34     	; 0x1022 <__fixunssfsi+0x3e>
    1000:	c8 01       	movw	r24, r16
    1002:	b7 01       	movw	r22, r14
    1004:	20 e0       	ldi	r18, 0x00	; 0
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	40 e0       	ldi	r20, 0x00	; 0
    100a:	5f e4       	ldi	r21, 0x4F	; 79
    100c:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__subsf3>
    1010:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <__fixsfsi>
    1014:	9b 01       	movw	r18, r22
    1016:	ac 01       	movw	r20, r24
    1018:	20 50       	subi	r18, 0x00	; 0
    101a:	30 40       	sbci	r19, 0x00	; 0
    101c:	40 40       	sbci	r20, 0x00	; 0
    101e:	50 48       	sbci	r21, 0x80	; 128
    1020:	06 c0       	rjmp	.+12     	; 0x102e <__fixunssfsi+0x4a>
    1022:	c8 01       	movw	r24, r16
    1024:	b7 01       	movw	r22, r14
    1026:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <__fixsfsi>
    102a:	9b 01       	movw	r18, r22
    102c:	ac 01       	movw	r20, r24
    102e:	b9 01       	movw	r22, r18
    1030:	ca 01       	movw	r24, r20
    1032:	1f 91       	pop	r17
    1034:	0f 91       	pop	r16
    1036:	ff 90       	pop	r15
    1038:	ef 90       	pop	r14
    103a:	08 95       	ret

0000103c <_fpadd_parts>:
    103c:	a0 e0       	ldi	r26, 0x00	; 0
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	e4 e2       	ldi	r30, 0x24	; 36
    1042:	f8 e0       	ldi	r31, 0x08	; 8
    1044:	0c 94 32 0f 	jmp	0x1e64	; 0x1e64 <__prologue_saves__>
    1048:	dc 01       	movw	r26, r24
    104a:	2b 01       	movw	r4, r22
    104c:	fa 01       	movw	r30, r20
    104e:	9c 91       	ld	r25, X
    1050:	92 30       	cpi	r25, 0x02	; 2
    1052:	08 f4       	brcc	.+2      	; 0x1056 <_fpadd_parts+0x1a>
    1054:	39 c1       	rjmp	.+626    	; 0x12c8 <_fpadd_parts+0x28c>
    1056:	eb 01       	movw	r28, r22
    1058:	88 81       	ld	r24, Y
    105a:	82 30       	cpi	r24, 0x02	; 2
    105c:	08 f4       	brcc	.+2      	; 0x1060 <_fpadd_parts+0x24>
    105e:	33 c1       	rjmp	.+614    	; 0x12c6 <_fpadd_parts+0x28a>
    1060:	94 30       	cpi	r25, 0x04	; 4
    1062:	69 f4       	brne	.+26     	; 0x107e <_fpadd_parts+0x42>
    1064:	84 30       	cpi	r24, 0x04	; 4
    1066:	09 f0       	breq	.+2      	; 0x106a <_fpadd_parts+0x2e>
    1068:	2f c1       	rjmp	.+606    	; 0x12c8 <_fpadd_parts+0x28c>
    106a:	11 96       	adiw	r26, 0x01	; 1
    106c:	9c 91       	ld	r25, X
    106e:	11 97       	sbiw	r26, 0x01	; 1
    1070:	89 81       	ldd	r24, Y+1	; 0x01
    1072:	98 17       	cp	r25, r24
    1074:	09 f4       	brne	.+2      	; 0x1078 <_fpadd_parts+0x3c>
    1076:	28 c1       	rjmp	.+592    	; 0x12c8 <_fpadd_parts+0x28c>
    1078:	ad e8       	ldi	r26, 0x8D	; 141
    107a:	b1 e0       	ldi	r27, 0x01	; 1
    107c:	25 c1       	rjmp	.+586    	; 0x12c8 <_fpadd_parts+0x28c>
    107e:	84 30       	cpi	r24, 0x04	; 4
    1080:	09 f4       	brne	.+2      	; 0x1084 <_fpadd_parts+0x48>
    1082:	21 c1       	rjmp	.+578    	; 0x12c6 <_fpadd_parts+0x28a>
    1084:	82 30       	cpi	r24, 0x02	; 2
    1086:	a9 f4       	brne	.+42     	; 0x10b2 <_fpadd_parts+0x76>
    1088:	92 30       	cpi	r25, 0x02	; 2
    108a:	09 f0       	breq	.+2      	; 0x108e <_fpadd_parts+0x52>
    108c:	1d c1       	rjmp	.+570    	; 0x12c8 <_fpadd_parts+0x28c>
    108e:	9a 01       	movw	r18, r20
    1090:	ad 01       	movw	r20, r26
    1092:	88 e0       	ldi	r24, 0x08	; 8
    1094:	ea 01       	movw	r28, r20
    1096:	09 90       	ld	r0, Y+
    1098:	ae 01       	movw	r20, r28
    109a:	e9 01       	movw	r28, r18
    109c:	09 92       	st	Y+, r0
    109e:	9e 01       	movw	r18, r28
    10a0:	81 50       	subi	r24, 0x01	; 1
    10a2:	c1 f7       	brne	.-16     	; 0x1094 <_fpadd_parts+0x58>
    10a4:	e2 01       	movw	r28, r4
    10a6:	89 81       	ldd	r24, Y+1	; 0x01
    10a8:	11 96       	adiw	r26, 0x01	; 1
    10aa:	9c 91       	ld	r25, X
    10ac:	89 23       	and	r24, r25
    10ae:	81 83       	std	Z+1, r24	; 0x01
    10b0:	08 c1       	rjmp	.+528    	; 0x12c2 <_fpadd_parts+0x286>
    10b2:	92 30       	cpi	r25, 0x02	; 2
    10b4:	09 f4       	brne	.+2      	; 0x10b8 <_fpadd_parts+0x7c>
    10b6:	07 c1       	rjmp	.+526    	; 0x12c6 <_fpadd_parts+0x28a>
    10b8:	12 96       	adiw	r26, 0x02	; 2
    10ba:	2d 90       	ld	r2, X+
    10bc:	3c 90       	ld	r3, X
    10be:	13 97       	sbiw	r26, 0x03	; 3
    10c0:	eb 01       	movw	r28, r22
    10c2:	8a 81       	ldd	r24, Y+2	; 0x02
    10c4:	9b 81       	ldd	r25, Y+3	; 0x03
    10c6:	14 96       	adiw	r26, 0x04	; 4
    10c8:	ad 90       	ld	r10, X+
    10ca:	bd 90       	ld	r11, X+
    10cc:	cd 90       	ld	r12, X+
    10ce:	dc 90       	ld	r13, X
    10d0:	17 97       	sbiw	r26, 0x07	; 7
    10d2:	ec 80       	ldd	r14, Y+4	; 0x04
    10d4:	fd 80       	ldd	r15, Y+5	; 0x05
    10d6:	0e 81       	ldd	r16, Y+6	; 0x06
    10d8:	1f 81       	ldd	r17, Y+7	; 0x07
    10da:	91 01       	movw	r18, r2
    10dc:	28 1b       	sub	r18, r24
    10de:	39 0b       	sbc	r19, r25
    10e0:	b9 01       	movw	r22, r18
    10e2:	37 ff       	sbrs	r19, 7
    10e4:	04 c0       	rjmp	.+8      	; 0x10ee <_fpadd_parts+0xb2>
    10e6:	66 27       	eor	r22, r22
    10e8:	77 27       	eor	r23, r23
    10ea:	62 1b       	sub	r22, r18
    10ec:	73 0b       	sbc	r23, r19
    10ee:	60 32       	cpi	r22, 0x20	; 32
    10f0:	71 05       	cpc	r23, r1
    10f2:	0c f0       	brlt	.+2      	; 0x10f6 <_fpadd_parts+0xba>
    10f4:	61 c0       	rjmp	.+194    	; 0x11b8 <_fpadd_parts+0x17c>
    10f6:	12 16       	cp	r1, r18
    10f8:	13 06       	cpc	r1, r19
    10fa:	6c f5       	brge	.+90     	; 0x1156 <_fpadd_parts+0x11a>
    10fc:	37 01       	movw	r6, r14
    10fe:	48 01       	movw	r8, r16
    1100:	06 2e       	mov	r0, r22
    1102:	04 c0       	rjmp	.+8      	; 0x110c <_fpadd_parts+0xd0>
    1104:	96 94       	lsr	r9
    1106:	87 94       	ror	r8
    1108:	77 94       	ror	r7
    110a:	67 94       	ror	r6
    110c:	0a 94       	dec	r0
    110e:	d2 f7       	brpl	.-12     	; 0x1104 <_fpadd_parts+0xc8>
    1110:	21 e0       	ldi	r18, 0x01	; 1
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	40 e0       	ldi	r20, 0x00	; 0
    1116:	50 e0       	ldi	r21, 0x00	; 0
    1118:	04 c0       	rjmp	.+8      	; 0x1122 <_fpadd_parts+0xe6>
    111a:	22 0f       	add	r18, r18
    111c:	33 1f       	adc	r19, r19
    111e:	44 1f       	adc	r20, r20
    1120:	55 1f       	adc	r21, r21
    1122:	6a 95       	dec	r22
    1124:	d2 f7       	brpl	.-12     	; 0x111a <_fpadd_parts+0xde>
    1126:	21 50       	subi	r18, 0x01	; 1
    1128:	30 40       	sbci	r19, 0x00	; 0
    112a:	40 40       	sbci	r20, 0x00	; 0
    112c:	50 40       	sbci	r21, 0x00	; 0
    112e:	2e 21       	and	r18, r14
    1130:	3f 21       	and	r19, r15
    1132:	40 23       	and	r20, r16
    1134:	51 23       	and	r21, r17
    1136:	21 15       	cp	r18, r1
    1138:	31 05       	cpc	r19, r1
    113a:	41 05       	cpc	r20, r1
    113c:	51 05       	cpc	r21, r1
    113e:	21 f0       	breq	.+8      	; 0x1148 <_fpadd_parts+0x10c>
    1140:	21 e0       	ldi	r18, 0x01	; 1
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	40 e0       	ldi	r20, 0x00	; 0
    1146:	50 e0       	ldi	r21, 0x00	; 0
    1148:	79 01       	movw	r14, r18
    114a:	8a 01       	movw	r16, r20
    114c:	e6 28       	or	r14, r6
    114e:	f7 28       	or	r15, r7
    1150:	08 29       	or	r16, r8
    1152:	19 29       	or	r17, r9
    1154:	3c c0       	rjmp	.+120    	; 0x11ce <_fpadd_parts+0x192>
    1156:	23 2b       	or	r18, r19
    1158:	d1 f1       	breq	.+116    	; 0x11ce <_fpadd_parts+0x192>
    115a:	26 0e       	add	r2, r22
    115c:	37 1e       	adc	r3, r23
    115e:	35 01       	movw	r6, r10
    1160:	46 01       	movw	r8, r12
    1162:	06 2e       	mov	r0, r22
    1164:	04 c0       	rjmp	.+8      	; 0x116e <_fpadd_parts+0x132>
    1166:	96 94       	lsr	r9
    1168:	87 94       	ror	r8
    116a:	77 94       	ror	r7
    116c:	67 94       	ror	r6
    116e:	0a 94       	dec	r0
    1170:	d2 f7       	brpl	.-12     	; 0x1166 <_fpadd_parts+0x12a>
    1172:	21 e0       	ldi	r18, 0x01	; 1
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	40 e0       	ldi	r20, 0x00	; 0
    1178:	50 e0       	ldi	r21, 0x00	; 0
    117a:	04 c0       	rjmp	.+8      	; 0x1184 <_fpadd_parts+0x148>
    117c:	22 0f       	add	r18, r18
    117e:	33 1f       	adc	r19, r19
    1180:	44 1f       	adc	r20, r20
    1182:	55 1f       	adc	r21, r21
    1184:	6a 95       	dec	r22
    1186:	d2 f7       	brpl	.-12     	; 0x117c <_fpadd_parts+0x140>
    1188:	21 50       	subi	r18, 0x01	; 1
    118a:	30 40       	sbci	r19, 0x00	; 0
    118c:	40 40       	sbci	r20, 0x00	; 0
    118e:	50 40       	sbci	r21, 0x00	; 0
    1190:	2a 21       	and	r18, r10
    1192:	3b 21       	and	r19, r11
    1194:	4c 21       	and	r20, r12
    1196:	5d 21       	and	r21, r13
    1198:	21 15       	cp	r18, r1
    119a:	31 05       	cpc	r19, r1
    119c:	41 05       	cpc	r20, r1
    119e:	51 05       	cpc	r21, r1
    11a0:	21 f0       	breq	.+8      	; 0x11aa <_fpadd_parts+0x16e>
    11a2:	21 e0       	ldi	r18, 0x01	; 1
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	40 e0       	ldi	r20, 0x00	; 0
    11a8:	50 e0       	ldi	r21, 0x00	; 0
    11aa:	59 01       	movw	r10, r18
    11ac:	6a 01       	movw	r12, r20
    11ae:	a6 28       	or	r10, r6
    11b0:	b7 28       	or	r11, r7
    11b2:	c8 28       	or	r12, r8
    11b4:	d9 28       	or	r13, r9
    11b6:	0b c0       	rjmp	.+22     	; 0x11ce <_fpadd_parts+0x192>
    11b8:	82 15       	cp	r24, r2
    11ba:	93 05       	cpc	r25, r3
    11bc:	2c f0       	brlt	.+10     	; 0x11c8 <_fpadd_parts+0x18c>
    11be:	1c 01       	movw	r2, r24
    11c0:	aa 24       	eor	r10, r10
    11c2:	bb 24       	eor	r11, r11
    11c4:	65 01       	movw	r12, r10
    11c6:	03 c0       	rjmp	.+6      	; 0x11ce <_fpadd_parts+0x192>
    11c8:	ee 24       	eor	r14, r14
    11ca:	ff 24       	eor	r15, r15
    11cc:	87 01       	movw	r16, r14
    11ce:	11 96       	adiw	r26, 0x01	; 1
    11d0:	9c 91       	ld	r25, X
    11d2:	d2 01       	movw	r26, r4
    11d4:	11 96       	adiw	r26, 0x01	; 1
    11d6:	8c 91       	ld	r24, X
    11d8:	98 17       	cp	r25, r24
    11da:	09 f4       	brne	.+2      	; 0x11de <_fpadd_parts+0x1a2>
    11dc:	45 c0       	rjmp	.+138    	; 0x1268 <_fpadd_parts+0x22c>
    11de:	99 23       	and	r25, r25
    11e0:	39 f0       	breq	.+14     	; 0x11f0 <_fpadd_parts+0x1b4>
    11e2:	a8 01       	movw	r20, r16
    11e4:	97 01       	movw	r18, r14
    11e6:	2a 19       	sub	r18, r10
    11e8:	3b 09       	sbc	r19, r11
    11ea:	4c 09       	sbc	r20, r12
    11ec:	5d 09       	sbc	r21, r13
    11ee:	06 c0       	rjmp	.+12     	; 0x11fc <_fpadd_parts+0x1c0>
    11f0:	a6 01       	movw	r20, r12
    11f2:	95 01       	movw	r18, r10
    11f4:	2e 19       	sub	r18, r14
    11f6:	3f 09       	sbc	r19, r15
    11f8:	40 0b       	sbc	r20, r16
    11fa:	51 0b       	sbc	r21, r17
    11fc:	57 fd       	sbrc	r21, 7
    11fe:	08 c0       	rjmp	.+16     	; 0x1210 <_fpadd_parts+0x1d4>
    1200:	11 82       	std	Z+1, r1	; 0x01
    1202:	33 82       	std	Z+3, r3	; 0x03
    1204:	22 82       	std	Z+2, r2	; 0x02
    1206:	24 83       	std	Z+4, r18	; 0x04
    1208:	35 83       	std	Z+5, r19	; 0x05
    120a:	46 83       	std	Z+6, r20	; 0x06
    120c:	57 83       	std	Z+7, r21	; 0x07
    120e:	1d c0       	rjmp	.+58     	; 0x124a <_fpadd_parts+0x20e>
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	81 83       	std	Z+1, r24	; 0x01
    1214:	33 82       	std	Z+3, r3	; 0x03
    1216:	22 82       	std	Z+2, r2	; 0x02
    1218:	88 27       	eor	r24, r24
    121a:	99 27       	eor	r25, r25
    121c:	dc 01       	movw	r26, r24
    121e:	82 1b       	sub	r24, r18
    1220:	93 0b       	sbc	r25, r19
    1222:	a4 0b       	sbc	r26, r20
    1224:	b5 0b       	sbc	r27, r21
    1226:	84 83       	std	Z+4, r24	; 0x04
    1228:	95 83       	std	Z+5, r25	; 0x05
    122a:	a6 83       	std	Z+6, r26	; 0x06
    122c:	b7 83       	std	Z+7, r27	; 0x07
    122e:	0d c0       	rjmp	.+26     	; 0x124a <_fpadd_parts+0x20e>
    1230:	22 0f       	add	r18, r18
    1232:	33 1f       	adc	r19, r19
    1234:	44 1f       	adc	r20, r20
    1236:	55 1f       	adc	r21, r21
    1238:	24 83       	std	Z+4, r18	; 0x04
    123a:	35 83       	std	Z+5, r19	; 0x05
    123c:	46 83       	std	Z+6, r20	; 0x06
    123e:	57 83       	std	Z+7, r21	; 0x07
    1240:	82 81       	ldd	r24, Z+2	; 0x02
    1242:	93 81       	ldd	r25, Z+3	; 0x03
    1244:	01 97       	sbiw	r24, 0x01	; 1
    1246:	93 83       	std	Z+3, r25	; 0x03
    1248:	82 83       	std	Z+2, r24	; 0x02
    124a:	24 81       	ldd	r18, Z+4	; 0x04
    124c:	35 81       	ldd	r19, Z+5	; 0x05
    124e:	46 81       	ldd	r20, Z+6	; 0x06
    1250:	57 81       	ldd	r21, Z+7	; 0x07
    1252:	da 01       	movw	r26, r20
    1254:	c9 01       	movw	r24, r18
    1256:	01 97       	sbiw	r24, 0x01	; 1
    1258:	a1 09       	sbc	r26, r1
    125a:	b1 09       	sbc	r27, r1
    125c:	8f 5f       	subi	r24, 0xFF	; 255
    125e:	9f 4f       	sbci	r25, 0xFF	; 255
    1260:	af 4f       	sbci	r26, 0xFF	; 255
    1262:	bf 43       	sbci	r27, 0x3F	; 63
    1264:	28 f3       	brcs	.-54     	; 0x1230 <_fpadd_parts+0x1f4>
    1266:	0b c0       	rjmp	.+22     	; 0x127e <_fpadd_parts+0x242>
    1268:	91 83       	std	Z+1, r25	; 0x01
    126a:	33 82       	std	Z+3, r3	; 0x03
    126c:	22 82       	std	Z+2, r2	; 0x02
    126e:	ea 0c       	add	r14, r10
    1270:	fb 1c       	adc	r15, r11
    1272:	0c 1d       	adc	r16, r12
    1274:	1d 1d       	adc	r17, r13
    1276:	e4 82       	std	Z+4, r14	; 0x04
    1278:	f5 82       	std	Z+5, r15	; 0x05
    127a:	06 83       	std	Z+6, r16	; 0x06
    127c:	17 83       	std	Z+7, r17	; 0x07
    127e:	83 e0       	ldi	r24, 0x03	; 3
    1280:	80 83       	st	Z, r24
    1282:	24 81       	ldd	r18, Z+4	; 0x04
    1284:	35 81       	ldd	r19, Z+5	; 0x05
    1286:	46 81       	ldd	r20, Z+6	; 0x06
    1288:	57 81       	ldd	r21, Z+7	; 0x07
    128a:	57 ff       	sbrs	r21, 7
    128c:	1a c0       	rjmp	.+52     	; 0x12c2 <_fpadd_parts+0x286>
    128e:	c9 01       	movw	r24, r18
    1290:	aa 27       	eor	r26, r26
    1292:	97 fd       	sbrc	r25, 7
    1294:	a0 95       	com	r26
    1296:	ba 2f       	mov	r27, r26
    1298:	81 70       	andi	r24, 0x01	; 1
    129a:	90 70       	andi	r25, 0x00	; 0
    129c:	a0 70       	andi	r26, 0x00	; 0
    129e:	b0 70       	andi	r27, 0x00	; 0
    12a0:	56 95       	lsr	r21
    12a2:	47 95       	ror	r20
    12a4:	37 95       	ror	r19
    12a6:	27 95       	ror	r18
    12a8:	82 2b       	or	r24, r18
    12aa:	93 2b       	or	r25, r19
    12ac:	a4 2b       	or	r26, r20
    12ae:	b5 2b       	or	r27, r21
    12b0:	84 83       	std	Z+4, r24	; 0x04
    12b2:	95 83       	std	Z+5, r25	; 0x05
    12b4:	a6 83       	std	Z+6, r26	; 0x06
    12b6:	b7 83       	std	Z+7, r27	; 0x07
    12b8:	82 81       	ldd	r24, Z+2	; 0x02
    12ba:	93 81       	ldd	r25, Z+3	; 0x03
    12bc:	01 96       	adiw	r24, 0x01	; 1
    12be:	93 83       	std	Z+3, r25	; 0x03
    12c0:	82 83       	std	Z+2, r24	; 0x02
    12c2:	df 01       	movw	r26, r30
    12c4:	01 c0       	rjmp	.+2      	; 0x12c8 <_fpadd_parts+0x28c>
    12c6:	d2 01       	movw	r26, r4
    12c8:	cd 01       	movw	r24, r26
    12ca:	cd b7       	in	r28, 0x3d	; 61
    12cc:	de b7       	in	r29, 0x3e	; 62
    12ce:	e2 e1       	ldi	r30, 0x12	; 18
    12d0:	0c 94 4e 0f 	jmp	0x1e9c	; 0x1e9c <__epilogue_restores__>

000012d4 <__subsf3>:
    12d4:	a0 e2       	ldi	r26, 0x20	; 32
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	e0 e7       	ldi	r30, 0x70	; 112
    12da:	f9 e0       	ldi	r31, 0x09	; 9
    12dc:	0c 94 3e 0f 	jmp	0x1e7c	; 0x1e7c <__prologue_saves__+0x18>
    12e0:	69 83       	std	Y+1, r22	; 0x01
    12e2:	7a 83       	std	Y+2, r23	; 0x02
    12e4:	8b 83       	std	Y+3, r24	; 0x03
    12e6:	9c 83       	std	Y+4, r25	; 0x04
    12e8:	2d 83       	std	Y+5, r18	; 0x05
    12ea:	3e 83       	std	Y+6, r19	; 0x06
    12ec:	4f 83       	std	Y+7, r20	; 0x07
    12ee:	58 87       	std	Y+8, r21	; 0x08
    12f0:	e9 e0       	ldi	r30, 0x09	; 9
    12f2:	ee 2e       	mov	r14, r30
    12f4:	f1 2c       	mov	r15, r1
    12f6:	ec 0e       	add	r14, r28
    12f8:	fd 1e       	adc	r15, r29
    12fa:	ce 01       	movw	r24, r28
    12fc:	01 96       	adiw	r24, 0x01	; 1
    12fe:	b7 01       	movw	r22, r14
    1300:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__unpack_f>
    1304:	8e 01       	movw	r16, r28
    1306:	0f 5e       	subi	r16, 0xEF	; 239
    1308:	1f 4f       	sbci	r17, 0xFF	; 255
    130a:	ce 01       	movw	r24, r28
    130c:	05 96       	adiw	r24, 0x05	; 5
    130e:	b8 01       	movw	r22, r16
    1310:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__unpack_f>
    1314:	8a 89       	ldd	r24, Y+18	; 0x12
    1316:	91 e0       	ldi	r25, 0x01	; 1
    1318:	89 27       	eor	r24, r25
    131a:	8a 8b       	std	Y+18, r24	; 0x12
    131c:	c7 01       	movw	r24, r14
    131e:	b8 01       	movw	r22, r16
    1320:	ae 01       	movw	r20, r28
    1322:	47 5e       	subi	r20, 0xE7	; 231
    1324:	5f 4f       	sbci	r21, 0xFF	; 255
    1326:	0e 94 1e 08 	call	0x103c	; 0x103c <_fpadd_parts>
    132a:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <__pack_f>
    132e:	a0 96       	adiw	r28, 0x20	; 32
    1330:	e6 e0       	ldi	r30, 0x06	; 6
    1332:	0c 94 5a 0f 	jmp	0x1eb4	; 0x1eb4 <__epilogue_restores__+0x18>

00001336 <__addsf3>:
    1336:	a0 e2       	ldi	r26, 0x20	; 32
    1338:	b0 e0       	ldi	r27, 0x00	; 0
    133a:	e1 ea       	ldi	r30, 0xA1	; 161
    133c:	f9 e0       	ldi	r31, 0x09	; 9
    133e:	0c 94 3e 0f 	jmp	0x1e7c	; 0x1e7c <__prologue_saves__+0x18>
    1342:	69 83       	std	Y+1, r22	; 0x01
    1344:	7a 83       	std	Y+2, r23	; 0x02
    1346:	8b 83       	std	Y+3, r24	; 0x03
    1348:	9c 83       	std	Y+4, r25	; 0x04
    134a:	2d 83       	std	Y+5, r18	; 0x05
    134c:	3e 83       	std	Y+6, r19	; 0x06
    134e:	4f 83       	std	Y+7, r20	; 0x07
    1350:	58 87       	std	Y+8, r21	; 0x08
    1352:	f9 e0       	ldi	r31, 0x09	; 9
    1354:	ef 2e       	mov	r14, r31
    1356:	f1 2c       	mov	r15, r1
    1358:	ec 0e       	add	r14, r28
    135a:	fd 1e       	adc	r15, r29
    135c:	ce 01       	movw	r24, r28
    135e:	01 96       	adiw	r24, 0x01	; 1
    1360:	b7 01       	movw	r22, r14
    1362:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__unpack_f>
    1366:	8e 01       	movw	r16, r28
    1368:	0f 5e       	subi	r16, 0xEF	; 239
    136a:	1f 4f       	sbci	r17, 0xFF	; 255
    136c:	ce 01       	movw	r24, r28
    136e:	05 96       	adiw	r24, 0x05	; 5
    1370:	b8 01       	movw	r22, r16
    1372:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__unpack_f>
    1376:	c7 01       	movw	r24, r14
    1378:	b8 01       	movw	r22, r16
    137a:	ae 01       	movw	r20, r28
    137c:	47 5e       	subi	r20, 0xE7	; 231
    137e:	5f 4f       	sbci	r21, 0xFF	; 255
    1380:	0e 94 1e 08 	call	0x103c	; 0x103c <_fpadd_parts>
    1384:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <__pack_f>
    1388:	a0 96       	adiw	r28, 0x20	; 32
    138a:	e6 e0       	ldi	r30, 0x06	; 6
    138c:	0c 94 5a 0f 	jmp	0x1eb4	; 0x1eb4 <__epilogue_restores__+0x18>

00001390 <__mulsf3>:
    1390:	a0 e2       	ldi	r26, 0x20	; 32
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	ee ec       	ldi	r30, 0xCE	; 206
    1396:	f9 e0       	ldi	r31, 0x09	; 9
    1398:	0c 94 32 0f 	jmp	0x1e64	; 0x1e64 <__prologue_saves__>
    139c:	69 83       	std	Y+1, r22	; 0x01
    139e:	7a 83       	std	Y+2, r23	; 0x02
    13a0:	8b 83       	std	Y+3, r24	; 0x03
    13a2:	9c 83       	std	Y+4, r25	; 0x04
    13a4:	2d 83       	std	Y+5, r18	; 0x05
    13a6:	3e 83       	std	Y+6, r19	; 0x06
    13a8:	4f 83       	std	Y+7, r20	; 0x07
    13aa:	58 87       	std	Y+8, r21	; 0x08
    13ac:	ce 01       	movw	r24, r28
    13ae:	01 96       	adiw	r24, 0x01	; 1
    13b0:	be 01       	movw	r22, r28
    13b2:	67 5f       	subi	r22, 0xF7	; 247
    13b4:	7f 4f       	sbci	r23, 0xFF	; 255
    13b6:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__unpack_f>
    13ba:	ce 01       	movw	r24, r28
    13bc:	05 96       	adiw	r24, 0x05	; 5
    13be:	be 01       	movw	r22, r28
    13c0:	6f 5e       	subi	r22, 0xEF	; 239
    13c2:	7f 4f       	sbci	r23, 0xFF	; 255
    13c4:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__unpack_f>
    13c8:	99 85       	ldd	r25, Y+9	; 0x09
    13ca:	92 30       	cpi	r25, 0x02	; 2
    13cc:	88 f0       	brcs	.+34     	; 0x13f0 <__mulsf3+0x60>
    13ce:	89 89       	ldd	r24, Y+17	; 0x11
    13d0:	82 30       	cpi	r24, 0x02	; 2
    13d2:	c8 f0       	brcs	.+50     	; 0x1406 <__mulsf3+0x76>
    13d4:	94 30       	cpi	r25, 0x04	; 4
    13d6:	19 f4       	brne	.+6      	; 0x13de <__mulsf3+0x4e>
    13d8:	82 30       	cpi	r24, 0x02	; 2
    13da:	51 f4       	brne	.+20     	; 0x13f0 <__mulsf3+0x60>
    13dc:	04 c0       	rjmp	.+8      	; 0x13e6 <__mulsf3+0x56>
    13de:	84 30       	cpi	r24, 0x04	; 4
    13e0:	29 f4       	brne	.+10     	; 0x13ec <__mulsf3+0x5c>
    13e2:	92 30       	cpi	r25, 0x02	; 2
    13e4:	81 f4       	brne	.+32     	; 0x1406 <__mulsf3+0x76>
    13e6:	8d e8       	ldi	r24, 0x8D	; 141
    13e8:	91 e0       	ldi	r25, 0x01	; 1
    13ea:	c6 c0       	rjmp	.+396    	; 0x1578 <__mulsf3+0x1e8>
    13ec:	92 30       	cpi	r25, 0x02	; 2
    13ee:	49 f4       	brne	.+18     	; 0x1402 <__mulsf3+0x72>
    13f0:	20 e0       	ldi	r18, 0x00	; 0
    13f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    13f4:	8a 89       	ldd	r24, Y+18	; 0x12
    13f6:	98 13       	cpse	r25, r24
    13f8:	21 e0       	ldi	r18, 0x01	; 1
    13fa:	2a 87       	std	Y+10, r18	; 0x0a
    13fc:	ce 01       	movw	r24, r28
    13fe:	09 96       	adiw	r24, 0x09	; 9
    1400:	bb c0       	rjmp	.+374    	; 0x1578 <__mulsf3+0x1e8>
    1402:	82 30       	cpi	r24, 0x02	; 2
    1404:	49 f4       	brne	.+18     	; 0x1418 <__mulsf3+0x88>
    1406:	20 e0       	ldi	r18, 0x00	; 0
    1408:	9a 85       	ldd	r25, Y+10	; 0x0a
    140a:	8a 89       	ldd	r24, Y+18	; 0x12
    140c:	98 13       	cpse	r25, r24
    140e:	21 e0       	ldi	r18, 0x01	; 1
    1410:	2a 8b       	std	Y+18, r18	; 0x12
    1412:	ce 01       	movw	r24, r28
    1414:	41 96       	adiw	r24, 0x11	; 17
    1416:	b0 c0       	rjmp	.+352    	; 0x1578 <__mulsf3+0x1e8>
    1418:	2d 84       	ldd	r2, Y+13	; 0x0d
    141a:	3e 84       	ldd	r3, Y+14	; 0x0e
    141c:	4f 84       	ldd	r4, Y+15	; 0x0f
    141e:	58 88       	ldd	r5, Y+16	; 0x10
    1420:	6d 88       	ldd	r6, Y+21	; 0x15
    1422:	7e 88       	ldd	r7, Y+22	; 0x16
    1424:	8f 88       	ldd	r8, Y+23	; 0x17
    1426:	98 8c       	ldd	r9, Y+24	; 0x18
    1428:	ee 24       	eor	r14, r14
    142a:	ff 24       	eor	r15, r15
    142c:	87 01       	movw	r16, r14
    142e:	aa 24       	eor	r10, r10
    1430:	bb 24       	eor	r11, r11
    1432:	65 01       	movw	r12, r10
    1434:	40 e0       	ldi	r20, 0x00	; 0
    1436:	50 e0       	ldi	r21, 0x00	; 0
    1438:	60 e0       	ldi	r22, 0x00	; 0
    143a:	70 e0       	ldi	r23, 0x00	; 0
    143c:	e0 e0       	ldi	r30, 0x00	; 0
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	c1 01       	movw	r24, r2
    1442:	81 70       	andi	r24, 0x01	; 1
    1444:	90 70       	andi	r25, 0x00	; 0
    1446:	89 2b       	or	r24, r25
    1448:	e9 f0       	breq	.+58     	; 0x1484 <__mulsf3+0xf4>
    144a:	e6 0c       	add	r14, r6
    144c:	f7 1c       	adc	r15, r7
    144e:	08 1d       	adc	r16, r8
    1450:	19 1d       	adc	r17, r9
    1452:	9a 01       	movw	r18, r20
    1454:	ab 01       	movw	r20, r22
    1456:	2a 0d       	add	r18, r10
    1458:	3b 1d       	adc	r19, r11
    145a:	4c 1d       	adc	r20, r12
    145c:	5d 1d       	adc	r21, r13
    145e:	80 e0       	ldi	r24, 0x00	; 0
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	a0 e0       	ldi	r26, 0x00	; 0
    1464:	b0 e0       	ldi	r27, 0x00	; 0
    1466:	e6 14       	cp	r14, r6
    1468:	f7 04       	cpc	r15, r7
    146a:	08 05       	cpc	r16, r8
    146c:	19 05       	cpc	r17, r9
    146e:	20 f4       	brcc	.+8      	; 0x1478 <__mulsf3+0xe8>
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	a0 e0       	ldi	r26, 0x00	; 0
    1476:	b0 e0       	ldi	r27, 0x00	; 0
    1478:	ba 01       	movw	r22, r20
    147a:	a9 01       	movw	r20, r18
    147c:	48 0f       	add	r20, r24
    147e:	59 1f       	adc	r21, r25
    1480:	6a 1f       	adc	r22, r26
    1482:	7b 1f       	adc	r23, r27
    1484:	aa 0c       	add	r10, r10
    1486:	bb 1c       	adc	r11, r11
    1488:	cc 1c       	adc	r12, r12
    148a:	dd 1c       	adc	r13, r13
    148c:	97 fe       	sbrs	r9, 7
    148e:	08 c0       	rjmp	.+16     	; 0x14a0 <__mulsf3+0x110>
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	a0 e0       	ldi	r26, 0x00	; 0
    1496:	b0 e0       	ldi	r27, 0x00	; 0
    1498:	a8 2a       	or	r10, r24
    149a:	b9 2a       	or	r11, r25
    149c:	ca 2a       	or	r12, r26
    149e:	db 2a       	or	r13, r27
    14a0:	31 96       	adiw	r30, 0x01	; 1
    14a2:	e0 32       	cpi	r30, 0x20	; 32
    14a4:	f1 05       	cpc	r31, r1
    14a6:	49 f0       	breq	.+18     	; 0x14ba <__mulsf3+0x12a>
    14a8:	66 0c       	add	r6, r6
    14aa:	77 1c       	adc	r7, r7
    14ac:	88 1c       	adc	r8, r8
    14ae:	99 1c       	adc	r9, r9
    14b0:	56 94       	lsr	r5
    14b2:	47 94       	ror	r4
    14b4:	37 94       	ror	r3
    14b6:	27 94       	ror	r2
    14b8:	c3 cf       	rjmp	.-122    	; 0x1440 <__mulsf3+0xb0>
    14ba:	fa 85       	ldd	r31, Y+10	; 0x0a
    14bc:	ea 89       	ldd	r30, Y+18	; 0x12
    14be:	2b 89       	ldd	r18, Y+19	; 0x13
    14c0:	3c 89       	ldd	r19, Y+20	; 0x14
    14c2:	8b 85       	ldd	r24, Y+11	; 0x0b
    14c4:	9c 85       	ldd	r25, Y+12	; 0x0c
    14c6:	28 0f       	add	r18, r24
    14c8:	39 1f       	adc	r19, r25
    14ca:	2e 5f       	subi	r18, 0xFE	; 254
    14cc:	3f 4f       	sbci	r19, 0xFF	; 255
    14ce:	17 c0       	rjmp	.+46     	; 0x14fe <__mulsf3+0x16e>
    14d0:	ca 01       	movw	r24, r20
    14d2:	81 70       	andi	r24, 0x01	; 1
    14d4:	90 70       	andi	r25, 0x00	; 0
    14d6:	89 2b       	or	r24, r25
    14d8:	61 f0       	breq	.+24     	; 0x14f2 <__mulsf3+0x162>
    14da:	16 95       	lsr	r17
    14dc:	07 95       	ror	r16
    14de:	f7 94       	ror	r15
    14e0:	e7 94       	ror	r14
    14e2:	80 e0       	ldi	r24, 0x00	; 0
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	a0 e0       	ldi	r26, 0x00	; 0
    14e8:	b0 e8       	ldi	r27, 0x80	; 128
    14ea:	e8 2a       	or	r14, r24
    14ec:	f9 2a       	or	r15, r25
    14ee:	0a 2b       	or	r16, r26
    14f0:	1b 2b       	or	r17, r27
    14f2:	76 95       	lsr	r23
    14f4:	67 95       	ror	r22
    14f6:	57 95       	ror	r21
    14f8:	47 95       	ror	r20
    14fa:	2f 5f       	subi	r18, 0xFF	; 255
    14fc:	3f 4f       	sbci	r19, 0xFF	; 255
    14fe:	77 fd       	sbrc	r23, 7
    1500:	e7 cf       	rjmp	.-50     	; 0x14d0 <__mulsf3+0x140>
    1502:	0c c0       	rjmp	.+24     	; 0x151c <__mulsf3+0x18c>
    1504:	44 0f       	add	r20, r20
    1506:	55 1f       	adc	r21, r21
    1508:	66 1f       	adc	r22, r22
    150a:	77 1f       	adc	r23, r23
    150c:	17 fd       	sbrc	r17, 7
    150e:	41 60       	ori	r20, 0x01	; 1
    1510:	ee 0c       	add	r14, r14
    1512:	ff 1c       	adc	r15, r15
    1514:	00 1f       	adc	r16, r16
    1516:	11 1f       	adc	r17, r17
    1518:	21 50       	subi	r18, 0x01	; 1
    151a:	30 40       	sbci	r19, 0x00	; 0
    151c:	40 30       	cpi	r20, 0x00	; 0
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	59 07       	cpc	r21, r25
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	69 07       	cpc	r22, r25
    1526:	90 e4       	ldi	r25, 0x40	; 64
    1528:	79 07       	cpc	r23, r25
    152a:	60 f3       	brcs	.-40     	; 0x1504 <__mulsf3+0x174>
    152c:	2b 8f       	std	Y+27, r18	; 0x1b
    152e:	3c 8f       	std	Y+28, r19	; 0x1c
    1530:	db 01       	movw	r26, r22
    1532:	ca 01       	movw	r24, r20
    1534:	8f 77       	andi	r24, 0x7F	; 127
    1536:	90 70       	andi	r25, 0x00	; 0
    1538:	a0 70       	andi	r26, 0x00	; 0
    153a:	b0 70       	andi	r27, 0x00	; 0
    153c:	80 34       	cpi	r24, 0x40	; 64
    153e:	91 05       	cpc	r25, r1
    1540:	a1 05       	cpc	r26, r1
    1542:	b1 05       	cpc	r27, r1
    1544:	61 f4       	brne	.+24     	; 0x155e <__mulsf3+0x1ce>
    1546:	47 fd       	sbrc	r20, 7
    1548:	0a c0       	rjmp	.+20     	; 0x155e <__mulsf3+0x1ce>
    154a:	e1 14       	cp	r14, r1
    154c:	f1 04       	cpc	r15, r1
    154e:	01 05       	cpc	r16, r1
    1550:	11 05       	cpc	r17, r1
    1552:	29 f0       	breq	.+10     	; 0x155e <__mulsf3+0x1ce>
    1554:	40 5c       	subi	r20, 0xC0	; 192
    1556:	5f 4f       	sbci	r21, 0xFF	; 255
    1558:	6f 4f       	sbci	r22, 0xFF	; 255
    155a:	7f 4f       	sbci	r23, 0xFF	; 255
    155c:	40 78       	andi	r20, 0x80	; 128
    155e:	1a 8e       	std	Y+26, r1	; 0x1a
    1560:	fe 17       	cp	r31, r30
    1562:	11 f0       	breq	.+4      	; 0x1568 <__mulsf3+0x1d8>
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	8a 8f       	std	Y+26, r24	; 0x1a
    1568:	4d 8f       	std	Y+29, r20	; 0x1d
    156a:	5e 8f       	std	Y+30, r21	; 0x1e
    156c:	6f 8f       	std	Y+31, r22	; 0x1f
    156e:	78 a3       	std	Y+32, r23	; 0x20
    1570:	83 e0       	ldi	r24, 0x03	; 3
    1572:	89 8f       	std	Y+25, r24	; 0x19
    1574:	ce 01       	movw	r24, r28
    1576:	49 96       	adiw	r24, 0x19	; 25
    1578:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <__pack_f>
    157c:	a0 96       	adiw	r28, 0x20	; 32
    157e:	e2 e1       	ldi	r30, 0x12	; 18
    1580:	0c 94 4e 0f 	jmp	0x1e9c	; 0x1e9c <__epilogue_restores__>

00001584 <__divsf3>:
    1584:	a8 e1       	ldi	r26, 0x18	; 24
    1586:	b0 e0       	ldi	r27, 0x00	; 0
    1588:	e8 ec       	ldi	r30, 0xC8	; 200
    158a:	fa e0       	ldi	r31, 0x0A	; 10
    158c:	0c 94 3a 0f 	jmp	0x1e74	; 0x1e74 <__prologue_saves__+0x10>
    1590:	69 83       	std	Y+1, r22	; 0x01
    1592:	7a 83       	std	Y+2, r23	; 0x02
    1594:	8b 83       	std	Y+3, r24	; 0x03
    1596:	9c 83       	std	Y+4, r25	; 0x04
    1598:	2d 83       	std	Y+5, r18	; 0x05
    159a:	3e 83       	std	Y+6, r19	; 0x06
    159c:	4f 83       	std	Y+7, r20	; 0x07
    159e:	58 87       	std	Y+8, r21	; 0x08
    15a0:	b9 e0       	ldi	r27, 0x09	; 9
    15a2:	eb 2e       	mov	r14, r27
    15a4:	f1 2c       	mov	r15, r1
    15a6:	ec 0e       	add	r14, r28
    15a8:	fd 1e       	adc	r15, r29
    15aa:	ce 01       	movw	r24, r28
    15ac:	01 96       	adiw	r24, 0x01	; 1
    15ae:	b7 01       	movw	r22, r14
    15b0:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__unpack_f>
    15b4:	8e 01       	movw	r16, r28
    15b6:	0f 5e       	subi	r16, 0xEF	; 239
    15b8:	1f 4f       	sbci	r17, 0xFF	; 255
    15ba:	ce 01       	movw	r24, r28
    15bc:	05 96       	adiw	r24, 0x05	; 5
    15be:	b8 01       	movw	r22, r16
    15c0:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__unpack_f>
    15c4:	29 85       	ldd	r18, Y+9	; 0x09
    15c6:	22 30       	cpi	r18, 0x02	; 2
    15c8:	08 f4       	brcc	.+2      	; 0x15cc <__divsf3+0x48>
    15ca:	7e c0       	rjmp	.+252    	; 0x16c8 <__divsf3+0x144>
    15cc:	39 89       	ldd	r19, Y+17	; 0x11
    15ce:	32 30       	cpi	r19, 0x02	; 2
    15d0:	10 f4       	brcc	.+4      	; 0x15d6 <__divsf3+0x52>
    15d2:	b8 01       	movw	r22, r16
    15d4:	7c c0       	rjmp	.+248    	; 0x16ce <__divsf3+0x14a>
    15d6:	8a 85       	ldd	r24, Y+10	; 0x0a
    15d8:	9a 89       	ldd	r25, Y+18	; 0x12
    15da:	89 27       	eor	r24, r25
    15dc:	8a 87       	std	Y+10, r24	; 0x0a
    15de:	24 30       	cpi	r18, 0x04	; 4
    15e0:	11 f0       	breq	.+4      	; 0x15e6 <__divsf3+0x62>
    15e2:	22 30       	cpi	r18, 0x02	; 2
    15e4:	31 f4       	brne	.+12     	; 0x15f2 <__divsf3+0x6e>
    15e6:	23 17       	cp	r18, r19
    15e8:	09 f0       	breq	.+2      	; 0x15ec <__divsf3+0x68>
    15ea:	6e c0       	rjmp	.+220    	; 0x16c8 <__divsf3+0x144>
    15ec:	6d e8       	ldi	r22, 0x8D	; 141
    15ee:	71 e0       	ldi	r23, 0x01	; 1
    15f0:	6e c0       	rjmp	.+220    	; 0x16ce <__divsf3+0x14a>
    15f2:	34 30       	cpi	r19, 0x04	; 4
    15f4:	39 f4       	brne	.+14     	; 0x1604 <__divsf3+0x80>
    15f6:	1d 86       	std	Y+13, r1	; 0x0d
    15f8:	1e 86       	std	Y+14, r1	; 0x0e
    15fa:	1f 86       	std	Y+15, r1	; 0x0f
    15fc:	18 8a       	std	Y+16, r1	; 0x10
    15fe:	1c 86       	std	Y+12, r1	; 0x0c
    1600:	1b 86       	std	Y+11, r1	; 0x0b
    1602:	04 c0       	rjmp	.+8      	; 0x160c <__divsf3+0x88>
    1604:	32 30       	cpi	r19, 0x02	; 2
    1606:	21 f4       	brne	.+8      	; 0x1610 <__divsf3+0x8c>
    1608:	84 e0       	ldi	r24, 0x04	; 4
    160a:	89 87       	std	Y+9, r24	; 0x09
    160c:	b7 01       	movw	r22, r14
    160e:	5f c0       	rjmp	.+190    	; 0x16ce <__divsf3+0x14a>
    1610:	2b 85       	ldd	r18, Y+11	; 0x0b
    1612:	3c 85       	ldd	r19, Y+12	; 0x0c
    1614:	8b 89       	ldd	r24, Y+19	; 0x13
    1616:	9c 89       	ldd	r25, Y+20	; 0x14
    1618:	28 1b       	sub	r18, r24
    161a:	39 0b       	sbc	r19, r25
    161c:	3c 87       	std	Y+12, r19	; 0x0c
    161e:	2b 87       	std	Y+11, r18	; 0x0b
    1620:	ed 84       	ldd	r14, Y+13	; 0x0d
    1622:	fe 84       	ldd	r15, Y+14	; 0x0e
    1624:	0f 85       	ldd	r16, Y+15	; 0x0f
    1626:	18 89       	ldd	r17, Y+16	; 0x10
    1628:	ad 88       	ldd	r10, Y+21	; 0x15
    162a:	be 88       	ldd	r11, Y+22	; 0x16
    162c:	cf 88       	ldd	r12, Y+23	; 0x17
    162e:	d8 8c       	ldd	r13, Y+24	; 0x18
    1630:	ea 14       	cp	r14, r10
    1632:	fb 04       	cpc	r15, r11
    1634:	0c 05       	cpc	r16, r12
    1636:	1d 05       	cpc	r17, r13
    1638:	40 f4       	brcc	.+16     	; 0x164a <__divsf3+0xc6>
    163a:	ee 0c       	add	r14, r14
    163c:	ff 1c       	adc	r15, r15
    163e:	00 1f       	adc	r16, r16
    1640:	11 1f       	adc	r17, r17
    1642:	21 50       	subi	r18, 0x01	; 1
    1644:	30 40       	sbci	r19, 0x00	; 0
    1646:	3c 87       	std	Y+12, r19	; 0x0c
    1648:	2b 87       	std	Y+11, r18	; 0x0b
    164a:	20 e0       	ldi	r18, 0x00	; 0
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	40 e0       	ldi	r20, 0x00	; 0
    1650:	50 e0       	ldi	r21, 0x00	; 0
    1652:	80 e0       	ldi	r24, 0x00	; 0
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	a0 e0       	ldi	r26, 0x00	; 0
    1658:	b0 e4       	ldi	r27, 0x40	; 64
    165a:	60 e0       	ldi	r22, 0x00	; 0
    165c:	70 e0       	ldi	r23, 0x00	; 0
    165e:	ea 14       	cp	r14, r10
    1660:	fb 04       	cpc	r15, r11
    1662:	0c 05       	cpc	r16, r12
    1664:	1d 05       	cpc	r17, r13
    1666:	40 f0       	brcs	.+16     	; 0x1678 <__divsf3+0xf4>
    1668:	28 2b       	or	r18, r24
    166a:	39 2b       	or	r19, r25
    166c:	4a 2b       	or	r20, r26
    166e:	5b 2b       	or	r21, r27
    1670:	ea 18       	sub	r14, r10
    1672:	fb 08       	sbc	r15, r11
    1674:	0c 09       	sbc	r16, r12
    1676:	1d 09       	sbc	r17, r13
    1678:	b6 95       	lsr	r27
    167a:	a7 95       	ror	r26
    167c:	97 95       	ror	r25
    167e:	87 95       	ror	r24
    1680:	ee 0c       	add	r14, r14
    1682:	ff 1c       	adc	r15, r15
    1684:	00 1f       	adc	r16, r16
    1686:	11 1f       	adc	r17, r17
    1688:	6f 5f       	subi	r22, 0xFF	; 255
    168a:	7f 4f       	sbci	r23, 0xFF	; 255
    168c:	6f 31       	cpi	r22, 0x1F	; 31
    168e:	71 05       	cpc	r23, r1
    1690:	31 f7       	brne	.-52     	; 0x165e <__divsf3+0xda>
    1692:	da 01       	movw	r26, r20
    1694:	c9 01       	movw	r24, r18
    1696:	8f 77       	andi	r24, 0x7F	; 127
    1698:	90 70       	andi	r25, 0x00	; 0
    169a:	a0 70       	andi	r26, 0x00	; 0
    169c:	b0 70       	andi	r27, 0x00	; 0
    169e:	80 34       	cpi	r24, 0x40	; 64
    16a0:	91 05       	cpc	r25, r1
    16a2:	a1 05       	cpc	r26, r1
    16a4:	b1 05       	cpc	r27, r1
    16a6:	61 f4       	brne	.+24     	; 0x16c0 <__divsf3+0x13c>
    16a8:	27 fd       	sbrc	r18, 7
    16aa:	0a c0       	rjmp	.+20     	; 0x16c0 <__divsf3+0x13c>
    16ac:	e1 14       	cp	r14, r1
    16ae:	f1 04       	cpc	r15, r1
    16b0:	01 05       	cpc	r16, r1
    16b2:	11 05       	cpc	r17, r1
    16b4:	29 f0       	breq	.+10     	; 0x16c0 <__divsf3+0x13c>
    16b6:	20 5c       	subi	r18, 0xC0	; 192
    16b8:	3f 4f       	sbci	r19, 0xFF	; 255
    16ba:	4f 4f       	sbci	r20, 0xFF	; 255
    16bc:	5f 4f       	sbci	r21, 0xFF	; 255
    16be:	20 78       	andi	r18, 0x80	; 128
    16c0:	2d 87       	std	Y+13, r18	; 0x0d
    16c2:	3e 87       	std	Y+14, r19	; 0x0e
    16c4:	4f 87       	std	Y+15, r20	; 0x0f
    16c6:	58 8b       	std	Y+16, r21	; 0x10
    16c8:	be 01       	movw	r22, r28
    16ca:	67 5f       	subi	r22, 0xF7	; 247
    16cc:	7f 4f       	sbci	r23, 0xFF	; 255
    16ce:	cb 01       	movw	r24, r22
    16d0:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <__pack_f>
    16d4:	68 96       	adiw	r28, 0x18	; 24
    16d6:	ea e0       	ldi	r30, 0x0A	; 10
    16d8:	0c 94 56 0f 	jmp	0x1eac	; 0x1eac <__epilogue_restores__+0x10>

000016dc <__gtsf2>:
    16dc:	a8 e1       	ldi	r26, 0x18	; 24
    16de:	b0 e0       	ldi	r27, 0x00	; 0
    16e0:	e4 e7       	ldi	r30, 0x74	; 116
    16e2:	fb e0       	ldi	r31, 0x0B	; 11
    16e4:	0c 94 3e 0f 	jmp	0x1e7c	; 0x1e7c <__prologue_saves__+0x18>
    16e8:	69 83       	std	Y+1, r22	; 0x01
    16ea:	7a 83       	std	Y+2, r23	; 0x02
    16ec:	8b 83       	std	Y+3, r24	; 0x03
    16ee:	9c 83       	std	Y+4, r25	; 0x04
    16f0:	2d 83       	std	Y+5, r18	; 0x05
    16f2:	3e 83       	std	Y+6, r19	; 0x06
    16f4:	4f 83       	std	Y+7, r20	; 0x07
    16f6:	58 87       	std	Y+8, r21	; 0x08
    16f8:	89 e0       	ldi	r24, 0x09	; 9
    16fa:	e8 2e       	mov	r14, r24
    16fc:	f1 2c       	mov	r15, r1
    16fe:	ec 0e       	add	r14, r28
    1700:	fd 1e       	adc	r15, r29
    1702:	ce 01       	movw	r24, r28
    1704:	01 96       	adiw	r24, 0x01	; 1
    1706:	b7 01       	movw	r22, r14
    1708:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__unpack_f>
    170c:	8e 01       	movw	r16, r28
    170e:	0f 5e       	subi	r16, 0xEF	; 239
    1710:	1f 4f       	sbci	r17, 0xFF	; 255
    1712:	ce 01       	movw	r24, r28
    1714:	05 96       	adiw	r24, 0x05	; 5
    1716:	b8 01       	movw	r22, r16
    1718:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__unpack_f>
    171c:	89 85       	ldd	r24, Y+9	; 0x09
    171e:	82 30       	cpi	r24, 0x02	; 2
    1720:	40 f0       	brcs	.+16     	; 0x1732 <__gtsf2+0x56>
    1722:	89 89       	ldd	r24, Y+17	; 0x11
    1724:	82 30       	cpi	r24, 0x02	; 2
    1726:	28 f0       	brcs	.+10     	; 0x1732 <__gtsf2+0x56>
    1728:	c7 01       	movw	r24, r14
    172a:	b8 01       	movw	r22, r16
    172c:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <__fpcmp_parts_f>
    1730:	01 c0       	rjmp	.+2      	; 0x1734 <__gtsf2+0x58>
    1732:	8f ef       	ldi	r24, 0xFF	; 255
    1734:	68 96       	adiw	r28, 0x18	; 24
    1736:	e6 e0       	ldi	r30, 0x06	; 6
    1738:	0c 94 5a 0f 	jmp	0x1eb4	; 0x1eb4 <__epilogue_restores__+0x18>

0000173c <__gesf2>:
    173c:	a8 e1       	ldi	r26, 0x18	; 24
    173e:	b0 e0       	ldi	r27, 0x00	; 0
    1740:	e4 ea       	ldi	r30, 0xA4	; 164
    1742:	fb e0       	ldi	r31, 0x0B	; 11
    1744:	0c 94 3e 0f 	jmp	0x1e7c	; 0x1e7c <__prologue_saves__+0x18>
    1748:	69 83       	std	Y+1, r22	; 0x01
    174a:	7a 83       	std	Y+2, r23	; 0x02
    174c:	8b 83       	std	Y+3, r24	; 0x03
    174e:	9c 83       	std	Y+4, r25	; 0x04
    1750:	2d 83       	std	Y+5, r18	; 0x05
    1752:	3e 83       	std	Y+6, r19	; 0x06
    1754:	4f 83       	std	Y+7, r20	; 0x07
    1756:	58 87       	std	Y+8, r21	; 0x08
    1758:	89 e0       	ldi	r24, 0x09	; 9
    175a:	e8 2e       	mov	r14, r24
    175c:	f1 2c       	mov	r15, r1
    175e:	ec 0e       	add	r14, r28
    1760:	fd 1e       	adc	r15, r29
    1762:	ce 01       	movw	r24, r28
    1764:	01 96       	adiw	r24, 0x01	; 1
    1766:	b7 01       	movw	r22, r14
    1768:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__unpack_f>
    176c:	8e 01       	movw	r16, r28
    176e:	0f 5e       	subi	r16, 0xEF	; 239
    1770:	1f 4f       	sbci	r17, 0xFF	; 255
    1772:	ce 01       	movw	r24, r28
    1774:	05 96       	adiw	r24, 0x05	; 5
    1776:	b8 01       	movw	r22, r16
    1778:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__unpack_f>
    177c:	89 85       	ldd	r24, Y+9	; 0x09
    177e:	82 30       	cpi	r24, 0x02	; 2
    1780:	40 f0       	brcs	.+16     	; 0x1792 <__gesf2+0x56>
    1782:	89 89       	ldd	r24, Y+17	; 0x11
    1784:	82 30       	cpi	r24, 0x02	; 2
    1786:	28 f0       	brcs	.+10     	; 0x1792 <__gesf2+0x56>
    1788:	c7 01       	movw	r24, r14
    178a:	b8 01       	movw	r22, r16
    178c:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <__fpcmp_parts_f>
    1790:	01 c0       	rjmp	.+2      	; 0x1794 <__gesf2+0x58>
    1792:	8f ef       	ldi	r24, 0xFF	; 255
    1794:	68 96       	adiw	r28, 0x18	; 24
    1796:	e6 e0       	ldi	r30, 0x06	; 6
    1798:	0c 94 5a 0f 	jmp	0x1eb4	; 0x1eb4 <__epilogue_restores__+0x18>

0000179c <__ltsf2>:
    179c:	a8 e1       	ldi	r26, 0x18	; 24
    179e:	b0 e0       	ldi	r27, 0x00	; 0
    17a0:	e4 ed       	ldi	r30, 0xD4	; 212
    17a2:	fb e0       	ldi	r31, 0x0B	; 11
    17a4:	0c 94 3e 0f 	jmp	0x1e7c	; 0x1e7c <__prologue_saves__+0x18>
    17a8:	69 83       	std	Y+1, r22	; 0x01
    17aa:	7a 83       	std	Y+2, r23	; 0x02
    17ac:	8b 83       	std	Y+3, r24	; 0x03
    17ae:	9c 83       	std	Y+4, r25	; 0x04
    17b0:	2d 83       	std	Y+5, r18	; 0x05
    17b2:	3e 83       	std	Y+6, r19	; 0x06
    17b4:	4f 83       	std	Y+7, r20	; 0x07
    17b6:	58 87       	std	Y+8, r21	; 0x08
    17b8:	89 e0       	ldi	r24, 0x09	; 9
    17ba:	e8 2e       	mov	r14, r24
    17bc:	f1 2c       	mov	r15, r1
    17be:	ec 0e       	add	r14, r28
    17c0:	fd 1e       	adc	r15, r29
    17c2:	ce 01       	movw	r24, r28
    17c4:	01 96       	adiw	r24, 0x01	; 1
    17c6:	b7 01       	movw	r22, r14
    17c8:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__unpack_f>
    17cc:	8e 01       	movw	r16, r28
    17ce:	0f 5e       	subi	r16, 0xEF	; 239
    17d0:	1f 4f       	sbci	r17, 0xFF	; 255
    17d2:	ce 01       	movw	r24, r28
    17d4:	05 96       	adiw	r24, 0x05	; 5
    17d6:	b8 01       	movw	r22, r16
    17d8:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__unpack_f>
    17dc:	89 85       	ldd	r24, Y+9	; 0x09
    17de:	82 30       	cpi	r24, 0x02	; 2
    17e0:	40 f0       	brcs	.+16     	; 0x17f2 <__ltsf2+0x56>
    17e2:	89 89       	ldd	r24, Y+17	; 0x11
    17e4:	82 30       	cpi	r24, 0x02	; 2
    17e6:	28 f0       	brcs	.+10     	; 0x17f2 <__ltsf2+0x56>
    17e8:	c7 01       	movw	r24, r14
    17ea:	b8 01       	movw	r22, r16
    17ec:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <__fpcmp_parts_f>
    17f0:	01 c0       	rjmp	.+2      	; 0x17f4 <__ltsf2+0x58>
    17f2:	81 e0       	ldi	r24, 0x01	; 1
    17f4:	68 96       	adiw	r28, 0x18	; 24
    17f6:	e6 e0       	ldi	r30, 0x06	; 6
    17f8:	0c 94 5a 0f 	jmp	0x1eb4	; 0x1eb4 <__epilogue_restores__+0x18>

000017fc <__floatsisf>:
    17fc:	a8 e0       	ldi	r26, 0x08	; 8
    17fe:	b0 e0       	ldi	r27, 0x00	; 0
    1800:	e4 e0       	ldi	r30, 0x04	; 4
    1802:	fc e0       	ldi	r31, 0x0C	; 12
    1804:	0c 94 3b 0f 	jmp	0x1e76	; 0x1e76 <__prologue_saves__+0x12>
    1808:	9b 01       	movw	r18, r22
    180a:	ac 01       	movw	r20, r24
    180c:	83 e0       	ldi	r24, 0x03	; 3
    180e:	89 83       	std	Y+1, r24	; 0x01
    1810:	da 01       	movw	r26, r20
    1812:	c9 01       	movw	r24, r18
    1814:	88 27       	eor	r24, r24
    1816:	b7 fd       	sbrc	r27, 7
    1818:	83 95       	inc	r24
    181a:	99 27       	eor	r25, r25
    181c:	aa 27       	eor	r26, r26
    181e:	bb 27       	eor	r27, r27
    1820:	b8 2e       	mov	r11, r24
    1822:	21 15       	cp	r18, r1
    1824:	31 05       	cpc	r19, r1
    1826:	41 05       	cpc	r20, r1
    1828:	51 05       	cpc	r21, r1
    182a:	19 f4       	brne	.+6      	; 0x1832 <__floatsisf+0x36>
    182c:	82 e0       	ldi	r24, 0x02	; 2
    182e:	89 83       	std	Y+1, r24	; 0x01
    1830:	3a c0       	rjmp	.+116    	; 0x18a6 <__floatsisf+0xaa>
    1832:	88 23       	and	r24, r24
    1834:	a9 f0       	breq	.+42     	; 0x1860 <__floatsisf+0x64>
    1836:	20 30       	cpi	r18, 0x00	; 0
    1838:	80 e0       	ldi	r24, 0x00	; 0
    183a:	38 07       	cpc	r19, r24
    183c:	80 e0       	ldi	r24, 0x00	; 0
    183e:	48 07       	cpc	r20, r24
    1840:	80 e8       	ldi	r24, 0x80	; 128
    1842:	58 07       	cpc	r21, r24
    1844:	29 f4       	brne	.+10     	; 0x1850 <__floatsisf+0x54>
    1846:	60 e0       	ldi	r22, 0x00	; 0
    1848:	70 e0       	ldi	r23, 0x00	; 0
    184a:	80 e0       	ldi	r24, 0x00	; 0
    184c:	9f ec       	ldi	r25, 0xCF	; 207
    184e:	30 c0       	rjmp	.+96     	; 0x18b0 <__floatsisf+0xb4>
    1850:	ee 24       	eor	r14, r14
    1852:	ff 24       	eor	r15, r15
    1854:	87 01       	movw	r16, r14
    1856:	e2 1a       	sub	r14, r18
    1858:	f3 0a       	sbc	r15, r19
    185a:	04 0b       	sbc	r16, r20
    185c:	15 0b       	sbc	r17, r21
    185e:	02 c0       	rjmp	.+4      	; 0x1864 <__floatsisf+0x68>
    1860:	79 01       	movw	r14, r18
    1862:	8a 01       	movw	r16, r20
    1864:	8e e1       	ldi	r24, 0x1E	; 30
    1866:	c8 2e       	mov	r12, r24
    1868:	d1 2c       	mov	r13, r1
    186a:	dc 82       	std	Y+4, r13	; 0x04
    186c:	cb 82       	std	Y+3, r12	; 0x03
    186e:	ed 82       	std	Y+5, r14	; 0x05
    1870:	fe 82       	std	Y+6, r15	; 0x06
    1872:	0f 83       	std	Y+7, r16	; 0x07
    1874:	18 87       	std	Y+8, r17	; 0x08
    1876:	c8 01       	movw	r24, r16
    1878:	b7 01       	movw	r22, r14
    187a:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <__clzsi2>
    187e:	01 97       	sbiw	r24, 0x01	; 1
    1880:	18 16       	cp	r1, r24
    1882:	19 06       	cpc	r1, r25
    1884:	84 f4       	brge	.+32     	; 0x18a6 <__floatsisf+0xaa>
    1886:	08 2e       	mov	r0, r24
    1888:	04 c0       	rjmp	.+8      	; 0x1892 <__floatsisf+0x96>
    188a:	ee 0c       	add	r14, r14
    188c:	ff 1c       	adc	r15, r15
    188e:	00 1f       	adc	r16, r16
    1890:	11 1f       	adc	r17, r17
    1892:	0a 94       	dec	r0
    1894:	d2 f7       	brpl	.-12     	; 0x188a <__floatsisf+0x8e>
    1896:	ed 82       	std	Y+5, r14	; 0x05
    1898:	fe 82       	std	Y+6, r15	; 0x06
    189a:	0f 83       	std	Y+7, r16	; 0x07
    189c:	18 87       	std	Y+8, r17	; 0x08
    189e:	c8 1a       	sub	r12, r24
    18a0:	d9 0a       	sbc	r13, r25
    18a2:	dc 82       	std	Y+4, r13	; 0x04
    18a4:	cb 82       	std	Y+3, r12	; 0x03
    18a6:	ba 82       	std	Y+2, r11	; 0x02
    18a8:	ce 01       	movw	r24, r28
    18aa:	01 96       	adiw	r24, 0x01	; 1
    18ac:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <__pack_f>
    18b0:	28 96       	adiw	r28, 0x08	; 8
    18b2:	e9 e0       	ldi	r30, 0x09	; 9
    18b4:	0c 94 57 0f 	jmp	0x1eae	; 0x1eae <__epilogue_restores__+0x12>

000018b8 <__fixsfsi>:
    18b8:	ac e0       	ldi	r26, 0x0C	; 12
    18ba:	b0 e0       	ldi	r27, 0x00	; 0
    18bc:	e2 e6       	ldi	r30, 0x62	; 98
    18be:	fc e0       	ldi	r31, 0x0C	; 12
    18c0:	0c 94 42 0f 	jmp	0x1e84	; 0x1e84 <__prologue_saves__+0x20>
    18c4:	69 83       	std	Y+1, r22	; 0x01
    18c6:	7a 83       	std	Y+2, r23	; 0x02
    18c8:	8b 83       	std	Y+3, r24	; 0x03
    18ca:	9c 83       	std	Y+4, r25	; 0x04
    18cc:	ce 01       	movw	r24, r28
    18ce:	01 96       	adiw	r24, 0x01	; 1
    18d0:	be 01       	movw	r22, r28
    18d2:	6b 5f       	subi	r22, 0xFB	; 251
    18d4:	7f 4f       	sbci	r23, 0xFF	; 255
    18d6:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__unpack_f>
    18da:	8d 81       	ldd	r24, Y+5	; 0x05
    18dc:	82 30       	cpi	r24, 0x02	; 2
    18de:	61 f1       	breq	.+88     	; 0x1938 <__fixsfsi+0x80>
    18e0:	82 30       	cpi	r24, 0x02	; 2
    18e2:	50 f1       	brcs	.+84     	; 0x1938 <__fixsfsi+0x80>
    18e4:	84 30       	cpi	r24, 0x04	; 4
    18e6:	21 f4       	brne	.+8      	; 0x18f0 <__fixsfsi+0x38>
    18e8:	8e 81       	ldd	r24, Y+6	; 0x06
    18ea:	88 23       	and	r24, r24
    18ec:	51 f1       	breq	.+84     	; 0x1942 <__fixsfsi+0x8a>
    18ee:	2e c0       	rjmp	.+92     	; 0x194c <__fixsfsi+0x94>
    18f0:	2f 81       	ldd	r18, Y+7	; 0x07
    18f2:	38 85       	ldd	r19, Y+8	; 0x08
    18f4:	37 fd       	sbrc	r19, 7
    18f6:	20 c0       	rjmp	.+64     	; 0x1938 <__fixsfsi+0x80>
    18f8:	6e 81       	ldd	r22, Y+6	; 0x06
    18fa:	2f 31       	cpi	r18, 0x1F	; 31
    18fc:	31 05       	cpc	r19, r1
    18fe:	1c f0       	brlt	.+6      	; 0x1906 <__fixsfsi+0x4e>
    1900:	66 23       	and	r22, r22
    1902:	f9 f0       	breq	.+62     	; 0x1942 <__fixsfsi+0x8a>
    1904:	23 c0       	rjmp	.+70     	; 0x194c <__fixsfsi+0x94>
    1906:	8e e1       	ldi	r24, 0x1E	; 30
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	82 1b       	sub	r24, r18
    190c:	93 0b       	sbc	r25, r19
    190e:	29 85       	ldd	r18, Y+9	; 0x09
    1910:	3a 85       	ldd	r19, Y+10	; 0x0a
    1912:	4b 85       	ldd	r20, Y+11	; 0x0b
    1914:	5c 85       	ldd	r21, Y+12	; 0x0c
    1916:	04 c0       	rjmp	.+8      	; 0x1920 <__fixsfsi+0x68>
    1918:	56 95       	lsr	r21
    191a:	47 95       	ror	r20
    191c:	37 95       	ror	r19
    191e:	27 95       	ror	r18
    1920:	8a 95       	dec	r24
    1922:	d2 f7       	brpl	.-12     	; 0x1918 <__fixsfsi+0x60>
    1924:	66 23       	and	r22, r22
    1926:	b1 f0       	breq	.+44     	; 0x1954 <__fixsfsi+0x9c>
    1928:	50 95       	com	r21
    192a:	40 95       	com	r20
    192c:	30 95       	com	r19
    192e:	21 95       	neg	r18
    1930:	3f 4f       	sbci	r19, 0xFF	; 255
    1932:	4f 4f       	sbci	r20, 0xFF	; 255
    1934:	5f 4f       	sbci	r21, 0xFF	; 255
    1936:	0e c0       	rjmp	.+28     	; 0x1954 <__fixsfsi+0x9c>
    1938:	20 e0       	ldi	r18, 0x00	; 0
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	40 e0       	ldi	r20, 0x00	; 0
    193e:	50 e0       	ldi	r21, 0x00	; 0
    1940:	09 c0       	rjmp	.+18     	; 0x1954 <__fixsfsi+0x9c>
    1942:	2f ef       	ldi	r18, 0xFF	; 255
    1944:	3f ef       	ldi	r19, 0xFF	; 255
    1946:	4f ef       	ldi	r20, 0xFF	; 255
    1948:	5f e7       	ldi	r21, 0x7F	; 127
    194a:	04 c0       	rjmp	.+8      	; 0x1954 <__fixsfsi+0x9c>
    194c:	20 e0       	ldi	r18, 0x00	; 0
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	40 e0       	ldi	r20, 0x00	; 0
    1952:	50 e8       	ldi	r21, 0x80	; 128
    1954:	b9 01       	movw	r22, r18
    1956:	ca 01       	movw	r24, r20
    1958:	2c 96       	adiw	r28, 0x0c	; 12
    195a:	e2 e0       	ldi	r30, 0x02	; 2
    195c:	0c 94 5e 0f 	jmp	0x1ebc	; 0x1ebc <__epilogue_restores__+0x20>

00001960 <__floatunsisf>:
    1960:	a8 e0       	ldi	r26, 0x08	; 8
    1962:	b0 e0       	ldi	r27, 0x00	; 0
    1964:	e6 eb       	ldi	r30, 0xB6	; 182
    1966:	fc e0       	ldi	r31, 0x0C	; 12
    1968:	0c 94 3a 0f 	jmp	0x1e74	; 0x1e74 <__prologue_saves__+0x10>
    196c:	7b 01       	movw	r14, r22
    196e:	8c 01       	movw	r16, r24
    1970:	61 15       	cp	r22, r1
    1972:	71 05       	cpc	r23, r1
    1974:	81 05       	cpc	r24, r1
    1976:	91 05       	cpc	r25, r1
    1978:	19 f4       	brne	.+6      	; 0x1980 <__floatunsisf+0x20>
    197a:	82 e0       	ldi	r24, 0x02	; 2
    197c:	89 83       	std	Y+1, r24	; 0x01
    197e:	60 c0       	rjmp	.+192    	; 0x1a40 <__floatunsisf+0xe0>
    1980:	83 e0       	ldi	r24, 0x03	; 3
    1982:	89 83       	std	Y+1, r24	; 0x01
    1984:	8e e1       	ldi	r24, 0x1E	; 30
    1986:	c8 2e       	mov	r12, r24
    1988:	d1 2c       	mov	r13, r1
    198a:	dc 82       	std	Y+4, r13	; 0x04
    198c:	cb 82       	std	Y+3, r12	; 0x03
    198e:	ed 82       	std	Y+5, r14	; 0x05
    1990:	fe 82       	std	Y+6, r15	; 0x06
    1992:	0f 83       	std	Y+7, r16	; 0x07
    1994:	18 87       	std	Y+8, r17	; 0x08
    1996:	c8 01       	movw	r24, r16
    1998:	b7 01       	movw	r22, r14
    199a:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <__clzsi2>
    199e:	fc 01       	movw	r30, r24
    19a0:	31 97       	sbiw	r30, 0x01	; 1
    19a2:	f7 ff       	sbrs	r31, 7
    19a4:	3b c0       	rjmp	.+118    	; 0x1a1c <__floatunsisf+0xbc>
    19a6:	22 27       	eor	r18, r18
    19a8:	33 27       	eor	r19, r19
    19aa:	2e 1b       	sub	r18, r30
    19ac:	3f 0b       	sbc	r19, r31
    19ae:	57 01       	movw	r10, r14
    19b0:	68 01       	movw	r12, r16
    19b2:	02 2e       	mov	r0, r18
    19b4:	04 c0       	rjmp	.+8      	; 0x19be <__floatunsisf+0x5e>
    19b6:	d6 94       	lsr	r13
    19b8:	c7 94       	ror	r12
    19ba:	b7 94       	ror	r11
    19bc:	a7 94       	ror	r10
    19be:	0a 94       	dec	r0
    19c0:	d2 f7       	brpl	.-12     	; 0x19b6 <__floatunsisf+0x56>
    19c2:	40 e0       	ldi	r20, 0x00	; 0
    19c4:	50 e0       	ldi	r21, 0x00	; 0
    19c6:	60 e0       	ldi	r22, 0x00	; 0
    19c8:	70 e0       	ldi	r23, 0x00	; 0
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	a0 e0       	ldi	r26, 0x00	; 0
    19d0:	b0 e0       	ldi	r27, 0x00	; 0
    19d2:	04 c0       	rjmp	.+8      	; 0x19dc <__floatunsisf+0x7c>
    19d4:	88 0f       	add	r24, r24
    19d6:	99 1f       	adc	r25, r25
    19d8:	aa 1f       	adc	r26, r26
    19da:	bb 1f       	adc	r27, r27
    19dc:	2a 95       	dec	r18
    19de:	d2 f7       	brpl	.-12     	; 0x19d4 <__floatunsisf+0x74>
    19e0:	01 97       	sbiw	r24, 0x01	; 1
    19e2:	a1 09       	sbc	r26, r1
    19e4:	b1 09       	sbc	r27, r1
    19e6:	8e 21       	and	r24, r14
    19e8:	9f 21       	and	r25, r15
    19ea:	a0 23       	and	r26, r16
    19ec:	b1 23       	and	r27, r17
    19ee:	00 97       	sbiw	r24, 0x00	; 0
    19f0:	a1 05       	cpc	r26, r1
    19f2:	b1 05       	cpc	r27, r1
    19f4:	21 f0       	breq	.+8      	; 0x19fe <__floatunsisf+0x9e>
    19f6:	41 e0       	ldi	r20, 0x01	; 1
    19f8:	50 e0       	ldi	r21, 0x00	; 0
    19fa:	60 e0       	ldi	r22, 0x00	; 0
    19fc:	70 e0       	ldi	r23, 0x00	; 0
    19fe:	4a 29       	or	r20, r10
    1a00:	5b 29       	or	r21, r11
    1a02:	6c 29       	or	r22, r12
    1a04:	7d 29       	or	r23, r13
    1a06:	4d 83       	std	Y+5, r20	; 0x05
    1a08:	5e 83       	std	Y+6, r21	; 0x06
    1a0a:	6f 83       	std	Y+7, r22	; 0x07
    1a0c:	78 87       	std	Y+8, r23	; 0x08
    1a0e:	8e e1       	ldi	r24, 0x1E	; 30
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	8e 1b       	sub	r24, r30
    1a14:	9f 0b       	sbc	r25, r31
    1a16:	9c 83       	std	Y+4, r25	; 0x04
    1a18:	8b 83       	std	Y+3, r24	; 0x03
    1a1a:	12 c0       	rjmp	.+36     	; 0x1a40 <__floatunsisf+0xe0>
    1a1c:	30 97       	sbiw	r30, 0x00	; 0
    1a1e:	81 f0       	breq	.+32     	; 0x1a40 <__floatunsisf+0xe0>
    1a20:	0e 2e       	mov	r0, r30
    1a22:	04 c0       	rjmp	.+8      	; 0x1a2c <__floatunsisf+0xcc>
    1a24:	ee 0c       	add	r14, r14
    1a26:	ff 1c       	adc	r15, r15
    1a28:	00 1f       	adc	r16, r16
    1a2a:	11 1f       	adc	r17, r17
    1a2c:	0a 94       	dec	r0
    1a2e:	d2 f7       	brpl	.-12     	; 0x1a24 <__floatunsisf+0xc4>
    1a30:	ed 82       	std	Y+5, r14	; 0x05
    1a32:	fe 82       	std	Y+6, r15	; 0x06
    1a34:	0f 83       	std	Y+7, r16	; 0x07
    1a36:	18 87       	std	Y+8, r17	; 0x08
    1a38:	ce 1a       	sub	r12, r30
    1a3a:	df 0a       	sbc	r13, r31
    1a3c:	dc 82       	std	Y+4, r13	; 0x04
    1a3e:	cb 82       	std	Y+3, r12	; 0x03
    1a40:	1a 82       	std	Y+2, r1	; 0x02
    1a42:	ce 01       	movw	r24, r28
    1a44:	01 96       	adiw	r24, 0x01	; 1
    1a46:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <__pack_f>
    1a4a:	28 96       	adiw	r28, 0x08	; 8
    1a4c:	ea e0       	ldi	r30, 0x0A	; 10
    1a4e:	0c 94 56 0f 	jmp	0x1eac	; 0x1eac <__epilogue_restores__+0x10>

00001a52 <__clzsi2>:
    1a52:	ef 92       	push	r14
    1a54:	ff 92       	push	r15
    1a56:	0f 93       	push	r16
    1a58:	1f 93       	push	r17
    1a5a:	7b 01       	movw	r14, r22
    1a5c:	8c 01       	movw	r16, r24
    1a5e:	80 e0       	ldi	r24, 0x00	; 0
    1a60:	e8 16       	cp	r14, r24
    1a62:	80 e0       	ldi	r24, 0x00	; 0
    1a64:	f8 06       	cpc	r15, r24
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	08 07       	cpc	r16, r24
    1a6a:	80 e0       	ldi	r24, 0x00	; 0
    1a6c:	18 07       	cpc	r17, r24
    1a6e:	88 f4       	brcc	.+34     	; 0x1a92 <__clzsi2+0x40>
    1a70:	8f ef       	ldi	r24, 0xFF	; 255
    1a72:	e8 16       	cp	r14, r24
    1a74:	f1 04       	cpc	r15, r1
    1a76:	01 05       	cpc	r16, r1
    1a78:	11 05       	cpc	r17, r1
    1a7a:	31 f0       	breq	.+12     	; 0x1a88 <__clzsi2+0x36>
    1a7c:	28 f0       	brcs	.+10     	; 0x1a88 <__clzsi2+0x36>
    1a7e:	88 e0       	ldi	r24, 0x08	; 8
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	a0 e0       	ldi	r26, 0x00	; 0
    1a84:	b0 e0       	ldi	r27, 0x00	; 0
    1a86:	17 c0       	rjmp	.+46     	; 0x1ab6 <__clzsi2+0x64>
    1a88:	80 e0       	ldi	r24, 0x00	; 0
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	a0 e0       	ldi	r26, 0x00	; 0
    1a8e:	b0 e0       	ldi	r27, 0x00	; 0
    1a90:	12 c0       	rjmp	.+36     	; 0x1ab6 <__clzsi2+0x64>
    1a92:	80 e0       	ldi	r24, 0x00	; 0
    1a94:	e8 16       	cp	r14, r24
    1a96:	80 e0       	ldi	r24, 0x00	; 0
    1a98:	f8 06       	cpc	r15, r24
    1a9a:	80 e0       	ldi	r24, 0x00	; 0
    1a9c:	08 07       	cpc	r16, r24
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	18 07       	cpc	r17, r24
    1aa2:	28 f0       	brcs	.+10     	; 0x1aae <__clzsi2+0x5c>
    1aa4:	88 e1       	ldi	r24, 0x18	; 24
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	a0 e0       	ldi	r26, 0x00	; 0
    1aaa:	b0 e0       	ldi	r27, 0x00	; 0
    1aac:	04 c0       	rjmp	.+8      	; 0x1ab6 <__clzsi2+0x64>
    1aae:	80 e1       	ldi	r24, 0x10	; 16
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	a0 e0       	ldi	r26, 0x00	; 0
    1ab4:	b0 e0       	ldi	r27, 0x00	; 0
    1ab6:	20 e2       	ldi	r18, 0x20	; 32
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	40 e0       	ldi	r20, 0x00	; 0
    1abc:	50 e0       	ldi	r21, 0x00	; 0
    1abe:	28 1b       	sub	r18, r24
    1ac0:	39 0b       	sbc	r19, r25
    1ac2:	4a 0b       	sbc	r20, r26
    1ac4:	5b 0b       	sbc	r21, r27
    1ac6:	04 c0       	rjmp	.+8      	; 0x1ad0 <__clzsi2+0x7e>
    1ac8:	16 95       	lsr	r17
    1aca:	07 95       	ror	r16
    1acc:	f7 94       	ror	r15
    1ace:	e7 94       	ror	r14
    1ad0:	8a 95       	dec	r24
    1ad2:	d2 f7       	brpl	.-12     	; 0x1ac8 <__clzsi2+0x76>
    1ad4:	f7 01       	movw	r30, r14
    1ad6:	eb 56       	subi	r30, 0x6B	; 107
    1ad8:	fe 4f       	sbci	r31, 0xFE	; 254
    1ada:	80 81       	ld	r24, Z
    1adc:	28 1b       	sub	r18, r24
    1ade:	31 09       	sbc	r19, r1
    1ae0:	41 09       	sbc	r20, r1
    1ae2:	51 09       	sbc	r21, r1
    1ae4:	c9 01       	movw	r24, r18
    1ae6:	1f 91       	pop	r17
    1ae8:	0f 91       	pop	r16
    1aea:	ff 90       	pop	r15
    1aec:	ef 90       	pop	r14
    1aee:	08 95       	ret

00001af0 <__pack_f>:
    1af0:	df 92       	push	r13
    1af2:	ef 92       	push	r14
    1af4:	ff 92       	push	r15
    1af6:	0f 93       	push	r16
    1af8:	1f 93       	push	r17
    1afa:	fc 01       	movw	r30, r24
    1afc:	e4 80       	ldd	r14, Z+4	; 0x04
    1afe:	f5 80       	ldd	r15, Z+5	; 0x05
    1b00:	06 81       	ldd	r16, Z+6	; 0x06
    1b02:	17 81       	ldd	r17, Z+7	; 0x07
    1b04:	d1 80       	ldd	r13, Z+1	; 0x01
    1b06:	80 81       	ld	r24, Z
    1b08:	82 30       	cpi	r24, 0x02	; 2
    1b0a:	48 f4       	brcc	.+18     	; 0x1b1e <__pack_f+0x2e>
    1b0c:	80 e0       	ldi	r24, 0x00	; 0
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	a0 e1       	ldi	r26, 0x10	; 16
    1b12:	b0 e0       	ldi	r27, 0x00	; 0
    1b14:	e8 2a       	or	r14, r24
    1b16:	f9 2a       	or	r15, r25
    1b18:	0a 2b       	or	r16, r26
    1b1a:	1b 2b       	or	r17, r27
    1b1c:	a5 c0       	rjmp	.+330    	; 0x1c68 <__pack_f+0x178>
    1b1e:	84 30       	cpi	r24, 0x04	; 4
    1b20:	09 f4       	brne	.+2      	; 0x1b24 <__pack_f+0x34>
    1b22:	9f c0       	rjmp	.+318    	; 0x1c62 <__pack_f+0x172>
    1b24:	82 30       	cpi	r24, 0x02	; 2
    1b26:	21 f4       	brne	.+8      	; 0x1b30 <__pack_f+0x40>
    1b28:	ee 24       	eor	r14, r14
    1b2a:	ff 24       	eor	r15, r15
    1b2c:	87 01       	movw	r16, r14
    1b2e:	05 c0       	rjmp	.+10     	; 0x1b3a <__pack_f+0x4a>
    1b30:	e1 14       	cp	r14, r1
    1b32:	f1 04       	cpc	r15, r1
    1b34:	01 05       	cpc	r16, r1
    1b36:	11 05       	cpc	r17, r1
    1b38:	19 f4       	brne	.+6      	; 0x1b40 <__pack_f+0x50>
    1b3a:	e0 e0       	ldi	r30, 0x00	; 0
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	96 c0       	rjmp	.+300    	; 0x1c6c <__pack_f+0x17c>
    1b40:	62 81       	ldd	r22, Z+2	; 0x02
    1b42:	73 81       	ldd	r23, Z+3	; 0x03
    1b44:	9f ef       	ldi	r25, 0xFF	; 255
    1b46:	62 38       	cpi	r22, 0x82	; 130
    1b48:	79 07       	cpc	r23, r25
    1b4a:	0c f0       	brlt	.+2      	; 0x1b4e <__pack_f+0x5e>
    1b4c:	5b c0       	rjmp	.+182    	; 0x1c04 <__pack_f+0x114>
    1b4e:	22 e8       	ldi	r18, 0x82	; 130
    1b50:	3f ef       	ldi	r19, 0xFF	; 255
    1b52:	26 1b       	sub	r18, r22
    1b54:	37 0b       	sbc	r19, r23
    1b56:	2a 31       	cpi	r18, 0x1A	; 26
    1b58:	31 05       	cpc	r19, r1
    1b5a:	2c f0       	brlt	.+10     	; 0x1b66 <__pack_f+0x76>
    1b5c:	20 e0       	ldi	r18, 0x00	; 0
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	40 e0       	ldi	r20, 0x00	; 0
    1b62:	50 e0       	ldi	r21, 0x00	; 0
    1b64:	2a c0       	rjmp	.+84     	; 0x1bba <__pack_f+0xca>
    1b66:	b8 01       	movw	r22, r16
    1b68:	a7 01       	movw	r20, r14
    1b6a:	02 2e       	mov	r0, r18
    1b6c:	04 c0       	rjmp	.+8      	; 0x1b76 <__pack_f+0x86>
    1b6e:	76 95       	lsr	r23
    1b70:	67 95       	ror	r22
    1b72:	57 95       	ror	r21
    1b74:	47 95       	ror	r20
    1b76:	0a 94       	dec	r0
    1b78:	d2 f7       	brpl	.-12     	; 0x1b6e <__pack_f+0x7e>
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	a0 e0       	ldi	r26, 0x00	; 0
    1b80:	b0 e0       	ldi	r27, 0x00	; 0
    1b82:	04 c0       	rjmp	.+8      	; 0x1b8c <__pack_f+0x9c>
    1b84:	88 0f       	add	r24, r24
    1b86:	99 1f       	adc	r25, r25
    1b88:	aa 1f       	adc	r26, r26
    1b8a:	bb 1f       	adc	r27, r27
    1b8c:	2a 95       	dec	r18
    1b8e:	d2 f7       	brpl	.-12     	; 0x1b84 <__pack_f+0x94>
    1b90:	01 97       	sbiw	r24, 0x01	; 1
    1b92:	a1 09       	sbc	r26, r1
    1b94:	b1 09       	sbc	r27, r1
    1b96:	8e 21       	and	r24, r14
    1b98:	9f 21       	and	r25, r15
    1b9a:	a0 23       	and	r26, r16
    1b9c:	b1 23       	and	r27, r17
    1b9e:	00 97       	sbiw	r24, 0x00	; 0
    1ba0:	a1 05       	cpc	r26, r1
    1ba2:	b1 05       	cpc	r27, r1
    1ba4:	21 f0       	breq	.+8      	; 0x1bae <__pack_f+0xbe>
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	a0 e0       	ldi	r26, 0x00	; 0
    1bac:	b0 e0       	ldi	r27, 0x00	; 0
    1bae:	9a 01       	movw	r18, r20
    1bb0:	ab 01       	movw	r20, r22
    1bb2:	28 2b       	or	r18, r24
    1bb4:	39 2b       	or	r19, r25
    1bb6:	4a 2b       	or	r20, r26
    1bb8:	5b 2b       	or	r21, r27
    1bba:	da 01       	movw	r26, r20
    1bbc:	c9 01       	movw	r24, r18
    1bbe:	8f 77       	andi	r24, 0x7F	; 127
    1bc0:	90 70       	andi	r25, 0x00	; 0
    1bc2:	a0 70       	andi	r26, 0x00	; 0
    1bc4:	b0 70       	andi	r27, 0x00	; 0
    1bc6:	80 34       	cpi	r24, 0x40	; 64
    1bc8:	91 05       	cpc	r25, r1
    1bca:	a1 05       	cpc	r26, r1
    1bcc:	b1 05       	cpc	r27, r1
    1bce:	39 f4       	brne	.+14     	; 0x1bde <__pack_f+0xee>
    1bd0:	27 ff       	sbrs	r18, 7
    1bd2:	09 c0       	rjmp	.+18     	; 0x1be6 <__pack_f+0xf6>
    1bd4:	20 5c       	subi	r18, 0xC0	; 192
    1bd6:	3f 4f       	sbci	r19, 0xFF	; 255
    1bd8:	4f 4f       	sbci	r20, 0xFF	; 255
    1bda:	5f 4f       	sbci	r21, 0xFF	; 255
    1bdc:	04 c0       	rjmp	.+8      	; 0x1be6 <__pack_f+0xf6>
    1bde:	21 5c       	subi	r18, 0xC1	; 193
    1be0:	3f 4f       	sbci	r19, 0xFF	; 255
    1be2:	4f 4f       	sbci	r20, 0xFF	; 255
    1be4:	5f 4f       	sbci	r21, 0xFF	; 255
    1be6:	e0 e0       	ldi	r30, 0x00	; 0
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	20 30       	cpi	r18, 0x00	; 0
    1bec:	a0 e0       	ldi	r26, 0x00	; 0
    1bee:	3a 07       	cpc	r19, r26
    1bf0:	a0 e0       	ldi	r26, 0x00	; 0
    1bf2:	4a 07       	cpc	r20, r26
    1bf4:	a0 e4       	ldi	r26, 0x40	; 64
    1bf6:	5a 07       	cpc	r21, r26
    1bf8:	10 f0       	brcs	.+4      	; 0x1bfe <__pack_f+0x10e>
    1bfa:	e1 e0       	ldi	r30, 0x01	; 1
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	79 01       	movw	r14, r18
    1c00:	8a 01       	movw	r16, r20
    1c02:	27 c0       	rjmp	.+78     	; 0x1c52 <__pack_f+0x162>
    1c04:	60 38       	cpi	r22, 0x80	; 128
    1c06:	71 05       	cpc	r23, r1
    1c08:	64 f5       	brge	.+88     	; 0x1c62 <__pack_f+0x172>
    1c0a:	fb 01       	movw	r30, r22
    1c0c:	e1 58       	subi	r30, 0x81	; 129
    1c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c10:	d8 01       	movw	r26, r16
    1c12:	c7 01       	movw	r24, r14
    1c14:	8f 77       	andi	r24, 0x7F	; 127
    1c16:	90 70       	andi	r25, 0x00	; 0
    1c18:	a0 70       	andi	r26, 0x00	; 0
    1c1a:	b0 70       	andi	r27, 0x00	; 0
    1c1c:	80 34       	cpi	r24, 0x40	; 64
    1c1e:	91 05       	cpc	r25, r1
    1c20:	a1 05       	cpc	r26, r1
    1c22:	b1 05       	cpc	r27, r1
    1c24:	39 f4       	brne	.+14     	; 0x1c34 <__pack_f+0x144>
    1c26:	e7 fe       	sbrs	r14, 7
    1c28:	0d c0       	rjmp	.+26     	; 0x1c44 <__pack_f+0x154>
    1c2a:	80 e4       	ldi	r24, 0x40	; 64
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	a0 e0       	ldi	r26, 0x00	; 0
    1c30:	b0 e0       	ldi	r27, 0x00	; 0
    1c32:	04 c0       	rjmp	.+8      	; 0x1c3c <__pack_f+0x14c>
    1c34:	8f e3       	ldi	r24, 0x3F	; 63
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	a0 e0       	ldi	r26, 0x00	; 0
    1c3a:	b0 e0       	ldi	r27, 0x00	; 0
    1c3c:	e8 0e       	add	r14, r24
    1c3e:	f9 1e       	adc	r15, r25
    1c40:	0a 1f       	adc	r16, r26
    1c42:	1b 1f       	adc	r17, r27
    1c44:	17 ff       	sbrs	r17, 7
    1c46:	05 c0       	rjmp	.+10     	; 0x1c52 <__pack_f+0x162>
    1c48:	16 95       	lsr	r17
    1c4a:	07 95       	ror	r16
    1c4c:	f7 94       	ror	r15
    1c4e:	e7 94       	ror	r14
    1c50:	31 96       	adiw	r30, 0x01	; 1
    1c52:	87 e0       	ldi	r24, 0x07	; 7
    1c54:	16 95       	lsr	r17
    1c56:	07 95       	ror	r16
    1c58:	f7 94       	ror	r15
    1c5a:	e7 94       	ror	r14
    1c5c:	8a 95       	dec	r24
    1c5e:	d1 f7       	brne	.-12     	; 0x1c54 <__pack_f+0x164>
    1c60:	05 c0       	rjmp	.+10     	; 0x1c6c <__pack_f+0x17c>
    1c62:	ee 24       	eor	r14, r14
    1c64:	ff 24       	eor	r15, r15
    1c66:	87 01       	movw	r16, r14
    1c68:	ef ef       	ldi	r30, 0xFF	; 255
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	6e 2f       	mov	r22, r30
    1c6e:	67 95       	ror	r22
    1c70:	66 27       	eor	r22, r22
    1c72:	67 95       	ror	r22
    1c74:	90 2f       	mov	r25, r16
    1c76:	9f 77       	andi	r25, 0x7F	; 127
    1c78:	d7 94       	ror	r13
    1c7a:	dd 24       	eor	r13, r13
    1c7c:	d7 94       	ror	r13
    1c7e:	8e 2f       	mov	r24, r30
    1c80:	86 95       	lsr	r24
    1c82:	49 2f       	mov	r20, r25
    1c84:	46 2b       	or	r20, r22
    1c86:	58 2f       	mov	r21, r24
    1c88:	5d 29       	or	r21, r13
    1c8a:	b7 01       	movw	r22, r14
    1c8c:	ca 01       	movw	r24, r20
    1c8e:	1f 91       	pop	r17
    1c90:	0f 91       	pop	r16
    1c92:	ff 90       	pop	r15
    1c94:	ef 90       	pop	r14
    1c96:	df 90       	pop	r13
    1c98:	08 95       	ret

00001c9a <__unpack_f>:
    1c9a:	fc 01       	movw	r30, r24
    1c9c:	db 01       	movw	r26, r22
    1c9e:	40 81       	ld	r20, Z
    1ca0:	51 81       	ldd	r21, Z+1	; 0x01
    1ca2:	22 81       	ldd	r18, Z+2	; 0x02
    1ca4:	62 2f       	mov	r22, r18
    1ca6:	6f 77       	andi	r22, 0x7F	; 127
    1ca8:	70 e0       	ldi	r23, 0x00	; 0
    1caa:	22 1f       	adc	r18, r18
    1cac:	22 27       	eor	r18, r18
    1cae:	22 1f       	adc	r18, r18
    1cb0:	93 81       	ldd	r25, Z+3	; 0x03
    1cb2:	89 2f       	mov	r24, r25
    1cb4:	88 0f       	add	r24, r24
    1cb6:	82 2b       	or	r24, r18
    1cb8:	28 2f       	mov	r18, r24
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	99 1f       	adc	r25, r25
    1cbe:	99 27       	eor	r25, r25
    1cc0:	99 1f       	adc	r25, r25
    1cc2:	11 96       	adiw	r26, 0x01	; 1
    1cc4:	9c 93       	st	X, r25
    1cc6:	11 97       	sbiw	r26, 0x01	; 1
    1cc8:	21 15       	cp	r18, r1
    1cca:	31 05       	cpc	r19, r1
    1ccc:	a9 f5       	brne	.+106    	; 0x1d38 <__unpack_f+0x9e>
    1cce:	41 15       	cp	r20, r1
    1cd0:	51 05       	cpc	r21, r1
    1cd2:	61 05       	cpc	r22, r1
    1cd4:	71 05       	cpc	r23, r1
    1cd6:	11 f4       	brne	.+4      	; 0x1cdc <__unpack_f+0x42>
    1cd8:	82 e0       	ldi	r24, 0x02	; 2
    1cda:	37 c0       	rjmp	.+110    	; 0x1d4a <__unpack_f+0xb0>
    1cdc:	82 e8       	ldi	r24, 0x82	; 130
    1cde:	9f ef       	ldi	r25, 0xFF	; 255
    1ce0:	13 96       	adiw	r26, 0x03	; 3
    1ce2:	9c 93       	st	X, r25
    1ce4:	8e 93       	st	-X, r24
    1ce6:	12 97       	sbiw	r26, 0x02	; 2
    1ce8:	9a 01       	movw	r18, r20
    1cea:	ab 01       	movw	r20, r22
    1cec:	67 e0       	ldi	r22, 0x07	; 7
    1cee:	22 0f       	add	r18, r18
    1cf0:	33 1f       	adc	r19, r19
    1cf2:	44 1f       	adc	r20, r20
    1cf4:	55 1f       	adc	r21, r21
    1cf6:	6a 95       	dec	r22
    1cf8:	d1 f7       	brne	.-12     	; 0x1cee <__unpack_f+0x54>
    1cfa:	83 e0       	ldi	r24, 0x03	; 3
    1cfc:	8c 93       	st	X, r24
    1cfe:	0d c0       	rjmp	.+26     	; 0x1d1a <__unpack_f+0x80>
    1d00:	22 0f       	add	r18, r18
    1d02:	33 1f       	adc	r19, r19
    1d04:	44 1f       	adc	r20, r20
    1d06:	55 1f       	adc	r21, r21
    1d08:	12 96       	adiw	r26, 0x02	; 2
    1d0a:	8d 91       	ld	r24, X+
    1d0c:	9c 91       	ld	r25, X
    1d0e:	13 97       	sbiw	r26, 0x03	; 3
    1d10:	01 97       	sbiw	r24, 0x01	; 1
    1d12:	13 96       	adiw	r26, 0x03	; 3
    1d14:	9c 93       	st	X, r25
    1d16:	8e 93       	st	-X, r24
    1d18:	12 97       	sbiw	r26, 0x02	; 2
    1d1a:	20 30       	cpi	r18, 0x00	; 0
    1d1c:	80 e0       	ldi	r24, 0x00	; 0
    1d1e:	38 07       	cpc	r19, r24
    1d20:	80 e0       	ldi	r24, 0x00	; 0
    1d22:	48 07       	cpc	r20, r24
    1d24:	80 e4       	ldi	r24, 0x40	; 64
    1d26:	58 07       	cpc	r21, r24
    1d28:	58 f3       	brcs	.-42     	; 0x1d00 <__unpack_f+0x66>
    1d2a:	14 96       	adiw	r26, 0x04	; 4
    1d2c:	2d 93       	st	X+, r18
    1d2e:	3d 93       	st	X+, r19
    1d30:	4d 93       	st	X+, r20
    1d32:	5c 93       	st	X, r21
    1d34:	17 97       	sbiw	r26, 0x07	; 7
    1d36:	08 95       	ret
    1d38:	2f 3f       	cpi	r18, 0xFF	; 255
    1d3a:	31 05       	cpc	r19, r1
    1d3c:	79 f4       	brne	.+30     	; 0x1d5c <__unpack_f+0xc2>
    1d3e:	41 15       	cp	r20, r1
    1d40:	51 05       	cpc	r21, r1
    1d42:	61 05       	cpc	r22, r1
    1d44:	71 05       	cpc	r23, r1
    1d46:	19 f4       	brne	.+6      	; 0x1d4e <__unpack_f+0xb4>
    1d48:	84 e0       	ldi	r24, 0x04	; 4
    1d4a:	8c 93       	st	X, r24
    1d4c:	08 95       	ret
    1d4e:	64 ff       	sbrs	r22, 4
    1d50:	03 c0       	rjmp	.+6      	; 0x1d58 <__unpack_f+0xbe>
    1d52:	81 e0       	ldi	r24, 0x01	; 1
    1d54:	8c 93       	st	X, r24
    1d56:	12 c0       	rjmp	.+36     	; 0x1d7c <__unpack_f+0xe2>
    1d58:	1c 92       	st	X, r1
    1d5a:	10 c0       	rjmp	.+32     	; 0x1d7c <__unpack_f+0xe2>
    1d5c:	2f 57       	subi	r18, 0x7F	; 127
    1d5e:	30 40       	sbci	r19, 0x00	; 0
    1d60:	13 96       	adiw	r26, 0x03	; 3
    1d62:	3c 93       	st	X, r19
    1d64:	2e 93       	st	-X, r18
    1d66:	12 97       	sbiw	r26, 0x02	; 2
    1d68:	83 e0       	ldi	r24, 0x03	; 3
    1d6a:	8c 93       	st	X, r24
    1d6c:	87 e0       	ldi	r24, 0x07	; 7
    1d6e:	44 0f       	add	r20, r20
    1d70:	55 1f       	adc	r21, r21
    1d72:	66 1f       	adc	r22, r22
    1d74:	77 1f       	adc	r23, r23
    1d76:	8a 95       	dec	r24
    1d78:	d1 f7       	brne	.-12     	; 0x1d6e <__unpack_f+0xd4>
    1d7a:	70 64       	ori	r23, 0x40	; 64
    1d7c:	14 96       	adiw	r26, 0x04	; 4
    1d7e:	4d 93       	st	X+, r20
    1d80:	5d 93       	st	X+, r21
    1d82:	6d 93       	st	X+, r22
    1d84:	7c 93       	st	X, r23
    1d86:	17 97       	sbiw	r26, 0x07	; 7
    1d88:	08 95       	ret

00001d8a <__fpcmp_parts_f>:
    1d8a:	1f 93       	push	r17
    1d8c:	dc 01       	movw	r26, r24
    1d8e:	fb 01       	movw	r30, r22
    1d90:	9c 91       	ld	r25, X
    1d92:	92 30       	cpi	r25, 0x02	; 2
    1d94:	08 f4       	brcc	.+2      	; 0x1d98 <__fpcmp_parts_f+0xe>
    1d96:	47 c0       	rjmp	.+142    	; 0x1e26 <__fpcmp_parts_f+0x9c>
    1d98:	80 81       	ld	r24, Z
    1d9a:	82 30       	cpi	r24, 0x02	; 2
    1d9c:	08 f4       	brcc	.+2      	; 0x1da0 <__fpcmp_parts_f+0x16>
    1d9e:	43 c0       	rjmp	.+134    	; 0x1e26 <__fpcmp_parts_f+0x9c>
    1da0:	94 30       	cpi	r25, 0x04	; 4
    1da2:	51 f4       	brne	.+20     	; 0x1db8 <__fpcmp_parts_f+0x2e>
    1da4:	11 96       	adiw	r26, 0x01	; 1
    1da6:	1c 91       	ld	r17, X
    1da8:	84 30       	cpi	r24, 0x04	; 4
    1daa:	99 f5       	brne	.+102    	; 0x1e12 <__fpcmp_parts_f+0x88>
    1dac:	81 81       	ldd	r24, Z+1	; 0x01
    1dae:	68 2f       	mov	r22, r24
    1db0:	70 e0       	ldi	r23, 0x00	; 0
    1db2:	61 1b       	sub	r22, r17
    1db4:	71 09       	sbc	r23, r1
    1db6:	3f c0       	rjmp	.+126    	; 0x1e36 <__fpcmp_parts_f+0xac>
    1db8:	84 30       	cpi	r24, 0x04	; 4
    1dba:	21 f0       	breq	.+8      	; 0x1dc4 <__fpcmp_parts_f+0x3a>
    1dbc:	92 30       	cpi	r25, 0x02	; 2
    1dbe:	31 f4       	brne	.+12     	; 0x1dcc <__fpcmp_parts_f+0x42>
    1dc0:	82 30       	cpi	r24, 0x02	; 2
    1dc2:	b9 f1       	breq	.+110    	; 0x1e32 <__fpcmp_parts_f+0xa8>
    1dc4:	81 81       	ldd	r24, Z+1	; 0x01
    1dc6:	88 23       	and	r24, r24
    1dc8:	89 f1       	breq	.+98     	; 0x1e2c <__fpcmp_parts_f+0xa2>
    1dca:	2d c0       	rjmp	.+90     	; 0x1e26 <__fpcmp_parts_f+0x9c>
    1dcc:	11 96       	adiw	r26, 0x01	; 1
    1dce:	1c 91       	ld	r17, X
    1dd0:	11 97       	sbiw	r26, 0x01	; 1
    1dd2:	82 30       	cpi	r24, 0x02	; 2
    1dd4:	f1 f0       	breq	.+60     	; 0x1e12 <__fpcmp_parts_f+0x88>
    1dd6:	81 81       	ldd	r24, Z+1	; 0x01
    1dd8:	18 17       	cp	r17, r24
    1dda:	d9 f4       	brne	.+54     	; 0x1e12 <__fpcmp_parts_f+0x88>
    1ddc:	12 96       	adiw	r26, 0x02	; 2
    1dde:	2d 91       	ld	r18, X+
    1de0:	3c 91       	ld	r19, X
    1de2:	13 97       	sbiw	r26, 0x03	; 3
    1de4:	82 81       	ldd	r24, Z+2	; 0x02
    1de6:	93 81       	ldd	r25, Z+3	; 0x03
    1de8:	82 17       	cp	r24, r18
    1dea:	93 07       	cpc	r25, r19
    1dec:	94 f0       	brlt	.+36     	; 0x1e12 <__fpcmp_parts_f+0x88>
    1dee:	28 17       	cp	r18, r24
    1df0:	39 07       	cpc	r19, r25
    1df2:	bc f0       	brlt	.+46     	; 0x1e22 <__fpcmp_parts_f+0x98>
    1df4:	14 96       	adiw	r26, 0x04	; 4
    1df6:	8d 91       	ld	r24, X+
    1df8:	9d 91       	ld	r25, X+
    1dfa:	0d 90       	ld	r0, X+
    1dfc:	bc 91       	ld	r27, X
    1dfe:	a0 2d       	mov	r26, r0
    1e00:	24 81       	ldd	r18, Z+4	; 0x04
    1e02:	35 81       	ldd	r19, Z+5	; 0x05
    1e04:	46 81       	ldd	r20, Z+6	; 0x06
    1e06:	57 81       	ldd	r21, Z+7	; 0x07
    1e08:	28 17       	cp	r18, r24
    1e0a:	39 07       	cpc	r19, r25
    1e0c:	4a 07       	cpc	r20, r26
    1e0e:	5b 07       	cpc	r21, r27
    1e10:	18 f4       	brcc	.+6      	; 0x1e18 <__fpcmp_parts_f+0x8e>
    1e12:	11 23       	and	r17, r17
    1e14:	41 f0       	breq	.+16     	; 0x1e26 <__fpcmp_parts_f+0x9c>
    1e16:	0a c0       	rjmp	.+20     	; 0x1e2c <__fpcmp_parts_f+0xa2>
    1e18:	82 17       	cp	r24, r18
    1e1a:	93 07       	cpc	r25, r19
    1e1c:	a4 07       	cpc	r26, r20
    1e1e:	b5 07       	cpc	r27, r21
    1e20:	40 f4       	brcc	.+16     	; 0x1e32 <__fpcmp_parts_f+0xa8>
    1e22:	11 23       	and	r17, r17
    1e24:	19 f0       	breq	.+6      	; 0x1e2c <__fpcmp_parts_f+0xa2>
    1e26:	61 e0       	ldi	r22, 0x01	; 1
    1e28:	70 e0       	ldi	r23, 0x00	; 0
    1e2a:	05 c0       	rjmp	.+10     	; 0x1e36 <__fpcmp_parts_f+0xac>
    1e2c:	6f ef       	ldi	r22, 0xFF	; 255
    1e2e:	7f ef       	ldi	r23, 0xFF	; 255
    1e30:	02 c0       	rjmp	.+4      	; 0x1e36 <__fpcmp_parts_f+0xac>
    1e32:	60 e0       	ldi	r22, 0x00	; 0
    1e34:	70 e0       	ldi	r23, 0x00	; 0
    1e36:	cb 01       	movw	r24, r22
    1e38:	1f 91       	pop	r17
    1e3a:	08 95       	ret

00001e3c <__udivmodhi4>:
    1e3c:	aa 1b       	sub	r26, r26
    1e3e:	bb 1b       	sub	r27, r27
    1e40:	51 e1       	ldi	r21, 0x11	; 17
    1e42:	07 c0       	rjmp	.+14     	; 0x1e52 <__udivmodhi4_ep>

00001e44 <__udivmodhi4_loop>:
    1e44:	aa 1f       	adc	r26, r26
    1e46:	bb 1f       	adc	r27, r27
    1e48:	a6 17       	cp	r26, r22
    1e4a:	b7 07       	cpc	r27, r23
    1e4c:	10 f0       	brcs	.+4      	; 0x1e52 <__udivmodhi4_ep>
    1e4e:	a6 1b       	sub	r26, r22
    1e50:	b7 0b       	sbc	r27, r23

00001e52 <__udivmodhi4_ep>:
    1e52:	88 1f       	adc	r24, r24
    1e54:	99 1f       	adc	r25, r25
    1e56:	5a 95       	dec	r21
    1e58:	a9 f7       	brne	.-22     	; 0x1e44 <__udivmodhi4_loop>
    1e5a:	80 95       	com	r24
    1e5c:	90 95       	com	r25
    1e5e:	bc 01       	movw	r22, r24
    1e60:	cd 01       	movw	r24, r26
    1e62:	08 95       	ret

00001e64 <__prologue_saves__>:
    1e64:	2f 92       	push	r2
    1e66:	3f 92       	push	r3
    1e68:	4f 92       	push	r4
    1e6a:	5f 92       	push	r5
    1e6c:	6f 92       	push	r6
    1e6e:	7f 92       	push	r7
    1e70:	8f 92       	push	r8
    1e72:	9f 92       	push	r9
    1e74:	af 92       	push	r10
    1e76:	bf 92       	push	r11
    1e78:	cf 92       	push	r12
    1e7a:	df 92       	push	r13
    1e7c:	ef 92       	push	r14
    1e7e:	ff 92       	push	r15
    1e80:	0f 93       	push	r16
    1e82:	1f 93       	push	r17
    1e84:	cf 93       	push	r28
    1e86:	df 93       	push	r29
    1e88:	cd b7       	in	r28, 0x3d	; 61
    1e8a:	de b7       	in	r29, 0x3e	; 62
    1e8c:	ca 1b       	sub	r28, r26
    1e8e:	db 0b       	sbc	r29, r27
    1e90:	0f b6       	in	r0, 0x3f	; 63
    1e92:	f8 94       	cli
    1e94:	de bf       	out	0x3e, r29	; 62
    1e96:	0f be       	out	0x3f, r0	; 63
    1e98:	cd bf       	out	0x3d, r28	; 61
    1e9a:	09 94       	ijmp

00001e9c <__epilogue_restores__>:
    1e9c:	2a 88       	ldd	r2, Y+18	; 0x12
    1e9e:	39 88       	ldd	r3, Y+17	; 0x11
    1ea0:	48 88       	ldd	r4, Y+16	; 0x10
    1ea2:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ea4:	6e 84       	ldd	r6, Y+14	; 0x0e
    1ea6:	7d 84       	ldd	r7, Y+13	; 0x0d
    1ea8:	8c 84       	ldd	r8, Y+12	; 0x0c
    1eaa:	9b 84       	ldd	r9, Y+11	; 0x0b
    1eac:	aa 84       	ldd	r10, Y+10	; 0x0a
    1eae:	b9 84       	ldd	r11, Y+9	; 0x09
    1eb0:	c8 84       	ldd	r12, Y+8	; 0x08
    1eb2:	df 80       	ldd	r13, Y+7	; 0x07
    1eb4:	ee 80       	ldd	r14, Y+6	; 0x06
    1eb6:	fd 80       	ldd	r15, Y+5	; 0x05
    1eb8:	0c 81       	ldd	r16, Y+4	; 0x04
    1eba:	1b 81       	ldd	r17, Y+3	; 0x03
    1ebc:	aa 81       	ldd	r26, Y+2	; 0x02
    1ebe:	b9 81       	ldd	r27, Y+1	; 0x01
    1ec0:	ce 0f       	add	r28, r30
    1ec2:	d1 1d       	adc	r29, r1
    1ec4:	0f b6       	in	r0, 0x3f	; 63
    1ec6:	f8 94       	cli
    1ec8:	de bf       	out	0x3e, r29	; 62
    1eca:	0f be       	out	0x3f, r0	; 63
    1ecc:	cd bf       	out	0x3d, r28	; 61
    1ece:	ed 01       	movw	r28, r26
    1ed0:	08 95       	ret

00001ed2 <_exit>:
    1ed2:	f8 94       	cli

00001ed4 <__stop_program>:
    1ed4:	ff cf       	rjmp	.-2      	; 0x1ed4 <__stop_program>
